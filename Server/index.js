require("dotenv").config();
const express = require("express");
const cors = require("cors");
const axios = require("axios");
const mysql = require("mysql");
var oracledb = require("oracledb");
oracledb.autoCommit = true;
var bodyParser = require("body-parser");
const JSZip = require("jszip");
const multer = require("multer");
const ip = require("ip");
const cron = require("node-cron");
const operations = require("./controllers/operations/main.js");
const menus = require("./controllers/menus");
const loans = require("./controllers/loan/main.js");

// const customerController = require('../controllers/customerController');

///////////////////////////////////////////////////////////////////////////////

const { amendRelation } = require("./controllers/account/saving_data__call_procedures/static_amendment_controllers/final_update_controllers/relationController.js");

//////////////////////////////////////////////////////////////////////////////

const {
  getAddressController,
} = require("./controllers/account/saving_data__call_procedures/static_amendment_controllers/getaddressController.js");

const {
  getAllRelationController,
} = require("./controllers/account/saving_data__call_procedures/static_amendment_controllers/getAllRelationController.js");

const {
  getCustomerDetailsController,
} = require("./controllers/account/saving_data__call_procedures/static_amendment_controllers/getCustomerDetailsController.js");
const {
  getRelationNo,
} = require("./controllers/account/saving_data__call_procedures/get_relation_no.js");

const {
  getAccountController,
} = require("./controllers/account/saving_data__call_procedures/static_amendment_controllers/getaccountController.js");

const {
  getRelationController,
} = require(
  "./controllers/account/saving_data__call_procedures/static_amendment_controllers/getRelationController.js"
);

const {
  getCustomerController,
} = require("./controllers/account/saving_data__call_procedures/static_amendment_controllers/getcustomerController.js");

const {
  getEserviceByRelationNo,
} = require("./controllers/account/saving_data__call_procedures/e_services/get_eserviceData.js");

const {
  getAddressByRelationNo,
} = require("./controllers/account/saving_data__call_procedures/address/get_address_details.js");

const {
  stakeholderController,
} = require("./controllers/account/saving_data__call_procedures/stakeholderController.js");

const {
  linkTempRelation,
} = require("./controllers/account/saving_data__call_procedures/prc_custRelate_link.js");

const {
  searchCustomer,
} = require("./controllers/account/saving_data__call_procedures/customer_search.js");

const {
  createCasaAccount,
} = require("./controllers/account/saving_data__call_procedures/casaAccountController.js");

const {
  deleteCustRelation,
} = require("./controllers/account/saving_data__call_procedures/deleteCustRelationController.js");

const {
  addNextOfKin,
  deleteNextOfKin,
} = require("./controllers/account/saving_data__call_procedures/nextOfKinController.js");

const {
  addSignatory,
} = require("./controllers/account/saving_data__call_procedures/prc_add_signatories.js");
const {
  deleteRelation,
} = require("./controllers/account/saving_data__call_procedures/prc_delete_relation.js");

const {
  addCorporateInformation,
} = require("./controllers/account/saving_data__call_procedures/corporateinfoController.js");

const {
  getRelationData,
} = require("./controllers/account/saving_data__call_procedures/get_all_data.js");

const amend_customer = require("./controllers/account/amend_customer.js");
const getCustomersToAmend = require("./controllers/account/fetch_data_to_amend.js"); //getCustomersToAmend
const CooperateDetails = require("./controllers/account/amend_customer_cooperate.js");
const {
  addAddressTemp,
} = require("./controllers/account/saving_data__call_procedures/prc_address_clob.js");
const {
  addEServicesRel,
} = require("./controllers/account/saving_data__call_procedures/prc_eservices.js");
const {
  executeStoredProcedure,
} = require("./controllers/account/saving_data__call_procedures/prc_add_relation.js");
const {
  getMultipleValidation,
} = require("./controllers/account/validations_controllers/national_id_validation_api.js");
const {
  amend_account_relation,
} = require("./controllers/account/amend_relation.js");
const {
  account_rejection,
  rejectAccount,
} = require("./controllers/account/account_rejection.js");

const { saveAddress } = require("./controllers/account/save_address.js");
const {
  getAddressesToAmend,
} = require("./controllers/account/fetch_address.js");
const cooperateDetails = new CooperateDetails();

const port = 3321;
const app = express();
app.use(bodyParser.json({ limit: "256mb" }));

// enable cors
app.use(cors({ origin: "*" }));

// parse application/x-www-form-urlencoded
app.use(bodyParser.urlencoded({ extended: true }));

// parse application/json
app.use(express.json());

app.set("trust proxy", true);

const util = require("util");
require("dotenv").config();

var DB_USER = process.env.DB_USER;
var DB_PASSWORD = process.env.DB_PASSWORD;
var DB_CONNECTION_STRING = process.env.DB_CONNECTION_STRING;
var DB_CONNECTION_TIMEOUT = process.env.DB_CONNECTION_TIMEOUT;
var IPSTACK_API_KEY = process.env.IPSTACK_API_KEY;

function formatAmount(number) {
  // Convert number to a string and add commas for thousands separator
  let formattedNumber = number.toLocaleString();

  // Add a currency symbol and return the formatted number
  return formattedNumber;
}

const fetch = require("cross-fetch");

const os = require("os");

// loans
app.use(loans?.app);

function getIPAddress() {
  const interfaces = os.networkInterfaces();
  for (const devName in interfaces) {
    const iface = interfaces[devName];
    for (let i = 0; i < iface.length; i++) {
      const alias = iface[i];
      if (
        alias.family === "IPv4" &&
        alias.address !== "127.0.0.1" &&
        !alias.internal
      ) {
        return alias;
      }
    }
  }
  return null;
}

// enable cors
app.use(cors({ origin: "*" }));

// parse application/x-www-form-urlencoded
app.use(bodyParser.urlencoded({ extended: true }));

// parse application/json
app.use(express.json());

app.set("trust proxy", true);

// Define a middleware function to check the API key in the header
const checkApiKey = (req, res, next) => {
  const apiKey = req.headers["x-api-key"]; // assuming the API key is passed in the 'x-api-key' header

  if (apiKey && apiKey === process.env.API_KEY) {
    next(); // API key is valid, so proceed to the next middleware or route handler
  } else {
    res.status(401).send("Invalid API key"); // API key is invalid, so return a 401 Unauthorized error
  }
};

// Apply the API key middleware to all API routes
app.use("/api", checkApiKey);

// Define a whitelist of IP addresses
const whitelist = [
  "127.0.0.1",
  "192.168.1.44",
  "192.168.1.195",
  "197.251.211.166",
  "cooptech.unionsg.com",
];

// Middleware to validate IP address against whitelist
const validateIpAddress = (req, res, next) => {
  const ipAddress = getIPAddress().address;
  // console.log(ipAddress);
  if (whitelist.includes(ipAddress)) {
    next();
  } else {
    res.status(401).send("Unauthorized IP Address");
  }
};

// Use the validateIpAddress middleware for all incoming requests
// app.use(validateIpAddress);

const MenuIcon = multer.diskStorage({
  destination: (req, file, cb) => {
    // cb(null,  "../public/assets/menu-icons");
    cb(null, "../client/public/assets/menu-icons");
  },
  filename: (req, file, cb) => {
    cb(null, req.body.menu_name.replace(/\s+/g, "-").toLowerCase() + ".png");
  },
});

const uploadMenuIcon = multer({ storage: MenuIcon });

// MENUS
app.use(menus.app);
//////////////

// OPERATIONS APIS
// ----------------------------------------------------------------------
app.use(operations.app);
// ----------------------------------------------------------------------
///////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////////////////////////////////
// ORACLE API ENDPOINTS       ////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////

// Test SQL Connection
app.get("/api/test-oracle", (req, res) => {
  let testConnectionAPI = require("./controllers/oracle");

  testConnectionAPI.then(function (result) {
    res.send([{ responseCode: "000", responseMessage: result }]);
    // res.send(result);
  });
});

// Login API Endpoint - ORACLE
// app.post("/api/login", (req, res) => {
//     let loginAPI = require("./controllers/auth/login");

//     let username = req.body.username;
//     let password = req.body.password;

//     loginAPI.loginFunc(username, password).then((result) => {

//         if (result) {
//             // If user is logged in successfully
//             if (
//                 result.outBinds?.login_code === 000 ||
//                 result.outBinds?.login_code === "000"
//             ) {
//                 const id = result.outBinds.USERID;
//                 const username = result.outBinds.FNAME;
//                 const email = result.outBinds.EMAIL;
//                 const login_code = result.outBinds.login_code;
//                 // const user_group = result.rows[i][1];
//                 // const user_type = result.rows[i][69];
//                 const lang = result.outBinds.LANG;
//                 const postingDate = result.outBinds.PD;
//                 const branch = result.outBinds.BR_DESC;
//                 const mess1 = result.outBinds?.mess;
//                 const branchCode = result.outBinds.BRACODE;
//                 const authorityCode = result.outBinds.AUTH_CODE;
//                 const accesssCodes = result.outBinds.ACCESS_CODES;

//                 response = {
//                     success: true,
//                     user: {
//                         id: id,
//                         username: username,
//                         email: email,
//                         responseCode: login_code,
//                         responseMessage: mess1,
//                         postingDate: postingDate,
//                         branch: branch,
//                         // user_group: user_group,
//                         // user_type: user_type,
//                         lang: lang,
//                         branchCode: branchCode,
//                         authorityCode: authorityCode,
//                         accesssCodes: accesssCodes,
//                     },
//                     token: null,
//                 };

//                 res.send(response);

//                 // return response;
//             } else {
//                 // var mess = result.outBinds.mess;

//                 response = {
//                     success: false,
//                     responseMessage: result.outBinds.mess,
//                     token: null,
//                 };

//                 res.send(response);
//             }
//         }
//     }).catch(e=>{
//       console.log("dhjd")
//     })
// })

app.post("/api/login", (req, res) => {
  let loginAPI = require("./controllers/auth/login");

  let username = req.body.username;
  let password = req.body.password;

  loginAPI
    .loginFunc(username, password)
    .then((result) => {
      console.log("login results:", result);

      if (result && result.outBinds) {
        // Check if result and result.outBinds are defined
        // If user is logged in successfully
        if (
          result.outBinds.login_code === 000 || // Removed optional chaining
          result.outBinds.login_code === "000"
        ) {
          const id = result.outBinds.USERID;
          const username = result.outBinds.FNAME;
          const email = result.outBinds.EMAIL;
          const login_code = result.outBinds.login_code;
          // const user_group = result.rows[i][1];
          // const user_type = result.rows[i][69];
          const lang = result.outBinds.LANG;
          const postingDate = result.outBinds.PD;
          const branch = result.outBinds.BR_DESC;
          const mess1 = result.outBinds.mess; // Removed optional chaining
          const branchCode = result.outBinds.BRACODE;
          const authorityCode = result.outBinds.AUTH_CODE;
          const accesssCodes = result.outBinds.ACCESS_CODES;

          response = {
            success: true,
            user: {
              id: id,
              username: username,
              email: email,
              responseCode: login_code,
              responseMessage: mess1,
              postingDate: postingDate,
              branch: branch,
              // user_group: user_group,
              // user_type: user_type,
              lang: lang,
              branchCode: branchCode,
              authorityCode: authorityCode,
              accesssCodes: accesssCodes,
            },
            token: null,
          };

          res.send(response);

          // return response;
        } else {
          // var mess = result.outBinds.mess;

          response = {
            success: false,
            responseMessage: result?.outBinds.mess,
            token: null,
          };

          res.send(response);
        }
      } else {
        // Handle the case where result or result.outBinds is undefined
        response = {
          success: false,
          responseMessage: "Result or result.outBinds is undefined",
          token: null,
        };

        res.send(response);
      }
    })
    .catch((err) => {
      console.log(err);
    });
});

// Get Loan Schedule Enquiry API Endpoint - ORACLE
app.post("/api/loan-schedule-enquiry", (req, res) => {
  // return res.send("yoooooo");
  let facility_number = req.body.facility_number;

  let getLoanEnquiry = async () => {
    try {
      const db = await oracledb.getConnection({
        user: DB_USER,
        password: DB_PASSWORD,
        connectString: DB_CONNECTION_STRING,
        timeout: DB_CONNECTION_TIMEOUT,
      });

      const response = [];
      let arr0 = "";

      // node native promisify
      const execute = util.promisify(db.execute).bind(db);

      const data = await execute(
        `SELECT * FROM SCHEDULE_ENQ_VW WHERE facility_no = '${facility_number}'`
      );

      if (data) {
        for (let i = 0; i < data.rows.length; i++) {
          for (let x = 0; x < data.metaData.length; x++) {
            arr0 +=
              '"' +
              [data.metaData[x].name.toLowerCase()] +
              '" : "' +
              data.rows[i][x] +
              '",';
          }

          response.push(
            JSON.parse(
              "{" +
                arr0.replace(/(\r\n|\n|\r)/gm, "").replace(/,\s*$/, "") +
                "}"
            )
          );
        }

        res.send({
          responseCode: "000",
          responseMessage: response,
        });
      } else {
        res.send("Something went wrong... Nothing was returned!!");
      }
    } finally {
      // conn.end();
    }
  };

  getLoanEnquiry();
});

// Loan Shedule Quotation API Endpoint - ORACLE
app.post("/api/loan-schedule-quotation", async (req, res) => {
  let loanScheduleQuotationAPI = require("./controllers/loan/loan-schedule-quotation");

  let facility_number = req.body.facility_number;
  let interest_rate = req.body.interest_rate;
  let facility_amount = req.body.facility_amount;
  let principal_moratorium = req.body.principal_moratorium;
  let interest_moratorium = req.body.interest_moratorium;
  let loan_tenor_in_months = req.body.loan_tenor_in_months;
  let effective_date = req.body.effective_date;
  let interest_type = req.body.interest_type;
  let principal_repayment_frequency = req.body.principal_repayment_frequency;
  let principal_repayment_count = req.body.principal_repayment_count;
  let schedule_start_date = req.body.schedule_start_date;
  let processing_fees = req.body.processing_fees;
  let last_working_day_of_the_month = req.body.last_working_day_of_the_month;
  let interest_repayment_frequency = req.body.interest_repayment_frequency;
  let interest_repayment_count = req.body.interest_repayment_count;
  let ballon_installment_to_be_applied =
    req.body.ballon_installment_to_be_applied;
  let ballon_on_installment_number = req.body.ballon_on_installment_number;
  let first_principal_repay_date = req.body.first_principal_repay_date;
  let last_repayment_date = req.body.last_repayment_date;
  let legal_form = req.body.legal_form;
  let currency = req.body.currency;
  let exempt_month = req.body.exempt_month;
  let net_monthly_salary = req.body.net_monthly_salary;
  // return res.send({
  //   facility_number,
  //   interest_rate,
  //   facility_amount,
  //   principal_moratorium,
  //   interest_moratorium,
  //   loan_tenor_in_months,
  //   effective_date,
  //   interest_type,
  //   principal_repayment_frequency,
  //   principal_repayment_count,
  //   schedule_start_date,
  //   processing_fees,
  //   last_working_day_of_the_month,
  //   interest_repayment_frequency,
  //   interest_repayment_count,
  //   ballon_installment_to_be_applied,
  //   ballon_on_installment_number,
  //   first_principal_repay_date,
  //   last_repayment_date,
  //   legal_form,
  //   currency,
  //   exempt_month,
  //   net_monthly_salary,
  // });
  try {
    const result = await loanScheduleQuotationAPI.loanScheduleQuotationFunc(
      facility_number,
      interest_rate,
      facility_amount,
      principal_moratorium,
      interest_moratorium,
      loan_tenor_in_months,
      effective_date,
      interest_type,
      principal_repayment_frequency,
      principal_repayment_count,
      schedule_start_date,
      processing_fees,
      last_working_day_of_the_month,
      interest_repayment_frequency,
      interest_repayment_count,
      ballon_installment_to_be_applied,
      ballon_on_installment_number,
      first_principal_repay_date,
      last_repayment_date,
      legal_form,
      currency,
      exempt_month,
      net_monthly_salary
    );

    if (result) {
      return res.send(result);
    }
  } catch (e) {
    res.send(e.toString());
  }
});

app.post("/api/reports/general", async (req, res) => {
  const {
    // username,
    // amount,
    // transaction_desc,
    // voucherNumber,
    // postedBy,
    // approvedBy,
    // terminal,
    // branch,
    // transaction_code,
    // ex_rate,
    // batchNumber,
    // documentRef,
    // appFlag,
    // narration,
    account_number,
    param,
    paraList,
    subModuleCode,
    moduleCode,
    key,
    username,
  } = req.body;

  let response_code;
  let response_message;
  try {
    const db = await oracledb.getConnection({
      user: DB_USER,
      password: DB_PASSWORD,
      connectString: DB_CONNECTION_STRING,
      timeout: DB_CONNECTION_TIMEOUT,
    });

    const execute = util.promisify(db.execute).bind(db);
    if (key === "get-modules") {
      // console.log({ req: req.body });
      const data = await execute(
        ` SELECT GET_MODULE_LIST(:username) FROM DUAL`,
        {
          username,
        }
      );
      const arr = data?.rows[0][0];

      return res.send({ modules: arr });
    }
    if (key == "get-subModules") {
      const data = await execute(
        ` SELECT GET_SUBMODULE_LIST(:moduleCode, :username) FROM DUAL`,
        {
          username,
          moduleCode,
        }
      );
      const arr = data?.rows[0][0];
      console.log({ moduleCode, arr });
      return res.send({ subModules: arr });
    }

    if (key == "get-reports") {
      const data = await execute(
        ` SELECT GET_REPORT_LIST(:subModuleCode, :username) FROM DUAL`,
        {
          username,
          subModuleCode,
        }
      );
      const arr = data?.rows[0][0];
      console.log({ subModuleCode, arr });
      return res.send({ reports: arr });
    }

    if (key == "get-params") {
      const paraListArray = paraList?.split(""); // Split the paraList into an array

      // Batch the SQL queries into a single query

      if (paraList?.length >= 0) {
        const sqlQuery = `
      SELECT PARA
      FROM REP_PARA_CODEs
      WHERE CODE IN (${paraListArray
        .map((_, index) => `:para${index}`)
        .join(", ")})
    `;

        const params = {}; // Initialize an object to hold parameters
        paraListArray.forEach((para, index) => {
          params[`para${index}`] = para;
        });

        try {
          const result = await execute(sqlQuery, params);
          console.log({ result: result?.rows?.flat() });
          return res.send(result?.rows?.flat());
        } catch (error) {
          // Handle errors appropriately
          console.error(error);
          return res.status(500).send("Internal Server Error");
        }
      }
    }

    // if (key == "get-params") {
    //   const arr = [];
    //   for (let i = 0; i < paraList?.length; i++) {
    //     const para = paraList?.charAt(i);

    //     // const a = data.rows[0];
    //     arr.push(
    //       execute(
    //         ` SELECT PARA
    //       FROM REP_PARA_CODEs WHERE CODE = :para`,
    //         {
    //           para,
    //         }
    //       )
    //     );
    //   }

    //   const results = await Promise.all(arr);
    //   // const arr = data?.rows[0][0];

    //   return res.send(results.flatMap((i) => i?.rows[0]));
    // }

    if (key === "get-acctdesc") {
      const data = await execute(
        ` select get_acctdesc(:account_number) from dual`,
        {
          account_number,
        }
      );
      const arr = data?.rows[0][0];
      // console.log({ arr });
      return res.send(arr);
    }
    if (key === "get-lovs") {
      let sqlQuery = "";
      let arr0 = "";
      let data = "";
      let response;

      if (param == "TC") {
        sqlQuery = `Select ACTUAL_CODE as value, ACTUAL_CODE || '-' || DESCRIPTION as label from VW_CRT_LIST`;
        queryParam = {};
        data = await execute(sqlQuery);
      } else if (param == "BC") {
        sqlQuery = `select BR_CODE as value, BR_CODE || ' - ' || BR_DESCRIPTION as label from tb_branch order by BR_CODE`;
        data = await execute(sqlQuery);
      } else if (param == "CUR") {
        sqlQuery = `select currency_code as value , currency_code || '-' || description as label from tb_currency`;
        data = await execute(sqlQuery);
      } else if (param == "PT") {
        sqlQuery = `select PROD_CODE as value, PROD_CODE || ' - ' || DESCRIPTION as label from tb_product`;
        data = await execute(sqlQuery);
      } else if (param == "UN") {
        sqlQuery = `select USER_NAME as value, USER_NAME || ' - ' || FULLNAME as label FROM vw_MENU_USERS 
        WHERE APP_FLAG = 'Y'`;
        data = await execute(sqlQuery);
      } else if (param == "TOA") {
        sqlQuery = `SELECT ALL CODE_DESC.ACTUAL_CODE as value ,  CODE_DESC.ACTUAL_CODE  || ' - ' || CODE_DESC.DESCRIPTION as label 
        FROM CODE_DESC 
        where CODE_TYPE = 'ACT'
        and length(ACTUAL_CODE) = 1
        order by actual_code`;
        data = await execute(sqlQuery);
      } else if (param == "RM") {
        sqlQuery = `SELECT  DISTINCT ARM_CODE BANK_OFFICER_RESP_NAME , ARM_CODE || ' - ' || ARM_NAME ARO_DESC FROM VW_TBLARM_new
        order by ARM_CODE`;
        data = await execute(sqlQuery);
      } else if (param == "TTYPE") {
        sqlQuery = `SELECT ACTUAL_CODE,ACTUAL_CODE || ' - ' || description FROM CODE_DESC
        WHERE code_type = 'TR'`;
        data = await execute(sqlQuery);
      } else if (param == "STAFF") {
        sqlQuery = `select emp_code,emp_code || ' - ' ||emp_desc
        from staff_setup`;
        data = await execute(sqlQuery);
      } else if (param == "STAFF") {
        sqlQuery = `select emp_code,emp_code || ' - ' ||emp_desc
        from staff_setup`;
        data = await execute(sqlQuery);
      }

      // return res.send(data);
      if (data) {
        response = data?.rows?.map((i) => ({
          label: i[1],
          value: i[0],
        }));
        // for (let i = 0; i < data.rows.length; i++) {
        //   for (let x = 0; x < data.metaData.length; x++) {
        //     arr0 +=
        //       '"' +
        //       [data.metaData[x].name.toLowerCase()] +
        //       '" : "' +
        //       data.rows[i][x] +
        //       '",';
        //   }

        //   response.push(
        //     JSON.parse(
        //       "{" +
        //         arr0.replace(/(\r\n|\n|\r)/gm, "").replace(/,\s*$/, "") +
        //         "}"
        //     )
        //   );
        // }

        console.log({ response });
        res.send(response);
      } else {
        res.send("");
      }

      return;
    }
  } catch (err) {
    console.log(err);
    res.send({ "An error occurred": err });
  }
});

// Post Loan General Enquiry API Endpoint - ORACLE
app.post("/api/loan-general-enquiry", (req, res) => {
  const { name, customer_number, facility_account, facility_no } = req.body;
  let determinant = "";
  // let determinant = "";

  // console.log(facility_account);
  if (name) {
    determinant = `NAME LIKE '%${name}%'`;
  }

  if (customer_number) {
    if (determinant) {
      determinant = ` AND CUSTOMER NUMBER = '${customer_number}'`;
    } else {
      determinant = ` CUSTOMER_NUMBER = '${customer_number}'`;
    }
  }

  let getGeneralLoanEnquiry = async () => {
    try {
      const db = await oracledb.getConnection({
        user: DB_USER,
        password: DB_PASSWORD,
        connectString: DB_CONNECTION_STRING,
        timeout: DB_CONNECTION_TIMEOUT,
      });

      const response = [];
      let arr0 = "";

      // node native promisify
      const execute = util.promisify(db.execute).bind(db);

      if (facility_account) {
        const data = await execute(
          `SELECT * FROM REPAYMENT_SCHD_HDNEW WHERE principal_account = '${facility_account}'`
        );

        // return res.send(data);

        if (data) {
          for (let i = 0; i < data.rows.length; i++) {
            for (let x = 0; x < data.metaData.length; x++) {
              arr0 +=
                '"' +
                [data.metaData[x].name.toLowerCase()] +
                '" : "' +
                data.rows[i][x] +
                '",';
            }

            response.push(JSON.parse("{" + arr0.replace(/,\s*$/, "") + "}"));
          }

          res.send(response);
          // console.log(response);
        } else {
          res.send("Something went wrong... Nothing was returned!!");
        }
      } else if (facility_no) {
        const data = await execute(
          `SELECT * FROM R_SCHEDULE_TEMP WHERE FACILITY_NO = '${facility_no}'`
        );

        // return res.send(data);

        if (data) {
          for (let i = 0; i < data.rows.length; i++) {
            for (let x = 0; x < data.metaData.length; x++) {
              arr0 +=
                '"' +
                [data.metaData[x].name.toLowerCase()] +
                '" : "' +
                data.rows[i][x] +
                '",';
            }

            response.push(JSON.parse("{" + arr0.replace(/,\s*$/, "") + "}"));
          }

          res.send(response);
          // console.log(response);
        } else {
          res.send("Something went wrong... Nothing was returned!!");
        }
      } else {
        const data = await execute(
          `SELECT * FROM VW_LOAN_GEN_ENQnew WHERE ${determinant}`
        );

        // return res.send(data);

        if (data) {
          for (let i = 0; i < data.rows.length; i++) {
            for (let x = 0; x < data.metaData.length; x++) {
              arr0 +=
                '"' +
                [data.metaData[x].name.toLowerCase()] +
                '" : "' +
                data.rows[i][x] +
                '",';
            }

            response.push(JSON.parse("{" + arr0.replace(/,\s*$/, "") + "}"));
          }

          res.send(response);
          // console.log(response);
        } else {
          res.send("Something went wrong... Nothing was returned!!");
        }
      }
    } finally {
      // conn.end();
    }
  };

  getGeneralLoanEnquiry();
});

// Get Loan General Enquiry API Endpoint - ORACLE
app.get("/api/get-loan-general-enquiry", (req, res) => {
  let getGeneralLoanEnquiry = async () => {
    try {
      const db = await oracledb.getConnection({
        user: DB_USER,
        password: DB_PASSWORD,
        connectString: DB_CONNECTION_STRING,
        timeout: DB_CONNECTION_TIMEOUT,
      });

      const response = [];
      let arr0 = "";

      // node native promisify
      const execute = util.promisify(db.execute).bind(db);

      const data = await execute(`SELECT NAME FROM VW_LOAN_GEN_ENQnew`);

      // return res.send(data);

      if (data) {
        for (let i = 0; i < data.rows.length; i++) {
          for (let x = 0; x < data.metaData.length; x++) {
            arr0 +=
              '"' +
              [data.metaData[x].name.toLowerCase()] +
              '" : "' +
              data.rows[i][x] +
              '",';
          }

          response.push(JSON.parse("{" + arr0.replace(/,\s*$/, "") + "}"));
        }

        res.send(response);
        // console.log(response);
      } else {
        res.send("Something went wrong... Nothing was returned!!");
      }
    } finally {
      // conn.end();
    }
  };

  getGeneralLoanEnquiry();
});

//General Report

// Get Loan Product API Endpoint - ORACLE
// app.get("/api/get-loan-products", (req, res) => {
//   let getLoanProduct = async () => {
//     try {
//       const db = await oracledb.getConnection({
//         user: DB_USER,
//         password: DB_PASSWORD,
//         connectString: DB_CONNECTION_STRING,
//         timeout: DB_CONNECTION_TIMEOUT,
//       });

//       const response = [];
//       let arr0 = "";

//       // node native promisify
//       const execute = util.promisify(db.execute).bind(db);

//       const data = await execute(
//         `SELECT description as label, PROD_SGROUP value FROM tb_product a WHERE PROD_GROUP ='5' and exists (SELECT 1 FROM FACILITY_CONTROLSS x where a.PROD_SGROUP = x.legal_form) order by PROD_SGROUP`
//       );

//       if (data) {
//         for (let i = 0; i < data.rows.length; i++) {
//           for (let x = 0; x < data.metaData.length; x++) {
//             arr0 +=
//               '"' +
//               [data.metaData[x].name.toLowerCase()] +
//               '" : "' +
//               data.rows[i][x] +
//               '",';
//           }

//           response.push(
//             JSON.parse(
//               "{" +
//                 arr0.replace(/(\r\n|\n|\r)/gm, "").replace(/,\s*$/, "") +
//                 "}"
//             )
//           );
//         }

//         res.send(response);
//       } else {
//         res.send("Something went wrong... Nothing was returned!!");
//       }
//     } finally {
//       // conn.end();
//     }
//   };

//   getLoanProduct();
// });
app.post("/api/get-loan-products", (req, res) => {
  const { customer_type } = req.body;
  let getLoanProduct = async () => {
    try {
      const db = await oracledb.getConnection({
        user: DB_USER,
        password: DB_PASSWORD,
        connectString: DB_CONNECTION_STRING,
        timeout: DB_CONNECTION_TIMEOUT,
      });

      const response = [];
      let arr0 = "";

      // node native promisify
      const execute = util.promisify(db.execute).bind(db);

      const data = await execute(
        `select prod_sgroup value,description label
from tb_product a 
where a.prod_group ='5'
and exists(select 1 from facility_controlss b
    where a.prod_group = b.type_of_acct
    and a.prod_sgroup = b.legal_form
    and ln_active = 'Y' AND product_for = '${customer_type}')
union  
  select prod_sgroup actual_code,description
from tb_product a 
where a.prod_group ='5'
and exists(select 1 from facility_controlss b
    where a.prod_group = b.type_of_acct
    and a.prod_sgroup = b.legal_form
    and ln_active = 'Y' AND product_for = 'B')`
      );

      if (data) {
        for (let i = 0; i < data.rows.length; i++) {
          for (let x = 0; x < data.metaData.length; x++) {
            arr0 +=
              '"' +
              [data.metaData[x]?.name?.toLowerCase()] +
              '" : "' +
              data.rows[i][x] +
              '",';
          }

          response.push(
            JSON.parse(
              "{" +
                arr0.replace(/(\r\n|\n|\r)/gm, "").replace(/,\s*$/, "") +
                "}"
            )
          );
        }

        res.send(response);
      } else {
        res.send("Something went wrong... Nothing was returned!!");
      }
    } finally {
      // conn.end();
    }
  };

  getLoanProduct();
});

// Get Currency API Endpoint - ORACLE
app.get("/api/get-currency", (req, res) => {
  let getCurrency = async () => {
    try {
      const db = await oracledb.getConnection({
        user: DB_USER,
        password: DB_PASSWORD,
        connectString: DB_CONNECTION_STRING,
        timeout: DB_CONNECTION_TIMEOUT,
      });

      const response = [];
      let arr0 = "";

      // node native promisify
      const execute = util.promisify(db.execute).bind(db);

      const data = await execute(
        `select currency_code as value,iso_code || ' - ' || description as  label from tb_currency where allow_loan='Y'`
      );

      if (data) {
        for (let i = 0; i < data.rows.length; i++) {
          for (let x = 0; x < data.metaData.length; x++) {
            arr0 +=
              '"' +
              [data.metaData[x].name.toLowerCase()] +
              '" : "' +
              data.rows[i][x] +
              '",';
          }

          response.push(
            JSON.parse(
              "{" +
                arr0.replace(/(\r\n|\n|\r)/gm, "").replace(/,\s*$/, "") +
                "}"
            )
          );
        }

        res.send(response);
      } else {
        res.send("Something went wrong... Nothing was returned!!");
      }
    } finally {
      // conn.end();
    }
  };

  getCurrency();
});

// Get Loan Schedule API Endpoint - ORACLE
app.post("/api/get-loan-schedule", (req, res) => {
  let facility_number = req.body.facility_number;

  let getLoanSchedule = async () => {
    try {
      const db = await oracledb.getConnection({
        user: DB_USER,
        password: DB_PASSWORD,
        connectString: DB_CONNECTION_STRING,
        timeout: DB_CONNECTION_TIMEOUT,
      });

      const response = [];
      let arr0 = "";

      // node native promisify
      const execute = util.promisify(db.execute).bind(db);

      const data = await execute(
        `SELECT * FROM R_SCHEDULE_TEMP WHERE facility_no = '${facility_number}'`
      );

      if (data) {
        for (let i = 0; i < data.rows.length; i++) {
          for (let x = 0; x < data.metaData.length; x++) {
            arr0 +=
              '"' +
              [data.metaData[x].name.toLowerCase()] +
              '" : "' +
              data.rows[i][x] +
              '",';
          }

          response.push(
            JSON.parse(
              "{" +
                arr0.replace(/(\r\n|\n|\r)/gm, "").replace(/,\s*$/, "") +
                "}"
            )
          );
        }

        res.send({
          responseCode: "000",
          responseMessage: response,
        });
      } else {
        res.send("Something went wrong... Nothing was returned!!");
      }
    } finally {
      // conn.end();
    }
  };

  getLoanSchedule();
});

app.post("/api/getFinanaceVouchersApprovalDetails", (req, res) => {
  const batchNumber = "'" + req.body.batchNumber + "'";

  async function getFinanceVouchersApproval() {
    let con;
    try {
      con = await oracledb.getConnection({
        user: DB_USER,
        password: DB_PASSWORD,
        connectString: DB_CONNECTION_STRING,
        timeout: DB_CONNECTION_TIMEOUT,
      });

      const data = await con.execute(
        `select GET_ACCTDESC(acct_link) AS Account_Name, ACCOUNT_NUMBER, SCAN_DOC_ID,TRANSACTION_DETAILS, VOUCHER_NUMBER,POSTING_DATE,CURRENCY_CODE,INTER_BRANCH,FORM_CODE,CHANNEL,SCAN_DOC_ID,NARRATION,LOCAL_EQUIVALENT_DB,lOCAL_EQUIVALENT_CR, GET_BRANCHDESC(INTER_BRANCH) AS Branch ,GET_CURRDESC(CURRENCY_CODE) AS CURRENCY,VALUE_DATE from ac_post_temp WHERE BATCH_NO = ${batchNumber}`
      );
      let response = [];
      let arr0 = "";
      if (data) {
        for (let i = 0; i < data.rows.length; i++) {
          for (let x = 0; x < data.metaData.length; x++) {
            arr0 +=
              '"' +
              [data.metaData[x].name.toLowerCase()] +
              '" : "' +
              data.rows[i][x] +
              '",';
          }

          response.push(JSON.parse("{" + arr0.replace(/,\s*$/, "") + "}"));
        }
        for (let i = 0; i < response.length; i++) {
          const months = [
            "JAN",
            "FEB",
            "MAR",
            "APR",
            "MAY",
            "JUN",
            "JUL",
            "AUG",
            "SEP",
            "OCT",
            "NOV",
            "DEC",
          ];
          const valueDate = new Date(response[i].value_date);
          response[i].value_date = `${valueDate.getDate()}-${
            months[valueDate.getMonth()]
          }-${valueDate.getFullYear()}`;

          const postingDate = new Date(response[i].posting_date);
          response[i].posting_date = `${postingDate.getDate()}-${
            months[postingDate.getMonth()]
          }-${postingDate.getFullYear()}`;
          if (response[i].local_equivalent_db === "null") {
            response[i].local_equivalent_db = " ";
          } else if (response[i].local_equivalent_cr === "null") {
            response[i].local_equivalent_cr = " ";
          }
        }

        res.send(response);
      } else {
        res.send("Something went wrong... Nothing was returned!!");
      }
    } catch (err) {
      res.send(err);
    }
  }
  getFinanceVouchersApproval();
});

// get Batch PostingAprrovalDetails
app.post("/api/getBatchPostingApprovalDetails", async (req, res) => {
  const batchNumber = "'" + req.body.batchNumber + "'";

  async function getBatchPostingApproval() {
    let con;
    try {
      con = await oracledb.getConnection({
        user: DB_USER,
        password: DB_PASSWORD,
        connectString: DB_CONNECTION_STRING,
        timeout: DB_CONNECTION_TIMEOUT,
      });

      const data = await con.execute(
        `select GET_ACCTDESCC(ACCOUNT_NUMBER) AS Account_Name, ACCOUNT_NUMBER, SCAN_DOC_ID, TRANSACTION_DETAILS, VOUCHER_NUMBER, POSTING_DATE, CURRENCY_CODE, INTER_BRANCH, FORM_CODE, CHANNEL, NARRATION, LOCAL_EQUIVALENT_DB, LOCAL_EQUIVALENT_CR, GET_BRANCHDESC(INTER_BRANCH) AS Branch, GET_CURRDESC(CURRENCY_CODE) AS CURRENCY, VALUE_DATE from ac_post_temp WHERE BATCH_NO = ${batchNumber}`
      );

      if (data) {
        const months = [
          "JAN",
          "FEB",
          "MAR",
          "APR",
          "MAY",
          "JUN",
          "JUL",
          "AUG",
          "SEP",
          "OCT",
          "NOV",
          "DEC",
        ];

        const response = data.rows.map((row) => {
          const newRow = {};
          for (let x = 0; x < data.metaData.length; x++) {
            newRow[data.metaData[x].name.toLowerCase()] = row[x] || ""; // Replace null values with empty string
          }

          const valueDate = new Date(newRow.value_date);
          newRow.value_date = `${valueDate.getDate()}-${
            months[valueDate.getMonth()]
          }-${valueDate.getFullYear()}`;

          const postingDate = new Date(newRow.posting_date);
          newRow.posting_date = `${postingDate.getDate()}-${
            months[postingDate.getMonth()]
          }-${postingDate.getFullYear()}`;

          return newRow;
        });

        res.send(response);
      } else {
        res.send("Something went wrong... Nothing was returned!!");
      }
    } catch (err) {
      res.send(err);
    } finally {
      if (con) {
        try {
          await con.close();
        } catch (err) {
          console.error("Error closing connection:", err);
        }
      }
    }
  }

  getBatchPostingApproval();
});

// get Counter Cheque ApprovalDetails
app.post("/api/getCounterChequeApprovalDetails", async (req, res) => {
  const batchNumber = "'" + req.body.batchNumber + "'";

  async function getCounterChequeApproval() {
    let con;
    try {
      con = await oracledb.getConnection({
        user: DB_USER,
        password: DB_PASSWORD,
        connectString: DB_CONNECTION_STRING,
        timeout: DB_CONNECTION_TIMEOUT,
      });

      const data = await con.execute(
        `select REQUISITION_NO, ACCT_LINK, CHEQUE_NO, AMOUNT, COMMENTS, REQUESTED_BY,SCANDOC_ID from TB_COUNTER_CHEQUE_RQT where BATCH_NO = ${batchNumber}`
      );

      if (data) {
        const months = [
          "JAN",
          "FEB",
          "MAR",
          "APR",
          "MAY",
          "JUN",
          "JUL",
          "AUG",
          "SEP",
          "OCT",
          "NOV",
          "DEC",
        ];

        const response = data.rows.map((row) => {
          const newRow = {};
          for (let x = 0; x < data.metaData.length; x++) {
            newRow[data.metaData[x].name.toLowerCase()] = row[x] || ""; // Replace null values with empty string
          }

          // const valueDate = new Date(newRow.value_date);
          // newRow.value_date = `${valueDate.getDate()}-${months[valueDate.getMonth()]}-${valueDate.getFullYear()}`;

          // const postingDate = new Date(newRow.posting_date);
          // newRow.posting_date = `${postingDate.getDate()}-${months[postingDate.getMonth()]}-${postingDate.getFullYear()}`;

          return newRow;
        });

        res.send(response);
      } else {
        res.send("Something went wrong... Nothing was returned!!");
      }
    } catch (err) {
      res.send(err);
    } finally {
      if (con) {
        try {
          await con.close();
        } catch (err) {
          console.error("Error closing connection:", err);
        }
      }
    }
  }

  getCounterChequeApproval();
});

// charges statements table
app.post("/api/get-charges-statements", (req, res) => {
  let { account_link, start_date, end_date, trans_type } = req.body;

  let getChargesStatements = async () => {
    try {
      const db = await oracledb.getConnection({
        user: DB_USER,
        password: DB_PASSWORD,
        connectString: DB_CONNECTION_STRING,
        timeout: DB_CONNECTION_TIMEOUT,
      });

      const response = [];
      let arr0 = "";

      // node native promisify
      const execute = util.promisify(db.execute).bind(db);

      const data = await execute(
        `select * from VW_ALL_LOAN_STATEMENT_NEW where ACCT_LINK  = :account_link  
        and POSTING_DATE BETWEEN NVL(:start_date,'01-JAN-1990') AND NVL(:end_date,'01-JAN-2999')
        AND TYP = :trans_type`,
        {
          account_link,
          start_date,
          end_date,
          trans_type,
        }
      );

      if (data) {
        for (let i = 0; i < data.rows.length; i++) {
          for (let x = 0; x < data.metaData.length; x++) {
            arr0 +=
              '"' +
              [data.metaData[x].name.toLowerCase()] +
              '" : "' +
              data.rows[i][x] +
              '",';
          }

          response.push(
            JSON.parse(
              "{" +
                arr0.replace(/(\r\n|\n|\r)/gm, "").replace(/,\s*$/, "") +
                "}"
            )
          );
        }

        res.send(response);
      } else {
        res.send("Something went wrong... Nothing was returned!!");
      }
    } finally {
      // conn.end();
    }
  };

  getChargesStatements();
});

// Get Loan Repayment Schedule API Endpoint - ORACLE
app.post("/api/get-loan-repayment-schedule", (req, res) => {
  let facility_number = req.body.facility_number;

  let getLoanEnquiry = async () => {
    try {
      const db = await oracledb.getConnection({
        user: DB_USER,
        password: DB_PASSWORD,
        connectString: DB_CONNECTION_STRING,
        timeout: DB_CONNECTION_TIMEOUT,
      });

      const response = [];
      let arr0 = "";

      // node native promisify
      const execute = util.promisify(db.execute).bind(db);

      const data = await execute(
        `SELECT * FROM REPAYMENT_SCHD_HDNEW WHERE facility_no = '${facility_number}'`
      );

      if (data) {
        for (let i = 0; i < data.rows.length; i++) {
          for (let x = 0; x < data.metaData.length; x++) {
            arr0 +=
              '"' +
              [data.metaData[x].name.toLowerCase()] +
              '" : "' +
              data.rows[i][x] +
              '",';
          }

          response.push(
            JSON.parse(
              "{" +
                arr0.replace(/(\r\n|\n|\r)/gm, "").replace(/,\s*$/, "") +
                "}"
            )
          );
        }

        res.send({
          responseCode: "000",
          responseMessage: response,
        });
      } else {
        res.send("Something went wrong... Nothing was returned!!");
      }
    } finally {
      // conn.end();
    }
  };

  getLoanEnquiry();
});

app.get("/api/get-ip", (req, res) => {
  async function getIp() {
    const response = await getIPAddress();
    res.send(response);
  }
});

// Get Loan General Enquiry API Endpoint - ORACLE
app.get("/api/loan-general-enquiry", (req, res) => {
  let getGeneralLoanEnquiry = async () => {
    try {
      const db = await oracledb.getConnection({
        user: DB_USER,
        password: DB_PASSWORD,
        connectString: DB_CONNECTION_STRING,
        timeout: DB_CONNECTION_TIMEOUT,
      });

      const response = [];
      let arr0 = "";

      // node native promisify
      const execute = util.promisify(db.execute).bind(db);

      const data = await execute(`SELECT * FROM VW_LOAN_GEN_ENQnew`);

      // return res.send(data);

      if (data) {
        for (let i = 0; i < data.rows.length; i++) {
          for (let x = 0; x < data.metaData.length; x++) {
            arr0 +=
              '"' +
              [data.metaData[x].name.toLowerCase()] +
              '" : "' +
              data.rows[i][x] +
              '",';
          }

          response.push(
            JSON.parse(
              "{" +
                arr0.replace(/(\r\n|\n|\r)/gm, "").replace(/,\s*$/, "") +
                "}"
            )
          );
        }

        res.send(response);
      } else {
        res.send("Something went wrong... Nothing was returned!!");
      }
    } finally {
      // conn.end();
    }
  };

  getGeneralLoanEnquiry();
});

// Get Batch Number API Endpoint - ORACLE
app.get("/api/get-unique-ref", (req, res) => {
  let getBatchNumberAPI = async () => {
    try {
      const db = await oracledb.getConnection({
        user: DB_USER,
        password: DB_PASSWORD,
        connectString: DB_CONNECTION_STRING,
        timeout: DB_CONNECTION_TIMEOUT,
      });

      const response = [];
      let arr0 = "";

      // node native promisify
      const execute = util.promisify(db.execute).bind(db);

      const data = await execute(`SELECT Get_batchno as unique_ref FROM dual`);

      if (data) {
        for (let i = 0; i < data.rows.length; i++) {
          for (let x = 0; x < data.metaData.length; x++) {
            arr0 +=
              '"' +
              [data.metaData[x].name.toLowerCase()] +
              '" : "' +
              data.rows[i][x] +
              '",';
          }

          response.push(
            JSON.parse(
              "{" +
                arr0.replace(/(\r\n|\n|\r)/gm, "").replace(/,\s*$/, "") +
                "}"
            )
          );
        }

        res.send(response);
      } else {
        res.send("Something went wrong... Nothing was returned!!");
      }
    } finally {
      // conn.end();
    }
  };

  getBatchNumberAPI();
});

// ---------------------------------------ACCESS FORM MANAGEMENT START--------------------

// // control setups ---> menu (derrick)
// app.get("/api/get-access-form-management-modules", (req, res) => {
//   let getAccessFormManagementModules = async () => {
//     try {
//       const db = await oracledb.getConnection({
//         user: DB_USER,
//         password: DB_PASSWORD,
//         connectString: DB_CONNECTION_STRING,
//         timeout: DB_CONNECTION_TIMEOUT,
//       });

//       // node native promisify
//       const execute = util.promisify(db.execute).bind(db);

//       const data = await execute(
//         `select menu_id, menu_name from tb_menus where menu_level = '3'`
//       );

//       if (data) {
//         const arr = [];
//         if (data.rows) {
//           for (let i = 0; i < data.rows.length; i++) {
//             const description = data.rows[i][1];
//             const actual_code = data.rows[i][0];

//             arr.push({
//               label: `${actual_code} - ${description}`,
//               value: actual_code,
//             });
//           }
//           res.send(arr);
//         }
//       } else {
//         res.send("Something went wrong... Nothing was returned!!");
//       }
//     } finally {
//       // conn.end();
//     }
//   };

//   getAccessFormManagementModules();
// });

// // fetch all user groups
// app.post("/api/get-all-user-groups", (req, res) => {
//   const access_code = req.body.access_code;

//   let getAllModulesFromUserGroup = async () => {
//     try {
//       const db = await oracledb.getConnection({
//         user: DB_USER,
//         password: DB_PASSWORD,
//         connectString: DB_CONNECTION_STRING,
//         timeout: DB_CONNECTION_TIMEOUT,
//       });

//       const response = [];
//       let arr0 = "";

//       // node native promisify
//       const execute = util.promisify(db.execute).bind(db);

//       const data = await execute(
//         `select AC.FORM_CODE, MN.MENU_NAME from S_ACCESS_CODE_BR AC JOIN TB_MENUS MN ON AC.FORM_CODE = MN.MENU_ID WHERE AC.ACCESS_CODE= '${access_code}'`
//       );

//       if (data) {
//         // res.send(data)
//         for (let i = 0; i < data.rows.length; i++) {
//           for (let x = 0; x < data.metaData.length; x++) {
//             arr0 +=
//               '"' +
//               [data.metaData[x].name.toLowerCase()] +
//               '" : "' +
//               data.rows[i][x] +
//               '",';
//           }

//           response.push(
//             JSON.parse(
//               "{" +
//                 arr0.replace(/(\r\n|\n|\r)/gm, "").replace(/,\s*$/, "") +
//                 "}"
//             )
//           );
//         }

//         res.send(response);
//       } else {
//         res.send("Something went wrong... Nothing was returned!!");
//       }
//     } finally {
//       // conn.end();
//     }
//   };

//   getAllModulesFromUserGroup();
// });

// // procedure for adding menu to form
// app.post("/api/prc-grant-screen-access", (req, res) => {
//   async function prcGrantScreenAccess() {
//     let con;

//     try {
//       con = await oracledb.getConnection({
//         user: DB_USER,
//         password: DB_PASSWORD,
//         connectString: DB_CONNECTION_STRING,
//       });

//       const access_v = req.body.access_v;
//       const myData = JSON.stringify(access_v);

//       // return res.send(myData);

//       con.execute(
//         `BEGIN BANKOWNER.prc_grantScreen_access(:access_v ,:msg);END;`,
//         {
//           access_v: {
//             type: oracledb.STRING,
//             dir: oracledb.BIND_IN,
//             val: myData,
//           },

//           msg: {
//             type: oracledb.STRING,
//             dir: oracledb.BIND_OUT,
//           },
//         },

//         function (err, result) {
//           if (result) {
//             if (result.outBinds.msg === "1") {
//               res.send("Form Added Successfully");
//             } else {
//               res.send(result.outBinds.msg);
//             }
//           } else {
//             throw err;
//           }
//         }
//       );
//     } catch (err) {
//       res.send(err);
//     }
//   }

//   prcGrantScreenAccess();
// });

// ---------------------------------------ACCESS FORM MANAGEMENT END--------------------

// get all cheque book requisition approvals (Derrick)
app.post("/api/get-cheque-requistion-approvals", (req, res) => {
  const branchCode = req.body.branchCode;
  let chequeBookRequisitionApprovals = async () => {
    try {
      const db = await oracledb.getConnection({
        user: DB_USER,
        password: DB_PASSWORD,
        connectString: DB_CONNECTION_STRING,
        timeout: DB_CONNECTION_TIMEOUT,
      });

      const response = [];
      let arr0 = "";

      // node native promisify
      const execute = util.promisify(db.execute).bind(db);

      const data = await execute(
        `select requisition_no,acct_link,get_acctdesc(acct_link) as acct_desc,leaves_no,requisition_date,posted_by,start_no,end_page
        from cheque_requisition where app_flag='N' and branch_code = '${branchCode}'`
      );

      if (data) {
        // res.send(data)
        for (let i = 0; i < data.rows.length; i++) {
          for (let x = 0; x < data.metaData.length; x++) {
            arr0 +=
              '"' +
              [data.metaData[x].name.toLowerCase()] +
              '" : "' +
              data.rows[i][x] +
              '",';
          }

          response.push(
            JSON.parse(
              "{" +
                arr0.replace(/(\r\n|\n|\r)/gm, "").replace(/,\s*$/, "") +
                "}"
            )
          );
        }

        res.send(response);
      } else {
        res.send("Something went wrong... Nothing was returned!!");
      }
    } finally {
      // conn.end();
    }
  };

  chequeBookRequisitionApprovals();
});

// --------- CHEQUE BOOK MAINTENANCE DERRICK  --------------
// get all cheque book requisition approvals (Derrick)
app.post("/api/get-cheque-book-maintenance", (req, res) => {
  const account_number = req.body.account_number;
  const account_name = req.body.account_name;
  const branchCode = req.body.branchCode;

  let chequeBookMaintenance = async () => {
    try {
      const db = await oracledb.getConnection({
        user: DB_USER,
        password: DB_PASSWORD,
        connectString: DB_CONNECTION_STRING,
        timeout: DB_CONNECTION_TIMEOUT,
      });

      const response = [];
      let arr0 = "";

      // node native promisify
      const execute = util.promisify(db.execute).bind(db);

      let determinant = "";

      if (account_number) {
        determinant += `AND acct_link LIKE '%${account_number}%'`;
      }

      if (account_name) {
        determinant += `AND ACCOUNT_NAME LIKE '%${account_name}%'`;
      }

      if (branchCode) {
        determinant += `AND BRANCH_CODE LIKE '%${branchCode}%'`;
      }

      const data = await execute(
        `select * from vw_cheque_requisition_app where  app_flag='A' ${determinant}`
      );

      if (data) {
        // res.send(data)
        for (let i = 0; i < data.rows.length; i++) {
          for (let x = 0; x < data.metaData.length; x++) {
            arr0 +=
              '"' +
              [data.metaData[x].name.toLowerCase()] +
              '" : "' +
              data.rows[i][x] +
              '",';
          }

          response.push(
            JSON.parse(
              "{" +
                arr0.replace(/(\r\n|\n|\r)/gm, "").replace(/,\s*$/, "") +
                "}"
            )
          );
        }

        res.send(response);
      } else {
        res.send("Something went wrong... Nothing was returned!!");
      }
    } finally {
      // conn.end();
    }
  };

  chequeBookMaintenance();
});

//cheque book maintenance getting account name
app.post("/api/get-cheque-book-maintenance-account-num", (req, res) => {
  const account_number = req.body.account_number;

  let chequeBookMaintenance2 = async () => {
    try {
      const db = await oracledb.getConnection({
        user: DB_USER,
        password: DB_PASSWORD,
        connectString: DB_CONNECTION_STRING,
        timeout: DB_CONNECTION_TIMEOUT,
      });

      const response = [];
      let arr0 = "";

      // node native promisify
      const execute = util.promisify(db.execute).bind(db);

      const data =
        await execute(` select acct_link , GET_ACCTDESC(acct_link) as acct_desc from g_ledger where acct_link= '${account_number}'
      `);

      if (data) {
        // res.send(data)
        for (let i = 0; i < data.rows.length; i++) {
          for (let x = 0; x < data.metaData.length; x++) {
            arr0 +=
              '"' +
              [data.metaData[x].name.toLowerCase()] +
              '" : "' +
              data.rows[i][x] +
              '",';
          }

          response.push(
            JSON.parse(
              "{" +
                arr0.replace(/(\r\n|\n|\r)/gm, "").replace(/,\s*$/, "") +
                "}"
            )
          );
        }

        res.send(response);
      } else {
        res.send("Something went wrong... Nothing was returned!!");
      }
    } finally {
      // conn.end();
    }
  };

  chequeBookMaintenance2();
});

// 00000010
//cheque book maintenance getting account name
app.post("/api/get-cheque-book-maintenance-screen2", (req, res) => {
  const requisition_number = req.body.requisition_number;

  let chequeBookMaintenance3 = async () => {
    try {
      const db = await oracledb.getConnection({
        user: DB_USER,
        password: DB_PASSWORD,
        connectString: DB_CONNECTION_STRING,
        timeout: DB_CONNECTION_TIMEOUT,
      });

      const response = [];
      let arr0 = "";

      // node native promisify
      const execute = util.promisify(db.execute).bind(db);

      const data =
        await execute(`select a.* , get_acctdesc(acct_link) as account_desc ,
      get_avbal(acct_link) as account_balance,
      get_branchdesc(delivery_branch) as branch_desc 
       from  CHEQUE_REQUISITION a
       where REQUISITION_NO = '${requisition_number}' and app_flag='A'
      `);

      if (data) {
        // res.send(data)
        for (let i = 0; i < data.rows.length; i++) {
          for (let x = 0; x < data.metaData.length; x++) {
            arr0 +=
              '"' +
              [data.metaData[x].name.toLowerCase()] +
              '" : "' +
              data.rows[i][x] +
              '",';
          }

          response.push(
            JSON.parse(
              "{" +
                arr0.replace(/(\r\n|\n|\r)/gm, "").replace(/,\s*$/, "") +
                "}"
            )
          );
        }

        res.send(response);
      } else {
        res.send("Something went wrong... Nothing was returned!!");
      }
    } finally {
      // conn.end();
    }
  };

  chequeBookMaintenance3();
});

// Get Extra Loan Info API Endpoint - ORACLE
app.post("/api/get-extra-loan-info", (req, res) => {
  let net_monthly_salary = req.body.net_monthly_salary;
  let facility_number = req.body.facility_number;

  let getMenusAPI = async () => {
    try {
      const db = await oracledb.getConnection({
        user: DB_USER,
        password: DB_PASSWORD,
        connectString: DB_CONNECTION_STRING,
        timeout: DB_CONNECTION_TIMEOUT,
      });

      const result = [];
      const dsrResponse = [];
      const firstNLastPrincipalRepayDateResponse = [];
      let arr0 = "";

      // node native promisify
      const execute = util.promisify(db.execute).bind(db);

      const dsr = await execute(
        `SELECT round(NVL( AVG(ACTUAL),1)/ NVL(${net_monthly_salary},1)*100,2) as DSR FROM VW_REP_LOAN_SCHEDULE_ENQ WHERE FACILITY_NO = '${facility_number}'`
      );

      const first_and_last_principal_repay_date = await execute(
        `select to_char(first_principal_repay_date,'DD-MON-YYYY') as first_principal_repay_date, to_char(last_repay_date,'DD-MON-YYYY') as last_repay_date from facilitye where FACILITY_NO = '${facility_number}'`
      );

      for (let i = 0; i < dsr.rows.length; i++) {
        for (let x = 0; x < dsr.metaData.length; x++) {
          arr0 +=
            '"' +
            [dsr.metaData[x].name.toLowerCase()] +
            '" : "' +
            dsr.rows[i][x] +
            '",';
        }

        dsrResponse.push(
          JSON.parse(
            "{" + arr0.replace(/(\r\n|\n|\r)/gm, "").replace(/,\s*$/, "") + "}"
          )
        );
      }

      for (
        let i = 0;
        i < first_and_last_principal_repay_date.rows.length;
        i++
      ) {
        for (
          let x = 0;
          x < first_and_last_principal_repay_date.metaData.length;
          x++
        ) {
          arr0 +=
            '"' +
            [
              first_and_last_principal_repay_date.metaData[
                x
              ].name.toLowerCase(),
            ] +
            '" : "' +
            first_and_last_principal_repay_date.rows[i][x] +
            '",';
        }

        firstNLastPrincipalRepayDateResponse.push(
          JSON.parse(
            "{" + arr0.replace(/(\r\n|\n|\r)/gm, "").replace(/,\s*$/, "") + "}"
          )
        );
      }

      res.send({
        responseCode: "000",
        responseMessage: firstNLastPrincipalRepayDateResponse,
      });
    } finally {
      // conn.end();
    }
  };

  getMenusAPI();
});

// Get Menu's API Endpoint - ORACLE
app.get("/api/get-menus", (req, res) => {
  let getMenusAPI = async () => {
    try {
      const db = await oracledb.getConnection({
        user: DB_USER,
        password: DB_PASSWORD,
        connectString: DB_CONNECTION_STRING,
        timeout: DB_CONNECTION_TIMEOUT,
      });

      const response = [];
      let arr0 = "";

      // node native promisify
      const execute = util.promisify(db.execute).bind(db);

      const data = await execute(
        `SELECT * FROM TB_MENUS WHERE menu_permitted = 'Y' AND bank_permission = 'Y' ORDER BY menu_groupings ASC`
      );

      if (data) {
        for (let i = 0; i < data.rows.length; i++) {
          for (let x = 0; x < data.metaData.length; x++) {
            arr0 +=
              '"' +
              [data.metaData[x].name.toLowerCase()] +
              '" : "' +
              data.rows[i][x] +
              '",';
          }

          response.push(
            JSON.parse(
              "{" +
                arr0.replace(/(\r\n|\n|\r)/gm, "").replace(/,\s*$/, "") +
                "}"
            )
          );
        }

        res.send(response);
      } else {
        res.send("Something went wrong... Nothing was returned!!");
      }
    } finally {
      // conn.end();
    }
  };

  getMenusAPI();
});

app.post("/api/get-menus-twene", async (req, res) => {
  const { userID, authorityCode } = req.body;

  // Define the getMenusAPI function as async
  const getMenusAPI = async () => {
    let db;
    try {
      // Establish a connection to the database
      db = await oracledb.getConnection({
        user: DB_USER,
        password: DB_PASSWORD,
        connectString: DB_CONNECTION_STRING,
        timeout: DB_CONNECTION_TIMEOUT,
      });

      const response = [];
      let arr0 = "";

      // Use node's native promisify to convert db.execute to return a promise
      const execute = util.promisify(db.execute).bind(db);

      // Execute the SQL query
      const data = await execute(
        `SELECT DISTINCT    
         ID,
         MENU_ID,
         MENU_LEVEL,
         MENU_NAME,
         PARENT_MENU_ID,
         MENU_GROUPINGS,
         ICON,
         TYPE_CODE,
         FILE_NAME,
         RTRIM(MENU_URL) MENU_URL,
         MENU_PERMITTED,
         BANK_PERMISSION FROM (    
            WITH m_level_three AS (SELECT  
             ID,
             MENU_ID,
             MENU_LEVEL,
             MENU_NAME,
             PARENT_MENU_ID,
             MENU_GROUPINGS,
             ICON,
             TYPE_CODE,
             FILE_NAME,
             MENU_URL,
             MENU_PERMITTED,
             BANK_PERMISSION
            FROM TB_MENUS A
            WHERE EXISTS (SELECT 1 FROM  s_access_code_br B
              WHERE   A.MENU_ID=B.FORM_CODE AND   
              access_code IN (SELECT access_code
              FROM TB_USER_MENU_ACCESSES  C
              WHERE user_name = :userID) 
            )  AND  :authorityCode >= authority_code
            and nvl(menu_permitted,'Y')='Y'
            and BANK_TYPE in ('Y',get_SYSMENU_TYPE)
          ),
          m_level_two as (SELECT ID,
             MENU_ID,
             MENU_LEVEL,
             MENU_NAME,
             PARENT_MENU_ID,
             MENU_GROUPINGS,
             ICON,
             TYPE_CODE,
             FILE_NAME,
             MENU_URL,
             MENU_PERMITTED,
             BANK_PERMISSION FROM TB_MENUS P WHERE EXISTS (SELECT 1 FROM  m_level_three C WHERE P.MENU_ID=C.PARENT_MENU_ID )
          ),
          m_level_one as (SELECT ID,
             MENU_ID,
             MENU_LEVEL,
             MENU_NAME,
             PARENT_MENU_ID,
             MENU_GROUPINGS,
             ICON,
             TYPE_CODE,
             FILE_NAME,
             MENU_URL,
             MENU_PERMITTED,
             BANK_PERMISSION FROM TB_MENUS P WHERE EXISTS (SELECT 1 FROM  m_level_two C WHERE P.MENU_ID=C.PARENT_MENU_ID )
          )      
          SELECT ID,
             MENU_ID,
             MENU_LEVEL,
             MENU_NAME,
             PARENT_MENU_ID,
             MENU_GROUPINGS,
             ICON,
             TYPE_CODE,
             FILE_NAME,
             MENU_URL,
             MENU_PERMITTED,
             BANK_PERMISSION FROM m_level_three         
          UNION ALL 
          SELECT ID,
             MENU_ID,
             MENU_LEVEL,
             MENU_NAME,
             PARENT_MENU_ID,
             MENU_GROUPINGS,
             ICON,
             TYPE_CODE,
             FILE_NAME,
             MENU_URL,
             MENU_PERMITTED,
             BANK_PERMISSION FROM TB_MENUS P WHERE EXISTS (SELECT 1 FROM  m_level_three C WHERE P.MENU_ID=C.PARENT_MENU_ID )
          UNION ALL
          SELECT ID,
             MENU_ID,
             MENU_LEVEL,
             MENU_NAME,
             PARENT_MENU_ID,
             MENU_GROUPINGS,
             ICON,
             TYPE_CODE,
             FILE_NAME,
             MENU_URL,
             MENU_PERMITTED,
             BANK_PERMISSION FROM TB_MENUS P WHERE EXISTS (SELECT 1 FROM  m_level_two C WHERE P.MENU_ID=C.PARENT_MENU_ID )
          UNION ALL
          SELECT ID,
             MENU_ID,
             MENU_LEVEL,
             MENU_NAME,
             PARENT_MENU_ID,
             MENU_GROUPINGS,
             ICON,
             TYPE_CODE,
             FILE_NAME,
             MENU_URL,
             MENU_PERMITTED,
             BANK_PERMISSION FROM TB_MENUS P WHERE EXISTS (SELECT 1 FROM  m_level_one C WHERE P.MENU_ID=C.PARENT_MENU_ID)       
          ) ORDER BY MENU_GROUPINGS ASC`,
        {
          userID: userID,
          authorityCode: authorityCode,
        }
      );

      if (data.rows.length > 0) {
        // Process data rows
        for (let i = 0; i < data.rows.length; i++) {
          arr0 = ""; // Reset arr0 for each row
          for (let x = 0; x < data.metaData.length; x++) {
            arr0 +=
              '"' +
              data.metaData[x].name.toLowerCase() +
              '" : "' +
              (data.rows[i][x] || "").toString().replace(/"/g, '\\"') +
              '",';
          }

          response.push(
            JSON.parse(
              "{" +
                arr0.replace(/(\r\n|\n|\r)/gm, "").replace(/,\s*$/, "") +
                "}"
            )
          );
        }

        res.json(response);
      } else {
        res.status(404).send("No data found");
      }
    } catch (error) {
      console.error("Error executing SQL query:", error.message);
      res.status(500).send("Internal Server Error");
    } finally {
      // Ensure the connection is closed properly
      if (db) {
        try {
          await db.close();
        } catch (closeError) {
          console.error(
            "Error closing the database connection:",
            closeError.message
          );
        }
      }
    }
  };

  // Call the getMenusAPI function
  await getMenusAPI();
});

// app.post("/api/get-menus-twene", (req, res) => {
//   const { userID, authorityCode } = req.body;

//   let getMenusAPI = async () => {
//     try {
//       const db = await oracledb.getConnection({
//         user: DB_USER,
//         password: DB_PASSWORD,
//         connectString: DB_CONNECTION_STRING,
//         timeout: DB_CONNECTION_TIMEOUT,
//       });

//       const response = [];
//       let arr0 = "";

//       // node native promisify
//       const execute = util.promisify(db.execute).bind(db);

//       const data = await execute(
//         `SELECT DISTINCT
//          ID,
//          MENU_ID,
//          MENU_LEVEL,
//          MENU_NAME,
//          PARENT_MENU_ID,
//          MENU_GROUPINGS,
//          ICON,
//          TYPE_CODE,
//          FILE_NAME,
//          RTRIM(MENU_URL) MENU_URL,
//          MENU_PERMITTED,
//          BANK_PERMISSION FROM (
//                 WITH m_level_three AS (SELECT
//          ID,
//          MENU_ID,
//          MENU_LEVEL,
//          MENU_NAME,
//          PARENT_MENU_ID,
//          MENU_GROUPINGS,
//          ICON,
//          TYPE_CODE,
//          FILE_NAME,
//          MENU_URL,
//          MENU_PERMITTED,
//          BANK_PERMISSION
//     FROM TB_MENUS A
//    WHERE EXISTS (SELECT 1 FROM  s_access_code_br B
//    WHERE   A.MENU_ID=B.FORM_CODE AND
//    access_code IN (SELECT access_code
//    FROM TB_USER_MENU_ACCESSES  C
//    WHERE user_name ='${userID}')
// )  AND  ${authorityCode} >= authority_code
//  and nvl(menu_permitted,'Y')='Y'
// --and nvl(SHOW_ON_APPRVL_FLAG,'N')='N'
// and BANK_TYPE in ('Y',get_SYSMENU_TYPE)--START WITH MENU_LEVEL = '0'
// --CONNECT BY NOCYCLE PRIOR MENU_ID = PARENT_MENU_ID
//  ),
//   m_level_two as (SELECT ID,
//          MENU_ID,
//          MENU_LEVEL,
//          MENU_NAME,
//          PARENT_MENU_ID,
//          MENU_GROUPINGS,
//          ICON,
//          TYPE_CODE,
//          FILE_NAME,
//         MENU_URL,
//          MENU_PERMITTED,
//          BANK_PERMISSION FROM TB_MENUS P WHERE EXISTS (SELECT 1 FROM  m_level_three C WHERE P.MENU_ID=C.PARENT_MENU_ID )
//   ) ,
//   m_level_one as (SELECT ID,
//          MENU_ID,
//          MENU_LEVEL,
//          MENU_NAME,
//          PARENT_MENU_ID,
//          MENU_GROUPINGS,
//          ICON,
//          TYPE_CODE,
//          FILE_NAME,
//         MENU_URL,
//          MENU_PERMITTED,
//          BANK_PERMISSION FROM TB_MENUS P WHERE EXISTS (SELECT 1 FROM  m_level_two C WHERE P.MENU_ID=C.PARENT_MENU_ID )
//   )
//  SELECT ID,
//          MENU_ID,
//          MENU_LEVEL,
//          MENU_NAME,
//          PARENT_MENU_ID,
//          MENU_GROUPINGS,
//          ICON,
//          TYPE_CODE,
//          FILE_NAME,
//          MENU_URL,
//          MENU_PERMITTED,
//          BANK_PERMISSION FROM m_level_three
//  UNION ALL
//  SELECT ID,
//          MENU_ID,
//          MENU_LEVEL,
//          MENU_NAME,
//          PARENT_MENU_ID,
//          MENU_GROUPINGS,
//          ICON,
//          TYPE_CODE,
//          FILE_NAME,
//          MENU_URL,
//          MENU_PERMITTED,
//          BANK_PERMISSION FROM TB_MENUS P WHERE EXISTS (SELECT 1 FROM  m_level_three C WHERE P.MENU_ID=C.PARENT_MENU_ID )
//          union all
//  SELECT ID,
//          MENU_ID,
//          MENU_LEVEL,
//          MENU_NAME,
//          PARENT_MENU_ID,
//          MENU_GROUPINGS,
//          ICON,
//          TYPE_CODE,
//          FILE_NAME,
//          MENU_URL,
//          MENU_PERMITTED,
//          BANK_PERMISSION FROM TB_MENUS P WHERE EXISTS (SELECT 1 FROM  m_level_two C WHERE P.MENU_ID=C.PARENT_MENU_ID )
//          union all
//          SELECT ID,
//          MENU_ID,
//          MENU_LEVEL,
//          MENU_NAME,
//          PARENT_MENU_ID,
//          MENU_GROUPINGS,
//          ICON,
//          TYPE_CODE,
//          FILE_NAME,
//          MENU_URL,
//          MENU_PERMITTED,
//          BANK_PERMISSION FROM TB_MENUS P WHERE EXISTS (SELECT 1 FROM  m_level_one C WHERE P.MENU_ID=C.PARENT_MENU_ID)
//          ) ORDER BY MENU_GROUPINGS ASC`
//       );

//       if (data) {
//         for (let i = 0; i < data.rows.length; i++) {
//           for (let x = 0; x < data.metaData.length; x++) {
//             arr0 +=
//               '"' +
//               [data.metaData[x].name.toLowerCase()] +
//               '" : "' +
//               data.rows[i][x] +
//               '",';
//           }

//           response.push(
//             JSON.parse(
//               "{" +
//                 arr0.replace(/(\r\n|\n|\r)/gm, "").replace(/,\s*$/, "") +
//                 "}"
//             )
//           );
//         }

//         res.send(response);
//       } else {
//         res.send("Something went wrong... Nothing was returned!!");
//       }
//     } finally {
//       // conn.end();
//     }
//   };

//   getMenusAPI();
// });

// Get Menu's API Endpoint - ORACLE
app.get("/api/get-menu-urls", (req, res) => {
  let getMenuURLsAPI = async () => {
    try {
      const db = await oracledb.getConnection({
        user: DB_USER,
        password: DB_PASSWORD,
        connectString: DB_CONNECTION_STRING,
        timeout: DB_CONNECTION_TIMEOUT,
      });

      const response = [];
      let arr0 = "";

      // node native promisify
      const execute = util.promisify(db.execute).bind(db);

      const data = await execute(
        `SELECT ID,
    MENU_ID,
    MENU_LEVEL,
    MENU_NAME,
    PARENT_MENU_ID,
    MENU_GROUPINGS,
    ICON,
    TYPE_CODE,
    FILE_NAME,
    RTRIM(MENU_URL) MENU_URL,
    MENU_PERMITTED,
    BANK_PERMISSION,
    BANK_TYPE,
    AUTHORITY_CODE,
    COLOR FROM TB_MENUS WHERE menu_permitted = 'Y' AND bank_permission = 'Y' AND menu_level IN ('1' , '2' ) AND type_code  IN  ('collapse-custom', 'item')  ORDER BY menu_groupings ASC`
      );

      if (data) {
        for (let i = 0; i < data.rows.length; i++) {
          for (let x = 0; x < data.metaData.length; x++) {
            arr0 +=
              '"' +
              [data.metaData[x].name.toLowerCase()] +
              '" : "' +
              data.rows[i][x] +
              '",';
          }

          response.push(
            JSON.parse(
              "{" +
                arr0.replace(/(\r\n|\n|\r)/gm, "").replace(/,\s*$/, "") +
                "}"
            )
          );
        }

        res.send(response);
      } else {
        res.send("Something went wrong... Nothing was returned!!");
      }
    } finally {
      // conn.end();
    }
  };

  getMenuURLsAPI();
});

app.get("/api/get-menu-urls-twene", (req, res) => {
  let getMenuURLsAPI = async () => {
    try {
      const db = await oracledb.getConnection({
        user: DB_USER,
        password: DB_PASSWORD,
        connectString: DB_CONNECTION_STRING,
        timeout: DB_CONNECTION_TIMEOUT,
      });

      const response = [];
      let arr0 = "";

      // node native promisify
      const execute = util.promisify(db.execute).bind(db);

      const data = await execute(
        `SELECT ID,
                  MENU_ID,
                  MENU_LEVEL,
                  MENU_NAME,
                  PARENT_MENU_ID,
                  MENU_GROUPINGS,
                  ICON,
                  TYPE_CODE,
                  FILE_NAME,
                  MENU_URL,
                  MENU_PERMITTED,
                  BANK_PERMISSION,
                  BANK_TYPE,
                  AUTHORITY_CODE,
                  COLOR FROM TB_MENUS WHERE menu_permitted = 'Y' AND bank_permission = 'Y' AND menu_level IN ('1' , '2' ) AND type_code  IN  ('collapse-custom', 'item')  ORDER BY menu_groupings ASC
              `
      );

      if (data) {
        for (let i = 0; i < data.rows.length; i++) {
          for (let x = 0; x < data.metaData.length; x++) {
            arr0 +=
              '"' +
              [data.metaData[x].name.toLowerCase()] +
              '" : "' +
              data.rows[i][x] +
              '",';
          }

          response.push(
            JSON.parse(
              "{" +
                arr0.replace(/(\r\n|\n|\r)/gm, "").replace(/,\s*$/, "") +
                "}"
            )
          );
        }

        res.send(response);
      } else {
        res.send("Something went wrong... Nothing was returned!!");
      }
    } finally {
      // conn.end();
    }
  };

  getMenuURLsAPI();
});

app.post("/api/get-menu-urls-icons-twene", (req, res) => {
  let getMenuIconsNewURLsAPI = async () => {
    try {
      const db = await oracledb.getConnection({
        user: DB_USER,
        password: DB_PASSWORD,
        connectString: DB_CONNECTION_STRING,
        timeout: DB_CONNECTION_TIMEOUT,
      });

      const response = [];
      let arr0 = "";
      const menu_id = "'" + req.body.menu_id + "'";
      const userID = "'" + req.body.userID + "'";
      const authorityCode = req.body.authorityCode;

      // console.log(menu_id);
      // console.log(userID);
      // console.log(authorityCode);

      // node native promisify
      const execute = util.promisify(db.execute).bind(db);

      // console.log(`SELECT ID,
      //           MENU_ID,
      //           MENU_LEVEL,
      //           MENU_NAME,
      //           PARENT_MENU_ID,
      //           MENU_GROUPINGS,
      //           ICON,
      //           TYPE_CODE,
      //           FILE_NAME,
      //           RTRIM(MENU_URL) MENU_URL,
      //           MENU_PERMITTED,
      //           BANK_PERMISSION
      //      FROM TB_MENUS A
      //     WHERE     EXISTS
      //                   (SELECT 1
      //                      FROM s_access_code_br B
      //                     WHERE     A.MENU_ID = B.FORM_CODE
      //                           AND access_code IN
      //                                   (SELECT access_code
      //                                      FROM TB_USER_MENU_ACCESSES C
      //                                     WHERE user_name = ${userID}))
      //           AND ${authorityCode} >= authority_code
      //           AND NVL (menu_permitted, 'Y') = 'Y'
      //           AND BANK_TYPE IN ('Y', get_SYSMENU_TYPE)
      //           AND PARENT_MENU_ID=${menu_id}`);

      const data = await execute(
        `SELECT ID,
                MENU_ID,
                MENU_LEVEL,
                MENU_NAME,
                PARENT_MENU_ID,
                MENU_GROUPINGS,
                ICON,
                TYPE_CODE,
                FILE_NAME,
                RTRIM(MENU_URL) MENU_URL,
                MENU_PERMITTED,
                BANK_PERMISSION
           FROM TB_MENUS A
          WHERE     EXISTS
                        (SELECT 1
                           FROM s_access_code_br B
                          WHERE     A.MENU_ID = B.FORM_CODE
                                AND access_code IN
                                        (SELECT access_code
                                           FROM TB_USER_MENU_ACCESSES C
                                          WHERE user_name = ${userID}))
                AND ${authorityCode} >= authority_code
                AND NVL (menu_permitted, 'Y') = 'Y'
                AND BANK_TYPE IN ('Y', get_SYSMENU_TYPE) 
                AND PARENT_MENU_ID=${menu_id} ORDER BY MENU_GROUPINGS ASC`
      );

      if (data) {
        for (let i = 0; i < data.rows.length; i++) {
          for (let x = 0; x < data.metaData.length; x++) {
            arr0 +=
              '"' +
              [data.metaData[x].name.toLowerCase()] +
              '" : "' +
              data.rows[i][x] +
              '",';
          }

          response.push(
            JSON.parse(
              "{" +
                arr0.replace(/(\r\n|\n|\r)/gm, "").replace(/,\s*$/, "") +
                "}"
            )
          );
        }

        res.send(response);
      } else {
        res.send("Something went wrong... Nothing was returned!!");
      }
    } finally {
      // conn.end();
    }
  };

  getMenuIconsNewURLsAPI();
});

// Get Menu Icons API Endpoint - ORACLE
app.get("/api/get-menu-icons", (req, res) => {
  let getMenuIconsAPI = async () => {
    let arr0 = "";
    let response = [];

    try {
      const db = await oracledb.getConnection({
        user: DB_USER,
        password: DB_PASSWORD,
        connectString: DB_CONNECTION_STRING,
        timeout: DB_CONNECTION_TIMEOUT,
      });

      // node native promisify
      const execute = util.promisify(db.execute).bind(db);

      const data = await execute(
        `SELECT * FROM TB_MENUS WHERE menu_permitted = 'Y' AND bank_permission = 'Y' ORDER BY menu_groupings ASC`
      );
      if (data) {
        for (let i = 0; i < data.rows.length; i++) {
          for (let x = 0; x < data.metaData.length; x++) {
            arr0 +=
              '"' +
              [data.metaData[x].name.toLowerCase()] +
              '" : "' +
              data.rows[i][x] +
              '",';
          }

          response.push(
            JSON.parse(
              "{" +
                arr0.replace(/(\r\n|\n|\r)/gm, "").replace(/,\s*$/, "") +
                "}"
            )
          );
        }

        const arr1 = [];
        response.map((i) => {
          if (i.menu_level !== 0) {
            arr1.push({
              id: i.menu_id,
              title: i.menu_name,
              type: i.type_code,
              url: i.menu_url,
              icon: i.icon,
              color: i.color,
              parent_menu_id: i.parent_menu_id,
              menu_level: i.menu_level,
            });
          }
        });

        arr1.map((i) => {
          i.children = [];
          arr1.map((a) => {
            if (a.parent_menu_id === i.id) {
              i.children.push(a);
            }
          });
        });

        const arr = [];
        arr1.map((i) => {
          if (i.menu_level === "1") {
            arr.push(i);
          }
        });
        const menuID = JSON.stringify(arr, getCircularReplacer());
        res.send(JSON.parse(menuID));
      } else {
        res.send("Something went wrong... Nothing was returned!!");
      }
    } catch (error) {
      // finally{
      // }

      // db.end();
      console.log(error);
    }
  };

  getMenuIconsAPI();
  const getCircularReplacer = () => {
    const seen = new WeakSet();
    return (key, value) => {
      if (typeof value === "object" && value !== null) {
        if (seen.has(value)) {
          return;
        }
        seen.add(value);
      }
      return value;
    };
  };
});

app.get("/api/get-test-api", (req, res) => {
  res.send([
    { responseCode: "000", responseMessage: "My new api stuff here..." },
  ]);
});

// Get Menus By Menu Level's API Endpoint - ORACLE
app.post("/api/get-active-menus-by-menu-level", (req, res) => {
  let menu_level = req.body.menu_level;
  let userID = req.body.userID;
  let authorityCode = req.body.authorityCode;

  let getMenusByLevelFunc = async (menu_level) => {
    try {
      const db = await oracledb.getConnection({
        user: DB_USER,
        password: DB_PASSWORD,
        connectString: DB_CONNECTION_STRING,
        timeout: DB_CONNECTION_TIMEOUT,
      });

      const response = [];
      let arr0 = "";

      // node native promisify
      const execute = util.promisify(db.execute).bind(db);
      const data = await execute(
        `SELECT ID,
                MENU_ID,
                MENU_LEVEL,
                MENU_NAME,
                PARENT_MENU_ID,
                MENU_GROUPINGS,
                ICON,
                TYPE_CODE,
                FILE_NAME,
                MENU_URL,
                MENU_PERMITTED,
                BANK_PERMISSION
           FROM TB_MENUS A
          WHERE     EXISTS
                        (SELECT 1
                           FROM s_access_code_br B
                          WHERE     A.MENU_ID = B.FORM_CODE
                                AND access_code IN
                                        (SELECT access_code
                                           FROM TB_USER_MENU_ACCESSES C
                                          WHERE user_name = '${userID}'))
                AND ${authorityCode} >= authority_code
                AND NVL (menu_permitted, 'Y') = 'Y'
                AND BANK_TYPE IN ('Y', get_SYSMENU_TYPE) 
                AND menu_level='${menu_level}'
                ORDER BY menu_groupings ASC`
      );

      if (data) {
        for (let i = 0; i < data.rows.length; i++) {
          for (let x = 0; x < data.metaData.length; x++) {
            arr0 +=
              '"' +
              [data.metaData[x].name.toLowerCase()] +
              '" : "' +
              data.rows[i][x] +
              '",';
          }

          response.push(
            JSON.parse(
              "{" +
                arr0.replace(/(\r\n|\n|\r)/gm, "").replace(/,\s*$/, "") +
                "}"
            )
          );
        }

        res.send(response);
      } else {
        res.send("Something went wrong... Nothing was returned!!");
      }
    } finally {
      // conn.end();
    }
  };

  return getMenusByLevelFunc(menu_level);
});

// Get Menus By Menu Level's API Endpoint - ORACLE
app.post("/api/get-menus-by-menu-level", (req, res) => {
  let menu_level = req.body.menu_level;

  let getMenusByLevelFunc = async (menu_level) => {
    try {
      const db = await oracledb.getConnection({
        user: DB_USER,
        password: DB_PASSWORD,
        connectString: DB_CONNECTION_STRING,
        timeout: DB_CONNECTION_TIMEOUT,
      });

      const response = [];
      let arr0 = "";

      // node native promisify
      const execute = util.promisify(db.execute).bind(db);
      const data = await execute(
        `SELECT * FROM TB_MENUS WHERE menu_permitted = 'Y' AND bank_permission = 'Y' AND menu_level =
          '${menu_level}'
          ORDER BY menu_groupings ASC`
      );

      if (data) {
        for (let i = 0; i < data.rows.length; i++) {
          for (let x = 0; x < data.metaData.length; x++) {
            arr0 +=
              '"' +
              [data.metaData[x].name.toLowerCase()] +
              '" : "' +
              data.rows[i][x] +
              '",';
          }

          response.push(
            JSON.parse(
              "{" +
                arr0.replace(/(\r\n|\n|\r)/gm, "").replace(/,\s*$/, "") +
                "}"
            )
          );
        }

        res.send(response);
      } else {
        res.send("Something went wrong... Nothing was returned!!");
      }
    } finally {
      // conn.end();
    }
  };

  return getMenusByLevelFunc(menu_level);
});

app.post("/api/find-by", (req, res) => {
  const { queryValue } = req.body;
  // return res.send(accountName);
  async function getCodeDetails() {
    let con;

    try {
      con = await oracledb.getConnection({
        user: DB_USER,
        password: DB_PASSWORD,
        connectString: DB_CONNECTION_STRING,
        timeout: DB_CONNECTION_TIMEOUT,
      });

      const data = await con.execute(
        `select customer_number, account_descrp, acct_link, ISO_CODE, status_indicator,
        phone,id_number from vw_casa_search
        where customer_number like '%'||'${queryValue}'||'%'
        OR UPPER(account_descrp) like '%'||UPPER('${queryValue}')||'%'
        OR phone like '%'||'${queryValue}'||'%'
        OR id_number like '%'||'${queryValue}'||'%' `
      );

      // return res.send(data);
      if (data.rows) {
        const arr = [];

        for (let i = 0; i < data.rows.length; i++) {
          // const description = data.rows[i][0];

          // const actual_code = data.rows[i][1];
          // const short_descrp = data.rows[i][2];
          // const customer_number = data.rows[i][3];

          arr.push({
            customerNumber: data.rows[i][0],
            accountName: data.rows[i][1],
            accountNumber: data.rows[i][2],
            isoCode: data.rows[i][3],
            phone: data.rows[i][5],
            idNumber: data.rows[i][6],
          });
        }

        res.send(arr);
      } else {
        res.send(err);
        // console.log(err);
      }
    } catch (err) {
      console.log(err);
      res.send(err);
    }
  }

  getCodeDetails();
});

// Update Menu Detail's API Endpoint - ORACLE
app.post(
  "/api/update-menu-details",
  uploadMenuIcon.single("fileX"),
  (req, res) => {
    let id = req.body.id;
    let menu_id = req.body.menu_id;
    let menu_level = req.body.menu_level;
    let menu_name = req.body.menu_name;
    let parent_menu_id = req.body.parent_menu_id;
    let menu_groupings = req.body.menu_groupings;
    let icon = req.body.icon;
    let color = req.body.color;
    let type_code = req.body.type_code;
    let file_name = req.body.file_name;
    let menu_url = req.body.menu_url;
    let menu_permitted = req.body.menu_permitted;
    let bank_permission = req.body.bank_permission;
    bank_type = "Y";
    authority_code = 10;

    let updateMenuDetailsFunc = async (
      id,
      menu_id,
      menu_level,
      menu_name,
      parent_menu_id,
      menu_groupings,
      icon,
      color,
      type_code,
      file_name,
      menu_url,
      menu_permitted,
      bank_permission,
      bank_type,
      authority_code
    ) => {
      try {
        const db = await oracledb.getConnection({
          user: DB_USER,
          password: DB_PASSWORD,
          connectString: DB_CONNECTION_STRING,
          timeout: DB_CONNECTION_TIMEOUT,
        });

        // node native promisify
        const execute = util.promisify(db.execute).bind(db);
        let response = await execute(
          `UPDATE TB_MENUS SET 
        menu_id = '${menu_id}', 
        menu_level = '${menu_level}', 
        menu_name = '${menu_name}', 
        parent_menu_id = '${parent_menu_id}', 
        menu_groupings = '${menu_groupings}', 
        icon = '${icon}', 
        color ='${color}',
        type_code = '${type_code}',
        file_name ='${file_name}',
        menu_url = '${menu_url}',
        menu_permitted = '${menu_permitted}',
        bank_permission = '${bank_permission}',
        bank_type = '${bank_type}',
        authority_code = '${authority_code}' WHERE id='${id}'`
        );

        if (response) {
          res.send([
            {
              responseCode: "000",
              responseMessage:
                "The Details of the Menu Icon Has Been Updated Successfully",
            },
          ]);
        }
      } finally {
        // conn.end();
      }
    };

    return updateMenuDetailsFunc(
      id,
      menu_id,
      menu_level,
      menu_name,
      parent_menu_id,
      menu_groupings,
      icon,
      color,
      type_code,
      file_name,
      menu_url,
      menu_permitted,
      bank_permission,
      bank_type,
      authority_code
    );
  }
);

// Add Menu's API Endpoint - ORACLE
app.post("/api/add-menu", (req, res) => {
  let addMenuAPI = require("./controllers/menus/add-menu");

  let menu_id = req.body.menu_id;
  let menu_level = req.body.menu_level;
  let menu_name = req.body.menu_name;
  let parent_menu_id = req.body.parent_menu_id;
  let menu_groupings = req.body.menu_groupings;
  let icon = req.body.icon;
  let color = req.body.color;
  let type_code = req.body.type_code;
  let file_name = req.body.file_name;
  let menu_url = req.body.menu_url;
  let menu_permitted = req.body.menu_permitted;
  let bank_permission = req.body.bank_permission;
  bank_type = "Y";
  let authority_code = 10;

  let addMenuFunc = async (
    menu_id,
    menu_level,
    menu_name,
    parent_menu_id,
    menu_groupings,
    icon,
    color,
    type_code,
    file_name,
    menu_url,
    menu_permitted,
    bank_permission,
    bank_type,
    authority_code
  ) => {
    try {
      const db = await oracledb.getConnection({
        user: DB_USER,
        password: DB_PASSWORD,
        connectString: DB_CONNECTION_STRING,
        timeout: DB_CONNECTION_TIMEOUT,
      });

      // node native promisify
      const execute = util.promisify(db.execute).bind(db);
      let response = await execute(
        `INSERT INTO TB_MENUS(id, menu_id, menu_level, menu_name, parent_menu_id, menu_groupings, icon, color, type_code, file_name, menu_url, menu_permitted, bank_permission, bank_type,authority_code) VALUES (
         '${new Date().getTime()}',
         '${menu_id}', 
         '${menu_level}', 
         '${menu_name}', 
         '${parent_menu_id}', 
         '${menu_groupings}', 
         '${icon}', 
         '${color}',
         '${type_code}',
         '${file_name}',
         '${menu_url}',
         '${menu_permitted}',
         '${bank_permission}'
         '${bank_type}',
         '${authority_code}')`
      );

      if (response) {
        res.send([
          {
            responseCode: "000",
            responseMessage: "Menu Has Been Added Successfully",
          },
        ]);
      }
    } finally {
      // conn.end();
    }
  };

  return addMenuFunc(
    menu_id,
    menu_level,
    menu_name,
    parent_menu_id,
    menu_groupings,
    icon,
    color,
    type_code,
    file_name,
    menu_url,
    menu_permitted,
    bank_permission,
    bank_type,
    authority_code
  );
});

app.post("/api/find-by-name", (req, res) => {
  const accountName = req.body.accountName;
  // return res.send(accountName);
  async function getCodeDetails() {
    let con;

    try {
      con = await oracledb.getConnection({
        user: DB_USER,
        password: DB_PASSWORD,
        connectString: DB_CONNECTION_STRING,
        timeout: DB_CONNECTION_TIMEOUT,
      });

      const data = await con.execute(
        `SELECT A.account_descrp, A.acct_link, B.ISO_CODE, A.customer_number, A.status_indicator FROM g_ledger A, TB_CURRENCY B WHERE UPPER(A.account_descrp) LIKE UPPER('%${accountName}%') AND type_of_acct IN ('1','2','9') AND A.CURRENCY_CODE = B.CURRENCY_CODE AND ROWNUM <= 100 ORDER BY A.account_descrp`
      );

      // return res.send(data);
      if (data.rows) {
        const arr = [];

        for (let i = 0; i < data.rows.length; i++) {
          const description = data.rows[i][0];
          const actual_code = data.rows[i][1];
          const short_descrp = data.rows[i][2];
          const customer_number = data.rows[i][3];

          arr.push({
            accountName: description,
            accountNumber: actual_code,
            isoCode: short_descrp,
            customer_number: customer_number,
          });
        }

        res.send(arr);
      } else {
        res.send(err);
        // console.log(err);
      }
    } catch (err) {
      console.log(err);
      res.send(err);
    }
  }

  getCodeDetails();
});

// Add Sub Menu's API Endpoint - ORACLE
app.post("/api/add-sub-menu", (req, res) => {
  let addSubMenuAPI = require("./controllers/menus/add-sub-menu");

  let menu_id = req.body.menu_id;
  let menu_level = req.body.menu_level;
  let menu_name = req.body.menu_name;
  let parent_menu_id = req.body.parent_menu_id;
  let menu_groupings = req.body.menu_groupings;
  let icon = req.body.icon;
  let color = req.body.color;
  let type_code = req.body.type_code;
  let file_name = req.body.file_name;
  let menu_url = req.body.menu_url;
  let menu_permitted = req.body.menu_permitted;
  let bank_permission = req.body.bank_permission;
  bank_type = "Y";
  authority_code = 10;

  let addSubMenuFunc = async (
    menu_id,
    menu_level,
    menu_name,
    parent_menu_id,
    menu_groupings,
    icon,
    color,
    type_code,
    file_name,
    menu_url,
    menu_permitted,
    bank_permission,
    bank_type,
    authority_code
  ) => {
    try {
      const db = await oracledb.getConnection({
        user: DB_USER,
        password: DB_PASSWORD,
        connectString: DB_CONNECTION_STRING,
        timeout: DB_CONNECTION_TIMEOUT,
      });

      // node native promisify
      const execute = util.promisify(db.execute).bind(db);
      let response = await execute(
        `p'[INSERT INTO TB_MENUS(id, menu_id, menu_level, menu_name, parent_menu_id, menu_groupings, icon, color, type_code, file_name, menu_url, menu_permitted, bank_permission, bank_type,authority_code) VALUES (
         '${new Date().getTime()}',
         '${menu_id}', 
         '${menu_level}', 
         '${menu_name}', 
         '${parent_menu_id}', 
         '${menu_groupings}', 
         '${icon}', 
         '${color}',
         '${type_code}',
         '${file_name}',
         '${menu_url}',
         '${menu_permitted}',
         '${bank_permission}',
         '${authority_code}' )]'`
      );

      if (response) {
        res.send([
          {
            responseCode: "000",
            responseMessage: "Sub Menu Has Been Added Successfully",
          },
        ]);
      }
    } finally {
      // conn.end();
    }
  };

  return (addSubMenuFunc = async(
    menu_id,
    menu_level,
    menu_name,
    parent_menu_id,
    menu_groupings,
    icon,
    color,
    type_code,
    file_name,
    menu_url,
    menu_permitted,
    bank_permission,
    bank_type,
    authority_code
  ));
});

// Add Menu Icon's API Endpoint - ORACLE
app.post("/api/add-menu-icon", uploadMenuIcon.single("file"), (req, res) => {
  // let addMenuIconAPI = require("./controllers/menus/add-menu-icon");

  let menu_id = req.body.menu_id;
  let menu_level = req.body.menu_level;
  let menu_name = req.body.menu_name;
  let parent_menu_id = req.body.parent_menu_id;
  let menu_groupings = req.body.menu_groupings;
  let icon = req.body.icon;
  let color = req.body.color;
  let type_code = req.body.type_code;
  let file_name = req.body.file_name;
  let menu_url = req.body.menu_url;
  let menu_permitted = req.body.menu_permitted;
  let bank_permission = req.body.bank_permission;
  bank_type = "Y";
  authority_code = 10;

  let addMenuIconFunc = async (
    menu_id,
    menu_level,
    menu_name,
    parent_menu_id,
    menu_groupings,
    icon,
    color,
    type_code,
    file_name,
    menu_url,
    menu_permitted,
    bank_permission,
    bank_type,
    authority_code
  ) => {
    try {
      const db = await oracledb.getConnection({
        user: DB_USER,
        password: DB_PASSWORD,
        connectString: DB_CONNECTION_STRING,
        timeout: DB_CONNECTION_TIMEOUT,
      });

      // node native promisify
      const execute = util.promisify(db.execute).bind(db);
      let response = await execute(
        `INSERT INTO TB_MENUS(id, menu_id, menu_level, menu_name, parent_menu_id, menu_groupings, icon, color, type_code, file_name, menu_url, menu_permitted, bank_permission,bank_type,authority_code) VALUES (
               '${new Date().getTime()}',
               '${menu_id}', 
               '${menu_level}', 
               '${menu_name}', 
               '${parent_menu_id}', 
               '${menu_groupings}', 
               '${icon}', 
               '${color}',
               '${type_code}',
               '${file_name}',
               '${menu_url}',
               '${menu_permitted}',
               '${bank_permission}',
               '${bank_type}',
               '${authority_code}' 
               )`
      );

      if (response) {
        res.send([
          {
            responseCode: "000",
            responseMessage: "Menu Icon Has Been Added Successfully",
          },
        ]);
      }
    } finally {
      // conn.end();
    }
  };

  return addMenuIconFunc(
    menu_id,
    menu_level,
    menu_name,
    parent_menu_id,
    menu_groupings,
    icon,
    color,
    type_code,
    file_name,
    menu_url,
    menu_permitted,
    bank_permission,
    bank_type,
    authority_code
  );
});

// Get Sub Menus By Parent Menu ID's API Endpoint - ORACLE
app.post("/api/get-sub-menus-by-parent-menu-id", (req, res) => {
  let parent_menu_id = req.body.parent_menu_id;

  let getSubMenusByParentMenuIDFunc = async (parent_menu_id) => {
    try {
      const db = await oracledb.getConnection({
        user: DB_USER,
        password: DB_PASSWORD,
        connectString: DB_CONNECTION_STRING,
        timeout: DB_CONNECTION_TIMEOUT,
      });

      const response = [];
      let arr0 = "";
      // node native promisify
      const execute = util.promisify(db.execute).bind(db);
      const data = await execute(
        `SELECT * FROM TB_MENUS WHERE menu_permitted = 'Y' AND bank_permission = 'Y' AND parent_menu_id =
          '${parent_menu_id}'
          ORDER BY menu_groupings ASC`
      );

      if (data) {
        for (let i = 0; i < data.rows.length; i++) {
          for (let x = 0; x < data.metaData.length; x++) {
            arr0 +=
              '"' +
              [data.metaData[x].name.toLowerCase()] +
              '" : "' +
              data.rows[i][x] +
              '",';
          }

          response.push(
            JSON.parse(
              "{" +
                arr0.replace(/(\r\n|\n|\r)/gm, "").replace(/,\s*$/, "") +
                "}"
            )
          );
        }

        res.send(response);
      } else {
        res.send("Something went wrong... Nothing was returned!!");
      }
    } finally {
      // conn.end();
    }
  };

  getSubMenusByParentMenuIDFunc(parent_menu_id);
});

// Get English Locales API Endpoint - ORACLE
app.get("/api/get-english-locales", (req, res) => {
  let getEnglishLocalesAPI = async () => {
    try {
      const db = await oracledb.getConnection({
        user: DB_USER,
        password: DB_PASSWORD,
        connectString: DB_CONNECTION_STRING,
        timeout: DB_CONNECTION_TIMEOUT,
      });

      // node native promisify
      const execute = util.promisify(db.execute).bind(db);

      // const result = await execute(
      //   `SELECT lb.lable as lable, lng.text as lang_en FROM tb_languages as lng JOIN tb_labels as lb ON lb.id = lng.lable_id WHERE lng.language = "en" AND (lb.status = 1 AND lng.status = 1)`
      // );

      const result1 = await execute(`SELECT * FROM tb_languages`);
      const result2 = await execute(`SELECT * FROM tb_labels`);

      if (result1 && result2) {
        const result = [];
        result1.rows.map((i) => {
          result2.rows.map((a) => {
            if (i[2] === "en" && a[2] === 1 && i[4] === 1) {
              result.push({ label: a[1], lang_en: i[3] });
            }
          });
        });
        // return result;

        for (let i = 0; i < result.length; i++) {
          const label = result[i].label;
          const lang_en = result[i].lang_en;

          response.push({
            [label]: lang_en,
          });
        }

        return response;
      } else {
        return "Something went wrong... Nothing was returned!!";
      }
    } finally {
      // conn.end();
    }
  };

  return getEnglishLocalesAPI();
});

// Get French Locales API Endpoint - ORACLE
app.get("/api/get-french-locales", (req, res) => {
  let getFrenchLocalesAPI = async () => {
    try {
      const db = await oracledb.getConnection({
        user: DB_USER,
        password: DB_PASSWORD,
        connectString: DB_CONNECTION_STRING,
        timeout: DB_CONNECTION_TIMEOUT,
      });

      // node native promisify
      const execute = util.promisify(db.execute).bind(db);
      // const result = await execute(
      //   'SELECT lb.lable as lable, lng.text as lang_fr FROM tb_languages as lng JOIN tb_lables as lb ON lb.id = lng.lable_id WHERE lng.language = "fr" AND (lb.status = 1 AND lng.status = 1)'
      // );

      const result1 = await execute(`SELECT * FROM tb_languages`);
      const result2 = await execute(`SELECT * FROM tb_labels`);

      if (result1 && result2) {
        // return result1;
        const result = [];
        result1.rows.map((i) => {
          result2.rows.map((a) => {
            if (i[2] === "fr" && a[2] === 1 && i[4] === 1) {
              result.push({ label: a[1], lang_fr: i[3] });
            }
          });
        });

        for (let i = 0; i < result.length; i++) {
          const label = result[i].label;
          const lang_fr = result[i].lang_fr;

          response.push({
            [label]: lang_fr,
          });
        }

        return response;
      } else {
        return "Something went wrong... Nothing was returned!!";
      }
    } finally {
      // conn.end();
    }
  };

  return getFrenchLocalesAPI();
});

// Get Spanish Locales API Endpoint - ORACLE
app.get("/api/get-spanish-locales", (req, res) => {
  let getEnglishLocalesAPI = async () => {
    try {
      const db = await oracledb.getConnection({
        user: DB_USER,
        password: DB_PASSWORD,
        connectString: DB_CONNECTION_STRING,
        timeout: DB_CONNECTION_TIMEOUT,
      });

      // node native promisify
      const execute = util.promisify(db.execute).bind(db);

      // const result = await execute(
      //   `SELECT lb.lable as lable, lng.text as lang_en FROM tb_languages as lng JOIN tb_labels as lb ON lb.id = lng.lable_id WHERE lng.language = "en" AND (lb.status = 1 AND lng.status = 1)`
      // );

      const result1 = await execute(`SELECT * FROM tb_languages`);
      const result2 = await execute(`SELECT * FROM tb_labels`);

      if (result1 && result2) {
        const result = [];
        result1.rows.map((i) => {
          result2.rows.map((a) => {
            if (i[2] === "en" && a[2] === 1 && i[4] === 1) {
              result.push({ label: a[1], lang_en: i[3] });
            }
          });
        });
        // return result;

        for (let i = 0; i < result.length; i++) {
          const label = result[i].label;
          const lang_en = result[i].lang_en;

          response.push({
            [label]: lang_en,
          });
        }

        res.send(response);
      } else {
        res.send("Something went wrong... Nothing was returned!!");
      }
    } finally {
      // conn.end();
    }
  };

  return getEnglishLocalesAPI();
});

// Get Custom Menu Icon Positions API Endpoint - ORACLE
app.post("/api/get-custom-menu-icon-positions", (req, res) => {
  let user_id = req.body.user_id;

  let getCustomMenuIconPositionsFunc = async (user_id) => {
    try {
      const db = await oracledb.getConnection({
        user: DB_USER,
        password: DB_PASSWORD,
        connectString: DB_CONNECTION_STRING,
        timeout: DB_CONNECTION_TIMEOUT,
      });

      const response = [];
      let arr0 = "";
      // node native promisify
      const execute = util.promisify(db.execute).bind(db);
      const data = await execute(
        `SELECT icon_positions FROM tb_custom_icon_positions WHERE user_id=
          '${user_id}'`
      );

      if (data) {
        for (let i = 0; i < data.rows.length; i++) {
          for (let x = 0; x < data.metaData.length; x++) {
            arr0 +=
              '"' +
              [data.metaData[x].name.toLowerCase()] +
              '" : "' +
              data.rows[i][x] +
              '",';
          }

          response.push(
            JSON.parse(
              "{" +
                arr0.replace(/(\r\n|\n|\r)/gm, "").replace(/,\s*$/, "") +
                "}"
            )
          );
        }

        res.send(response);
      } else {
        res.send("Something went wrong... Nothing was returned!!");
      }
    } finally {
      // conn.end();
    }
  };

  return getCustomMenuIconPositionsFunc(user_id);
});

// Store Custom Menu Icon Positions API Endpoint - ORACLE
app.post("/api/store-custom-menu-icon-positions", (req, res) => {
  let user_id = req.body.user_id;
  let icon_path = req.body.icon_path;
  let icon_positions = req.body.icon_positions;

  let storeCustomMenuIconPositionsFunc = async (
    user_id,
    icon_path,
    icon_positions
  ) => {
    try {
      const db = await oracledb.getConnection({
        user: DB_USER,
        password: DB_PASSWORD,
        connectString: DB_CONNECTION_STRING,
        timeout: DB_CONNECTION_TIMEOUT,
      });
      const execute = util.promisify(db.execute).bind(db);

      const rows = await execute(
        `SELECT * FROM tb_custom_icon_positions WHERE icon_path =
          '${icon_path}'
          `
      );

      if (rows.length > 0) {
        const rows = await execute(
          `UPDATE tb_custom_icon_positions SET icon_positions =
            '${icon_positions}' WHERE icon_path = 
            '${icon_path}'
            `
        );

        if (rows.length > 0) {
          res.send("Menu Icon Position Updated Successfully");
        }
      } else {
        const rows = await execute(
          `INSERT INTO tb_custom_icon_positions (user_id, icon_path, icon_positions) VALUES (
            '${user_id}',
            '${icon_path}',
            '${icon_positions}'
            )`
        );

        if (rows.length > 0) {
          res.send("Menu Icon Position Stored Successfully");
        }
      }

      res.send(response);
    } finally {
      // conn.end();
    }
  };

  return storeCustomMenuIconPositionsFunc(user_id, icon_path, icon_positions);
});

// Get User Device Info API Endpoint - ORACLE
app.post("/api/get-user-device-info", (req, res) => {
  let user_id = req.body.user_id;

  let getUserDeviceInfoFunc = async (user_id) => {
    try {
      const db = await oracledb.getConnection({
        user: DB_USER,
        password: DB_PASSWORD,
        connectString: DB_CONNECTION_STRING,
        timeout: DB_CONNECTION_TIMEOUT,
      });

      const response = [];
      let arr0 = "";
      // node native promisify
      const execute = util.promisify(db.execute).bind(db);
      const data = await execute(
        `SELECT * FROM TB_USER_DEVICE_INFO WHERE user_id = '${user_id}' ORDER BY last_login DESC OFFSET 1 ROWS FETCH NEXT 1 ROWS ONLY`
      );

      if (data) {
        for (let i = 0; i < data.rows.length; i++) {
          for (let x = 0; x < data.metaData.length; x++) {
            arr0 +=
              '"' +
              [data.metaData[x].name.toLowerCase()] +
              '" : "' +
              data.rows[i][x] +
              '",';
          }

          response.push(
            JSON.parse(
              "{" +
                arr0.replace(/(\r\n|\n|\r)/gm, "").replace(/,\s*$/, "") +
                "}"
            )
          );
        }

        res.send(response);
      } else {
        res.send("Something went wrong... Nothing was returned!!");
      }
    } finally {
      // conn.end();
    }
  };

  return getUserDeviceInfoFunc(user_id);
});

// Get User's Last Login Details - Endpoint
app.post("/api/get-last-login-details", (req, res) => {
  let user_id = req.body.user_id;

  let getLastLoginDetails = async (user_id) => {
    try {
      const db = await oracledb.getConnection({
        user: DB_USER,
        password: DB_PASSWORD,
        connectString: DB_CONNECTION_STRING,
        timeout: DB_CONNECTION_TIMEOUT,
      });

      const response = [];
      let arr0 = "";
      // node native promisify
      const execute = util.promisify(db.execute).bind(db);
      const data = await execute(
        `SELECT last_login, browser, ip_address FROM TB_USER_DEVICE_INFO WHERE user_id = '${user_id}' ORDER BY last_login DESC OFFSET 1 ROWS FETCH NEXT 1 ROWS ONLY`
      );

      if (data) {
        for (let i = 0; i < data.rows.length; i++) {
          for (let x = 0; x < data.metaData.length; x++) {
            arr0 +=
              '"' +
              [data.metaData[x].name.toLowerCase()] +
              '" : "' +
              data.rows[i][x] +
              '",';
          }

          response.push(
            JSON.parse(
              "{" +
                arr0.replace(/(\r\n|\n|\r)/gm, "").replace(/,\s*$/, "") +
                "}"
            )
          );
        }

        res.send(response);
      } else {
        res.send("Something went wrong... Nothing was returned!!");
      }
    } finally {
      // conn.end();
    }
  };

  return getLastLoginDetails(user_id);
});

// Store User Device Info API Endpoint - ORACLE
app.post("/api/store-user-device-info", (req, res) => {
  let user_id = req.body.user_id;
  let user_agent = req.headers["user-agent"];

  let storeUserDeviceInfoFunc = async (user_id, user_agent) => {
    const db = await oracledb.getConnection({
      user: DB_USER,
      password: DB_PASSWORD,
      connectString: DB_CONNECTION_STRING,
      timeout: DB_CONNECTION_TIMEOUT,
    });
    const execute = util.promisify(db.execute).bind(db);

    try {
      // Get IP Address
      let ipAddress = getIPAddress().address;

      // Get Mac Address
      let macAddress = getIPAddress().mac;

      // Get Browser
      let browser = null;
      if (/firefox/i.test(user_agent)) browser = "Mozilla Firefox";
      else if (/chrome/i.test(user_agent)) browser = "Google Chrome";
      else if (/safari/i.test(user_agent)) browser = "Safari";
      else if (/msie/i.test(user_agent)) browser = "Microsoft Edge";
      else browser = user_agent;

      // async function getUsersGeolocation() {
      //   const response = await fetch(
      //     `http://controllers.ipstack.com/${ipAddress}?access_key=${IPSTACK_API_KEY}`
      //   );
      //   const json = await response.json();
      //   return json;
      // }

      // let location = getUsersGeolocation();

      let location;

      // location = location.region_name ? location.region_name : "UNKNOWN";

      location = "UNKNOWN";

      async function insertUserDeviceInfo() {
        const response = await execute(
          `INSERT INTO TB_USER_DEVICE_INFO (id, user_id, ip_address, mac_address, browser, location) VALUES (
            '${new Date().getTime()}',
            '${user_id}',
            '${ipAddress}',
            '${macAddress}',
            '${browser}',
            '${location}'
            )`
        );

        if (response) {
          res.send("Device Details Has Been Stored Successfully");
        }
      }

      return insertUserDeviceInfo();

      // })();
    } finally {
      // conn.end();
    }
  };

  return storeUserDeviceInfoFunc(user_id, user_agent);
});

// Get Account Summary - ORACLE
app.post("/api/get-account-summary", (req, res) => {
  let account_number = req.body.account_number;
  let transType = req.body.transType;

  let getAccountSummary = async (account_number) => {
    try {
      const db = await oracledb.getConnection({
        user: DB_USER,
        password: DB_PASSWORD,
        connectString: DB_CONNECTION_STRING,
        timeout: DB_CONNECTION_TIMEOUT,
      });

      const response = [];
      let arr0 = "";
      let pass = "";
      // node native promisify
      const execute = util.promisify(db.execute).bind(db);

      if (transType === "CAW") {
        const data1 =
          await execute(`SELECT actual_msg from vw_acct_message_new WHERE AC_NO =
          '${account_number}'`);
        if (data1.rows?.length > 0) {
          pass = data1?.rows;
        }
      } else if (transType === "CADD") {
        const data1 =
          await execute(`SELECT note from acct_message_new WHERE AC_NO =
          '${account_number}'`);
        if (data1.rows?.length > 0) {
          pass = data1?.rows;
        }
      }

      const data =
        await execute(`SELECT  GET_CUSTOMERNO(gl.Acct_link) as customer_no, Account_Name, Ledger_Balance, POST_BOOKBAL,Account_Limit, Uncleared_Balance, Availabe_Balance, status_indicator,Account_Status, cust_type, Account_Branch,Currency,get_currcode(Currency) as currency_code,
    Product,
    gl.DATE_OPENED,
    gl.DATE_OF_LAST_ACTIVITY
FROM
    Vw_acct_bal_enq be
LEFT JOIN
    G_LEDGER gl ON be.ACCT_LINK = gl.ACCT_LINK
WHERE
    be.ACCT_LINK= '${account_number}'`);
      // return console.log(data2)

      if (data) {
        for (let i = 0; i < data.rows.length; i++) {
          for (let x = 0; x < data.metaData.length; x++) {
            arr0 +=
              '"' +
              [data.metaData[x].name.toLowerCase()] +
              '" : "' +
              data.rows[i][x] +
              '",';
          }

          response.push(
            JSON.parse(
              "{" +
                arr0.replace(/(\r\n|\n|\r)/gm, "").replace(/,\s*$/, "") +
                "}"
            )
          );
        }

        // return res.send(data.rows);

        res.send({ message: pass, summary: response });
      } else {
        res.send("Something went wrong... Nothing was returned!!");
      }
    } finally {
      // conn.end();
    }
  };

  return getAccountSummary(account_number);
});

// VAULT ACTIVITIES BEGIN -------------------------------

app.post("/api/vault-activities", async (req, res) => {
  let branchCode = req.body.branchCode;
  const {
    lov,
    username,
    isoCode,
    fetchTill,
    key,
    procedureType,
    batchNumber,
    type,
    formName,
    currency_code,
    branch,
    date,
    subType,
  } = req.body;

  try {
    const db = await oracledb.getConnection({
      user: DB_USER,
      password: DB_PASSWORD,
      connectString: DB_CONNECTION_STRING,
      timeout: DB_CONNECTION_TIMEOUT,
    });

    const execute = util.promisify(db.execute).bind(db);

    if (type === "Pending Cash In") {
      if (procedureType === "accept") {
        if (batchNumber && branch) {
          const data = await db.execute(
            `BEGIN prc_cash_to_vault(:branch, :batchNumber, :mesg); END;`,
            {
              branch: branch,
              batchNumber: batchNumber,
              mesg: {
                type: oracledb.STRING,
                dir: oracledb.BIND_OUT,
              },
            },
            function (err, result) {
              console.log("Resolved");
              if (err) {
                // throw err;
                // res.send(err);
                return res.status(500).send(err, "An error occurred");
              }
              if (result) {
                return res.send(result.outBinds.mesg);
              }

              return;
              // if (err) {
              //   // throw err;
              //   res.status(500).send("An error occurred.");
              // }
              // if (result && result.outBinds && result.outBinds.mesg) {
              //   const message = result.outBinds.mesg;
              //   res.send(message);
              // }
            }
          );
        }

        return;
      }
      if (procedureType === "reject") {
        if (batchNumber) {
          const data = await db.execute(
            ` delete from vault_trans_temp
          where batch_no = :batchNumber`,
            {
              batchNumber: batchNumber,
            },
            function (err, result) {
              if (err) {
                // throw err;
                // res.send(err);
                // console.log(err);
                return res.status(500).send("Something went wrong");
              }
              if (result) {
                return res.send("Cash-in rejected successfully");
              }
            }
          );
        }
        return;
      }

      // Receive button that opens cash to vault form
      if (formName === "Cash To Vault Receive") {
        if (batchNumber) {
          const data = await execute(
            `SELECT ACCT_LINK, GET_ACCTDESC(ACCT_LINK) AS ACCOUNT_DESC,LOCAL_EQUIVALENT_DB, CURRENCY_CODE, LOCAL_EQUIVALENT_CR, DOCUMENT_REF , CONTRA_ACCOUNT, AMOUNT, USER_NAME, GET_DENO_DESC(AMOUNT,CURRENCY_CODE) AS DENOMINATION_DESC,
             TRANSACTION_DETAILS FROM AC_TRANS WHERE BATCH_NO = :BATCH_NO_V `,
            { BATCH_NO_V: batchNumber }
          );
          if (data) {
            let arr0 = "";
            let arr = [];

            for (let i = 0; i < data.rows.length; i++) {
              for (let x = 0; x < data.metaData.length; x++) {
                arr0 +=
                  '"' +
                  [data.metaData[x].name.toLowerCase()] +
                  '" : "' +
                  data.rows[i][x] +
                  '",';
              }

              arr.push(JSON.parse("{" + arr0.replace(/,\s*$/, "") + "}"));
            }
            return res.send(arr);
          }
          // return res.send(data.rows);
        }
      }

      if (batchNumber) {
        const data = await execute(
          `SELECT DENOMINATION_CODE , GET_DENO_DESC(DENOMINATION_CODE,:CURRENCY_V) AS DENOMINATION_DESC, AMOUNT, QUANTITY  FROM VW_VAULT_TRANS_TEMP WHERE 
          CURRENCY_CODE = :CURRENCY_V AND BATCH_NO = :BATCH_NO_V and COLLECTION_FLAG='O'
          `,
          { CURRENCY_V: currency_code, BATCH_NO_V: batchNumber }
        );

        return res.send(data.rows);

        // const arr = [];
        // if (data.rows) {
        //   for (let i = 0; i < data.rows.length; i++) {
        //     arr.push({
        //       requested_by: data.rows[i][0],
        //       amount: data.rows[i][1],

        //       batch_no: data.rows[i][2],
        //     });
        //   }
        // }
      }

      const data = await execute(
        `SELECT FULLNAME,AMOUNT, BATCH_NO FROM VW_PENDINTILL1 WHERE SENT_TO = :username AND CURRENCY_CODE=GET_CURRCODE(:currency_code)
        AND POSTING_DATE = GET_POSTINGDATE ORDER BY POSTING_DATE DESC`,
        //  AND POSTING_DATE = GET_POSTINGDATE()`,
        { username, currency_code: currency_code?.split("*")[0].trim() }
      );

      console.log({ currency_code, username });
      const arr = [];
      const arr1 = [];
      if (data.rows) {
        for (let i = 0; i < data.rows.length; i++) {
          arr.push([data.rows[i][0], data.rows[i][1], data.rows[i][2]]);
        }
      }

      const data1 = await execute(
        `SELECT GET_BRANCHDESC(INTER_BRANCH ) AS BRANCH_DESC, DOCUMENT_REF, DEBIT, DECODE(FLAG,'Y','Mgr Approved','N','Pending Mgr Approval') AS STATUS ,BATCH_NO FROM VW_SPECIE WHERE acct_link  IN (SELECT ACCT_LINK FROM SPECI_ACCT_VW)
        AND CUR = :currency_code
        AND INTER_BRANCH = :branch AND USER_NAME!='BANKOWNER'
        AND POSTING_DATE = NVL(:dat ,GET_POSTINGDATE()) ORDER BY POSTING_DATE DESC`,
        { currency_code, dat: date, branch }
      );

      if (data1.rows) {
        for (let i = 0; i < data1.rows.length; i++) {
          arr1.push([
            data1.rows[i][0],
            data1.rows[i][1],
            data1.rows[i][2],
            data1.rows[i][3],
            data1.rows[i][4],
          ]);
        }
      }

      return res.send({ teller: arr, specie: arr1 });
    }

    if (type === "Pending Cash Out") {
      if (batchNumber && subType == "rejectTellerRequest") {
        const data = await execute(
          `UPDATE TB_cash_request_book
SET FLAG = 'R'
where batch_no = :batchNumber
and flag = 'N'
          `,
          { batchNumber }
        );

        return res.send({
          success: true,
          data: null,
          message: "Transfer rejected successfully",
        });
      } else if (batchNumber && subType == "grantTellerRequest") {
      }

      const data = await execute(
        `SELECT teller_id , amount , batch_no  FROM CRQS_VW Where REQUEST_FROM = :username AND ISO_CODE = :currency_code AND REQUEST_DATE = GET_POSTINGDATE() and flag = 'N' `,
        { username, currency_code: currency_code?.split("*")[0] }
      );

      const arr = [];
      // if (data.rows) {
      //   for (let i = 0; i < data.rows.length; i++) {
      //     arr.push([data.rows[i][0], data.rows[i][1], data.rows[i][2]]);
      //   }
      // }
      console.log(data.rows, currency_code);
      return res.send(data?.rows);
    }

    if (type === "Ungranted Cash Request") {
      if (batchNumber) {
        const data = await con.execute(
          `SELECT TB_TELLER_DENOMINATION.denomination_code as denomination , CURR_DENOMINATIONS.DENOMINATION_DESCRP , TB_TELLER_DENOMINATION.quantity FROM TB_TELLER_DENOMINATION JOIN CURR_DENOMINATIONS ON CURR_DENOMINATIONS.CURRENCY_CODE = '010' WHERE TB_TELLER_DENOMINATION.BATCH_NO = :batchNumber AND TB_TELLER_DENOMINATION.DENOMINATION_CODE = CURR_DENOMINATIONS.DENOMINATION_CODE
          `,
          { batchNumber }
        );

        return res.send(data.rows);
      }
      const data = await con.execute(
        `SELECT REQUEST_FROM , AMOUNT , BATCH_NO FROM CRQS_VW Where TELLER_ID =:username AND CURRENCY = :currency_code AND REQUEST_DATE = GET_POSTINGDATE() AND FLAG = 'N'`,
        { username, currency_code }
      );

      const arr = [];
      if (data.rows) {
        for (let i = 0; i < data.rows.length; i++) {
          arr.push([data.rows[i][0], data.rows[i][1], data.rows[i][2]]);
        }
      }

      return res.send(arr);
    }

    if (type === "Cash Received") {
      if (batchNumber) {
        const data = await execute(
          `SELECT VW_VAULT_TRANS_ALL.denomination_code as denomination , CURR_DENOMINATIONS.DENOMINATION_DESCRP,VW_VAULT_TRANS_ALL.amount , VW_VAULT_TRANS_ALL.quantity  FROM VW_VAULT_TRANS_ALL JOIN CURR_DENOMINATIONS ON VW_VAULT_TRANS_ALL.CURRENCY_CODE = CURR_DENOMINATIONS.CURRENCY_CODE WHERE VW_VAULT_TRANS_ALL.COLLECTION_FLAG = 'I' AND VW_VAULT_TRANS_ALL.BATCH_NO = :batchNumber AND VW_VAULT_TRANS_ALL.DENOMINATION_CODE = CURR_DENOMINATIONS.DENOMINATION_CODE
          
          `,
          { batchNumber }
        );

        // const arr = [];
        // if (data.rows) {
        //   for (let i = 0; i < data.rows.length; i++) {
        //     arr.push({
        //       requested_by: data.rows[i][0],
        //       amount: data.rows[i][1],

        //       batch_no: data.rows[i][2],
        //     });
        //   }
        // }

        return res.send(data.rows);
      }
      const data = await execute(
        //         `SELECT * FROM VW_TEL_TRANSFER WHERE
        //         RECIEVER = :username AND CURRENCY_CODE = :currency_code
        // AND POSTING_DATE = GET_POSTINGDATE
        //         `,
        `SELECT sender , posting_date , amount , batch_no FROM VW_TEL_TRANSFER  Where RECIEVER = :username AND CURRENCY_CODE = :currency_code AND POSTING_DATE = GET_POSTINGDATE()`,
        { username, currency_code: currency_code?.split("*")[0] }
      );

      // console.log({ data, d: req.body });
      const arr = [];
      if (data.rows) {
        for (let i = 0; i < data.rows.length; i++) {
          arr.push([
            data.rows[i][0],
            new Date(data.rows[i][1]).toLocaleDateString("en-GB", {
              day: "2-digit",
              month: "short",
              year: "numeric",
            }),
            data.rows[i][2],
            data.rows[i][3],
          ]);
          // arr.push({
          //   sender: data.rows[i][0],
          //   transfer_date: new Date(data.rows[i][1]).toLocaleDateString(
          //     "en-GB",
          //     {
          //       day: "2-digit",
          //       month: "short",
          //       year: "numeric",
          //     }
          //   ),

          //   amount: data.rows[i][2],
          //   batchNumber: data.rows[i][3],
          // });
        }
      }

      return res.send(arr);
    }

    //

    // SENDER = :global.username AND CURRENCY_CODE =GET_ISO_CODE(:DUMMY.CURRENCY_CODE)
    // AND POSTING_DATE = GET_POSTINGDATE
    if (type === "Cash Sent") {
      if (batchNumber) {
        const data = await execute(
          `SELECT VW_VAULT_TRANS_TEMP.denomination_code as denomination , CURR_DENOMINATIONS.DENOMINATION_DESCRP, VW_VAULT_TRANS_TEMP.amount , VW_VAULT_TRANS_TEMP.quantity  FROM VW_VAULT_TRANS_TEMP JOIN CURR_DENOMINATIONS ON VW_VAULT_TRANS_TEMP.CURRENCY_CODE = CURR_DENOMINATIONS.CURRENCY_CODE WHERE VW_VAULT_TRANS_TEMP.BATCH_NO = :batchNumber AND VW_VAULT_TRANS_TEMP.DENOMINATION_CODE = CURR_DENOMINATIONS.DENOMINATION_CODE
          `,
          { batchNumber }
        );

        return res.send(data.rows);
      }
      const data = await execute(
        `SELECT teller_id  FROM CQRS_VW Where REQUEST_FROM = :username AND CURRENCY_CODE = GET_ISO_CODE(:currency_code) AND POSTING_DATE = GET_POSTINGDATE() and flag = 'N' `,
        { username, currency_code }
      );

      const arr = [];
      if (data.rows) {
        for (let i = 0; i < data.rows.length; i++) {
          arr.push([
            data.rows[i][0],
            // new Date(data.rows[i][1]).toLocaleDateString("en-GB", {
            //   day: "2-digit",
            //   month: "short",
            //   year: "numeric",
            // }),
            data.rows[i][2],
            data.rows[i][3],
          ]);
        }
      }
      console.log({ data });
      return res.send(data?.rows);
    }

    if (lov) {
      const data = await execute(`
    SELECT ACCT_LINK,CLOSING_CASH_BAL,
    CURRENT_CASH_BAL, DESCRIPTION, ISO_CODE 
    FROM VW_VAULT_ACTIVITY1 
    WHERE BRANCH_CODE = '${branchCode}'
    `);
      const response = [];

      data.rows?.map((i) => {
        response.push({
          label: `${i[0]} - ${i[3]} `,
          value: `${i[4]}*${i[2]}*${i[1]}`,
        });
      });
      res.send(response);
    }

    //     VW_VAULT_ACTIVITY2
    // user_name = :global.username and branch_code = :global.bra and iso = :one.iso_code

    if (fetchTill) {
      const data = await execute(`
      SELECT t1.DENOMINATION_CODE , t1.DENOMINATION_DESCRP , t1.AMT , t1.QUANTITY , t2.AMT , t2.QUANTITY 
      FROM VW_VAULT_BASE t1 JOIN VW_VAULT_CURRBAL t2 ON t1.DENOMINATION_CODE = t2.DENOMINATION_CODE
      WHERE t1.USER_NAME='${username}' AND t1.ISO_CODE='${isoCode}' and t2.USER_NAME='${username}' AND t2.ISO_CODE='${isoCode}'
    `);

      const data2 = await execute(`
      SELECT cash_pending_in , cash_pending_out , recieved , sent FROM VW_VAULT_ACTIVITY2
      WHERE USER_NAME ='${username}' AND ISO ='${isoCode}' AND branch_code='${branchCode}'
    `);

      //   const data3 = await execute(`
      //   SELECT * FROM VW_VAULT_CURRBAL
      //   WHERE USER_NAME ='${username}' AND ISO ='${isoCode}' AND branch_code='${branchCode}'
      // `);

      const response = [];
      data.rows.map((i) => {
        response.push({
          denomination_code: i[0],
          denomination_desc: i[1],
          amount: i[2],
          denomination_qty: i[3],
          curr_amt: i[4],
          curr_qty: i[5],
        });
      });
      res.send({ denominations: response, till: data2.rows[0] });
    }

    if (key === "Cash Limit") {
      const data = await execute(`
      select curr_iso , Max_online_cr , min_off_dr ,max_floor_lim , min_floor_lim from VW_TELLER_LIMIT_MAIN where teller_name = GET_TELL_ROLE('${username}')
      `);

      const data1 = await execute(`
      select curr_iso , Max_online_cr , min_off_dr ,max_floor_lim , min_floor_lim from VW_TELLER_LIMIT_EXCEP where teller_name = '${username}'
      `);

      res.send({ main: data.rows, exceptional: data1.rows });
    } else if (key === "transJournalVaultLov") {
      const data = await execute(`
      select ACTUAL_CODE, DESCRIPTION
      from code_desc
     where code_type = 'TR'
     AND STATUS = 'Y'
     union
     select null ACTUAL_CODE, 'ALL TRANSACTIONS ' DESCRIPTION
      from dual
      `);
      const arr = [];
      if (data.rows) {
        for (let i = 0; i < data.rows.length; i++) {
          const description = data.rows[i][1];
          const actual_code = data.rows[i][0];

          arr.push({
            label:
              (actual_code ? actual_code : "") +
              (actual_code ? " - " : "") +
              description,
            value: actual_code ? actual_code : "All",
            // short_descrp: short_descrp,
          });
        }
      }
      res.send(arr);
    }
  } catch (err) {
    console.log(err);
    res.status(500).send(`${err.toString()}`);
  } finally {
    // db.close()
  }
});

// VAULT ACTIVITIES END  -----------------------------

app.post("/api/get-error-message", (req, res) => {
  // return res.send("Ghana");
  const { code } = req.body;
  let getBranch = async () => {
    try {
      const db = await oracledb.getConnection({
        user: DB_USER,
        password: DB_PASSWORD,
        connectString: DB_CONNECTION_STRING,
        timeout: DB_CONNECTION_TIMEOUT,
      });
      const execute = util.promisify(db.execute).bind(db);

      // return res.send("ghamna");
      // res.send(con);
      const data = await execute(`select GET_ERRORCODE('${code}') from dual`);
      if (data) {
        res.send(data.rows[0][0]);
      } else {
        res.send("Something went wrong... Nothing was returned!!");
      }
    } catch (err) {
      console.log(err);
      res.send("err");
    }
  };
  getBranch();
});

app.post("/api/cash-request-from-vault", async (req, res) => {
  const { key, username } = req.body;

  try {
    const db = await oracledb.getConnection({
      user: DB_USER,
      password: DB_PASSWORD,
      connectString: DB_CONNECTION_STRING,
      timeout: DB_CONNECTION_TIMEOUT,
    });

    const execute = util.promisify(db.execute).bind(db);
    if (key === "balance before") {
      const data = await execute(
        `select GET_ISO_CODE(CURRENCY_CODE), SB from TELLER_V_BALG_new WHERE VAULT_ACCOUNT = '${username}'`
      );
      if (data) {
        res.send(data.rows);
      }
    }

    if (key === "ungranted cash request") {
      const data = await execute(
        `select BATCH_NO , AMOUNT ,  GET_CURRDESC(CURRENCY) from CRQS_VW where TELLER_ID ='${username}' AND FLAG = 'N'`
      );
      if (data) {
        res.send(data.rows);
      }
    }
    if (key === "rejected cash request") {
      const data = await execute(
        `SELECT BATCH_NO, AMOUNT, GET_CURRDESC(CURRENCY) AS CURRENCY  FROM CRQS_VW WHERE TELLER_ID ='${username}' AND FLAG = 'R'`
      );
      if (data) {
        res.send(data.rows);
      }
    }

    // return res.send("ghamna");
    // res.send(con);
  } catch (err) {
    console.log(err);
    res.send("An error occurred");
  }
});

app.post("/api/teller-closure", async (req, res) => {
  const { key, username, user_v, bra_v, formcode } = req.body;
  let db;
  try {
    db = await oracledb.getConnection({
      user: DB_USER,
      password: DB_PASSWORD,
      connectString: DB_CONNECTION_STRING,
      timeout: DB_CONNECTION_TIMEOUT,
    });

    // const execute = util.promisify(db.execute).bind(db);
    if (key === "denomination transactions") {
      const data = await db.execute(
        `Select a.iso_code, a.sent_to_vault, a.recieved_from_vault, a.total_payment, a.total_receipt, a.diff, b.net_position from MANUAL_BAL_CHECK a  join TELLER_CLOSURE_VIEWW b on a.teller = b.user_name where a.teller='${username}'`
      );
      if (data) {
        res.send(data.rows);
      }
    }

    if (key === "account transactions") {
      const data = await db.execute(
        `select GET_ISO_CODE(currency_code) currency, user_name, total_payment_lc, total_receipt_lc, net_position from TELLER_CLOSURE_VIEWW where user_name='${username}'
        `
      );
      // res.send("home")
      if (data) {
        res.send(data.rows);
      }
    }

    if (key === "trans details") {
      const data1 = await db.execute(
        `select credit, debit from VW_INBALANCE_TRANS_cnt where user_name = '${username}'`
      );
      const data2 = await db.execute(`
      select credit, debit, diff from VW_INBALANCE_TRANS where user_name = '${username}'
      `);
      if (data1 && data2) {
        const combinedData = {
          data1: data1.rows,
          data2: data2.rows,
        };

        res.send(combinedData);
      }
    }

    if (key === "teller closure") {
      const data = await db.execute(
        `BEGIN pkg_cashtrx_rt.PRC_TELCLOSURE(:user_v, :bra_v, :formcode, :mesg); END;`,
        {
          user_v: user_v,
          bra_v: bra_v,
          formcode: formcode,
          mesg: {
            type: oracledb.STRING,
            dir: oracledb.BIND_OUT,
          },
        },
        function (err, result) {
          if (err) {
            // throw err;
            res.status(500).send("An error occurred.");
          }
          if (result && result.outBinds && result.outBinds.mesg) {
            const message = result.outBinds.mesg;
            res.send(message);
          }
        }
      );
    }
    if (key === "closure reset") {
      await db.execute(
        `BEGIN pkg_cashtrx_rt.prc_teltill_reset(:user_v, :bra_v,:msg);END;`,
        {
          user_v: user_v,
          bra_v: bra_v,
          msg: {
            type: oracledb.STRING,
            dir: oracledb.BIND_OUT,
          },
        },
        function (err, result) {
          if (err) {
            throw err;
          }
          if (result && result.outBinds && result.outBinds.msg) {
            const message = result.outBinds.msg;
            res.send(message);
          }
        }
      );
    }
  } catch (err) {
    res.send(err);
    // res.send("An error occurred");
  }
});

app.post("/api/loan-reschedule-payment", async (req, res) => {
  const { key, cust_no, principal_acct } = req.body;
  // AND ROWNUM <= 100
  let db;

  // return;
  try {
    db = await oracledb.getConnection({
      user: DB_USER,
      password: DB_PASSWORD,
      connectString: DB_CONNECTION_STRING,
      timeout: DB_CONNECTION_TIMEOUT,
    });

    if (key === "loanCustomers") {
      const data =
        await db.execute(`SELECT  X.CUSTOMER_NAME,X.CUSTOMER_NUMBER FROM CUSTOMER X
      WHERE EXISTS (SELECT 1 FROM VW_VALID_LOANS Y WHERE X.CUSTOMER_NUMBER = Y.CUSTOMER_NUMBER )`);
      if (data.rows) {
        const arr = [];

        for (let i = 0; i < data.rows.length; i++) {
          const description = data.rows[i][0];
          const actual_code = data.rows[i][1];
          // const short_descrp = data.rows[i][2];

          arr.push({
            label: `${actual_code} - ${description}`,
            value: actual_code,

            // short_descrp: short_descrp,
          });
        }

        return res.send(arr);
      } else {
        return res.send(err);
        console.log(err);
      }
    }
    if (key === "principaAccount") {
      const data =
        await db.execute(`SELECT DISTINCT X.PRINCIPAL_ACCOUNT,X.ACCOUNT_DESCRP, X.FACILITY_NO FROM VW_VALID_LOANS X
        WHERE X.CUSTOMER_NUMBER = '${cust_no}'
        ORDER BY X.FACILITY_NO`);
      if (data.rows) {
        const arr = [];

        for (let i = 0; i < data.rows.length; i++) {
          const description = data.rows[i][1];
          const actual_code = data.rows[i][0];
          // const short_descrp = data.rows[i][2];

          arr.push({
            label: `${actual_code} - ${description}`,
            value: actual_code,

            // short_descrp: short_descrp,
          });
        }

        return res.send(arr);
      } else {
        return res.send(err);
        console.log(err);
      }
    }
    if (key === "waiver") {
      const data =
        await db.execute(`SELECT ACTUAL_CODE,DESCRIPTION FROM CODE_DESC
      WHERE CODE_TYPE='LPW'
      AND CLASS_CODE = 'LP'
      AND STATUS='Y'`);
      if (data.rows) {
        const arr = [];

        for (let i = 0; i < data.rows.length; i++) {
          const description = data.rows[i][1];
          const actual_code = data.rows[i][0];
          // const short_descrp = data.rows[i][2];
          arr.push({
            label: `${actual_code} - ${description}`,
            value: actual_code,

            // short_descrp: short_descrp,
          });
        }

        return res.send(arr);
      } else {
        return res.send(err);
        console.log(err);
      }
    }
    if (key === "formDetails") {
      const data =
        await db.execute(` select legal_form, currency_code, type_of_acct, branch_code, customer_number,principal_account,  maintenance_fee_account, szloanapplnno,  interest_rate, effective_date,REPNT_PERIOD_MONTHS, last_repay_date,  od_interest_amount  int_amount,  shadow_balance_today, facility_amount, facility_no, COT_AMOUNT,description, od_intin_susp,pen_intin_susp, od_int_pastdue,od_accrued_int, GET_CLASSDESC(ACCT_CLASS) as acct_class_desc, ACCT_CLASS, get_avbal(maintenance_fee_account) as avbal_mfa, ARREARS_INT from LOAN_ENQ_VW where principal_account = '${principal_acct}'
      `);

      const response = [];
      let arr0 = "";

      if (data) {
        for (let i = 0; i < data.rows.length; i++) {
          for (let x = 0; x < data.metaData.length; x++) {
            arr0 +=
              '"' +
              [data.metaData[x].name.toLowerCase()] +
              '" : "' +
              data.rows[i][x] +
              '",';
          }

          response.push(
            JSON.parse(
              "{" +
                arr0.replace(/(\r\n|\n|\r)/gm, "").replace(/,\s*$/, "") +
                "}"
            )
          );
        }

        return res.send(response);
      } else {
        res.send("Something went wrong... Nothing was returned!!");
      }
    }
  } catch (e) {
    return res.send(e);
  }
});

app.post("/api/counter_cheque_req", async (req, res) => {
  const {
    key,
    formcode,
    accountNumber,
    chequeNumber,
    amount,
    batchNo,
    postedBy,
    terminalId,
    branch,
    terminal,
    approvedBy,
    approvedTerminal,
    approvedFlag,
    comment,
    approvedIp,
    requestedBy,
    send,
    scanDoc,
    currency,
  } = req.body;
  try {
    const connection = await oracledb.getConnection({
      user: DB_USER,
      password: DB_PASSWORD,
      connectString: DB_CONNECTION_STRING,
    });
    if (key === "validateCheque") {
      const getchequeno = await connection.execute(
        `select lpad(${chequeNumber},get_chequeno_length,'0') from dual`
      );
      const no = getchequeno.rows[0][0];
      const getcount = await connection.execute(
        `select count ('${accountNumber}') from tb_counter_cheque_rqt where cheque_no = '${no}'`
      );
      const count = getcount.rows[0][0];
      if (!parseInt(count) > 0) {
        res.send({
          responseCode: "000",
          responseMessage: no,
        });
      } else {
        const getErrorMess = await connection.execute(
          `select get_errorcode('07299') from dual`
        );
        const errorMessage = getErrorMess.rows[0][0];
        console.log(errorMessage);
        res.send({
          responseCode: "998",
          responseMessage: errorMessage,
        });
      }
    }
    if (key === "validateAmount") {
      const limit = await connection.execute(
        `select get_cheque_limit from dual`
      );

      const chequeLimt = limit.rows[0][0];

      if (parseFloat(amount) > chequeLimt) {
        const errorMessage = await connection.execute(
          `select GET_ERRORCODE('07296') from dual`
        );
        const responseMess = errorMessage.rows[0][0];
        res.send({
          responseCode: "998",
          responseMessage: responseMess,
        });
      } else {
        res.send({
          responseCode: "000",
          responseMessage: "Proceed with the transaction",
        });
      }
    }
    if (key === "postFee") {
      connection.execute(
        "BEGIN BANKOWNER.prc_counter_rqtfee(:acct_v,:amtv,:btch,:postedby_v,:cheqno,:terminal_v,:bra_v,:msg_v,:charge_out); END;",
        {
          acct_v: accountNumber,
          amtv: amount,
          btch: batchNo,
          postedby_v: postedBy,
          cheqno: chequeNumber,
          terminal_v: terminalId,
          bra_v: branch,
          msg_v: {
            type: oracledb.STRING,
            dir: oracledb.BIND_OUT,
            // maxSize: 400
          },
          charge_out: {
            type: oracledb.NUMBER,
            dir: oracledb.BIND_OUT,
          },
        },
        function (err, result) {
          if (err) {
            console.log(err);
          }
          if (result) {
            // console.log(result);
            // console.log(result.outBinds.msg_v + " message");
            // console.log(result.outBinds.charge_out + " charge_out");
            if (result.outBinds.msg_v === null) {
              res.send({
                responseCode: "000",
                responseMessage: "procced",
              });
            } else {
              res.send({
                responseCode: "998",
                responseMessage: result.outBinds.msg_v,
              });
            }
          }
        }
      );
    }
    if (key === "callprc") {
      // console.log(currency + "currr");
      let seq;
      let res1 = await connection.execute(`select seq1.nextval from dual`);

      seq = res1.rows[0][0];

      connection.execute(
        "BEGIN BANKOWNER.prc_counter_chq_req(:REQUISITION_NO_V, :ACCT_LINK_V, :POSTED_BY_v, :POSTING_TERMINAL_v, :CHEQUE_NO_v, :APPROVED_BY_v, :AMOUNT_v, :APPROVAL_TERMINAL_v, :APPROVAL_FLAG_v, :BRANCH_CODE_v, :COMMENTS_v, :POSTING_IP_v, :APPROVAL_IP_v, :REQUESTED_BY_v, :SEQ_NO_v, :SEND_v, :BATCH_NO_v, :SCANDOC_ID_v, :currency_v, :mess); END;",
        {
          REQUISITION_NO_V: batchNo,
          ACCT_LINK_V: accountNumber,
          POSTED_BY_v: postedBy,
          POSTING_TERMINAL_v: os.hostname(),
          CHEQUE_NO_v: chequeNumber,
          APPROVED_BY_v: approvedBy,
          AMOUNT_v: amount,
          APPROVAL_TERMINAL_v: approvedTerminal,
          APPROVAL_FLAG_v: approvedFlag,
          BRANCH_CODE_v: branch,
          COMMENTS_v: comment,
          POSTING_IP_v: terminalId,
          APPROVAL_IP_v: approvedIp,
          REQUESTED_BY_v: requestedBy,
          SEQ_NO_v: seq,
          SEND_v: send,
          BATCH_NO_v: batchNo,
          SCANDOC_ID_v: scanDoc,
          currency_v: currency,
          mess: {
            type: oracledb.STRING,
            dir: oracledb.BIND_OUT,
          },
        },
        function (err, result) {
          if (err) {
            console.log(err);
          }
          if (result.outBinds.mess.includes("successful")) {
            res.send({
              responseCode: "000",
              responseMessage: result.outBinds.mess,
            });
          } else {
            res.send({
              responseCode: "998",
              responseMessage: result.outBinds.mess,
            });
          }
        }
      );
    }
    if (key === "viewCharges") {
      console.log(batchNo);
      const querry = `
      select VOUCHER_NUMBER,DOCUMENT_REF,TRANSACTION_DETAILS,LOCAL_EQUIVALENT_DB amt from  vw_trans_preview where batch_no = '${batchNo}'
      `;
      const Result = await connection.execute(querry);
      // console.log(Result);
      const chargeResult = Result.rows.map((row) => [
        row[0],
        row[1],
        row[2],
        row[3],
      ]);
      console.log(chargeResult);
      res.send({
        responseCode: "000",
        responseMessage: "View Charges",
        data: chargeResult,
      });
    }
  } catch (error) {
    console.log("Error:", error);
    res.send({
      responseCode: "999",
      responseMessage: "Internal server error",
    });
  }
});
app.post("/api/transaction-reversal", async (req, res) => {
  const {
    username,
    amount,
    batchNo,
    transType,
    key,
    transNo,
    accountNo,
    branch,
    terminal,
  } = req.body;
  // console.log("ghana");
  try {
    const db = await oracledb.getConnection({
      user: DB_USER,
      password: DB_PASSWORD,
      connectString: DB_CONNECTION_STRING,
      timeout: DB_CONNECTION_TIMEOUT,
    });

    const execute = util.promisify(db.execute).bind(db);
    if (key === "lov") {
      const data = await execute(
        `select ACTUAL_CODE, DESCRIPTION
    from code_desc
   where code_type = 'TR'
   AND STATUS = 'Y'
   union
   select null ACTUAL_CODE, 'ALL TRANSACTIONS ' DESCRIPTION
    from dual
   `
      );
      if (data.rows) {
        const arr = [];

        for (let i = 0; i < data.rows.length; i++) {
          const label = data.rows[i][1];
          const value = data.rows[i][0];

          arr.push({
            label: `${value ? `${value} - ` : ""}${label}`,
            value: value ? `${value}` : "",
          });
        }

        return res.send(arr);
      }
    }
    if (key === "details") {
      const data = await execute(
        `select * from ac_trans_temp where trans_no = :transNo`,
        {
          transNo,
        }
      );

      const data2 = await execute(
        `select denomination_code ,  amount  from  VW_REVERS_BATCH  where batch_no = :batchNo`,
        {
          batchNo,
        }
      );
      // if (data && data2) {
      return res.send({ details: data.rows, denominations: data2.rows });
      // }
    }

    if (key === "same-day") {
      const data = await execute(
        `select TRANS_NO, ACCT_LINK , get_acctdesc(ACCT_LINK), DOCUMENT_REF,TRANSACTION_TYPE,AMOUNT, POSTING_DATE, VALUE_DATE, TRANSACTION_DETAILS, USER_NAME ,
        POINT_OF_ENTRY,SYSDATE,to_char(sysdate,'HH24:MI:SS'),VOUCHER_NUMBER,INTER_BRANCH,BRANCH_CODE,
        abs(nvl(LOCAL_EQUIVALENT_CR,0)-nvl(LOCAL_EQUIVALENT_DB,0)) amt,BATCH_NO,currency_code
        from AC_TRANS B
        where trans_no=:transNo
        and acct_link not in(select CLEARING_SUSPENSE from clearing_totals_acct) 
        AND TRANSACTION_TYPE != '501'
        AND NOT EXISTS (SELECT 1 FROM REVERSED_TRANS A WHERE TRANS_NO = TRANS_NUMBER AND A.ACCT_LINK = B.ACCT_LINK) 
        and ( POINT_OF_ENTRY ='FA'  OR TRANSACTION_TYPE = '402')`,
        {
          transNo,
        }
      );
      if (data) {
        console.log(data, "hgha");
        return res.send(data.rows[0]);
      }
    }

    if (key === "reverse") {
      const data = await execute(
        `begin pkg_cashtrx_rt.prc_sameday_rev(:transNo , :batchNo , :accountNo , :branch , :amount, :username , :transType , :msg ); end;`,
        {
          transNo,
          batchNo,
          accountNo,
          branch,
          amount,
          username,
          transType,
          msg: { dir: oracledb.BIND_OUT, type: oracledb.STRING },
        }
      );
      if (data) {
        console.log(data, "hgha");
        return res.send(data.outBinds.msg);
      }
    }

    if (key === "approve") {
      const data = await execute(
        `begin prc_sameday_revapp(:transNo , :batchNo , :accountNo , :branch , :amount, :username , :transType , :msg , :terminal ); end;`,
        {
          transNo,
          batchNo,
          accountNo,
          branch,
          amount,
          username,
          transType,
          terminal,
          msg: { dir: oracledb.BIND_OUT, type: oracledb.STRING },
        }
      );
      if (data) {
        // console.log(data, "hgha");
        return res.send(data.outBinds.msg);
      }
    }

    console.log(typeof transType, batchNo, amount);
    const data = await execute(
      `select BATCH_NO , TRANS_NO , ACCOUNT_NUMBER , GET_ACCTDESC(ACCOUNT_NUMBER) , GET_ISO_CODE(CURRENCY_CODE) , TRANSACTION_DETAILS ,local_equivalent_db ,local_equivalent_cr , VOUCHER_DATE   from vw_actrans_all where user_name = :username and posting_date = get_postingdate() and batch_no like '%'||:batchNo||'%'
        and abs(nvl(local_equivalent_cr,0)-nvl(local_equivalent_db,0)) between nvl(:amount,0) and nvl(:amount,9999999999999)
        and transaction_type like '%'||:transType||'%' AND TRANSACTION_TYPE !='501' ORDER BY trans_no DESC`,
      {
        username,
        batchNo,
        amount,
        transType,
      }
    );
    if (data) {
      res.send(data.rows);
    }
  } catch (err) {
    console.log(err);
    res.send({ "An error occurred": err });
  }
});

app.get("/api/get-unique-reference", (req, res) => {
  const { code } = req.body;
  let getBranch = async () => {
    try {
      const db = await oracledb.getConnection({
        user: DB_USER,
        password: DB_PASSWORD,
        connectString: DB_CONNECTION_STRING,
        timeout: DB_CONNECTION_TIMEOUT,
      });
      const execute = util.promisify(db.execute).bind(db);

      // return res.send("ghamna");
      // res.send(con);
      const data = await execute(`select GET_ACTIVITY_REF from dual`);
      if (data) {
        res.send(data.rows[0][0]);
      } else {
        res.send("Something went wrong... Nothing was returned!!");
      }
    } catch (err) {
      console.log(err);
      res.send("err");
    }
  };
  getBranch();
});

app.post("/api/get-branch", (req, res) => {
  const { code } = req.body;
  let getBranch = async () => {
    try {
      const db = await oracledb.getConnection({
        user: DB_USER,
        password: DB_PASSWORD,
        connectString: DB_CONNECTION_STRING,
        timeout: DB_CONNECTION_TIMEOUT,
      });
      const execute = util.promisify(db.execute).bind(db);

      // return res.send("ghamna");
      // res.send(con);
      const data = await execute(
        `SELECT TB_BRANCH.BR_CODE, TB_BRANCH.BR_DESCRIPTION
        FROM TB_BRANCH WHERE TB_BRANCH.BR_CODE = :code `,
        { code }
      );
      if (data) {
        // res.send(response);

        var arr0 = "";
        var arr = [];

        for (let i = 0; i < data.rows.length; i++) {
          for (let x = 0; x < data.metaData.length; x++) {
            arr0 +=
              '"' +
              [data.metaData[x].name.toLowerCase()] +
              '" : "' +
              data.rows[i][x] +
              '",';
          }

          arr.push(JSON.parse("{" + arr0.replace(/,\s*$/, "") + "}"));
        }

        return res.send(arr);

        // res.send({
        //   responseCode: "000",
        //   responseMessage : arr
        // });
      } else {
        res.send("Something went wrong... Nothing was returned!!");
      }
    } catch (err) {
      console.log(err);
      res.send("err");
    }
  };
  getBranch();
});

///get customer number Derrick
app.post("/api/get-customer-number", (req, res) => {
  const account_number = req.body.account_number;
  let getCustomerNumber = async () => {
    try {
      const db = await oracledb.getConnection({
        user: DB_USER,
        password: DB_PASSWORD,
        connectString: DB_CONNECTION_STRING,
        timeout: DB_CONNECTION_TIMEOUT,
      });

      const response = [];
      let arr0 = "";

      // node native promisify
      const execute = util.promisify(db.execute).bind(db);

      const data = await execute(`
      select account_number , GET_CUSTOMERNO(account_number) as cust_num from g_ledger
       where account_number = '${account_number}'
      `);

      if (data) {
        for (let i = 0; i < data.rows.length; i++) {
          for (let x = 0; x < data.metaData.length; x++) {
            arr0 +=
              '"' +
              [data.metaData[x].name.toLowerCase()] +
              '" : "' +
              data.rows[i][x] +
              '",';
          }

          response.push(
            JSON.parse(
              "{" +
                arr0.replace(/(\r\n|\n|\r)/gm, "").replace(/,\s*$/, "") +
                "}"
            )
          );
        }

        res.send(response);
      } else {
        res.send("Something went wrong... Nothing was returned!!");
      }
    } finally {
      // conn.end();
    }
  };

  getCustomerNumber();
});

///get all account numbers with customer number Derrick
app.post("/api/get-all-accounts-with-customer-number", (req, res) => {
  console.log("derrick");
  const customer_number = req.body.customer_number;
  let getAccountsByCustomerNumber = async () => {
    try {
      const db = await oracledb.getConnection({
        user: DB_USER,
        password: DB_PASSWORD,
        connectString: DB_CONNECTION_STRING,
        timeout: DB_CONNECTION_TIMEOUT,
      });

      const response = [];
      let arr0 = "";

      // node native promisify
      const execute = util.promisify(db.execute).bind(db);

      const data = await execute(
        `select account_number, GET_ACCTDESC(account_number) account_name,get_avbal(account_number) account_balance
        from g_ledger where customer_number = '${customer_number}'
        `
      );

      if (data.rows) {
        const arr = [];

        for (let i = 0; i < data.rows.length; i++) {
          const account_number = data.rows[i][0];
          const account_name = data.rows[i][1];
          const account_balance = data.rows[i][2];
          const formattedBalance = account_balance.toLocaleString("en-US", {
            minimumFractionDigits: 2,
            maximumFractionDigits: 2,
          });

          arr.push({
            value: account_number,
            label:
              account_number +
              "  -  " +
              account_name +
              "  - " +
              "( " +
              formattedBalance +
              " )",
          });
        }

        res.send(arr);
      } else {
        res.send(err);
        console.log(err);
      }
    } catch (err) {
      res.send(err);
    } finally {
      // conn.end();
    }
  };

  getAccountsByCustomerNumber();
});

// get branch hubert
app.get("/api/get-branch", (req, res) => {
  const { code } = req.body;
  let getBranch = async () => {
    try {
      const db = await oracledb.getConnection({
        user: DB_USER,
        password: DB_PASSWORD,
        connectString: DB_CONNECTION_STRING,
        timeout: DB_CONNECTION_TIMEOUT,
      });
      const execute = util.promisify(db.execute).bind(db);

      // return res.send("ghamna");
      // res.send(con);
      const data = await execute(
        `SELECT TB_BRANCH.BR_CODE, TB_BRANCH.BR_DESCRIPTION
        FROM TB_BRANCH
        ORDER BY TB_BRANCH.BR_CODE
        `
      );
      if (data) {
        // res.send(response);

        var arr0 = "";
        var arr = [];

        for (let i = 0; i < data.rows.length; i++) {
          for (let x = 0; x < data.metaData.length; x++) {
            arr0 +=
              '"' +
              [data.metaData[x].name.toLowerCase()] +
              '" : "' +
              data.rows[i][x] +
              '",';
          }

          arr.push(JSON.parse("{" + arr0.replace(/,\s*$/, "") + "}"));
        }

        return res.send(arr);

        // res.send({
        //   responseCode: "000",
        //   responseMessage : arr
        // });
      } else {
        res.send("Something went wrong... Nothing was returned!!");
      }
    } catch (err) {
      console.log(err);
      res.send("err");
    }
  };
  getBranch();
});

// number of Leaves hubert
app.post("/api/numberofleaves", (req, res) => {
  const code = req.body.code;

  let numberOfLeaves = async () => {
    try {
      const db = await oracledb.getConnection({
        user: DB_USER,
        password: DB_PASSWORD,
        connectString: DB_CONNECTION_STRING,
        timeout: DB_CONNECTION_TIMEOUT,
      });
      const execute = util.promisify(db.execute).bind(db);
      const data = await execute(
        `select description,actual_code,ltrim(rtrim(short_descrp,0)) short_descrp 
        from code_desc 
        where code_type='CHL' and CLASS_CODE= '${code}'`
      );

      // res.send(data);
      if (data) {
        // res.send(response);

        var arr0 = "";
        var arr = [];

        for (let i = 0; i < data.rows.length; i++) {
          for (let x = 0; x < data.metaData.length; x++) {
            arr0 +=
              '"' +
              [data.metaData[x].name.toLowerCase()] +
              '" : "' +
              data.rows[i][x] +
              '",';
          }

          arr.push(JSON.parse("{" + arr0.replace(/,\s*$/, "") + "}"));
        }

        return res.send(arr);

        // res.send({
        //   responseCode: "000",
        //   responseMessage : arr
        // });
      } else {
        res.send("Something went wrong... Nothing was returned!!");
      }
    } catch (err) {
      console.log(err);
    }
  };

  numberOfLeaves();
});
app.get("/api/company", (req, res) => {
  const code = req.body.code;

  let Company = async () => {
    try {
      const db = await oracledb.getConnection({
        user: DB_USER,
        password: DB_PASSWORD,
        connectString: DB_CONNECTION_STRING,
        timeout: DB_CONNECTION_TIMEOUT,
      });
      const execute = util.promisify(db.execute).bind(db);
      const data = await execute(
        "select actual_code,description from code_desc where code_type='ICC' order by actual_code"
      );

      // res.send(data);
      if (data) {
        // res.send(response);

        var arr0 = "";
        var arr = [];

        for (let i = 0; i < data.rows.length; i++) {
          for (let x = 0; x < data.metaData.length; x++) {
            arr0 +=
              '"' +
              [data.metaData[x].name.toLowerCase()] +
              '" : "' +
              data.rows[i][x] +
              '",';
          }

          arr.push(JSON.parse("{" + arr0.replace(/,\s*$/, "") + "}"));
        }

        return res.send(arr);

        // res.send({
        //   responseCode: "000",
        //   responseMessage : arr
        // });
      } else {
        res.send("Something went wrong... Nothing was returned!!");
      }
    } catch (err) {
      console.log(err);
    }
  };

  Company();
});

app.get("/api/policy", (req, res) => {
  const code = req.body.code;

  let Policy = async () => {
    try {
      const db = await oracledb.getConnection({
        user: DB_USER,
        password: DB_PASSWORD,
        connectString: DB_CONNECTION_STRING,
        timeout: DB_CONNECTION_TIMEOUT,
      });
      const execute = util.promisify(db.execute).bind(db);
      const data = await execute(
        "select actual_code,description from code_desc where code_type='POL'  AND STATUS='Y' order by Actual_code"
      );

      // res.send(data);
      if (data) {
        // res.send(response);

        var arr0 = "";
        var arr = [];

        for (let i = 0; i < data.rows.length; i++) {
          for (let x = 0; x < data.metaData.length; x++) {
            arr0 +=
              '"' +
              [data.metaData[x].name.toLowerCase()] +
              '" : "' +
              data.rows[i][x] +
              '",';
          }

          arr.push(JSON.parse("{" + arr0.replace(/,\s*$/, "") + "}"));
        }

        return res.send(arr);

        // res.send({
        //   responseCode: "000",
        //   responseMessage : arr
        // });
      } else {
        res.send("Something went wrong... Nothing was returned!!");
      }
    } catch (err) {
      console.log(err);
    }
  };

  Policy();
});

app.post("/api/collateral-lovs", async (req, res) => {
  const { key, short_descrp } = req.body;

  try {
    const db = await oracledb.getConnection({
      user: DB_USER,
      password: DB_PASSWORD,
      connectString: DB_CONNECTION_STRING,
      timeout: DB_CONNECTION_TIMEOUT,
    });
    const execute = util.promisify(db.execute).bind(db);

    // res.send(data);
    if (key === "property") {
      const data = await execute(`
        select actual_code,description from code_desc where code_type='PRO'`);
      if (data) {
        // res.send(response);

        var arr0 = "";
        var arr = [];

        for (let i = 0; i < data.rows.length; i++) {
          for (let x = 0; x < data.metaData.length; x++) {
            arr0 +=
              '"' +
              [data.metaData[x].name.toLowerCase()] +
              '" : "' +
              data.rows[i][x] +
              '",';
          }

          arr.push(JSON.parse("{" + arr0.replace(/,\s*$/, "") + "}"));
        }

        return res.send(arr);

        // res.send({
        //   responseCode: "000",
        //   responseMessage : arr
        // });
      } else {
        res.send("Something went wrong... Nothing was returned!!");
      }
    }
    if (key === "sub property") {
      const data = await execute(`
      select actual_code,description from code_desc 
      where code_type= 'PRS' and SHORT_DESCRP='${short_descrp}'`);
      if (data) {
        // res.send(response);

        var arr0 = "";
        var arr = [];

        for (let i = 0; i < data.rows.length; i++) {
          for (let x = 0; x < data.metaData.length; x++) {
            arr0 +=
              '"' +
              [data.metaData[x].name.toLowerCase()] +
              '" : "' +
              data.rows[i][x] +
              '",';
          }

          arr.push(JSON.parse("{" + arr0.replace(/,\s*$/, "") + "}"));
        }

        return res.send(arr);

        // res.send({
        //   responseCode: "000",
        //   responseMessage : arr
        // });
      } else {
        res.send("Something went wrong... Nothing was returned!!");
      }
    }

    if (key === "currency") {
      const message = "No rows found";
      const data = await execute(
        `select currency_code actual_code, description from tb_currency where APP_FLAG='Y'`
      );

      if (data.rows) {
        const arr = [];

        for (let i = 0; i < data.rows.length; i++) {
          const actual_code = data.rows[i][0];
          const description = data.rows[i][1];
          // const short_descrp = data.rows[i][2];

          arr.push({
            label: description,
            value: actual_code + " - " + description,
            // short_descrp: short_descrp,
          });
        }

        res.send(arr);
      } else {
        res.send({ message });
      }
    }
    if (key === "depositType") {
      const message = "No rows found";

      const data = await execute(
        `select actual_code, description from code_desc where code_type='ACT' and actual_code !='9' order by Actual_code`
      );
      if (data.rows) {
        const arr = [];

        for (let i = 0; i < data.rows.length; i++) {
          const actual_code = data.rows[i][0];
          const description = data.rows[i][1];
          // const short_descrp = data.rows[i][2];

          arr.push({
            label: description,
            value: actual_code + " - " + description,
            // short_descrp: short_descrp,
          });
        }

        res.send(arr);
      } else {
        res.send({ message });
      }
    }
    if (key === "collateralType") {
      const message = "No rows found";

      const data = await execute(
        `select actual_code,description from code_desc where code_type='COL' 
        and status='Y' AND ACTUAL_CODE IN('C01','C02','C04','C03','C05')
         order by Actual_code`
      );
      if (data.rows) {
        const arr = [];

        for (let i = 0; i < data.rows.length; i++) {
          const actual_code = data.rows[i][0];
          const description = data.rows[i][1];
          // const short_descrp = data.rows[i][2];

          arr.push({
            label: description,
            value: actual_code + " - " + description,
            // short_descrp: short_descrp,
          });
        }

        res.send(arr);
      } else {
        res.send({ message });
      }
    }
  } catch (err) {
    console.log(err);
  }
});

app.post("/api/customerNumber", (req, res) => {
  const customerNumber = req.body.customerNumber;

  let accounts = async () => {
    try {
      const db = await oracledb.getConnection({
        user: DB_USER,
        password: DB_PASSWORD,
        connectString: DB_CONNECTION_STRING,
        timeout: DB_CONNECTION_TIMEOUT,
      });
      const execute = util.promisify(db.execute).bind(db);
      const data = await execute(
        `select a.acct_link,a.ACCOUNT_DESCRP ,a.CLOSING_BALANCE_TODAY,currency_code
        from bankowner.g_ledger A 
        where  a.customer_number='${customerNumber}' and a.type_of_acct in ('1','2','3')`
      );

      // res.send(data);
      if (data) {
        // res.send(response);

        var arr0 = "";
        var arr = [];

        for (let i = 0; i < data.rows.length; i++) {
          for (let x = 0; x < data.metaData.length; x++) {
            arr0 +=
              '"' +
              [data.metaData[x].name.toLowerCase()] +
              '" : "' +
              data.rows[i][x] +
              '",';
          }

          arr.push(JSON.parse("{" + arr0.replace(/,\s*$/, "") + "}"));
        }

        return res.send(arr);

        // res.send({
        //   responseCode: "000",
        //   responseMessage : arr
        // });
      } else {
        res.send("Something went wrong... Nothing was returned!!");
      }
    } catch (err) {
      console.log(err);
    }
  };

  accounts();
});

app.get("/api/collateraltype", (req, res) => {
  let CollateralType = async () => {
    try {
      const db = await oracledb.getConnection({
        user: DB_USER,
        password: DB_PASSWORD,
        connectString: DB_CONNECTION_STRING,
        timeout: DB_CONNECTION_TIMEOUT,
      });
      const execute = util.promisify(db.execute).bind(db);
      const data = await execute(
        `select actual_code,description from code_desc where code_type='COL' 
        and   status='Y' AND ACTUAL_CODE IN('C01','C02','C04','C03','C05')
         order by Actual_code`
      );

      // res.send(data);
      if (data) {
        // res.send(response);

        var arr0 = "";
        var arr = [];

        for (let i = 0; i < data.rows.length; i++) {
          for (let x = 0; x < data.metaData.length; x++) {
            arr0 +=
              '"' +
              [data.metaData[x].name.toLowerCase()] +
              '" : "' +
              data.rows[i][x] +
              '",';
          }

          arr.push(JSON.parse("{" + arr0.replace(/,\s*$/, "") + "}"));
        }

        return res.send(arr);

        // res.send({
        //   responseCode: "000",
        //   responseMessage : arr
        // });
      } else {
        res.send("Something went wrong... Nothing was returned!!");
      }
    } catch (err) {
      console.log(err);
    }
  };

  CollateralType();
});

app.post("/api/collateral-creation", async (req, res) => {
  const {
    collateral_no,
    collateral_type,
    currency,
    ac_desc,
    amount,
    amount_considered,
    approval_flag_v,
    posted_by,
    posting_date,
    posting_terminal,
    review_date,
    exp_date,
    comments,
    customer_number,
    collateral_desc,
    account_number,
    amount_avail,
    branch_code,
  } = req.body;
  let db;
  try {
    db = await oracledb.getConnection({
      user: DB_USER,
      password: DB_PASSWORD,
      connectString: DB_CONNECTION_STRING,
      timeout: DB_CONNECTION_TIMEOUT,
    });
    // const execute = util.promisify(db.execute).bind(db);
    const data = await db.execute(
      `BEGIN BANKOWNER.PRC_LENDING_COL_CASH(:COLLATERAL_NO_v, :COLL_TYPE_v, :CURRENCY_v, :AC_DESC_v, :AMOUNT_v, :AMOUNT_CONSIDERED_v, :approval_flag_v, :posted_by_v, GET_POSTINGDATE(), :posting_terminal_v, GET_SYSTIME(), :REVIEW_DATE_v, :EXP_DATE_v, :COMMENTS_v, :CUSTOMER_NUMBER_v, :COLL_DESC_v, :ACCOUNT_NUMBER_v, :AMT_AVAIL_v,:BRANCH_CODE_v); END;`,
      {
        COLLATERAL_NO_v: collateral_no,
        COLL_TYPE_v: collateral_type,
        CURRENCY_v: currency,
        AC_DESC_v: ac_desc,
        AMOUNT_v: amount,
        AMOUNT_CONSIDERED_v: amount_considered,
        approval_flag_v: "N",
        posted_by_v: posted_by,
        posting_terminal_v: posting_terminal,
        REVIEW_DATE_v: new Date(review_date),
        EXP_DATE_v: new Date(exp_date),
        COMMENTS_v: comments,
        CUSTOMER_NUMBER_v: customer_number,
        COLL_DESC_v: collateral_desc,
        ACCOUNT_NUMBER_v: account_number,
        AMT_AVAIL_v: amount_avail,
        BRANCH_CODE_v: branch_code,
      },
      function (err, result) {
        if (err) {
          // throw err;
          const error = {
            data: err,
            responseMessage: "Failed",
            responseCode: "999",
          };
          res.status(500).send(error);
        }
        if (result) {
          const message = {
            data: result,
            responseMessage: "Inserted Successfully",
            responseCode: "000",
          };

          return res.status(200).send(message);
          // const message = result.outBinds.mesg;
          // res.send(message);
        }
      }
    );
  } catch (err) {
    console.log(err);
  }
});

// cheque book request
app.post("/api/cheque-book-req", (req, res) => {
  async function chequeBook() {
    const dates = new Date();
    const month = dates.getMonth() + 1; // getMonth() returns a zero-indexed value, so add 1 to get the actual month number
    const day = dates.getDate();
    const year = dates.getFullYear();
    const hours = dates.getHours();
    const minutes = dates.getMinutes();
    const seconds = dates.getSeconds();
    const ampm = hours >= 12 ? "PM" : "AM";
    //format the date and time string
    const formattedDate = `${month}/${day}/${year} ${
      hours % 12
    }:${minutes}:${seconds} ${ampm}`;
    const hostname = os.hostname();
    const ipAddress = ip.address();
    const accountLink = req.body.accountLink;
    const numberOfBooks = req.body.numberOfBooks;
    const leavesNo = req.body.leavesNo;
    const transCode = req.body.transCode;
    const scandoc = req.body.scandoc;
    const chan = req.body.chan;
    const deliveryChannel = req.body.deliveryChannel;
    const deliveryBranch = req.body.deliveryBranch;
    const globalBra = req.body.globalBra;
    // const terminal = req.body.terminal;
    const username = req.body.username;
    const date = new Date(formattedDate);
    const frmcode = req.body.frmcode;
    const sessID = req.body.sessID;
    var response = [];
    let con;

    try {
      con = await oracledb.getConnection({
        user: DB_USER,
        password: DB_PASSWORD,
        connectString: DB_CONNECTION_STRING,
        timeout: DB_CONNECTION_TIMEOUT,
      });
      // const execute = util.promisify(db.execute).bind(db);
      await con.execute(
        "BEGIN PRC_CHEQUEBK_REQT_v(:acct_link_V, :num_of_books_VVV, :leaves_no_V, :trans_code_V, :SCANDOC_V, :CHAN_V,:delivery_channel_V, :delivery_branch_V, :GLOBAL_BRA_V, :TERMINAL_V, :username_V, :DATE_V, :frmcode_V, :sess_id_V, :machine_ip_V, :request_id_V, :RESPONSE_CODE, :RESPONSE_MESS); END;",
        {
          acct_link_V: accountLink,
          num_of_books_VVV: numberOfBooks,
          leaves_no_V: leavesNo,
          trans_code_V: transCode,
          SCANDOC_V: scandoc,
          CHAN_V: chan,
          delivery_channel_V: deliveryChannel,
          delivery_branch_V: deliveryBranch,
          GLOBAL_BRA_V: globalBra,
          TERMINAL_V: hostname,
          username_V: username,
          DATE_V: date,
          frmcode_V: frmcode,
          sess_id_V: sessID,
          machine_ip_V: ipAddress,

          request_id_V: {
            type: oracledb.STRING,
            dir: oracledb.BIND_OUT,
          },
          RESPONSE_CODE: {
            type: oracledb.STRING,
            dir: oracledb.BIND_OUT,
          },
          RESPONSE_MESS: {
            type: oracledb.STRING,
            dir: oracledb.BIND_OUT,
          },
        },
        function (err, result) {
          if (err) {
            throw err;
          }

          if (result) {
            if (
              result.outBinds.RESPONSE_CODE === "000" ||
              result.outBinds.RESPONSE_CODE === 000
            ) {
              var mess = result.outBinds.RESPONSE_MESS;
              var code = result.outBinds.RESPONSE_CODE;
              var request = result.outBinds.request_id_V;

              response = {
                success: true,
                responseMessage: mess,
                responseCode: code,
                request: request,
                token: null,
              };

              res.send(response);
            } else {
              var mess = result.outBinds.RESPONSE_MESS;
              var code = result.outBinds.RESPONSE_CODE;
              var request = result.outBinds.request_id_V;

              response = {
                success: false,
                responseMessage: mess,
                responseCode: code,
                request: request,
              };

              res.send(response);
            }
          }
        }
      );
      // await con.close();
    } catch (err) {
      console.log(err);
    }
  }

  chequeBook();
});

app.post("/api/fee-transaction", (req, res) => {
  async function ChargeFees() {
    const dates = new Date();
    const month = dates.getMonth() + 1; // getMonth() returns a zero-indexed value, so add 1 to get the actual month number
    const day = dates.getDate();
    const year = dates.getFullYear();
    const hours = dates.getHours();
    const minutes = dates.getMinutes();
    const seconds = dates.getSeconds();
    const ampm = hours >= 12 ? "PM" : "AM";
    //format the date and time string
    const formattedDate = `${month}/${day}/${year} ${
      hours % 12
    }:${minutes}:${seconds} ${ampm}`;
    const hostname = os.hostname();
    const ipAddress = ip.address();
    const dbAccount = req.body.dbAccount;
    const trans_code_v = req.body.trans_code_v;
    const trans_amount = req.body.trans_amount;
    const currency = req.body.currency;
    const prod_code_v = req.body.prod_code_v;
    const batch_no_v = req.body.batch_no_v;
    const posted_by_v = req.body.posted_by_v;
    const app_by = req.body.app_by;
    // const terminal = req.body.terminal;
    const doc_ref_v = req.body.doc_ref_v;
    const scan_doc_reff = req.body.scan_doc_reff;
    const pbranch = req.body.pbranch;
    const cbranch = req.body.cbranch;
    const dbranch = req.body.dbranch;
    const ecode = req.body.ecode;
    const ucode = req.body.ucode;
    const dcode = req.body.dcode;
    const channel_v = req.body.channel_v;
    const rate_v = req.body.rate_v;
    const pcur = req.body.pcur;
    const app_flag = req.body.app_flag;
    const destiC = req.body.destiC;
    const form_code = req.body.form_code;
    const para1 = req.body.para1;
    const para2 = req.body.para2;
    const para3 = req.body.para3;
    const para4 = req.body.para4;
    const para5 = req.body.para5;
    var response = [];
    let con;

    try {
      con = await oracledb.getConnection({
        user: DB_USER,
        password: DB_PASSWORD,
        connectString: DB_CONNECTION_STRING,
        timeout: DB_CONNECTION_TIMEOUT,
      });
      await con.execute(
        "BEGIN CBXDMX.Prc_fees_transaction(:db_account_v,:trans_code_v,:trans_amount, GET_ACCTCURRCODE (:db_account_v),:prod_code_v,:batch_no_v,:posted_by_v,:app_by,:response,:total_charges,:terminal,:doc_ref_v,:scan_doc_reff,get_acctbra (:db_account_v),:cbranch,:dbranch,:ecode,:ucode,:dcode,:channel_v,:rate_v,:pcur,:app_flag,:destiC,:form_code,:para1,:para2,:para3,:para4,:para5); END;",
        {
          db_account_v: dbAccount,
          trans_code_v: trans_code_v,
          trans_amount: trans_amount,
          // currency_v: currency,
          prod_code_v: null,
          batch_no_v: batch_no_v,
          posted_by_v: posted_by_v,
          app_by: null,
          response: {
            type: oracledb.STRING,
            dir: oracledb.BIND_OUT,
          },
          total_charges: {
            type: oracledb.NUMBER,
            dir: oracledb.BIND_OUT,
          },
          terminal: hostname,
          doc_ref_v: null,
          scan_doc_reff: null,
          //   pbranch: pbranch,
          cbranch: cbranch,
          dbranch: dbranch,
          ecode: null,
          ucode: null,
          dcode: null,
          channel_v: channel_v,
          rate_v: rate_v,
          pcur: null,
          app_flag: app_flag,
          destiC: destiC,
          form_code: form_code,
          para1: null,
          para2: null,
          para3: null,
          para4: null,
          para5: null,
        },
        function (err, result) {
          if (err) {
            throw err;
          }

          if (result) {
            if (result.outBinds.total_charges != null) {
              var mess = result.outBinds.response;
              var charges = result.outBinds.total_charges;

              response = {
                success: true,
                responseMessage: mess,
                totalCharges: charges,
              };

              res.send(response);
            } else {
              var mess = result.outBinds.response;
              var charges = result.outBinds.total_charges;

              response = {
                success: true,
                responseMessage: mess,
                totalCharges: charges,
              };

              res.send(response);
            }
          }
        }
      );
      // await con.close();
    } catch (err) {
      console.log(err);
    }
  }

  ChargeFees();
});

// Get Menus By Menu Level's API Endpoint - ORACLE
app.post("/api/get-account-details-by-account-number", (req, res) => {
  let account_number = req.body.account_number;

  let getAccountDetailsByAccountLinkFunc = async (account_number) => {
    try {
      const db = await oracledb.getConnection({
        user: DB_USER,
        password: DB_PASSWORD,
        connectString: DB_CONNECTION_STRING,
        timeout: DB_CONNECTION_TIMEOUT,
      });

      const response = [];
      let arr0 = "";
      // node native promisify
      const execute = util.promisify(db.execute).bind(db);
      const data = await execute(
        `SELECT * FROM BANKOWNER.VW_CASA_LEDGER WHERE ACCT_LINK =
          '${account_number}'`
      );

      if (data) {
        for (let i = 0; i < data.rows.length; i++) {
          for (let x = 0; x < data.metaData.length; x++) {
            arr0 +=
              '"' +
              [data.metaData[x].name.toLowerCase()] +
              '" : "' +
              data.rows[i][x] +
              '",';
          }

          response.push(
            JSON.parse(
              "{" +
                arr0.replace(/(\r\n|\n|\r)/gm, "").replace(/,\s*$/, "") +
                "}"
            )
          );
        }

        res.send(response);
      } else {
        res.send("Something went wrong... Nothing was returned!!");
      }
    } finally {
      // conn.end();
    }
  };

  return getAccountDetailsByAccountLinkFunc(account_number);
});

// Store System Audit Logs API Endpoint - ORACLE
app.post("/api/store-system-audit-logs", (req, res) => {
  let user_id = req.body.user_id;
  let page_accessed = req.body.page_accessed;
  let page_url = req.body.page_url;
  let user_agent = req.headers["user-agent"];

  let storeSystemAuditLogsFunc = async (
    user_id,
    user_agent,
    page_accessed,
    page_url
  ) => {
    const db = await oracledb.getConnection({
      user: DB_USER,
      password: DB_PASSWORD,
      connectString: DB_CONNECTION_STRING,
      timeout: DB_CONNECTION_TIMEOUT,
    });
    const execute = util.promisify(db.execute).bind(db);

    try {
      // Get IP Address
      let ipAddress = getIPAddress().address;

      // Get Mac Address
      let macAddress = getIPAddress().mac;

      // Get Browser
      let browser = null;
      if (/firefox/i.test(user_agent)) browser = "Mozilla Firefox";
      else if (/chrome/i.test(user_agent)) browser = "Google Chrome";
      else if (/safari/i.test(user_agent)) browser = "Safari";
      else if (/msie/i.test(user_agent)) browser = "Microsoft Edge";
      else browser = user_agent;

      // async function getUsersGeolocation() {
      //   const response = await fetch(
      //     `http://controllers.ipstack.com/${ipAddress}?access_key=${IPSTACK_API_KEY}`
      //   );
      //   const json = await response.json();
      //   return json;
      // }

      // let location = getUsersGeolocation();

      // location = location.region_name ? location.region_name : "UNKNOWN";

      let location = "UNKNOWN";

      async function insertSystemAuditLogs() {
        const response = await execute(
          `INSERT INTO TB_SYSTEM_AUDIT_LOGS (id, user_id, ip_address, mac_address, browser, login_location, page_accessed, page_url) VALUES (
            '${new Date().getTime()}',
            '${user_id}',
            '${ipAddress}',
            '${macAddress}',
            '${browser}',
            '${location}',
            '${page_accessed}',
            '${page_url}'
            )`
        );

        if (response) {
          res.send("System Audit Log Has Been Stored Successfully");
        }
      }

      return insertSystemAuditLogs();

      // })();
    } finally {
      // conn.end();
    }
  };

  storeSystemAuditLogsFunc(user_id, user_agent, page_accessed, page_url);
});

// Get System Audit Logs API Endpoint - ORACLE
app.get("/api/get-system-audit-logs", (req, res) => {
  let getSystemAuditLogsFunc = async () => {
    try {
      const db = await oracledb.getConnection({
        user: DB_USER,
        password: DB_PASSWORD,
        connectString: DB_CONNECTION_STRING,
        timeout: DB_CONNECTION_TIMEOUT,
      });

      const response = [];
      const resp = [];
      let arr0 = "";

      // node native promisify
      const execute = util.promisify(db.execute).bind(db);

      const data = await execute(
        `SELECT * FROM TB_SYSTEM_AUDIT_LOGS WHERE ROWNUM <= 100 ORDER BY id DESC`
      );

      // console.log(data);

      if (data) {
        for (let i = 0; i < data.rows.length; i++) {
          for (let x = 0; x < data.metaData.length; x++) {
            arr0 +=
              '"' +
              [data.metaData[x].name.toLowerCase()] +
              '" : "' +
              data.rows[i][x] +
              '",';
          }

          response.push(
            JSON.parse(
              "{" +
                arr0.replace(/(\r\n|\n|\r)/gm, "").replace(/,\s*$/, "") +
                "}"
            )
          );
        }

        for (let i = 0; i < response.length; i++) {
          const counter = i + 1;
          const user_id = response[i].user_id;
          const last_login = response[i].last_login.substring(0, 28);
          const ip_address = response[i].ip_address;
          // const mac_address = response[i].mac_address;
          // const login_location = response[i].login_location;
          const page_accessed = response[i].page_accessed;
          const page_url = response[i].page_url;

          resp.push([
            counter,
            user_id,
            last_login,
            ip_address,
            // mac_address,
            // login_location,
            page_accessed,
            page_url,
          ]);
        }
      }

      res.send(resp);
    } finally {
      // conn.end();
    }
  };

  getSystemAuditLogsFunc();
});

// get statement of financial position workings
app.post("/api/get-statement-of-financial-position-workings", (req, res) => {
  async function getSasraFinancialPositionWorkings() {
    let con;

    try {
      con = await oracledb.getConnection({
        user: DB_USER,
        password: DB_PASSWORD,
        connectString: DB_CONNECTION_STRING,
      });

      const returnCode = "'" + req.body.returnCode + "'";
      const reportDate = "'" + req.body.reportDate + "'";
      const response = [];
      const resp = [];
      let arr0 = "";

      const data = await con.execute(`
      SELECT 
ORDERING,RETURN_CODE,  ACCT_LINK, ACCOUNT_DESCRP, 
   RETURN_DESCRP, ITEM_CODE, ITEM_DESCRP, 
   REPORT_CLASS, CURRENCY_CODE, GET_CURRENCY_ISO(CURRENCY_CODE) CURRENCY_ISO,
   ISO, CLOSING_BALANCE_TODAY, CLOSING_BALANCE_TODAY_FRGN
FROM VW_CBR_LINES_CH
WHERE BALANCE_DATE=${reportDate} AND RETURN_CODE=${returnCode}
and CLOSING_BALANCE_TODAY!=0
order by ordering,RETURN_CODE,DOCUMENT_ID,ACCT_LINK
      `);

      if (data) {
        // console.log(data, "data");
      } else {
        // console.log("no data");
      }

      // console.log(data);

      if (data) {
        for (let i = 0; i < data.rows.length; i++) {
          for (let x = 0; x < data.metaData.length; x++) {
            arr0 +=
              '"' +
              [data.metaData[x].name.toLowerCase()] +
              '" : "' +
              data.rows[i][x] +
              '",';
          }

          response.push(
            JSON.parse(
              "{" +
                arr0.replace(/(\r\n|\n|\r)/gm, "").replace(/,\s*$/, "") +
                "}"
            )
          );
          // console.log(response,"resssss")
        }

        const groupedData = {};

        response.forEach((entry) => {
          const itemDescrp = entry.item_descrp;
          if (groupedData[itemDescrp]) {
            groupedData[itemDescrp].push(entry);
          } else {
            groupedData[itemDescrp] = [entry];
          }
        });

        const groupedResponse = Object.keys(groupedData).map((key) => ({
          item_descrp: key,
          data: groupedData[key],
        }));
        res.send(groupedResponse);
      } else {
        res.send(err);
        console.log("error");
      }
    } catch (err) {
      res.send(err);

      throw err;
    }
  }

  getSasraFinancialPositionWorkings();
});

// Get Code Details
app.post("/api/get-code-details", (req, res) => {
  const { code, key } = req.body;
  async function getCodeDetails() {
    let con;

    try {
      con = await oracledb.getConnection({
        user: DB_USER,
        password: DB_PASSWORD,
        connectString: DB_CONNECTION_STRING,
        timeout: DB_CONNECTION_TIMEOUT,
      });

      const data = await con.execute(
        code === "BRA" && key.toLowerCase() === "posting"
          ? `SELECT description, actual_code, ltrim(rtrim(short_descrp,0)) short_descrp 
    FROM code_desc
    WHERE code_type = '${code}' and actual_code != '0' ORDER BY actual_code ASC`
          : `SELECT description, actual_code, ltrim(rtrim(short_descrp,0)) short_descrp 
    FROM code_desc
    WHERE code_type = '${code}' ORDER BY actual_code ASC`
      );

      if (key === "twene") {
        const arr = [];
        if (data.rows) {
          for (let i = 0; i < data.rows.length; i++) {
            const description = data.rows[i][0];
            const actual_code = data.rows[i][1];
            const short_descrp = data.rows[i][2];

            arr.push({
              label: actual_code + " - " + description,
              value: actual_code + " - " + description,
              // short_descrp: short_descrp,
            });
          }
        }
        console.log(arr);
        return res.send(arr);
      }

      if (data.rows) {
        const arr = [];

        for (let i = 0; i < data.rows.length; i++) {
          const description = data.rows[i][0];
          const actual_code = data.rows[i][1];
          const short_descrp = data.rows[i][2];

          arr.push({
            label: actual_code + " - " + description,
            value: actual_code,
            // short_descrp: short_descrp,
          });
        }

        res.send(arr);
      } else {
        res.send(err);
        console.log(err);
      }
    } catch (err) {
      res.send(err);
    }
  }

  getCodeDetails();
});

// Get Code Details
app.post("/api/get-code-details-3", (req, res) => {
  const { code, key } = req.body;
  async function getCodeDetails() {
    let con;

    try {
      con = await oracledb.getConnection({
        user: DB_USER,
        password: DB_PASSWORD,
        connectString: DB_CONNECTION_STRING,
        timeout: DB_CONNECTION_TIMEOUT,
      });

      const data = await con.execute(
        `SELECT description, actual_code, ltrim(rtrim(short_descrp,0)) short_descrp 
      FROM code_desc
      WHERE code_type = '${code}' ORDER BY actual_code ASC`
      );

      if (key === "twene") {
        const arr = [];
        if (data.rows) {
          for (let i = 0; i < data.rows.length; i++) {
            const description = data.rows[i][0];
            const actual_code = data.rows[i][1];
            const short_descrp = data.rows[i][2];

            arr.push({
              label: actual_code + " - " + description,
              value: actual_code + " - " + description,
              // short_descrp: short_descrp,
            });
          }
        }
        console.log(arr);
        return res.send(arr);
      }

      if (data.rows) {
        const arr = [];

        for (let i = 0; i < data.rows.length; i++) {
          const description = data.rows[i][0];
          const actual_code = data.rows[i][1];
          const short_descrp = data.rows[i][2];

          arr.push({
            label: actual_code + " - " + description,
            value: actual_code,
            // short_descrp: short_descrp,
          });
        }

        res.send(arr);
      } else {
        res.send(err);
        console.log(err);
      }
    } catch (err) {
      res.send(err);
    }
  }

  getCodeDetails();
});

// get code details 2 derrick
app.post("/api/get-code-details-2", (req, res) => {
  const code = "'" + req.body.code + "'";
  const orderingBy = "" + req.body.orderingBy + "";

  async function getCodeDetails2() {
    let con;
    let determinant =
      orderingBy === "actualCode" ? "actual_code" : "description";

    try {
      con = await oracledb.getConnection({
        user: DB_USER,
        password: DB_PASSWORD,
        connectString: DB_CONNECTION_STRING,
        timeout: DB_CONNECTION_TIMEOUT,
      });

      const data = await con.execute(
        `SELECT description, actual_code, ltrim(rtrim(short_descrp,0)) short_descrp 
      FROM code_desc
      WHERE code_type = ${code} ORDER BY ${determinant} ASC`
      );

      if (data.rows) {
        const arr = [];

        for (let i = 0; i < data.rows.length; i++) {
          const description = data.rows[i][0];
          const actual_code = data.rows[i][1];
          const short_descrp = data.rows[i][2];

          arr.push({
            label: actual_code + " - " + description,
            value: actual_code,
            // short_descrp: short_descrp,
          });
        }

        res.send(arr);
      } else {
        res.send(err);
        console.log(err);
      }
    } catch (err) {
      res.send(err);
    }
  }

  getCodeDetails2();
});

// Get Dealer Code API Endpoint - ORACLE
app.get("/api/get-dealer-code", (req, res) => {
  let getDealerCode = async () => {
    try {
      const db = await oracledb.getConnection({
        user: DB_USER,
        password: DB_PASSWORD,
        connectString: DB_CONNECTION_STRING,
        timeout: DB_CONNECTION_TIMEOUT,
      });

      const response = [];
      let arr0 = "";

      // node native promisify
      const execute = util.promisify(db.execute).bind(db);

      const data = await execute(
        `SELECT DEAL_CODE as value, DEAL_CODE || ' - ' || DEAL_DESC as label FROM TB_DEALERS_DET_1 ORDER BY DEAL_CODE`
      );

      if (data) {
        for (let i = 0; i < data.rows.length; i++) {
          for (let x = 0; x < data.metaData.length; x++) {
            arr0 +=
              '"' +
              [data.metaData[x].name.toLowerCase()] +
              '" : "' +
              data.rows[i][x] +
              '",';
          }

          response.push(
            JSON.parse(
              "{" +
                arr0.replace(/(\r\n|\n|\r)/gm, "").replace(/,\s*$/, "") +
                "}"
            )
          );
        }

        res.send(response);
      } else {
        res.send("Something went wrong... Nothing was returned!!");
      }
    } finally {
      // conn.end();
    }
  };

  getDealerCode();
});

///////// TRADE FINANCE APIs //////////////////////////////////////////////

// Get Contingent Branch Code
app.get("/api/get-contingent-branch-code", (req, res) => {
  let getContingentBranchCode = async () => {
    try {
      const db = await oracledb.getConnection({
        user: DB_USER,
        password: DB_PASSWORD,
        connectString: DB_CONNECTION_STRING,
        timeout: DB_CONNECTION_TIMEOUT,
      });

      const response = [];
      let arr0 = "";

      // node native promisify
      const execute = util.promisify(db.execute).bind(db);

      const data = await execute(
        `SELECT BR_CODE as value, BR_CODE || ' - ' || BR_DESCRIPTION as label
FROM TB_BRANCH
ORDER BY BR_CODE ASC`
      );

      if (data) {
        for (let i = 0; i < data.rows.length; i++) {
          for (let x = 0; x < data.metaData.length; x++) {
            arr0 +=
              '"' +
              [data.metaData[x].name.toLowerCase()] +
              '" : "' +
              data.rows[i][x] +
              '",';
          }

          response.push(
            JSON.parse(
              "{" +
                arr0.replace(/(\r\n|\n|\r)/gm, "").replace(/,\s*$/, "") +
                "}"
            )
          );
        }

        res.send(response);
      } else {
        res.send("Something went wrong... Nothing was returned!!");
      }
    } finally {
      // conn.end();
    }
  };

  getContingentBranchCode();
});

// Get Contingent Branch Stage
app.get("/api/get-contingent-stage", (req, res) => {
  let getContingentStage = async () => {
    try {
      const db = await oracledb.getConnection({
        user: DB_USER,
        password: DB_PASSWORD,
        connectString: DB_CONNECTION_STRING,
        timeout: DB_CONNECTION_TIMEOUT,
      });

      const response = [];
      let arr0 = "";

      // node native promisify
      const execute = util.promisify(db.execute).bind(db);

      const data = await execute(
        `SELECT actual_code as value, actual_code || ' - ' || DESCRIPTION as label FROM CODE_DESC
WHERE CODE_TYPE='STC'`
      );

      if (data) {
        for (let i = 0; i < data.rows.length; i++) {
          for (let x = 0; x < data.metaData.length; x++) {
            arr0 +=
              '"' +
              [data.metaData[x].name.toLowerCase()] +
              '" : "' +
              data.rows[i][x] +
              '",';
          }

          response.push(
            JSON.parse(
              "{" +
                arr0.replace(/(\r\n|\n|\r)/gm, "").replace(/,\s*$/, "") +
                "}"
            )
          );
        }

        res.send(response);
      } else {
        res.send("Something went wrong... Nothing was returned!!");
      }
    } finally {
      // conn.end();
    }
  };

  getContingentStage();
});

//Get Contingent Request Details Product
app.get("/api/get-contingent-request-details-product", (req, res) => {
  let getContingentRequestDetailsProducts = async () => {
    try {
      const db = await oracledb.getConnection({
        user: DB_USER,
        password: DB_PASSWORD,
        connectString: DB_CONNECTION_STRING,
        timeout: DB_CONNECTION_TIMEOUT,
      });

      const response = [];
      let arr0 = "";

      // node native promisify
      const execute = util.promisify(db.execute).bind(db);

      const data = await execute(
        `SELECT ACTUAL_CODE as value,ACTUAL_CODE || ' - ' || DESCRIPTION as label FROM VW_CONTIN_PROD`
      );

      if (data) {
        for (let i = 0; i < data.rows.length; i++) {
          for (let x = 0; x < data.metaData.length; x++) {
            arr0 +=
              '"' +
              [data.metaData[x].name.toLowerCase()] +
              '" : "' +
              data.rows[i][x] +
              '",';
          }

          response.push(
            JSON.parse(
              "{" +
                arr0.replace(/(\r\n|\n|\r)/gm, "").replace(/,\s*$/, "") +
                "}"
            )
          );
        }

        res.send(response);
      } else {
        res.send("Something went wrong... Nothing was returned!!");
      }
    } finally {
      // conn.end();
    }
  };

  getContingentRequestDetailsProducts();
});

// Get Contingent Request Enquiry Data
app.post("/api/get-contingent-req-enq-data", (req, res) => {
  const {
    customer_number,
    branch_code,
    def_branch_code,
    processing_age,
    amount,
    contingent_stage,
    date_from,
    date_to,
    stage_category,
  } = req.body;
  let getContingentData = async () => {
    try {
      const db = await oracledb.getConnection({
        user: DB_USER,
        password: DB_PASSWORD,
        connectString: DB_CONNECTION_STRING,
        timeout: DB_CONNECTION_TIMEOUT,
      });

      const response = [];
      let arr0 = "";

      // node native promisify
      const execute = util.promisify(db.execute).bind(db);

      const data = await execute(
        `SELECT 
    (SELECT description 
     FROM VW_CONTIN_PROD
     WHERE ACTUAL_CODE = VW_CONTINGPROD_STAGE.Product_type) AS type,
     application_no,
    VW_CONTINGPROD_STAGE.CUSTOMER_NUMBER,
    customer_name,
    PROCESSING_AGE,
    contract_amt,
    POSTed_by,
    g_flag,
    (SELECT description
     FROM tb_currency
     WHERE currency_code = VW_CONTINGPROD_STAGE.ccy) AS currency
    
FROM
    VW_CONTINGPROD_STAGE
where CUSTOMER_NUMBER like '%'||'${customer_number}'||'%'
        and BRANCH_CODE like '%'||NVL('${branch_code}','${def_branch_code}')||'%'
        and PROCESSING_AGE <=NVL('${processing_age}',20000000)
        and contract_amt >=NVL('${amount}',0)
        and APP_FLAG like '%'||'${contingent_stage}'||'%'
        and nvl(POSTING_DATE, GET_POSTINGDATE) between NVL('${date_from}','01-JAN-1900') and NVL('${date_to}', GET_POSTINGDATE)
        and g_flag like '%'||'${stage_category}'||'%'`
      );

      if (data) {
        for (let i = 0; i < data.rows.length; i++) {
          for (let x = 0; x < data.metaData.length; x++) {
            arr0 +=
              '"' +
              [data.metaData[x].name.toLowerCase()] +
              '" : "' +
              data.rows[i][x] +
              '",';
          }

          response.push(
            JSON.parse(
              "{" +
                arr0.replace(/(\r\n|\n|\r)/gm, "").replace(/,\s*$/, "") +
                "}"
            )
          );
        }

        res.send(response);
      } else {
        res.send("Something went wrong... Nothing was returned!!");
      }
    } catch (e) {
      res.send(e).toString();
    }
  };

  getContingentData();
});

//Get Contingent Request Customer Number
app.post("/api/get-contingent-customer-number-lov", (req, res) => {
  const { branch_code } = req.body;
  let getContingentRequestCustomerNumber = async () => {
    try {
      const db = await oracledb.getConnection({
        user: DB_USER,
        password: DB_PASSWORD,
        connectString: DB_CONNECTION_STRING,
        timeout: DB_CONNECTION_TIMEOUT,
      });

      const response = [];
      let arr0 = "";

      // node native promisify
      const execute = util.promisify(db.execute).bind(db);

      const data = await execute(
        `SELECT CUSTOMER_NUMBER as value, CUSTOMER_NUMBER || ' - ' || CUSTOMER_NAME as label
        FROM VW_CUST where branch_code=:branch_code
        ORDER BY CUSTOMER_NAME`,
        {
          branch_code,
        }
      );

      if (data) {
        for (let i = 0; i < data.rows.length; i++) {
          const item = {};
          for (let x = 0; x < data.metaData.length; x++) {
            item[data.metaData[x].name.toLowerCase()] = data.rows[i][x];
          }
          response.push(item);
        }
        res.send(response);
      } else {
        res.send("Something went wrong... Nothing was returned!!");
      }
    } catch (e) {
      res.send(e).toString();
    }
  };

  getContingentRequestCustomerNumber();
});

/////////////////////////////////////////////////////////////////////////////////////

////////////////////// Mario APIs /////////////////////////////////////////////////////

// Get Tranche Customers
app.get("/api/get-tranche-customers", (req, res) => {
  let getTrancheCus = async () => {
    try {
      const db = await oracledb.getConnection({
        user: DB_USER,
        password: DB_PASSWORD,
        connectString: DB_CONNECTION_STRING,
        timeout: DB_CONNECTION_TIMEOUT,
      });

      const response = [];
      let arr0 = "";

      // node native promisify
      const execute = util.promisify(db.execute).bind(db);

      const data = await execute(
        `select distinct customer_number || ' - ' || GET_CUSTOMER_NAME(CUSTOMER_NUMBER) label, CUSTOMER_NUMBER as value from tb_loans_tranches
where DISBURSED = 'N'`
      );

      if (data) {
        for (let i = 0; i < data.rows.length; i++) {
          for (let x = 0; x < data.metaData.length; x++) {
            arr0 +=
              '"' +
              [data.metaData[x].name.toLowerCase()] +
              '" : "' +
              data.rows[i][x] +
              '",';
          }

          response.push(
            JSON.parse(
              "{" +
                arr0.replace(/(\r\n|\n|\r)/gm, "").replace(/,\s*$/, "") +
                "}"
            )
          );
        }

        res.send(response);
      } else {
        res.send("Something went wrong... Nothing was returned!!");
      }
    } finally {
      // conn.end();
    }
  };

  getTrancheCus();
});

// Get Tranche App Number
app.post("/api/get-tranche-app-no", (req, res) => {
  const { customer_number } = req.body;
  let getTrancheAppNo = async () => {
    try {
      const db = await oracledb.getConnection({
        user: DB_USER,
        password: DB_PASSWORD,
        connectString: DB_CONNECTION_STRING,
        timeout: DB_CONNECTION_TIMEOUT,
      });

      const response = [];
      let arr0 = "";

      // node native promisify
      const execute = util.promisify(db.execute).bind(db);

      const data = await execute(
        `select distinct LOAN_APP_NO from tb_loans_tranches
where customer_number = '${customer_number}'`
      );

      if (data) {
        for (let i = 0; i < data.rows.length; i++) {
          for (let x = 0; x < data.metaData.length; x++) {
            arr0 +=
              '"' +
              [data.metaData[x].name.toLowerCase()] +
              '" : "' +
              data.rows[i][x] +
              '",';
          }

          response.push(
            JSON.parse(
              "{" +
                arr0.replace(/(\r\n|\n|\r)/gm, "").replace(/,\s*$/, "") +
                "}"
            )
          );
        }

        res.send(response);
      } else {
        res.send("Something went wrong... Nothing was returned!!");
      }
    } catch (e) {
      res.send(e);
    }
  };

  getTrancheAppNo();
});

//////////////////////////////////////////////////////////////////////////////////////////////////

// Get Risk Status API Endpoint - ORACLE
app.post("/api/get-risk-status", (req, res) => {
  const { customerNumber } = req.body;
  let getRiskStatus = async () => {
    try {
      const db = await oracledb.getConnection({
        user: DB_USER,
        password: DB_PASSWORD,
        connectString: DB_CONNECTION_STRING,
        timeout: DB_CONNECTION_TIMEOUT,
      });

      const response = [];
      let arr0 = "";

      // node native promisify
      const execute = util.promisify(db.execute).bind(db);

      const data = await execute(
        `select get_risk('${customerNumber}') as risk_status from dual`
      );

      const data2 = await execute(
        `SELECT decode(get_PEP('${customerNumber}'),'N','NO','Y','YES') as pep_status from dual`
      );

      if (data) {
        for (let i = 0; i < data.rows.length; i++) {
          for (let x = 0; x < data.metaData.length; x++) {
            arr0 +=
              '"' +
              [data.metaData[x].name.toLowerCase()] +
              '" : "' +
              data.rows[i][x] +
              '",';
          }

          response.push(
            JSON.parse(
              "{" +
                arr0.replace(/(\r\n|\n|\r)/gm, "").replace(/,\s*$/, "") +
                "}"
            )
          );
        }

        res.send({ risk_status: data.rows[0][0], pep_status: data2.rows[0] });
      } else {
        res.send("Something went wrong... Nothing was returned!!");
      }
    } finally {
      // conn.end();
    }
  };

  getRiskStatus();
});

//Karen 2 dormant account reactivation api
app.post("/api/prc_dormant_ractivfee", async (req, res) => {
  const {
    acct_link,
    amount,
    batch_no,
    posted_by,
    cheq_no,
    terminal_id,
    branch,
  } = req.body;
  let con;
  try {
    con = await oracledb.getConnection({
      user: DB_USER,
      password: DB_PASSWORD,
      connectString: DB_CONNECTION_STRING,
      timeout: DB_CONNECTION_TIMEOUT,
    });

    // return res.send(req.body)

    con.execute(
      `BEGIN BANKOWNER.prc_dormant_ractivfee( :acct_link , :amount, :batch_no, :posted_by, :cheq_no, :terminal_id, :branch, :mess, :charge); END;`,
      {
        acct_link,
        amount,
        batch_no,
        posted_by,
        cheq_no,
        terminal_id,
        branch,
        mess: { dir: oracledb.BIND_OUT, type: oracledb.STRING },
        charge: { dir: oracledb.BIND_OUT, type: oracledb.NUMBER },
      },

      function (err, result) {
        if (result) {
          res.send(result);
        } else {
          throw err;
        }
      }
    );
  } catch (err) {
    console.error(err);
    res.status(500).send(err);
  }
});

//Karen
app.post("/api/get-closed-account", (req, res) => {
  const accountNumber = req.body.accountNumber;
  // res.send("ghghg");

  async function getClosedAccount() {
    let con;
    try {
      con = await oracledb.getConnection({
        user: DB_USER,
        password: DB_PASSWORD,
        connectString: DB_CONNECTION_STRING,
        timeout: DB_CONNECTION_TIMEOUT,
      });

      const data = await con.execute(
        `SELECT  ACCT_LINK, ACCOUNT_DESCRP, CURR_DESC, DESCRIPTION, BRANCH_DESCRP , ACCOUNT_STATUS ,DATE_OPENED, DATE_OF_LAST_ACTIVITY, LEVEL_IDENTIFIER
             FROM VW_G_LEDGER_ALL
             WHERE  ACCT_LINK  = '${accountNumber}' `
      );

      // res.send(data);
      let response = [];
      let arr0 = "";

      if (data) {
        for (let i = 0; i < data.rows.length; i++) {
          for (let x = 0; x < data.metaData.length; x++) {
            arr0 +=
              '"' +
              [data.metaData[x].name.toLowerCase()] +
              '" : "' +
              data.rows[i][x] +
              '",';
          }
          // res.send(data);
          // res.send(arr0);
          response.push(
            JSON.parse(
              "{" +
                arr0.replace(/(\r\n|\n|\r)/gm, "").replace(/,\s*$/, "") +
                "}"
            )
          );
          res.send(response);
        }

        // res.send(response);
        return;
      } else {
        res.send("Something went wrong... Nothing was returned!!");
      }

      // res.send(data);
      // localStorage.setItem("codescs", data);
      // console.log(res)

      // localStorage.getItem("codescs");
      // console.log(data.rows)
    } catch (err) {
      console.log(err);
    }
  }
  getClosedAccount();
});

app.get("/api/get-closed-account-approval", (req, res) => {
  let getApproval = async () => {
    // let con;
    try {
      const db = await oracledb.getConnection({
        user: DB_USER,
        password: DB_PASSWORD,
        connectString: DB_CONNECTION_STRING,
        timeout: DB_CONNECTION_TIMEOUT,
      });

      // const response = [];

      // // node native promisify
      const execute = util.promisify(db.execute).bind(db);

      const data = await execute(
        `SELECT * FROM vw_acct_closing WHERE branch_code= '001'`
      );

      if (data) {
        let arr0 = "";
        let arr = [];

        for (let i = 0; i < data.rows.length; i++) {
          let obj = {};
          for (let x = 0; x < data.metaData.length; x++) {
            obj = { ...obj, [data.metaData[x].name]: data.rows[i][x] };
          }
          arr.push(obj);
        }
        return res.send(arr);
      } else {
        return res.send("Something went wrong... Nothing was returned");
      }
    } catch (err) {
      return res.send(err.toString());
    }
  };

  getApproval();
});

app.post("/api/prc_dormant_ractiv", (req, res) => {
  async function dormantok() {
    const hostv = os.hostname();
    const accountv = req.body.accountv;
    const branchv = req.body.branchv;
    const postedby = req.body.postedby;
    const batchv = req.body.batchv;
    const docv = req.body.docv;
    const feeamt = req.body.feeamt;

    var response = [];
    let con;

    try {
      con = await oracledb.getConnection({
        user: DB_USER,
        password: DB_PASSWORD,
        connectString: DB_CONNECTION_STRING,
        timeout: DB_CONNECTION_TIMEOUT,
      });
      await con.execute(
        "BEGIN BANKOWNER.prc_dormant_ractiv(:acct_v,:bra_v,:posted_by,:host_v ,:batch_v,:doc_v,:fee_amt,:msg_code ,:msg_v); END;",
        {
          acct_v: accountv,
          bra_v: branchv,
          posted_by: postedby,
          host_v: hostv,
          batch_v: batchv,
          doc_v: docv,
          fee_amt: feeamt,
          msg_code: {
            type: oracledb.STRING,
            dir: oracledb.BIND_OUT,
          },
          msg_v: {
            type: oracledb.STRING,
            dir: oracledb.BIND_OUT,
          },
        },
        function (err, result) {
          if (err) {
            throw err;
          }

          if (result) {
            // if (result.outBinds.total_charges != null) {
            //   var mess = result.outBinds.response;
            //   var charges = result.outBinds.total_charges;

            //   response = {
            //     success: true,
            //     responseMessage: mess,
            //     totalCharges: charges,
            //   };

            //   res.send(response);
            // } else {
            //   var mess = result.outBinds.response;
            //   var charges = result.outBinds.total_charges;

            //   response = {
            //     success: true,
            //     responseMessage: mess,
            //     totalCharges: charges,
            //   };

            //   res.send(response);
            // }
            res.send(result);
          }
        }
      );
      // await con.close();
    } catch (err) {
      res.send(err.toString());
      console.log(err);
    }
  }

  dormantok();
});
//Karen 2 closed account functionality
app.post("/api/clsacct", async (req, res) => {
  const {
    acct_link,
    cls_type,
    mandate,
    document_no,
    transf_acct,
    choosenType,
    currency_code,
    naration,
    global_bra,
    terminal,
    username,
    date,
    frmcode,
    sess_id,
    machine_ip,
    global_prog,
  } = req.body;
  let con;
  try {
    con = await oracledb.getConnection({
      user: DB_USER,
      password: DB_PASSWORD,
      connectString: DB_CONNECTION_STRING,
      timeout: DB_CONNECTION_TIMEOUT,
    });

    // return res.send(req.body)
    if (choosenType) {
      // console.log("ghdsh")
      const data = await con.execute(
        `SELECT closure_contra , GET_ACCTDESC(closure_contra)  FROM tb_closure_type
WHERE currency_code = get_currcode(:currency_code)`,
        { currency_code }
      );

      console.log(data);
      res.send({
        accountNumber: data.rows[0][0],
        accountName: data.rows[0][1],
      });
    } else {
      const result = await con.execute(
        `BEGIN BANKOWNER.PKG_clsAcct_RT.prc_clsAcct_reqt_RT ( :acct_link , :cls_type, :mandate, : document_no, :transf_acct_v, :currency_code, :naration, :global_bra, :terminal, :username, :date, :frmcode, :sess_id, :machine_ip, :global_prog, :RESPONSE_CODE, :RESPONSE_MESS); END;`,
        {
          acct_link,
          cls_type,
          mandate,
          document_no,
          transf_acct_v: transf_acct,
          currency_code,
          naration,
          global_bra,
          terminal,
          username,
          date: new Date(date),
          frmcode,
          sess_id,
          machine_ip,
          global_prog,
          RESPONSE_CODE: { dir: oracledb.BIND_OUT, type: oracledb.STRING },
          RESPONSE_MESS: { dir: oracledb.BIND_OUT, type: oracledb.STRING },
        }
      );
      // return res.send("hello")

      // const result = await con.execute(
      //   `BEGIN PKG_clsAcct_RT.PKG_clsAcct_reqt_RT(:acct_link_V, :cls_type_v, :MANDATE_v, :DOCUMENT_NO_v, :transf_acct_v, :batchno_v, :CURRENCY_code_v, :naration_v, :GLOBAL_BRA_V, :TERMINAL_V, :username_V, :DATE_V, :frmcode_V, :sess_id_V, :machine_ip_V, :global_prog_v, :RESPONSE_CODE, :RESPONSE_MESS); END;`,
      //   {
      //     acct_link_V: 'your value',
      //     cls_type_v: 'your value',
      //     MANDATE_v: 'your value',
      //     DOCUMENT_NO_v: 'your value',
      //     transf_acct_v: 'hdjdjsds',
      //     batchno_v: 'your value',
      //     CURRENCY_code_v: 'your value',
      //     naration_v: 'your value',
      //     GLOBAL_BRA_V: 'your value',
      //     TERMINAL_V: 'your value',
      //     username_V: 'your value',
      //     DATE_V: '2023-05-08',
      //     frmcode_V: 'your value',
      //     sess_id_V: 'your value',
      //     machine_ip_V: 'your value',
      //     global_prog_v: 'your value',
      //     RESPONSE_CODE: { type: oracledb.STRING, dir: oracledb.BIND_OUT },
      //     RESPONSE_MESS: { type: oracledb.STRING, dir: oracledb.BIND_OUT },
      //   })

      if (result.outBinds?.RESPONSE_CODE === "999") {
        return res.send(result.outBinds?.RESPONSE_MESS);
      }
      if (result.outBinds?.RESPONSE_CODE === "000") {
        return res.send(result.outBinds?.RESPONSE_MESS);
      }

      res.status(200).json(response);
    }
  } catch (err) {
    console.log(err);
    res.status(500).send(err);
  }
});

// app.listen(3000, () => {
//   console.log("Server running on port 3000");
// });

//Karen approval 3
app.get("/api/get-closed-account-approval", (req, res) => {
  let getApproval = async () => {
    try {
      const db = await oracledb.getConnection({
        user: DB_USER,
        password: DB_PASSWORD,
        connectString: DB_CONNECTION_STRING,
      });

      const response = [];

      // node native promisify
      const execute = util.promisify(db.execute).bind(db);

      const data = await execute(
        `SELECT * FROM vw_acct_closing WHERE branch_code= '001'`
      );

      if (data.rows) {
        data.rows.map((res) => {
          // response.push(JSON.parse('{' + res.replace(/,\s*$/, "") + '}'));
          response.push(res.join(" - "));
        });
        res.send(response);
      } else {
        res.send("Something went wrong... Nothing was returned!!");
      }
    } finally {
      conn.end();
    }
  };

  getApproval();
});

app.post("/api/cash-transfer-to-vault", async (req, res) => {
  const {
    key,
    username,
    branch_code,
    batch_no,
    contraAccount,
    vaultAccount,
    currency,
    postingDate,
    denominationCode,
    quantity,
    denominations,
    amount,
    batchNumber,
    branch,
  } = req.body;

  try {
    const db = await oracledb.getConnection({
      user: DB_USER,
      password: DB_PASSWORD,
      connectString: DB_CONNECTION_STRING,
      timeout: DB_CONNECTION_TIMEOUT,
    });

    const execute = util.promisify(db.execute).bind(db);
    if (key === "unconfirmed transfers") {
      const data = await execute(
        `SELECT BATCH_NO , GET_CURRDESC(CURRENCY_CODE),   TRANS_AMOUNT ,TRANS_TO FROM CHG_VW WHERE POSTED_BY = '${username}'`
      );
      console.log({ data: data?.rows[0] });
      if (data) {
        return res.send(data.rows);
      }

      return res.send("Something went wrong");
    }

    // if (key === "vault account") {
    //   const data = await execute(
    //     `select NVL(B.ASSIGNED_TELLER,B.USER_NAME) teller_name ,B.FULLNAME from menu_users B,USERS_TELLER C,menu_users A
    //     WHERE B.USER_NAME=A.USER_NAME AND B.USER_NAME !='${username}' AND B.ASSIGNED_TELLER=C.TELLER_NAME AND
    //     B.BRANCH_CODE= '${branch_code}'`
    //   );

    //   if (data) {
    //     const arr = [];
    //     for (let i = 0; i < data.rows.length; i++) {
    //       const label = data.rows[i][1];
    //       const value = data.rows[i][0];

    //       arr.push({
    //         label: `${value ? `${value} - ` : ""}${label}`,
    //         value: `${value ? `${value} - ` : ""}${label}`,
    //       });
    //     }
    //     // console.log( arr);
    //     return res.send(arr);
    //   }
    // }
    if (key === "vault account") {
      const data = await execute(
        `select NVL(B.ASSIGNED_TELLER,B.USER_NAME) teller_name ,B.FULLNAME , B.USER_NAME from menu_users B,USERS_TELLER C,menu_users A
        WHERE B.USER_NAME=A.USER_NAME AND B.USER_NAME !='${username}' AND B.ASSIGNED_TELLER=C.TELLER_NAME AND
        B.BRANCH_CODE= '${branch_code}'`
      );

      if (data) {
        const arr = [];
        for (let i = 0; i < data.rows.length; i++) {
          const label = data.rows[i][1];
          const value = data.rows[i][0];

          arr.push({
            label: `${value ? `${value} - ` : ""}${label}`,
            value: `${value ? `${value} - ` : ""}${label}-${data.rows[i][2]}`,
          });
        }
        // console.log( arr);
        return res.send(arr);
      }
    }
    if (key === "rejected cash request") {
      const data = await execute(
        `SELECT BATCH_NO, AMOUNT, GET_CURRDESC(CURRENCY) AS CURRENCY  FROM CRQS_VW WHERE TELLER_ID ='${username}' AND FLAG = 'R'`
      );
      if (data) {
        return res.send(data.rows);
      }
    }

    if (key == "cancel-unconfirmed") {
      const data = await execute(
        `delete from vault_trans_TEMP
         where batch_no = :batch_no`,
        {
          batch_no,
        }
      );

      if (data) {
        return res.send({
          responseMessage: "Deleted successfully",
        });
      } else {
        return res.send("Something went wrong... Nothing was returned!!");
      }
    }

    if (key == "transfer-cash") {
      const response = Object.keys(denominations)?.map((i) => {
        return execute(
          `Insert into VAULT_TRANS_TEMP
          (
            VAULT_ACCOUNT, CONTRA_ACCOUNT, TELLER_NAME, CURRENCY_CODE, POSTING_DATE, 
            DENOMINATION_CODE, QUANTITY, COLLECTION_FLAG, UPDATE_INDICATOR, USER_NAME, 
            AMOUNT, BATCH_NO, BRA_CODE)
        Values
          (:username, :contraAccount, :vaultAccount, :currency, :postingDate, 
            :denominationCode, :quantity, 'O', 'Y', :username, 
            :amount, :batch_no, :branch_code)`,
          {
            username,
            contraAccount,
            vaultAccount,
            currency,
            postingDate: new Date(postingDate),
            denominationCode: i,
            quantity: denominations[i]?.quantity,
            amount: denominations[i]?.quantity * i,
            batch_no,
            branch_code,
          }
        );
      });
      const data = await Promise.all(response);

      if (data) {
        const data1 = await execute(`select get_errorcode('06805') from dual`);

        return res.send({
          responseMessage: data1?.rows[0][0],
        });
      } else {
        return res.send("Something went wrong... Nothing was returned!!");
      }
    }
    // return res.send("ghamna");
    // res.send(con);
  } catch (err) {
    console.log(err);
    res.send("An error occurred");
  }
});

app.post("/api/closed-cash-transfer-approval-table", (req, res) => {
  // const { account_load, start_date, end_date, document_ref } = req.body;

  console.log(req.body);
  const branch_code = req.body.branchCode;
  const reference_no = req.body.referenceNo;
  const clse_acct = req.body.clseAcct;

  async function CashTranferEnquiry() {
    let con;
    try {
      con = await oracledb.getConnection({
        user: DB_USER,
        password: DB_PASSWORD,
        connectString: DB_CONNECTION_STRING,
        timeout: DB_CONNECTION_TIMEOUT,
      });

      const data = await con.execute(
        `SELECT REFERENCE_NO,  CLSE_ACCT , GET_ACCTDESC(CLSE_ACCT) CLSE_ACCT_DESC,     TRANSFER_ACCT , GET_ACCTDESC(TRANSFER_ACCT) TRANSFER_ACCT_DESC,  GET_CURRISO(TRANSFER_CURRENCY) TRANSFER_CURRENCY_DESC,TRANSFER_AMOUNT , POSTING_DATE
          FROM TB_AC_CLSE_PAY WHERE code_type='CLO' AND app_flag='Y' AND BRANCH_CODE LIKE '%'||'${branch_code}'||'%'  AND REFERENCE_NO LIKE '%' ||'${
          reference_no ?? ""
        }'||'%'  AND CLSE_ACCT LIKE '%'||'${clse_acct ?? ""}'||'%'`
      );

      if (data) {
        let arr0 = "";
        let arr = [];

        for (let i = 0; i < data.rows.length; i++) {
          let obj = {};
          for (let x = 0; x < data.metaData.length; x++) {
            obj = { ...obj, [data.metaData[x].name]: data.rows[i][x] };
          }
          arr.push(obj);
        }
        res.send(arr);
      } else {
        res.send("Something went wrong... Nothing was returned");
      }
    } catch (err) {
      res.send(err.toString());
    }
  }
  CashTranferEnquiry();
});
//karen 4 dormant account fee api
app.get("/api/get-dormant-account-fee", (req, res) => {
  let getDorm = async () => {
    try {
      const db = await oracledb.getConnection({
        user: DB_USER,
        password: DB_PASSWORD,
        connectString: DB_CONNECTION_STRING,
      });

      const response = [];

      // node native promisify
      const execute = util.promisify(db.execute).bind(db);

      const data = await execute(
        `SELECT * FROM vw_acct_closing WHERE branch_code= '001'`
      );

      if (data.rows) {
        data.rows.map((res) => {
          // response.push(JSON.parse('{' + res.replace(/,\s*$/, "") + '}'));
          response.push(res.join(" - "));
        });
        res.send(response);
      } else {
        res.send("Something went wrong... Nothing was returned!!");
      }
    } finally {
      conn.end();
    }
  };
});

//Karen 5 dormant
app.post("/api/get-dormant-account", (req, res) => {
  const accountNumber = req.body.accountNumber;
  // res.send("ghghg");

  async function getDormantAccount() {
    let con;
    try {
      con = await oracledb.getConnection({
        user: DB_USER,
        password: DB_PASSWORD,
        connectString: DB_CONNECTION_STRING,
        timeout: DB_CONNECTION_TIMEOUT,
      });

      const data = await con.execute(
        `SELECT ACCT_LINK, ACCOUNT_DESCRP, CURRENCY_DESC, PRODUCT_DESC, BRANCH_DESC , STATUS_DESC ,DATE_OPENED, DATE_OF_LAST_ACTIVITY, LEVEL_IDENTIFIER
             FROM  VW_DORMANT_DETAILS	
             WHERE  ACCT_LINK  = '${accountNumber}' `
      );

      // res.send(data);
      let response = [];
      let arr0 = "";

      if (data) {
        for (let i = 0; i < data.rows.length; i++) {
          for (let x = 0; x < data.metaData.length; x++) {
            arr0 +=
              '"' +
              [data.metaData[x].name.toLowerCase()] +
              '" : "' +
              data.rows[i][x] +
              '",';
          }
          // res.send(data);
          // res.send(arr0);
          response.push(
            JSON.parse(
              "{" +
                arr0.replace(/(\r\n|\n|\r)/gm, "").replace(/,\s*$/, "") +
                "}"
            )
          );
          res.send(response);
        }

        // res.send(response);
        return;
      } else {
        res.send("Something went wrong... Nothing was returned!!");
      }
    } catch (err) {
      console.log(err);
    }
  }
  getDormantAccount();
});

app.post("/api/get-dormant-account-approval", (req, res) => {
  const accountNumber = req.body.accountNumber;
  // res.send("ghghg");

  async function getDormantAccount() {
    let con;
    try {
      con = await oracledb.getConnection({
        user: DB_USER,
        password: DB_PASSWORD,
        connectString: DB_CONNECTION_STRING,
        timeout: DB_CONNECTION_TIMEOUT,
      });

      const data = await con.execute(
        `SELECT 
     VW_DORMANT_DETAILS.ACCT_LINK AS ACCT_LINK ,
     TB_DORMANT_REACT_TEMP.BATCH_NO AS BATCH_NO ,
      VW_DORMANT_DETAILS.ACCOUNT_DESCRP AS ACCOUNT_DESCRP, VW_DORMANT_DETAILS.CURRENCY_DESC AS CURRENCY_DESC, VW_DORMANT_DETAILS.PRODUCT_DESC AS PRODUCT_DESC, VW_DORMANT_DETAILS.BRANCH_DESC AS BRANCH_DESC, VW_DORMANT_DETAILS.STATUS_DESC AS STATUS_DESC ,VW_DORMANT_DETAILS.DATE_OPENED AS DATE_OPENED, VW_DORMANT_DETAILS.DATE_OF_LAST_ACTIVITY AS DATE_OPENED, VW_DORMANT_DETAILS.LEVEL_IDENTIFIER AS LEVEL_IDENTIFIER
     
FROM  
    VW_DORMANT_DETAILS  RIGHT JOIN  TB_DORMANT_REACT_TEMP  ON VW_DORMANT_DETAILS.ACCT_LINK = TB_DORMANT_REACT_TEMP.ACCT_LINK 
    ORDER BY VW_DORMANT_DETAILS.ACCT_LINK 
    WHERE  ACCT_LINK  = '${accountNumber}'`
      );

      // res.send(data);
      let response = [];
      let arr0 = "";

      if (data) {
        for (let i = 0; i < data.rows.length; i++) {
          for (let x = 0; x < data.metaData.length; x++) {
            arr0 +=
              '"' +
              [data.metaData[x].name.toLowerCase()] +
              '" : "' +
              data.rows[i][x] +
              '",';
          }
          // res.send(data);
          // res.send(arr0);
          response.push(
            JSON.parse(
              "{" +
                arr0.replace(/(\r\n|\n|\r)/gm, "").replace(/,\s*$/, "") +
                "}"
            )
          );
          res.send(response);
        }

        // res.send(response);
        return;
      } else {
        res.send("Something went wrong... Nothing was returned!!");
      }
    } catch (err) {
      console.log(err);
    }
  }
  getDormantAccount();
});

//Karen 6
app.get("/api/get-dormant-fee-row", (req, res) => {
  const accountNumber = req.body.accountNumber;
  // res.send("ghghg");

  async function getDormantAccountFeeRow() {
    let con;
    try {
      con = await oracledb.getConnection({
        user: DB_USER,
        password: DB_PASSWORD,
        connectString: DB_CONNECTION_STRING,
        timeout: DB_CONNECTION_TIMEOUT,
      });

      const data = await con.execute(
        `select acct_link as fee_account,account_name, transaction_details as fee_description,  credit_amount as fee_charge, cur_desc from 
        VW_FEE_TRANSACTIONS where batch_no= '20230713130793' and CREDIT_AMOUNT is not null and acct_link not in (select position_ac from tb_curr_acct)`
      );

      // res.send(data);
      let response = [];
      let arr0 = "";

      if (data) {
        for (let i = 0; i < data.rows.length; i++) {
          for (let x = 0; x < data.metaData.length; x++) {
            arr0 +=
              '"' +
              [data.metaData[x].name.toLowerCase()] +
              '" : "' +
              data.rows[i][x] +
              '",';
          }
          // res.send(data);
          // res.send(arr0);
          response.push(
            JSON.parse(
              "{" +
                arr0.replace(/(\r\n|\n|\r)/gm, "").replace(/,\s*$/, "") +
                "" +
                "}"
            )
          );
          res.send(response);
        }

        // res.send(response);
        return;
      } else {
        res.send("Something went wrong... Nothing was returned!!");
      }
    } catch (err) {
      console.log(err);
    }
  }
  getDormantAccountFeeRow();
});

app.post("/api/dormant-branch-approval-table", (req, res) => {
  // const { account_load, start_date, end_date, document_ref } = req.body;

  const branch_code = req.body.branchCode;
  async function getDormantBranchAprovalTable() {
    let con;
    try {
      con = await oracledb.getConnection({
        user: DB_USER,
        password: DB_PASSWORD,
        connectString: DB_CONNECTION_STRING,
        timeout: DB_CONNECTION_TIMEOUT,
      });

      const data = await con.execute(
        `select acct_link, account_descrp, date_altered, reason, branch_code, posted_by
         FROM tb_DORMANT_rEACT_TEMP
        WHERE approval_flag='N' AND BRANCH_CODE = '${branch_code}'`
      );

      if (data) {
        let arr0 = "";
        let arr = [];

        for (let i = 0; i < data.rows.length; i++) {
          let obj = {};
          for (let x = 0; x < data.metaData.length; x++) {
            obj = { ...obj, [data.metaData[x].name]: data.rows[i][x] };
          }
          arr.push(obj);
        }
        res.send(arr);
      } else {
        res.send("Something went wrong... Nothing was returned");
      }
    } catch (err) {
      res.send(err.toString());
    }
  }
  getDormantBranchAprovalTable();
});
// app.post("/api/dormant-branch-approval-table", (req, res) => {
//   // const { account_load, start_date, end_date, document_ref } = req.body;

//   const branch_code = req.body.branchCode;
//   async function getDormantBranchAprovalTable() {
//     let con;
//     try {
//       con = await oracledb.getConnection({
//         user: DB_USER,
//         password: DB_PASSWORD,
//         connectString: DB_CONNECTION_STRING,
//         timeout: DB_CONNECTION_TIMEOUT,
//       });

//       const data = await con.execute(
//         `select acct_link, account_descrp, date_altered, reason, branch_code, posted_by
//          FROM tb_DORMANT_rEACT_TEMP
//         WHERE approval_flag='N' AND BRANCH_CODE LIKE '%' || ${branch_code} || '%' `
//       );

//       if (data) {
//         let arr0 = "";
//         let arr = [];

//         for (let i = 0; i < data.rows.length; i++) {
//           let obj = {};
//           for (let x = 0; x < data.metaData.length; x++) {
//             obj = { ...obj, [data.metaData[x].name]: data.rows[i][x] };
//           }
//           arr.push(obj);
//         }
//         res.send(arr);
//       } else {
//         res.send("Something went wrong... Nothing was returned");
//       }
//     } catch (err) {
//       res.send(err.toString());
//     }
//   }
//   getDormantBranchAprovalTable();
//
// });

//
//
//
//
//
//
// Account Notes Karen

//---Account Message Creation---//

//0 Account Notes Details Population //
app.post("/api/get-account-notes", async (req, res) => {
  // const { account_load, start_date, end_date, document_ref } = req.body;

  const account_number = req.body.accountNumber;
  const note = req.body.Note;

  async function getAccountNotes() {
    let con;
    try {
      con = await oracledb.getConnection({
        user: DB_USER,
        password: DB_PASSWORD,
        connectString: DB_CONNECTION_STRING,
        timeout: DB_CONNECTION_TIMEOUT,
      });

      // const data = await con.execute(

      const query = `SELECT AC_NO, GET_ACCTDESC (AC_NO) acct_desc,HD_CODE
          GET_CODEDESC_INFO(HD_CODE,'AMS') HD_CODE_DESC, 
          GET_CODEDESC_INFO(MSG_CODE,'AMC') MSG_CODE_DESC,
          NOTE,EXP_DATE  FROM ACCT_MESSAGE_NEW   
         WHERE  
            AC_NO LIKE '%' || :account_number || '%' AND
            NOTE LIKE '%' || :note || '%'
          `;

      // prc_ACCTMSG_app
      const data = await con.execute(query, { account_number, note });

      if (data) {
        let arr0 = "";
        let arr = [];

        for (let i = 0; i < data.rows.length; i++) {
          let obj = {};
          for (let x = 0; x < data.metaData.length; x++) {
            obj = { ...obj, [data.metaData[x].name]: data.rows[i][x] };
          }
          arr.push(obj);
        }
        res.send(arr);
      } else {
        res.send("Something went wrong... Nothing was returned");
      }
    } catch (err) {
      res.send(err.toString());
    }
  }
  getAccountNotes();
});

//1 Account Notes Creation Okay Button working//
app.post("/api/accn-notes", async (req, res) => {
  const {
    acct_v,
    stop_type,
    NOTE_v,
    bra_v,
    message_codev,
    edate,
    TERMINAL_v,
    postedby,
    formcode,
    req_no_v,
    ip_v,
    // msg_v,
    // msg_code,
  } = req.body;
  // return res.send(acct_v)

  let con;
  try {
    con = await oracledb.getConnection({
      user: DB_USER,
      password: DB_PASSWORD,
      connectString: DB_CONNECTION_STRING,
      timeout: DB_CONNECTION_TIMEOUT,
    });

    // Execute the stored procedure
    const result = await con.execute(
      `BEGIN BANKOWNER.prc_ACCTMSG_creat(:acct_v, :stop_type, :NOTE_v, :bra_v, :message_codev, :edate, :TERMINAL_v, :postedby,:msg_v, :msg_code,  :formcode, :req_no_v, :ip_v ); END;`,
      {
        acct_v,
        // : { dir: oracledb.BIND_IN, type: oracledb.STRING },
        stop_type,
        NOTE_v,
        bra_v,
        message_codev,
        edate: new Date(edate), // Corrected date parameter
        TERMINAL_v,
        postedby,
        formcode,
        req_no_v,
        ip_v,
        msg_v: { dir: oracledb.BIND_OUT, type: oracledb.STRING },
        msg_code: { dir: oracledb.BIND_OUT, type: oracledb.NUMBER },
      }
    );

    // Check the response code and send appropriate response
    if (result) {
      return res.send(result);
    }
    // if (result.outBinds?.msg_code === "01399" || result.outBinds?.msg_code === "05834" || result.outBinds?.RESPONSE_CODE === "06564") {
    //   return res.send(result.outBinds?.msg_v);
    // }

    // Send success response if no specific error codes match
    res.status(200).json(result.outBinds);
  } catch (err) {
    console.log(err);
    res.status(500).send(err);
  } finally {
    if (con) {
      try {
        await con.close();
      } catch (err) {
        console.log(err);
      }
    }
  }
});

//---Account Message Approval---//
// 0 Account Notes Approval table working//
app.post("/api/account-notes-approval", async (req, res) => {
  // const { account_load, start_date, end_date, document_ref } = req.body;

  const branch_code = req.body.branchCode;
  async function getAccountNotesApprovalTable() {
    let con;
    try {
      con = await oracledb.getConnection({
        user: DB_USER,
        password: DB_PASSWORD,
        connectString: DB_CONNECTION_STRING,
        timeout: DB_CONNECTION_TIMEOUT,
      });

      // const data = await con.execute(

      const query = `SELECT  AC_NO, GET_ACCTDESC (AC_NO) acct_desc,
          GET_CODEDESC_INFO(HD_CODE,'AMS') HD_CODE_DESC, 
          GET_CODEDESC_INFO(MSG_CODE,'AMC') MSG_CODE_DESC,
          NOTE, EXP_DATE, POSTED_BY, SRL_NO FROM ACCT_MESSAGE_NEW 
          WHERE  
           BRANCH LIKE '%' || :branch_code || '%'  
          AND   APP_FLAG ='N'
          `;

      // prc_ACCTMSG_app
      const data = await con.execute(query, { branch_code });

      if (data) {
        let arr0 = "";
        let arr = [];

        for (let i = 0; i < data.rows.length; i++) {
          let obj = {};
          for (let x = 0; x < data.metaData.length; x++) {
            obj = { ...obj, [data.metaData[x].name]: data.rows[i][x] };
          }
          arr.push(obj);
        }
        res.send(arr);
      } else {
        res.send("Something went wrong... Nothing was returned");
      }
    } catch (err) {
      res.send(err.toString());
    }
  }
  getAccountNotesApprovalTable();
});

//1 Account Notes Approval OK Button working//
//  this is the original api app.post("/api/accn-notes-approval", async (req, res) => {
//   const {
//     acct_v,
//     stop_type,
//     NOTE_v,
//     bra_v,
//     appflag,
//     rejectcode = null,
//     rejectreason = null,
//     message_codev,
//     edate,
//     TERMINAL_v,
//     postedby,
//     formcode,
//     req_no_v,
//     ip_v,
//     // msg_v,
//     // msg_code,
//   } = req.body;
//   // return res.send(acct_v)

//   let con;
//   try {
//     con = await oracledb.getConnection({
//       user: DB_USER,
//       password: DB_PASSWORD,
//       connectString: DB_CONNECTION_STRING,
//       timeout: DB_CONNECTION_TIMEOUT,
//     });

//     // Execute the stored procedure
//     const result = await con.execute(
//       `BEGIN BANKOWNER.prc_ACCTMSG_app (:acct_v, :stop_type, :NOTE_v,
//          :bra_v, :appflag, :rejectcode, :rejectreason, :message_codev,
//           :edate, :TERMINAL_v, :postedby,:msg_v, :msg_code,  :formcode,
//           :req_no_v, :ip_v ); END;`,
//       {
//         acct_v,
//         // : { dir: oracledb.BIND_IN, type: oracledb.STRING },
//         stop_type,
//         NOTE_v,
//         bra_v,
//         appflag,
//         rejectcode,
//         rejectreason,
//         message_codev,
//         edate: new Date(edate), // Corrected date parameter
//         TERMINAL_v: os.hostname(),
//         postedby,
//         msg_v: { dir: oracledb.BIND_OUT, type: oracledb.STRING },
//         msg_code: { dir: oracledb.BIND_OUT, type: oracledb.NUMBER },
//         formcode,
//         req_no_v,
//         ip_v: ip.address(),
//       }
//     );

//     // Check the response code and send appropriate response
//     if (result) {
//       return res.send(result);
//     }
//     // if (result.outBinds?.msg_code === "01399" || result.outBinds?.msg_code === "05834" || result.outBinds?.RESPONSE_CODE === "06564") {
//     //   return res.send(result.outBinds?.msg_v);
//     // }

//     // Send success response if no specific error codes match
//     res.status(200).json(result.outBinds);
//   } catch (err) {
//     console.log(err);
//     res.status(500).send(err);
//   } finally {
//     if (con) {
//       try {
//         await con.close();
//       } catch (err) {
//         console.log(err);
//       }
//     }
//   }
// });
app.post("/api/accn-notes-approval", async (req, res) => {
  const {
    acct_v,
    stop_type,
    NOTE_v,
    bra_v,
    appflag,
    rejectcode = null,
    rejectreason = null,
    message_codev,
    edate,
    TERMINAL_v,
    postedby,
    formcode,
    req_no_v,
    ip_v,
    // msg_v,
    // msg_code,
  } = req.body;

  // TERMINAL_v = os.hostname()
  // return res.send(acct_v)

  let con;
  try {
    con = await oracledb.getConnection({
      user: DB_USER,
      password: DB_PASSWORD,
      connectString: DB_CONNECTION_STRING,
      timeout: DB_CONNECTION_TIMEOUT,
    });

    // Execute the stored procedure
    // 23020200000449
    // begin BANKOWNER.prc_ACCTMSG_app (acct_v varchar2,stop_type varchar2,NOTE_v varchar2,bra_v varchar2,
    // appflag varchar2,rejectcode varchar2,rejectreason varchar2,
    // message_codev varchar2,edate date,TERMINAL_v varchar2,postedby varchar2,:msg_v out varchar2,:msg_code out number,formcode varchar2,
    // req_no_v varchar2,ip_v varchar2); end;

    const result = await con.execute(
      `BEGIN BANKOWNER.prc_ACCTMSG_app(:acct_v, :stop_type, :NOTE_v, :bra_v,
         :appflag, :rejectcode, :rejectreason, :message_codev, :edate, 
         :TERMINAL_v, :postedby,:msg_v,:msg_code,  :formcode, :req_no_v,
         :ip_v ); END;`,
      {
        acct_v,
        // : { dir: oracledb.BIND_IN, type: oracledb.STRING },
        stop_type,
        NOTE_v,
        bra_v,
        appflag,
        rejectcode,
        rejectreason,
        message_codev,
        edate: new Date(edate), // Corrected date parameter
        TERMINAL_v: {
          dir: oracledb.BIND_IN,
          type: oracledb.STRING,
          val: os.hostname(),
        },
        postedby,
        msg_v: { dir: oracledb.BIND_OUT, type: oracledb.STRING },
        msg_code: { dir: oracledb.BIND_OUT, type: oracledb.NUMBER },
        formcode,
        req_no_v,
        ip_v,
      }
    );

    // Check the response code and send appropriate response
    if (result) {
      return res.send(result);
    }
    // if (result.outBinds?.msg_code === "01399" || result.outBinds?.msg_code === "05834" || result.outBinds?.RESPONSE_CODE === "06564") {
    //   return res.send(result.outBinds?.msg_v);
    // }

    // Send success response if no specific error codes match
    res.status(200).json(result.outBinds);
  } catch (err) {
    console.log(err);
    res.status(500).send(err);
  } finally {
    if (con) {
      try {
        await con.close();
      } catch (err) {
        console.log(err);
      }
    }
  }
});

// 2 Account Notes Global Approval//

app.post("/api/account-notes-global-approval", async (req, res) => {
  // const { account_load, start_date, end_date, document_ref } = req.body;

  const branch_code = req.body.branchCode;
  async function getAccountNotesApprovalTable() {
    let con;
    try {
      con = await oracledb.getConnection({
        user: DB_USER,
        password: DB_PASSWORD,
        connectString: DB_CONNECTION_STRING,
        timeout: DB_CONNECTION_TIMEOUT,
      });

      // const data = await con.execute(

      const query = `SELECT  AC_NO, GET_ACCTDESC (AC_NO) acct_desc,
          GET_CODEDESC_INFO(HD_CODE,'AMS') HD_CODE_DESC, 
          GET_CODEDESC_INFO(MSG_CODE,'AMC') MSG_CODE_DESC,
          NOTE, EXP_DATE,POSTED_BY, SRL_NO FROM ACCT_MESSAGE_NEW 
          WHERE  
           BRANCH LIKE '%' || :branch_code || '%'  
          AND EXP_DATE > (SELECT POSTING_DATE FROM PARAMETERS) AND APP_FLAG= 'N'
          `;

      // prc_ACCTMSG_app
      const data = await con.execute(query, { branch_code });

      if (data) {
        let arr0 = "";
        let arr = [];

        for (let i = 0; i < data.rows.length; i++) {
          let obj = {};
          for (let x = 0; x < data.metaData.length; x++) {
            obj = { ...obj, [data.metaData[x].name]: data.rows[i][x] };
          }
          arr.push(obj);
        }
        res.send(arr);
      } else {
        res.send("Something went wrong... Nothing was returned");
      }
    } catch (err) {
      res.send(err.toString());
    }
  }
  getAccountNotesApprovalTable();
});
//3 Account Notes Global Approval OK Button//

//---Account Message Amendment---//
// 0 Account Notes Amendment Table-- same as cancel account notes table//

app.post("/api/cancel-account-notes", async (req, res) => {
  // const { account_load, start_date, end_date, document_ref } = req.body;

  const branchCode = req.body.branchCode;
  const AccountNumber = req.body.AccountNumber;

  console.log(req.body, "ghana");

  async function CancelAccountNotes() {
    let con;
    try {
      con = await oracledb.getConnection({
        user: DB_USER,
        password: DB_PASSWORD,
        connectString: DB_CONNECTION_STRING,
        timeout: DB_CONNECTION_TIMEOUT,
      });

      // const data = await con.execute(

      const query = `SELECT  AC_NO, GET_ACCTDESC (AC_NO) acct_desc,
      HD_CODE,
          GET_CODEDESC_INFO(HD_CODE,'AMS') HD_CODE_DESC, 
          MSG_CODE,
          GET_CODEDESC_INFO(MSG_CODE,'AMC') MSG_CODE_DESC,
          NOTE,STATUS, POSTED_BY , EXP_DATE, SRL_NO FROM VW_ACCTMESSAGE_NEW
          WHERE APP_FLAG = 'Y'
          AND BRANCH = :branchCode
          AND AC_NO like '%'||:AccountNumber||'%'
          `;
      // AND NVL(EXP_DATE,TO_DATE(get_postingdate)+1)>(SELECT POSTING_DATE FROM PARAMETERS)

      // prc_ACCTMSG_app
      const data = await con.execute(query, { branchCode, AccountNumber });

      if (data) {
        let arr0 = "";
        let arr = [];

        for (let i = 0; i < data.rows.length; i++) {
          let obj = {};
          for (let x = 0; x < data.metaData.length; x++) {
            obj = { ...obj, [data.metaData[x].name]: data.rows[i][x] };
          }
          arr.push(obj);
        }
        res.send(arr);
      } else {
        res.send("Something went wrong... Nothing was returned");
      }
    } catch (err) {
      res.send(err.toString());
    }
  }
  CancelAccountNotes();
});

// 1 Account Notes Amendment Approval Table//
app.post("/api/account-notes-amendment-approval", async (req, res) => {
  // const { account_load, start_date, end_date, document_ref } = req.body;

  const branch_code = req.body.branchCode;
  async function getAccountNotesApprovalTable() {
    let con;
    try {
      con = await oracledb.getConnection({
        user: DB_USER,
        password: DB_PASSWORD,
        connectString: DB_CONNECTION_STRING,
        timeout: DB_CONNECTION_TIMEOUT,
      });

      // const data = await con.execute(

      const query = `SELECT  AC_NO, GET_ACCTDESC (AC_NO) acct_desc,
          GET_CODEDESC_INFO(HD_CODE,'AMS') HD_CODE_DESC, 
          GET_CODEDESC_INFO(MSG_CODE,'AMC') MSG_CODE_DESC,
          NOTE,POSTED_BY,SRL_NO FROM ACCT_MESSAGE_NEW 
          WHERE  
           BRANCH LIKE '%' || :branch_code || '%'  
          AND  APP_FLAG ='A'
          `;

      // prc_ACCTMSG_app
      const data = await con.execute(query, { branch_code });

      if (data) {
        let arr0 = "";
        let arr = [];

        for (let i = 0; i < data.rows.length; i++) {
          let obj = {};
          for (let x = 0; x < data.metaData.length; x++) {
            obj = { ...obj, [data.metaData[x].name]: data.rows[i][x] };
          }
          arr.push(obj);
        }
        res.send(arr);
      } else {
        res.send("Something went wrong... Nothing was returned");
      }
    } catch (err) {
      res.send(err.toString());
    }
  }
  getAccountNotesApprovalTable();
});

// 2 Account Notes Amendment  Approval Ok Button//
app.post("/api/accn-notes-amendment", async (req, res) => {
  const {
    AC_NO_v,
    HD_CODE_v,
    MSG_CODE_v,
    SRL_NO_v,
    POSTED_BY_v,
    POSTING_DATE_v,
    TERMINAL_v,
    EXP_DATE_v,
    AMENDED_BY_v,
    AMENDED_TERMINAL_v,
    ip_v,
    APP_FLAG_v,
    AMEND_DATE_v,
    AMEND_SYSDATE_v,
    BRANCH_v,
    NOTE_v,
    // msg_v,
    // msg_code,
  } = req.body;
  // return res.send(acct_v)

  let con;
  try {
    con = await oracledb.getConnection({
      user: DB_USER,
      password: DB_PASSWORD,
      connectString: DB_CONNECTION_STRING,
      timeout: DB_CONNECTION_TIMEOUT,
    });

    // Execute the stored procedure
    const result = await con.execute(
      `BEGIN BANKOWNER.prc_ammend_acct_msg_rqt (:AC_NO_v, :HD_CODE_v, :MSG_CODE_v, :SRL_NO_v, :POSTED_BY_v,
         :POSTING_DATE_v, :TERMINAL_v, :EXP_DATE_v,:AMENDED_BY_v, :AMENDED_TERMINAL_v,  :ip_v, :APP_FLAG_v, :AMEND_DATE_v,
         :AMEND_SYSDATE_v, :BRANCH_v  , :NOTE_v , :api_status, :api_msg); END;`,
      {
        AC_NO_v: AC_NO_v,
        HD_CODE_v: HD_CODE_v,
        MSG_CODE_v: MSG_CODE_v,
        SRL_NO_v: SRL_NO_v,
        POSTED_BY_v: POSTED_BY_v,
        POSTING_DATE_v: POSTING_DATE_v,
        TERMINAL_v: TERMINAL_v,
        EXP_DATE_v: EXP_DATE_v,
        AMENDED_BY_v: AMENDED_BY_v,
        AMENDED_TERMINAL_v: AMENDED_TERMINAL_v,
        ip_v: ip_v,
        APP_FLAG_v: APP_FLAG_v,
        AMEND_DATE_v: AMEND_DATE_v,
        AMEND_SYSDATE_v: AMEND_SYSDATE_v,
        BRANCH_v: BRANCH_v,
        NOTE_v: NOTE_v,
        api_status: { dir: oracledb.BIND_OUT, type: oracledb.STRING },
        api_msg: { dir: oracledb.BIND_OUT, type: oracledb.STRING },
      }
    );

    if (result) {
      return res.send(result);
    }

    res.status(200).json(result.outBinds);
  } catch (err) {
    console.log(err);
    res.status(500).send(err);
  } finally {
    if (con) {
      try {
        await con.close();
      } catch (err) {
        console.log(err);
      }
    }
  }
});

// 2 Account Notes Amendment Global Approval table account-notes-amendment-global-approval//
app.post("/api/account-notes-amendment-global-approval", async (req, res) => {
  // const { account_load, start_date, end_date, document_ref } = req.body;

  const branch_code = req.body.branchCode;
  async function getAccountNotesApprovalTable() {
    let con;
    try {
      con = await oracledb.getConnection({
        user: DB_USER,
        password: DB_PASSWORD,
        connectString: DB_CONNECTION_STRING,
        timeout: DB_CONNECTION_TIMEOUT,
      });

      // const data = await con.execute(

      const query = `SELECT  AC_NO, GET_ACCTDESC (AC_NO) acct_desc,
          GET_CODEDESC_INFO(HD_CODE,'AMS') HD_CODE_DESC, 
          GET_CODEDESC_INFO(MSG_CODE,'AMC') MSG_CODE_DESC,
          NOTE,POSTED_BY FROM ACCT_MESSAGE_NEW 
          WHERE  
           BRANCH LIKE '%' || :branch_code || '%'  
          AND APP_FLAG= 'A'
          `;
      // AND EXP_DATE > (SELECT POSTING_DATE FROM PARAMETERS)

      // prc_ACCTMSG_app
      const data = await con.execute(query, { branch_code });

      if (data) {
        let arr0 = "";
        let arr = [];

        for (let i = 0; i < data.rows.length; i++) {
          let obj = {};
          for (let x = 0; x < data.metaData.length; x++) {
            obj = { ...obj, [data.metaData[x].name]: data.rows[i][x] };
          }
          arr.push(obj);
        }
        res.send(arr);
      } else {
        res.send("Something went wrong... Nothing was returned");
      }
    } catch (err) {
      res.send(err.toString());
    }
  }
  getAccountNotesApprovalTable();
});
//3 Account Notes Global Amendment Approval OK Button//

//---Account Message Cancellation--//
// 0 Account Notes Cancellation Table-- same as cancel account notes tabe Amendment---//le//

app.post("/api/cancel-account-notes", async (req, res) => {
  // const { account_load, start_date, end_date, document_ref } = req.body;

  const branchCode = req.body.branchCode;
  const AccountNumber = req.body.AccountNumber;

  console.log(req.body, "ghana");

  async function CancelAccountNotes() {
    let con;
    try {
      con = await oracledb.getConnection({
        user: DB_USER,
        password: DB_PASSWORD,
        connectString: DB_CONNECTION_STRING,
        timeout: DB_CONNECTION_TIMEOUT,
      });

      // const data = await con.execute(

      const query = `SELECT  AC_NO, GET_ACCTDESC (AC_NO) acct_desc,
          GET_CODEDESC_INFO(HD_CODE,'AMS') HD_CODE_DESC, 
          GET_CODEDESC_INFO(MSG_CODE,'AMC') MSG_CODE_DESC,
          NOTE,STATUS, POSTED_BY , EXP_DATE, SRL_NO FROM VW_ACCTMESSAGE_NEW
          WHERE APP_FLAG = 'Y'
          AND BRANCH = :branchCode
          AND AC_NO like '%'||:AccountNumber||'%'
          `;
      // AND NVL(EXP_DATE,TO_DATE(get_postingdate)+1)>(SELECT POSTING_DATE FROM PARAMETERS)

      // prc_ACCTMSG_app
      const data = await con.execute(query, { branchCode, AccountNumber });

      if (data) {
        let arr0 = "";
        let arr = [];

        for (let i = 0; i < data.rows.length; i++) {
          let obj = {};
          for (let x = 0; x < data.metaData.length; x++) {
            obj = { ...obj, [data.metaData[x].name]: data.rows[i][x] };
          }
          arr.push(obj);
        }
        res.send(arr);
      } else {
        res.send("Something went wrong... Nothing was returned");
      }
    } catch (err) {
      res.send(err.toString());
    }
  }
  CancelAccountNotes();
});

// 0 Account Notes Cancellation Approval Table-- --//le//
app.post("/api/account-notes-acancellation-approval", async (req, res) => {
  // const { account_load, start_date, end_date, document_ref } = req.body;

  const branch_code = req.body.branchCode;
  async function getAccountNotesApprovalTable() {
    let con;
    try {
      con = await oracledb.getConnection({
        user: DB_USER,
        password: DB_PASSWORD,
        connectString: DB_CONNECTION_STRING,
        timeout: DB_CONNECTION_TIMEOUT,
      });

      // const data = await con.execute(

      const query = `SELECT  AC_NO, GET_ACCTDESC (AC_NO) acct_desc,
          GET_CODEDESC_INFO(HD_CODE,'AMS') HD_CODE_DESC, 
          GET_CODEDESC_INFO(MSG_CODE,'AMC') MSG_CODE_DESC,
          NOTE,POSTED_BY FROM ACCT_MESSAGE_NEW 
          WHERE  
           BRANCH LIKE '%' || :branch_code || '%'  
          AND APP_FLAG= 'D'
          `;
      // AND EXP_DATE > (SELECT POSTING_DATE FROM PARAMETERS)

      // prc_ACCTMSG_app
      const data = await con.execute(query, { branch_code });

      if (data) {
        let arr0 = "";
        let arr = [];

        for (let i = 0; i < data.rows.length; i++) {
          let obj = {};
          for (let x = 0; x < data.metaData.length; x++) {
            obj = { ...obj, [data.metaData[x].name]: data.rows[i][x] };
          }
          arr.push(obj);
        }
        res.send(arr);
      } else {
        res.send("Something went wrong... Nothing was returned");
      }
    } catch (err) {
      res.send(err.toString());
    }
  }
  getAccountNotesApprovalTable();
});

// 1 Account Notes Cancellation   OK BUTTON//
app.post("/api/accn-notes-cancelok", async (req, res) => {
  const {
    AC_NO_v,
    SRL_NO_v,
    CANCEL_BY_V,
    CANCEL_TERMINAL_V,
    BRANCH_v,
    Formcode_v,

    // msg_v,
    // msg_code,
  } = req.body;
  // return res.send(acct_v)

  let con;
  try {
    con = await oracledb.getConnection({
      user: DB_USER,
      password: DB_PASSWORD,
      connectString: DB_CONNECTION_STRING,
      timeout: DB_CONNECTION_TIMEOUT,
    });

    // Execute the stored procedure
    const result = await con.execute(
      `BEGIN BANKOWNER.prc_cancel_acct_msg_rqt (:AC_NO_v,  :SRL_NO_v, :CANCEL_BY_V,
         :CANCEL_TERMINAL_v, 
         :BRANCH_v  , :Formcode_v, :api_status, :api_msg); END;`,
      {
        AC_NO_v: AC_NO_v,

        SRL_NO_v: SRL_NO_v,
        CANCEL_BY_V: CANCEL_BY_V,
        CANCEL_TERMINAL_V: CANCEL_TERMINAL_V,
        BRANCH_v: BRANCH_v,
        Formcode_v: Formcode_v,
        api_status: { dir: oracledb.BIND_OUT, type: oracledb.STRING },
        api_msg: { dir: oracledb.BIND_OUT, type: oracledb.STRING },
      }
    );
    // {
    //   AC_NO_v,
    //   HD_CODE_v,
    //   MSG_CODE_v,

    //   // edate: new Date(edate), // Corrected date parameter
    //   SRL_NO_v,
    //   POSTED_BY_v,
    //   POSTING_DATE_v,
    //   TERMINAL_v,
    //   EXP_DATE_v,
    //   AMENDED_BY_v,
    //   AMENDED_TERMINAL_v,
    //   ip_v,
    //   APP_FLAG_v,
    //   AMEND_DATE_v,
    //   AMEND_SYSDATE_v,
    //   BRANCH_v,
    //   NOTE_v,
    //   api_status: { dir: oracledb.BIND_OUT, type: oracledb.STRING },
    //   api_msg: { dir: oracledb.BIND_OUT, type: oracledb.NUMBER },
    // }
    // );

    // Check the response code and send appropriate response
    if (result) {
      return res.send(result);
    }
    // if (result.outBinds?.msg_code === "01399" || result.outBinds?.msg_code === "05834" || result.outBinds?.RESPONSE_CODE === "06564") {
    //   return res.send(result.outBinds?.msg_v);
    // }

    // Send success response if no specific error codes match
    res.status(200).json(result.outBinds);
  } catch (err) {
    console.log(err);
    res.status(500).send(err);
  } finally {
    if (con) {
      try {
        await con.close();
      } catch (err) {
        console.log(err);
      }
    }
  }
});

// 2 Account Notes Cancellation  Approval Authorise  BUTTON//

app.post("/api/accn-notes-cancelapproval", async (req, res) => {
  const { count, username, postingDate } = req.body;

  function formatDate(date) {
    const year = date.getFullYear();
    const month = new Intl.DateTimeFormat("en-US", { month: "short" }).format(
      date
    );
    const day = String(date.getDate()).padStart(2, "0");
    return `${day}-${month}-${year}`;
  }

  // Convert the date string to a Date object
  const formattedPostingDate = new Date(postingDate);

  const formattedDate = formatDate(formattedPostingDate);

  console.log(formattedDate);

  try {
    const con = await oracledb.getConnection({
      user: DB_USER,
      password: DB_PASSWORD,
      connectString: DB_CONNECTION_STRING,
      timeout: DB_CONNECTION_TIMEOUT,
    });

    const hostname = os.hostname();
    const ipAddress = ip.address();

    const result = await con.execute(
      "BEGIN user_action_audit(:AMT1,:AMT2,:COMMENTS,:FORM_CODE,:KEY_VAL1,:KEY_VAL2,:KEY_VAL3,:POSTED_BY,:POSTING_DATE,:POSTING_SYS_TIME,GET_SESSID(),:TERMINAL_ID,:TERMINAL_IP,:programs); END;",
      {
        AMT1: count,
        AMT2: null,
        COMMENTS: "Cancel Account Notes",
        FORM_CODE: "ABBI",
        KEY_VAL1: null,
        KEY_VAL2: null,
        KEY_VAL3: null,
        POSTED_BY: username,
        POSTING_DATE: formattedPostingDate,
        POSTING_SYS_TIME: formattedPostingDate,
        TERMINAL_ID: hostname,
        TERMINAL_IP: ipAddress,
        programs: "React",
      }
    );

    await con.close();

    res.send({
      responseCode: "000",
      responseMessage: "Success",
    });
  } catch (error) {
    console.error(error);
    res.status(500).send({
      responseCode: "500",
      responseMessage: "Internal Server Error",
    });
  }
});

//---Account Message Enquiry---//
app.post("/api/getAccountNotesDetails", (req, res) => {
  const accountNumber = req.body.accountNumber;
  const serialNumber = req.body.serialNumber;

  console.log(req.body, "res");

  async function getDetails() {
    let con;
    try {
      con = await oracledb.getConnection({
        user: DB_USER,
        password: DB_PASSWORD,
        connectString: DB_CONNECTION_STRING,
        timeout: DB_CONNECTION_TIMEOUT,
      });

      if (con) {
        // console.log("i say i dey insidee");
      }

      let determinant = "";

      if (accountNumber) {
        if (determinant) {
          determinant += `AND ACCT_LINK = '${accountNumber}'`;
        } else {
          determinant += `WHERE ACCT_LINK = '${accountNumber}'`;
        }
      }

      if (serialNumber) {
        if (determinant) {
          determinant += `AND SRL_NO = '${serialNumber}'`;
        } else {
          determinant += `WHERE SRL_NO = '${serialNumber}'`;
        }
      }

      const data = await con.execute(
        `
        SELECT SRL_NO , ACCT_LINK, GET_ACCTDESC(ACCT_LINK) AS ACCT_DESCRP, ACTUAL_MSG, 
        EXP_DATE 
        FROM acct_note ${determinant}`
      );

      let response = [];
      let arr0 = "";
      if (data) {
        for (let i = 0; i < data.rows.length; i++) {
          for (let x = 0; x < data.metaData.length; x++) {
            arr0 +=
              '"' +
              [data.metaData[x].name.toLowerCase()] +
              '" : "' +
              data.rows[i][x] +
              '",';
          }

          response.push(JSON.parse("{" + arr0.replace(/,\s*$/, "") + "}"));
        }

        res.send(response);
        // console.log(req.body, "resss");
      } else {
        res.send("Something went wrong... Nothing was returned!!");
      }

      // res.send(data.rows);
    } catch (err) {
      console.log(err);
    }
  }
  getDetails();
});

//
//
//
//
//
//
//

// Get Account Type API Endpoint - ORACLE
app.post("/api/get-account-type", (req, res) => {
  let getAccountType = async () => {
    const { accountNumber, facilityType, currency } = req.body;

    try {
      const db = await oracledb.getConnection({
        user: DB_USER,
        password: DB_PASSWORD,
        connectString: DB_CONNECTION_STRING,
        timeout: DB_CONNECTION_TIMEOUT,
      });

      const response = [];
      let arr0 = "";

      // node native promisify
      const execute = util.promisify(db.execute).bind(db);

      const data = await execute(
        `select GET_TOA('${accountNumber}') from dual`
      );
      // res.send("aaaa")
      const typeOfAccount = data.rows[0][0];
      if (facilityType) {
        if (!typeOfAccount)
          return res
            .status(204)
            .send("'Required Entry',get_errorcode('01447')");
        res.send(req.body);

        const data3 = await execute(
          `select description from tb_product a where a.prod_group = '5' and a.prod_sgroup = :three.type_of_acct and exists(select 1 from facility_controlss x where a.prod_group = x.type_of_acct and a.prod_sgroup = x.legal_form and currency = '${currency}') order by a.prod_sgroup;`
        );

        return res.send({ typeOfAccount, data3 });
      }

      if (data) {
        for (let i = 0; i < data.rows.length; i++) {
          for (let x = 0; x < data.metaData.length; x++) {
            arr0 +=
              '"' +
              [data.metaData[x].name.toLowerCase()] +
              '" : "' +
              data.rows[i][x] +
              '",';
          }

          response.push(
            JSON.parse(
              "{" +
                arr0.replace(/(\r\n|\n|\r)/gm, "").replace(/,\s*$/, "") +
                "}"
            )
          );
        }

        res.send(response);
      } else {
        res.send("Something went wrong... Nothing was returned!!");
      }
    } finally {
      // conn.end();
    }
  };

  getAccountType();
});

// Get Staff API Endpoint - ORACLE
app.get("/api/get-staff", (req, res) => {
  let getStaff = async () => {
    try {
      const db = await oracledb.getConnection({
        user: DB_USER,
        password: DB_PASSWORD,
        connectString: DB_CONNECTION_STRING,
        timeout: DB_CONNECTION_TIMEOUT,
      });

      const response = [];
      let arr0 = "";

      // node native promisify
      const execute = util.promisify(db.execute).bind(db);

      const data = await execute(
        `SELECT ID as value, ID || ' - ' || FULL_NAME as label FROM VW_PERSONNEL_ENQ`
      );

      if (data) {
        for (let i = 0; i < data.rows.length; i++) {
          for (let x = 0; x < data.metaData.length; x++) {
            arr0 +=
              '"' +
              [data.metaData[x].name.toLowerCase()] +
              '" : "' +
              data.rows[i][x] +
              '",';
          }

          response.push(
            JSON.parse(
              "{" +
                arr0.replace(/(\r\n|\n|\r)/gm, "").replace(/,\s*$/, "") +
                "}"
            )
          );
        }

        res.send(response);
      } else {
        res.send("Something went wrong... Nothing was returned!!");
      }
    } finally {
      // conn.end();
    }
  };

  getStaff();
});

// Get Code Details
app.post("/api/get-subcounty-details", (req, res) => {
  const { code, county } = req.body;
  async function getCodeDetails() {
    let con;

    try {
      con = await oracledb.getConnection({
        user: DB_USER,
        password: DB_PASSWORD,
        connectString: DB_CONNECTION_STRING,
        timeout: DB_CONNECTION_TIMEOUT,
      });

      const data = await con.execute(
        `SELECT description, actual_code, ltrim(rtrim(short_descrp,0)) short_descrp 
        FROM code_desc
        WHERE code_type = '${code}' AND SUBSTR(actual_code,1,2) = '${county}' ORDER BY actual_code ASC`
      );

      if (data.rows) {
        const arr = [];

        for (let i = 0; i < data.rows.length; i++) {
          const description = data.rows[i][0];
          const actual_code = data.rows[i][1];
          const short_descrp = data.rows[i][2];

          arr.push({
            label: actual_code + " - " + description,
            value: actual_code,
            // short_descrp: short_descrp,
          });
        }

        res.send(arr);
      } else {
        res.send(err);
        console.log(err);
      }
    } catch (err) {
      res.send(err);
    }
  }

  getCodeDetails();
});

// Get Code Details
app.post("/api/get-ward-details", (req, res) => {
  const { code, subCounty } = req.body;
  async function getCodeDetails() {
    let con;

    try {
      con = await oracledb.getConnection({
        user: DB_USER,
        password: DB_PASSWORD,
        connectString: DB_CONNECTION_STRING,
        timeout: DB_CONNECTION_TIMEOUT,
      });

      const data = await con.execute(
        `SELECT description, actual_code, ltrim(rtrim(short_descrp,0)) short_descrp 
        FROM code_desc
        WHERE code_type = '${code}' AND SUBSTR(actual_code,1,4) = '${subCounty}' ORDER BY actual_code ASC`
      );

      if (data.rows) {
        const arr = [];

        for (let i = 0; i < data.rows.length; i++) {
          const description = data.rows[i][0];
          const actual_code = data.rows[i][1];
          const short_descrp = data.rows[i][2];

          arr.push({
            label: actual_code + " - " + description,
            value: actual_code,
            // short_descrp: short_descrp,
          });
        }

        res.send(arr);
      } else {
        res.send(err);
        console.log(err);
      }
    } catch (err) {
      res.send(err);
    }
  }

  getCodeDetails();
});

// Get Sub Sector API Endpoint - ORACLE
app.post("/api/get-sub-sector", (req, res) => {
  const sector = req.body.sector;
  let getSubSector = async () => {
    try {
      const db = await oracledb.getConnection({
        user: DB_USER,
        password: DB_PASSWORD,
        connectString: DB_CONNECTION_STRING,
        timeout: DB_CONNECTION_TIMEOUT,
      });

      const response = [];
      let arr0 = "";

      // node native promisify
      const execute = util.promisify(db.execute).bind(db);

      const data = await execute(
        `select ACTUAL_CODE  as value, ACTUAL_CODE || ' - ' || DESCRIPTION as label from code_desc where code_type = (select class_code from code_desc where code_type = 'MAS' and actual_code= '${sector}')`
      );

      if (data) {
        for (let i = 0; i < data.rows.length; i++) {
          for (let x = 0; x < data.metaData.length; x++) {
            arr0 +=
              '"' +
              [data.metaData[x].name.toLowerCase()] +
              '" : "' +
              data.rows[i][x] +
              '",';
          }

          response.push(
            JSON.parse(
              "{" +
                arr0.replace(/(\r\n|\n|\r)/gm, "").replace(/,\s*$/, "") +
                "}"
            )
          );
        }

        res.send(response);
      } else {
        res.send("Something went wrong... Nothing was returned!!");
      }
    } finally {
      // conn.end();
    }
  };

  getSubSector();
});

app.post("/api/get-subb-sector", (req, res) => {
  const sector = req.body.sector;
  let getSubSector = async () => {
    try {
      const db = await oracledb.getConnection({
        user: DB_USER,
        password: DB_PASSWORD,
        connectString: DB_CONNECTION_STRING,
        timeout: DB_CONNECTION_TIMEOUT,
      });

      const response = [];
      let arr0 = "";

      // node native promisify
      const execute = util.promisify(db.execute).bind(db);

      const data = await execute(
        `select ACTUAL_CODE  as value, ACTUAL_CODE || ' - ' || DESCRIPTION as label from code_desc where code_type = (select class_code from code_desc where code_type = 'MAS' and actual_code= '${sector}')`
      );

      if (data) {
        for (let i = 0; i < data.rows.length; i++) {
          for (let x = 0; x < data.metaData.length; x++) {
            arr0 +=
              '"' +
              [data.metaData[x].name.toLowerCase()] +
              '" : "' +
              data.rows[i][x] +
              '",';
          }

          response.push(
            JSON.parse(
              "{" +
                arr0.replace(/(\r\n|\n|\r)/gm, "").replace(/,\s*$/, "") +
                "}"
            )
          );
        }

        res.send(response);
      } else {
        res.send("Something went wrong... Nothing was returned!!");
      }
    } finally {
      // conn.end();
    }
  };

  getSubSector();
});

// get sector and subsector
app.post("/api/get-sector-subsector", (req, res) => {
  const customerNumber = req.body.customerNumber;
  let getSectorSubsector = async () => {
    try {
      const db = await oracledb.getConnection({
        user: DB_USER,
        password: DB_PASSWORD,
        connectString: DB_CONNECTION_STRING,
        timeout: DB_CONNECTION_TIMEOUT,
      });

      const response = [];
      let arr0 = "";

      // node native promisify
      const execute = util.promisify(db.execute).bind(db);

      const data = await execute(
        `select nvl(sector,'01'),nvl(sub_sector,'0103') from customer where customer_number='${customerNumber}'`
      );

      if (data) {
        for (let i = 0; i < data.rows.length; i++) {
          for (let x = 0; x < data.metaData.length; x++) {
            arr0 +=
              '"' +
              [data.metaData[x].name.toLowerCase()] +
              '" : "' +
              data.rows[i][x] +
              '",';
          }

          response.push(
            JSON.parse(
              "{" +
                arr0.replace(/(\r\n|\n|\r)/gm, "").replace(/,\s*$/, "") +
                "}"
            )
          );
        }

        res.send(data.rows);
      } else {
        res.send("Something went wrong... Nothing was returned!!");
      }
    } catch (e) {
      res.send(e);
    }
  };

  getSectorSubsector();
});

// Get Number Of Tranches
app.post("/api/get-number-of-tranches", (req, res) => {
  const { loan_product } = req.body;
  let getNumberOfTranches = async () => {
    try {
      const db = await oracledb.getConnection({
        user: DB_USER,
        password: DB_PASSWORD,
        connectString: DB_CONNECTION_STRING,
        timeout: DB_CONNECTION_TIMEOUT,
      });

      const response = [];
      let arr0 = "";

      // node native promisify
      const execute = util.promisify(db.execute).bind(db);

      const data = await execute(
        `select count(stage) as count from stage_loan where prod_code = '5${loan_product}'`
      );

      if (data) {
        for (let i = 0; i < data.rows.length; i++) {
          for (let x = 0; x < data.metaData.length; x++) {
            arr0 +=
              '"' +
              [data.metaData[x].name.toLowerCase()] +
              '" : "' +
              data.rows[i][x] +
              '",';
          }

          response.push(
            JSON.parse(
              "{" +
                arr0.replace(/(\r\n|\n|\r)/gm, "").replace(/,\s*$/, "") +
                "}"
            )
          );
        }

        res.send(response);
      } else {
        res.send("Something went wrong... Nothing was returned!!");
      }
    } catch (e) {
      res.send(e);
    }
  };

  getNumberOfTranches();
});

app.post("/api/teller-callover", (req, res) => {
  let { username, key, trans_no } = req.body;
  console.log(req.body);
  let handleCallOver = async () => {
    try {
      const db = await oracledb.getConnection({
        user: DB_USER,
        password: DB_PASSWORD,
        connectString: DB_CONNECTION_STRING,
        timeout: DB_CONNECTION_TIMEOUT,
      });

      const execute = util.promisify(db.execute).bind(db);
      if (key == "check") {
        const data = await execute(
          `update AC_TRANS
          set CALOVER_FLAG = 'X'	
          WHERE TRANS_NO = '${trans_no}'`
        );

        return res.send({
          data: null,
          statusCode: 200,
          message: "Transaction called-over successfully",
        });
      }

      if (key == "uncheck") {
        try {
          console.log("first");
          const data = await execute(
            `UPDATE AC_TRANS
        SET CALOVER_FLAG = 'N'
        WHERE TRANS_NO = '${trans_no}'
        `
          );
          console.log("firsttt");
          return res.send({
            data: null,
            statusCode: 200,
            message: "Transaction uncalled successfully",
          });
        } catch (error) {
          console.log({ error });
        }
      }

      // return res.send({transaction_number : transaction_number, yo: "yo"});

      // node native promisify

      const data = await execute(
        `SELECT COUNT (*)
        FROM AC_TRANS
       WHERE     CALOVER_FLAG = 'X'
             AND USER_NAME  = '${username}'`
      );

      if (data) {
        res.send(data.rows[0]);
      } else {
        res.send("Something went wrong... Nothing was returned!!");
      }
    } catch (e) {
      res.send(e);
    }
  };

  handleCallOver();
});

// Get Teller Callover
app.post("/api/get-callover", (req, res) => {
  const { username, batchNo, amt, amt1, tran_type } = req.body;
  let getCallover = async () => {
    try {
      const db = await oracledb.getConnection({
        user: DB_USER,
        password: DB_PASSWORD,
        connectString: DB_CONNECTION_STRING,
        timeout: DB_CONNECTION_TIMEOUT,
      });

      const response = [];
      let arr0 = "";

      // node native promisify
      const execute = util.promisify(db.execute).bind(db);

      const data = await execute(
        `select batch_no, acct_link, get_acctdesc(acct_link) as acct_name, get_curriso(currency_code) as currency_code, transaction_details, local_equivalent_db, local_equivalent_cr, voucher_date, trans_no from VIEW_CALLOVER where user_name = '${username}' and batch_no like '%'||'${batchNo}'||'%' and abs(nvl(local_equivalent_cr,0)-nvl(local_equivalent_db,0)) between nvl('${amt}',0) and nvl('${amt1}',9999999999999999999999999999999999999999999999999999999) and TRAN_TYPE like '%'||'${tran_type}'||'%' AND CALOVER_FLAG IN (NULL , 'N') ORDER BY trans_no DESC`
      );

      if (data) {
        for (let i = 0; i < data.rows.length; i++) {
          for (let x = 0; x < data.metaData.length; x++) {
            arr0 +=
              '"' +
              [data.metaData[x].name.toLowerCase()] +
              '" : "' +
              data.rows[i][x] +
              '",';
          }

          response.push(
            JSON.parse(
              "{" +
                arr0.replace(/(\r\n|\n|\r)/gm, "").replace(/,\s*$/, "") +
                "}"
            )
          );
        }

        res.send(response);
      } else {
        res.send("Something went wrong... Nothing was returned!!");
      }
    } catch (e) {
      res.send(e);
    }
  };

  getCallover();
});

// Get Callover Details
app.post("/api/get-callover-details", (req, res) => {
  let { trans_no } = req.body;
  let getCalloverDetails = async () => {
    try {
      const db = await oracledb.getConnection({
        user: DB_USER,
        password: DB_PASSWORD,
        connectString: DB_CONNECTION_STRING,
        timeout: DB_CONNECTION_TIMEOUT,
      });

      const response = [];
      let arr0 = "";

      // return res.send({transaction_number : transaction_number, yo: "yo"});

      // node native promisify
      const execute = util.promisify(db.execute).bind(db);

      const data = await execute(
        `select value_date, voucher_number, trans_no, customer_no, account_number, fc_amount_db, exchange_rate, local_equivalent_db, transaction_details, posting_date, voucher_date, posting_sys_time, lc_equiv_amt, approved_by, acct_link, fc_amount_cr, local_equivalent_cr, document_ref from AC_TRANS where TRANS_NO = '${trans_no}'`
      );

      if (data) {
        for (let i = 0; i < data.rows.length; i++) {
          for (let x = 0; x < data.metaData.length; x++) {
            arr0 +=
              '"' +
              [data.metaData[x].name.toLowerCase()] +
              '" : "' +
              data.rows[i][x] +
              '",';
          }

          response.push(
            JSON.parse(
              "{" +
                arr0.replace(/(\r\n|\n|\r)/gm, "").replace(/,\s*$/, "") +
                "}"
            )
          );
        }

        res.send(response);
      } else {
        res.send("Something went wrong... Nothing was returned!!");
      }
    } catch (e) {
      res.send(e);
    }
  };

  getCalloverDetails();
});

// Get Income API Endpoint - ORACLE
app.post("/api/get-income", (req, res) => {
  const loan_application_no = req.body;
  let getIncome = async () => {
    try {
      const db = await oracledb.getConnection({
        user: DB_USER,
        password: DB_PASSWORD,
        connectString: DB_CONNECTION_STRING,
        timeout: DB_CONNECTION_TIMEOUT,
      });

      const response = [];
      let arr0 = "";

      // node native promisify
      const execute = util.promisify(db.execute).bind(db);

      const data = await execute(
        `select b.actual_code as value, b.actual_code || ' - ' || b.description as label from code_desc b where b.code_type = 'ITP' and b.class_code='INC' and not exists(select 1 from loan_indv_income a where a.applicant_no = '${loan_application_no}' and a.income_type = 'INC' and a.income_code = b.actual_code)`
      );

      if (data) {
        for (let i = 0; i < data.rows.length; i++) {
          for (let x = 0; x < data.metaData.length; x++) {
            arr0 +=
              '"' +
              [data.metaData[x].name.toLowerCase()] +
              '" : "' +
              data.rows[i][x] +
              '",';
          }

          response.push(
            JSON.parse(
              "{" +
                arr0.replace(/(\r\n|\n|\r)/gm, "").replace(/,\s*$/, "") +
                "}"
            )
          );
        }

        res.send(response);
      } else {
        res.send("Something went wrong... Nothing was returned!!");
      }
    } catch (e) {
      // conn.end();
      res.send(e.toString());
    }
  };

  getIncome();
});

// Get Asset API Endpoint - ORACLE
app.post("/api/get-asset", (req, res) => {
  const loan_application_no = req.body;
  let getAsset = async () => {
    try {
      const db = await oracledb.getConnection({
        user: DB_USER,
        password: DB_PASSWORD,
        connectString: DB_CONNECTION_STRING,
        timeout: DB_CONNECTION_TIMEOUT,
      });

      const response = [];
      let arr0 = "";

      // node native promisify
      const execute = util.promisify(db.execute).bind(db);

      const data = await execute(
        `select b.actual_code as value, b.actual_code || ' - ' || b.description as label from code_desc b where b.code_type = 'ITP' and b.class_code='ASS' and not exists(select 1 from loan_indv_income a where a.applicant_no = '${loan_application_no}' and a.income_type = 'ASS' and a.income_code = b.actual_code)`
      );

      if (data) {
        for (let i = 0; i < data.rows.length; i++) {
          for (let x = 0; x < data.metaData.length; x++) {
            arr0 +=
              '"' +
              [data.metaData[x].name.toLowerCase()] +
              '" : "' +
              data.rows[i][x] +
              '",';
          }

          response.push(
            JSON.parse(
              "{" +
                arr0.replace(/(\r\n|\n|\r)/gm, "").replace(/,\s*$/, "") +
                "}"
            )
          );
        }

        res.send(response);
      } else {
        res.send("Something went wrong... Nothing was returned!!");
      }
    } catch (e) {
      // conn.end();
      res.send(e.toString());
    }
  };

  getAsset();
});

// Get Expenditure API Endpoint - ORACLE
app.post("/api/get-expenditure", (req, res) => {
  const loan_application_no = req.body;
  let getExpenditure = async () => {
    try {
      const db = await oracledb.getConnection({
        user: DB_USER,
        password: DB_PASSWORD,
        connectString: DB_CONNECTION_STRING,
        timeout: DB_CONNECTION_TIMEOUT,
      });

      const response = [];
      let arr0 = "";

      // node native promisify
      const execute = util.promisify(db.execute).bind(db);

      const data = await execute(
        `select b.actual_code as value, b.actual_code || ' - ' || b.description as label from code_desc b where b.code_type = 'ITP' and b.class_code='EXP' and not exists(select 1 from loan_indv_income a where a.applicant_no = '${loan_application_no}' and a.income_type = 'EXP' and a.income_code = b.actual_code)`
      );

      if (data) {
        for (let i = 0; i < data.rows.length; i++) {
          for (let x = 0; x < data.metaData.length; x++) {
            arr0 +=
              '"' +
              [data.metaData[x].name.toLowerCase()] +
              '" : "' +
              data.rows[i][x] +
              '",';
          }

          response.push(
            JSON.parse(
              "{" +
                arr0.replace(/(\r\n|\n|\r)/gm, "").replace(/,\s*$/, "") +
                "}"
            )
          );
        }

        res.send(response);
      } else {
        res.send("Something went wrong... Nothing was returned!!");
      }
    } catch (e) {
      // conn.end();
      res.send(e.toString());
    }
  };

  getExpenditure();
});

// Get Liability API Endpoint - ORACLE
app.post("/api/get-liability", (req, res) => {
  const loan_application_no = req.body;
  let getLiability = async () => {
    try {
      const db = await oracledb.getConnection({
        user: DB_USER,
        password: DB_PASSWORD,
        connectString: DB_CONNECTION_STRING,
        timeout: DB_CONNECTION_TIMEOUT,
      });

      const response = [];
      let arr0 = "";

      // node native promisify
      const execute = util.promisify(db.execute).bind(db);

      const data = await execute(
        `select b.actual_code as value, b.actual_code || ' - ' || b.description as label from code_desc b where b.code_type = 'ITP' and b.class_code='LLB' and not exists(select 1 from loan_indv_income a where a.applicant_no = '${loan_application_no}' and a.income_type = 'LLB' and a.income_code = b.actual_code)`
      );

      if (data) {
        for (let i = 0; i < data.rows.length; i++) {
          for (let x = 0; x < data.metaData.length; x++) {
            arr0 +=
              '"' +
              [data.metaData[x].name.toLowerCase()] +
              '" : "' +
              data.rows[i][x] +
              '",';
          }

          response.push(
            JSON.parse(
              "{" +
                arr0.replace(/(\r\n|\n|\r)/gm, "").replace(/,\s*$/, "") +
                "}"
            )
          );
        }

        res.send(response);
      } else {
        res.send("Something went wrong... Nothing was returned!!");
      }
    } catch (e) {
      // conn.end();
      res.send(e.toString());
    }
  };

  getLiability();
});

// Insert Employment Details
app.post("/api/save-employment-details", (req, res) => {
  let {
    customerNumber,
    employmentCategory,
    positionHeld,
    employedSince,
    address1,
    city,
    phone1,
  } = req.body;
  let saveEmploymentDetails = async () => {
    try {
      const db = await oracledb.getConnection({
        user: DB_USER,
        password: DB_PASSWORD,
        connectString: DB_CONNECTION_STRING,
        timeout: DB_CONNECTION_TIMEOUT,
      });

      const response = [];
      let arr0 = "";

      // return res.send({transaction_number : transaction_number, yo: "yo"});

      // node native promisify
      const execute = util.promisify(db.execute).bind(db);

      const data = await execute(
        `INSERT INTO TB_EMPLOYEMENT(CUSTOMER_NUMBER, EMPLOYMENT_CATEGORY, POSITION_HELD, EMPLOYED_SINCE, ADDRESS1, CITY, PHONE1) 
          VALUES (:CUSTOMER_NUMBER, :EMPLOYMENT_CATEGORY, :POSITION_HELD, :EMPLOYED_SINCE, :ADDRESS1, :CITY, :PHONE1)`,
        {
          CUSTOMER_NUMBER: customerNumber,
          EMPLOYMENT_CATEGORY: employmentCategory,
          POSITION_HELD: positionHeld,
          EMPLOYED_SINCE: new Date(employedSince),
          ADDRESS1: address1,
          CITY: city,
          PHONE1: phone1,
        }
      );

      const data1 = await execute(
        `select EMPLOYMENT_CATEGORY, CUSTOMER_NUMBER, ADDRESS1, POSITION_HELD, EMPLOYED_SINCE, CITY, PHONE1 from TB_EMPLOYEMENT where CUSTOMER_NUMBER = '${customerNumber}'`
      );
      data1.rows.map((row) => {
        row[4] = new Date(row[4]).toLocaleDateString();
        row[0] = row[0] == "001" ? "Previous Employment" : "Current Employment";
      });

      res.send(data1.rows);
    } catch (e) {
      res.send(e);
    }
  };

  saveEmploymentDetails();
});

// Get Origination Details
app.post("/api/get-disbursement-details", (req, res) => {
  let { loan_app_no } = req.body;

  let getOriginationDetails = async () => {
    try {
      const db = await oracledb.getConnection({
        user: DB_USER,
        password: DB_PASSWORD,
        connectString: DB_CONNECTION_STRING,
        timeout: DB_CONNECTION_TIMEOUT,
      });

      const response = [];
      let arr0 = "";

      // return res.send({transaction_number : transaction_number, yo: "yo"});

      // node native promisify
      const execute = util.promisify(db.execute).bind(db);

      const data = await execute(
        ` select * from vw_loan_prod_details where loan_app_no = '${loan_app_no}'`
      );

      // return res.send(data)
      if (data) {
        var arr1 = "";
        var arr = [];

        for (let i = 0; i < data.rows.length; i++) {
          for (let x = 0; x < data.metaData.length; x++) {
            arr1 +=
              '"' +
              [data.metaData[x].name.toLowerCase()] +
              '" : "' +
              data.rows[i][x] +
              '",';
          }

          arr.push(JSON.parse("{" + arr1.replace(/,\s*$/, "") + "}"));
        }

        // return res.send(arr);

        const result = await db.execute(
          `BEGIN Prc_lending_MOB_Onboard(
        :repay_acct_v,
        :repa_acct_v,
        :legal_form_v,
        :branch,
        :currency_v,
        :repnt_period_months_v,
        :int_type,
        :rate,
        :mora,
        :int_mora,
        :AMT,
        :eff_date,
        :int_repay_plan_v,
        :repayment_plan_v,
        :last_repay_date_v,
        :LAST_DAY_V,
        :exempt_month_v,
        :sector_v,
        :sub_sector_v,
        :lienamt_v,
        :username_v,
        :NO_OF_TRANCHES_V,
        :bank_code_v,
        :hostname_v,
        :response_v,
        :facility_no_v,
        :fac_type_v,
        :prime_rate_v,
        :trans_details,
        :other_purpose_v,
        :documents_ref_no_v,
        :staff_cat_v,
        :vendor_code_v,
        :ballon_installment_v,
        :introductory_source_v,
        :employer_code_v,
        :source_funds_v,
        :no_of_disb_v,
        :agreed_amount_v,
        :dealer_code_v,
        :cust_no,
        :action_v,
        :toa_v,
        :loan_app_no_v,
        :prin_pay_count_v,
        :int_pay_count_v,
        :para1,:para2,:para3,:para4,:para5); END;`,
          {
            repay_acct_v: {
              val: "",
              type: oracledb.STRING,
              dir: oracledb.BIND_IN,
              maxSize: 20,
            },

            repa_acct_v: {
              val: "",
              type: oracledb.STRING,
              dir: oracledb.BIND_IN,
              maxSize: 20,
            },
            legal_form_v: arr.type_of_acct,
            branch: arr.origination_branch,
            currency_v: arr.currency,
            repnt_period_months_v: arr.repnt_period_months,
            int_type: arr.int_type,
            rate: arr.eff_int_rate,
            mora: arr.prin_morato,
            int_mora: arr.int_morato,
            AMT: 200000,
            int_repay_plan_v: arr.repayment_plan,
            repayment_plan_v: arr.repfrequency,
            last_repay_date_v: "",
            LAST_DAY_V: arr.last_day,
            exempt_month_v: arr.exempt_month,
            sector_v: "70",
            sub_sector_v: "7002",
            lienamt_v: arr.lienamt,
            username_v: arr.posted_by,
            NO_OF_TRANCHES_V: arr.no_of_tranches,
            bank_code_v: "",
            hostname_v: "",
            eff_date: new Date("12/1/2023"),
            response_v: {
              type: oracledb.STRING,
              dir: oracledb.BIND_OUT,
              maxSize: 400,
            },
            facility_no_v: {
              type: oracledb.STRING,
              dir: oracledb.BIND_OUT,
              maxSize: 400,
            },
            fac_type_v: "16",
            prime_rate_v: "",
            trans_details: "",
            other_purpose_v: arr.other_purpose,
            documents_ref_no_v: arr.documents_ref_no,
            staff_cat_v: "",
            vendor_code_v: arr.vendor_code,
            ballon_installment_v: arr.ballon_installment,
            introductory_source_v: arr.introductory_source,
            employer_code_v: arr.employer_code,
            source_funds_v: arr.source_funds,
            no_of_disb_v: arr.no_of_disb_ac,
            agreed_amount_v: arr.agreed_amount,
            dealer_code_v: arr.dealer_code,
            cust_no: "",
            action_v: "D",
            toa_v: "",
            loan_app_no_v: "",
            prin_pay_count_v: 12,
            int_pay_count_v: 12,
            para1: "",
            para2: "",
            para3: "",
            para4: "",
            para5: "",
          }
        );

        if (result) {
          return res.send(result.outBinds);
          // if(result.outBinds.response_v.includes("07526")){
          //   const message = result.outBinds.response_v
          //   response = {
          //     responseCode: "000",
          //     responseMessage: message ,
          //   };
          // }else{
          //   response = {
          //     responseCode: "998",
          //     responseMessage: result.outBinds.response_v,
          //   };
          // }
          // res.send(response);
        }

        // for (let i = 0; i < data.rows.length; i++) {
        //   for (let x = 0; x < data.metaData.length; x++) {
        //     arr0 +=
        //       '"' +
        //       [data.metaData[x].name.toLowerCase()] +
        //       '" : "' +
        //       data.rows[i][x] +
        //       '",';
        //   }

        //   response.push(
        //     JSON.parse(
        //       "{" +
        //         arr0.replace(/(\r\n|\n|\r)/gm, "").replace(/,\s*$/, "") +
        //         "}"
        //     )
        //   );
        // }

        // res.send(response);
      } else {
        res.send("Something went wrong... Nothing was returned!!");
      }
    } catch (e) {
      res.send(e.toString());
    }
  };

  getOriginationDetails();
});

// Get Tranches
app.post("/api/get-tranches", (req, res) => {
  let { app_no } = req.body;
  let getTranches = async () => {
    try {
      const db = await oracledb.getConnection({
        user: DB_USER,
        password: DB_PASSWORD,
        connectString: DB_CONNECTION_STRING,
        timeout: DB_CONNECTION_TIMEOUT,
      });

      const response = [];
      let arr0 = "";

      // return res.send({transaction_number : transaction_number, yo: "yo"});

      // node native promisify
      const execute = util.promisify(db.execute).bind(db);

      const data = await execute(
        ` select * from tb_Loans_tranches where loan_app_no = '${app_no}'`
      );

      if (data) {
        for (let i = 0; i < data.rows.length; i++) {
          for (let x = 0; x < data.metaData.length; x++) {
            arr0 +=
              '"' +
              [data.metaData[x].name.toLowerCase()] +
              '" : "' +
              data.rows[i][x] +
              '",';
          }

          response.push(
            JSON.parse(
              "{" +
                arr0.replace(/(\r\n|\n|\r)/gm, "").replace(/,\s*$/, "") +
                "}"
            )
          );
        }

        res.send(response);
      } else {
        res.send("Something went wrong... Nothing was returned!!");
      }
    } catch (e) {
      res.send(e);
    }
  };

  getTranches();
});

// Get Origination Details
app.post("/api/get-origination-details", (req, res) => {
  let { loan_app_no } = req.body;
  let getOriginationDetails = async () => {
    try {
      const db = await oracledb.getConnection({
        user: DB_USER,
        password: DB_PASSWORD,
        connectString: DB_CONNECTION_STRING,
        timeout: DB_CONNECTION_TIMEOUT,
      });

      const response = [];
      let arr0 = "";

      // return res.send({transaction_number : transaction_number, yo: "yo"});

      // node native promisify
      const execute = util.promisify(db.execute).bind(db);

      const data = await execute(
        ` select * from vw_loan_prod_details where loan_app_no = '${loan_app_no}'`
      );

      if (data) {
        for (let i = 0; i < data.rows.length; i++) {
          for (let x = 0; x < data.metaData.length; x++) {
            arr0 +=
              '"' +
              [data.metaData[x].name.toLowerCase()] +
              '" : "' +
              data.rows[i][x] +
              '",';
          }

          response.push(
            JSON.parse(
              "{" +
                arr0.replace(/(\r\n|\n|\r)/gm, "").replace(/,\s*$/, "") +
                "}"
            )
          );
        }

        res.send(response);
      } else {
        res.send("Something went wrong... Nothing was returned!!");
      }
    } catch (e) {
      res.send(e);
    }
  };

  getOriginationDetails();
});

// Select Product Group
app.post("/api/get-product-sub-group", (req, res) => {
  const productGroup = req.body.productGroup;

  async function getProductSubGroup() {
    let con;

    try {
      con = await oracledb.getConnection({
        user: DB_USER,
        password: DB_PASSWORD,
        connectString: DB_CONNECTION_STRING,
        timeout: DB_CONNECTION_TIMEOUT,
      });

      const data = await con.execute(
        `SELECT PROD_CODE, DESCRIPTION
FROM VW_PRODUCT_ACCTOPEN
WHERE Prod_group= '${productGroup}' 
AND PROD_CUST_TYPE IN ('B', 'I')
ORDER BY PROD_CODE `
      );

      // res.send("get started")

      if (data.rows) {
        const arr = [];

        for (let i = 0; i < data.rows.length; i++) {
          const label = data.rows[i][1];
          const value = data.rows[i][0];

          arr.push({
            label: label,
            value: value,
          });
        }

        res.send(arr);
      } else {
        res.send(err);
        console.log(err);
      }
    } catch (err) {
      res.send(err);
    }
  }

  getProductSubGroup();
});

// Select Introductory Source
// app.get("/api/get-introductory-source", (req, res) => {
//   async function getIntroSource() {
//     let con;

//     try {
//       con = await oracledb.getConnection({
//         user: DB_USER,
//         password: DB_PASSWORD,
//         connectString: DB_CONNECTION_STRING,
//         timeout: DB_CONNECTION_TIMEOUT,
//       });

//       const data = await con.execute(
//         `SELECT (F_NAME || ' ' || M_NAME || ' ' || S_NAME), ID FROM PERSONAL_INFO`
//       );

//       // res.send("get started")
//       if (data.rows) {
//         const arr = [];

//         for (let i = 0; i < data.rows.length; i++) {
//           const label = data.rows[i][0];
//           const value = data.rows[i][1];

//           arr.push({
//             label: label,
//             value: value,
//           });
//         }

//         res.send(arr);
//       } else {
//         res.send(err);
//         console.log(err);
//       }
//     } catch (err) {
//       res.send(err);
//     }
//   }

//   getIntroSource();
// });

// get Currencies
app.post("/api/currencies", (req, res) => {
  const type_of_acct = req.body.type_of_acct;

  async function getCurrenciesFromUserAccount() {
    let con;

    try {
      con = await oracledb.getConnection({
        user: DB_USER,
        password: DB_PASSWORD,
        connectString: DB_CONNECTION_STRING,
        timeout: DB_CONNECTION_TIMEOUT,
      });

      const data = await con.execute(`SELECT CURRENCY_CODE, DESCRIPTION
        FROM tb_currency
        WHERE APP_FLAG = 'Y' AND CURRENCY_CODE IN (
          SELECT DISTINCT currency
          FROM control_totals_acct
          WHERE PROD_CODE = '${type_of_acct}'
        )
      `);

      // res.send("get started")

      if (data.rows) {
        const arr = [];

        for (let i = 0; i < data.rows.length; i++) {
          const description = data.rows[i][1];
          const actual_code = data.rows[i][0];
          const short_descrp = data.rows[i][2];

          arr.push({
            description: `${actual_code} - ${description}`,
            actual_code: `${actual_code}`,
            short_descrp: short_descrp,
          });
        }

        res.send(arr);
      } else {
        res.send(err);
        console.log(err);
      }
    } catch (err) {
      res.send(err);
    }
  }

  getCurrenciesFromUserAccount();
});

// get Currencies
app.get("/api/currencies", (req, res) => {
  // const type_of_acct = req.body.type_of_acct;

  async function getCurrenciesFromUserAccount() {
    let con;

    try {
      con = await oracledb.getConnection({
        user: DB_USER,
        password: DB_PASSWORD,
        connectString: DB_CONNECTION_STRING,
        timeout: DB_CONNECTION_TIMEOUT,
      });

      const data = await con.execute(
        `SELECT CURRENCY_CODE, DESCRIPTION FROM tb_currency WHERE APP_FLAG = 'Y' AND CURRENCY_CODE IN (SELECT DISTINCT currency FROM control_totals_acct)`
      );

      // res.send("get started")

      if (data.rows) {
        const arr = [];

        for (let i = 0; i < data.rows.length; i++) {
          const description = data.rows[i][1];
          const actual_code = data.rows[i][0];
          const short_descrp = data.rows[i][2];

          arr.push({
            description: `${actual_code} - ${description}`,
            actual_code: `${actual_code}`,
            short_descrp: short_descrp,
          });
        }

        res.send(arr);
      } else {
        res.send(err);
        console.log(err);
      }
    } catch (err) {
      res.send(err);
    }
  }

  getCurrenciesFromUserAccount();
});

app.get("/api/get-dates", (req, res) => {
  // res.send("ghghg");

  async function getDates() {
    let con;
    try {
      con = await oracledb.getConnection({
        user: DB_USER,
        password: DB_PASSWORD,
        connectString: DB_CONNECTION_STRING,
        timeout: DB_CONNECTION_TIMEOUT,
      });

      const data = await con.execute(
        `SELECT to_char(add_months(last_day(posting_date),-1)+1,'YYYY-MM-DD') as start_date,to_char(posting_date,'YYYY-MM-DD') as end_date
             FROM parameters
            `
      );

      // res.send(data);
      let response = [];
      let arr0 = "";

      if (data) {
        for (let i = 0; i < data.rows.length; i++) {
          for (let x = 0; x < data.metaData.length; x++) {
            arr0 +=
              '"' +
              [data.metaData[x].name.toLowerCase()] +
              '" : "' +
              data.rows[i][x] +
              '",';
          }
          // res.send(data);
          // res.send(arr0);
          response.push(
            JSON.parse(
              "{" +
                arr0.replace(/(\r\n|\n|\r)/gm, "").replace(/,\s*$/, "") +
                "}"
            )
          );
          res.send(response);
        }

        // res.send(response);
        return;
      } else {
        res.send("Something went wrong... Nothing was returned!!");
      }

      // res.send(data);
      // localStorage.setItem("codescs", data);
      // console.log(res)

      // localStorage.getItem("codescs");
      // console.log(data.rows)
    } catch (err) {
      res.send(err);
    }
  }
  getDates();
});

app.post("/api/getTrans", (req, res) => {
  const accountNumber = req.body.accountNumber;
  const startDate = req.body.startDate;
  const endDate = req.body.endDate;

  // console.log(req.body, "accountNumber");

  async function getTrans() {
    let con;
    try {
      con = await oracledb.getConnection({
        user: DB_USER,
        password: DB_PASSWORD,
        connectString: DB_CONNECTION_STRING,
        timeout: DB_CONNECTION_TIMEOUT,
      });

      const data = await con.execute(
        `SELECT to_char(POSTING_DATE,'DD-MON-YYYY') as POSTING_DATE, to_char(VALUE_DATE,'DD-MON-YYYY') as VALUE_DATE,TRANSACTION_DETAILS,DOCUMENT_REF,BATCH_NO,LOCAL_EQUIVALENT_DB,LOCAL_EQUIVALENT_CR
             FROM vw_actrans_all
             WHERE ACCOUNT_NUMBER = '${accountNumber}'
             AND POSTING_DATE BETWEEN '${startDate}' 
             AND '${endDate}'
            `
      );

      let response = [];
      let arr0 = "";

      if (data) {
        for (let i = 0; i < data.rows.length; i++) {
          for (let x = 0; x < data.metaData.length; x++) {
            arr0 +=
              '"' +
              [data.metaData[x].name.toLowerCase()] +
              '" : "' +
              data.rows[i][x] +
              '",';
          }

          response.push(
            JSON.parse(
              "{" +
                arr0.replace(/(\r\n|\n|\r)/gm, "").replace(/,\s*$/, "") +
                "}"
            )
          );
        }

        res.send(response);
      } else {
        res.send("Something went wrong... Nothing was returned!!");
      }

      // res.send(data);
      // console.log(data.rows, "data");
    } catch (err) {
      res.send(err);
    }
  }
  getTrans();
});

app.post("/api/counter-cheque-withdrawal", async (req, res) => {
  const {
    accountNumber,
    amount,
    transaction_desc,
    voucherNumber,
    postedBy,
    approvedBy,
    terminal,
    branch,
    transaction_code,
    ex_rate,
    batchNumber,
    documentRef,
    appFlag,
    narration,
    transactionRef,
    sourceOfFunds,
    formCode,
    currency,
    key,
    username,
  } = req.body;

  let response_code;
  let response_message;
  try {
    const db = await oracledb.getConnection({
      user: DB_USER,
      password: DB_PASSWORD,
      connectString: DB_CONNECTION_STRING,
      timeout: DB_CONNECTION_TIMEOUT,
    });

    const execute = util.promisify(db.execute).bind(db);
    if (key === "contra") {
      // console.log({ req: req.body });
      const data = await execute(
        `select nvl(:username,:username) contra_account,:username
                          from  users_teller_currency b
                          where  b.teller_name = GET_TELL_ROLE(:username)
                          AND B.CURRENCY_CODE = :currency`,
        {
          username,
          currency,
        }
      );
      return res.send(data.rows[0][0]);
    }

    //     acct in VARCHAR2,amt in number, v_date in date, CHANEL in varchar2,
    // trans_desc in VARCHAR2,v_num  in VARCHAR2, p_by in VARCHAR2,
    // app_by in VARCHAR2,terminal in VARCHAR2, branch in VARCHAR2,
    // trans_code in varchar2,ex_rate in  number,btch in  varchar2,
    //  DOCUMENT_REFF  in varchar2, APP_FLAG  in VARCHAR2, NARRATION in VARCHAR2, TRANS_REF in VARCHAR2,
    //  SRC_FUND in VARCHAR2,FORM_COD in  varchar2,resp_code out varchar2,resp_mess out varchar2

    // console.log(req.body);
    const result = await execute(
      `begin pkg_cashtrx_rt.prc_countercheq_withd(:accountNumber, :amount, GET_POSTINGDATE(), 'BRA', :transaction_desc, :voucherNumber, :postedBy, :approvedBy , :terminal , :branch , :transaction_code , :ex_rate , :batchNumber , :documentRef , :appFlag ,:narration , :transactionRef , :sourceOfFunds ,:formCode , :response_code , :response_message); END;`,
      {
        accountNumber,
        amount: parseFloat(amount),
        transaction_desc,
        voucherNumber,
        postedBy,
        approvedBy,
        terminal,
        branch,
        transaction_code,
        ex_rate: null,
        batchNumber,
        documentRef,
        appFlag,
        narration,
        transactionRef,
        sourceOfFunds: null,
        formCode,
        response_code: { dir: oracledb.BIND_OUT, type: oracledb.STRING },
        response_message: { dir: oracledb.BIND_OUT, type: oracledb.STRING },
      }
    );
    if (result) {
      console.log(result);
      if (result.outBinds.response_code == "000") {
        return res.send({
          responseCode: result.outBinds.response_code,
          responseMessage: result.outBinds.response_message,
        });
      }
    }
    // res.send(con);
  } catch (err) {
    console.log(err);
    res.send({ "An error occurred": err });
  }
});

app.post("/api/amend-user-profile", async (req, res) => {
  const {
    username,
    amount,
    batchNo,
    transType,
    key,
    transNo,
    accountNo,
    branch,
    terminal,
    dept,
    userID,
    fullName,
    qtype,
    subKey,
  } = req.body;
  // console.log("ghana");
  try {
    const db = await oracledb.getConnection({
      user: DB_USER,
      password: DB_PASSWORD,
      connectString: DB_CONNECTION_STRING,
      timeout: DB_CONNECTION_TIMEOUT,
    });

    const execute = util.promisify(db.execute).bind(db);
    const arr = [];
    const arr1 = [];
    if (key === "lovs") {
      async function getBranch() {
        const data = await execute(
          `select br_code ,br_description from TB_branch
          order by br_description
     `
        );
        if (data.rows) {
          for (let i = 0; i < data.rows.length; i++) {
            const label = data.rows[i][1];
            const value = data.rows[i][0];

            arr.push({
              label: `${value ? `${value} - ` : ""}${label}`,
              value: value ? `${value}` : "",
            });
          }

          return arr;
        }
      }

      async function getDept() {
        const data = await execute(
          `select DEPT_ID,DEPT_NAME from department where FLAG_STATUS='Y'
     `
        );
        if (data.rows) {
          for (let i = 0; i < data.rows.length; i++) {
            const label = data.rows[i][1];
            const value = data.rows[i][0];

            arr1.push({
              label: `${value ? `${value} - ` : ""}${label}`,
              value: value ? `${value}` : "",
            });
          }

          return arr1;
        }
      }

      Promise.all([getBranch(), getDept()]).then((result) => {
        return res.send({ dept: result[1], branch: result[0] });
        // console.log({ result });
      });

      return;
    }
    if (key === "block") {
      const data = await execute(
        `select user_name , fullname ,GET_BRANCHDESC(branch_code) , phone ,  LOGIN_FLAG from menu_users where nvl(app_flag,'N' )  like  '%'||:qtype||'%' and upper(User_name) like '%'||:userID||'%' and branch_code like '%'||:branch||'%' AND GROUP_NAME like '%'||:dept||'%' and upper(FULLNAME) like '%'||:fullName||'%' and User_name!='BANKOWNER' order by USER_NAME`,
        {
          fullName,
          branch,
          dept,
          userID,
          qtype,
        }
      );

      // if (data && data2) {
      return res.send(data.rows);
      // }
    }

    if (key === "details") {
      async function getDetails() {
        const data = await execute(
          `select user_name userID ,staff_code staffID, ac_number || '-'|| get_acctdesc(ac_number) salaryAc,  fullname ,branch_code branchcode , phone ,float_account || '-'|| get_acctdesc(float_account) floatAc,  LOGIN_FLAG , date_appl dateApp ,app_by appBy , eod_user , passwd_expiry_flag , creditapp_level , trans_enq , global_flag , user_status , trader , lock_flag , date_expired , approval_authority , authority_code , group_code , time_in , time_out , special , special_gl  , quorum_app_flag , REC_CLASS_INFO  from menu_users where user_name = :userID`,
          {
            userID,
          }
        );
        const arr = [];
        if (data) {
          var arr0 = "";

          for (let i = 0; i < data.rows.length; i++) {
            for (let x = 0; x < data.metaData.length; x++) {
              arr0 +=
                '"' +
                [data.metaData[x].name.toLowerCase()] +
                '" : "' +
                data.rows[i][x] +
                '",';
            }

            arr.push(JSON.parse("{" + arr0.replace(/,\s*$/, "") + "}"));
            // console.log(data, "hgha");
          }
        }
        return arr[0];
      }

      async function getBranch() {
        const data = await execute(
          `select BR_DESCRIPTION,BR_CODE from tb_branch
          where br_code not in ('0','00')`
        );

        if (data.rows) {
          const arr = [];

          for (let i = 0; i < data.rows.length; i++) {
            const label = data.rows[i][0];
            const value = data.rows[i][1];

            arr.push({
              label: `${value ? `${value} - ` : ""}${label}`,
              value: value ? `${value}` : "",
            });
          }

          return arr;
        }
        return;
      }

      async function getAppLevel() {
        const data = await execute(
          ` select ACTUAL_CODE,DESCRIPTION from code_desc
          where code_type='GPU'
          ORDER BY ACTUAL_CODE`
        );

        if (data.rows) {
          const arr = [];

          for (let i = 0; i < data.rows.length; i++) {
            const label = data.rows[i][1];
            const value = data.rows[i][0];

            arr.push({
              label: `${value ? `${value} - ` : ""}${label}`,
              value: value ? `${value}` : "",
            });
          }

          return arr;
        }
        return;
      }

      async function getAuth() {
        const data = await execute(
          `select DESCRIPTION,ACTUAL_CODE from code_desc where code_type='AUS'`
        );

        if (data.rows) {
          const arr = [];

          for (let i = 0; i < data.rows.length; i++) {
            const label = data.rows[i][0];
            const value = data.rows[i][1];

            arr.push({
              label: `${value ? `${value} - ` : ""}${label}`,
              value: value ? `${value}` : "",
            });
          }

          return arr;
        }
        return;
      }

      return Promise.all([
        getDetails(),
        getBranch(),
        getAuth(),
        getAppLevel(),
      ]).then((result) => {
        res.send({
          details: result[0],
          branch: result[1],
          authCode: result[2],
          appLevel: result[3],
        });
      });
    }

    if (key === "accessRight") {
      async function getAccessRight() {
        const data = await execute(
          `select a.ACCESS_CODE ,  b.description from TB_USER_MENU_ACCESSES a join code_desc b on b.ACTUAL_CODE = a.access_code where a.user_name = :userID and b.CODE_TYPE='ACS'`,
          {
            userID,
          }
        );
        if (data) {
          // console.log(data, "hgha");
          return data.rows;
        }
      }

      async function getAccessLov() {
        const data = await execute(
          `select DESCRIPTION,ACTUAL_CODE from code_desc where CODE_TYPE='ACS'
          order by actual_code`
        );
        if (data.rows) {
          const arr = [];

          for (let i = 0; i < data.rows.length; i++) {
            const label = data.rows[i][0];
            const value = data.rows[i][1];

            arr.push({
              label: `${value ? `${value}-` : ""}${label}`,
              value: `${value ? `${value}-` : ""}${label}`,
            });
          }

          return arr;
        }
      }

      const response = await Promise.all([getAccessLov(), getAccessRight()]);

      return res.send(response);
    }

    if (key === "approve") {
      const data = await execute(
        `begin prc_sameday_revapp(:transNo , :batchNo , :accountNo , :branch , :amount, :username , :transType , :msg , :terminal ); end;`,
        {
          transNo,
          batchNo,
          accountNo,
          branch,
          amount,
          username,
          transType,
          terminal,
          msg: { dir: oracledb.BIND_OUT, type: oracledb.STRING },
        }
      );
      if (data) {
        // console.log(data, "hgha");
        return res.send(data.outBinds.msg);
      }
    }

    console.log(typeof transType, batchNo, amount);
    const data = await execute(
      `select BATCH_NO , TRANS_NO , ACCOUNT_NUMBER , GET_ACCTDESC(ACCOUNT_NUMBER) , GET_ISO_CODE(CURRENCY_CODE) , TRANSACTION_DETAILS ,local_equivalent_db ,local_equivalent_cr , VOUCHER_DATE   from vw_actrans_all where user_name = :username and posting_date = get_postingdate() and batch_no like '%'||:batchNo||'%'
        and abs(nvl(local_equivalent_cr,0)-nvl(local_equivalent_db,0)) between nvl(:amount,0) and nvl(:amount,9999999999999)
        and transaction_type like '%'||:transType||'%' AND TRANSACTION_TYPE !='501' ORDER BY trans_no DESC`,
      {
        username,
        batchNo,
        amount,
        transType,
      }
    );
    if (data) {
      res.send(data.rows);
    }
  } catch (err) {
    console.log(err);
    res.send({ "An error occurred": err });
  }
});
app.post("/api/cash-withdrawal", async (req, res) => {
  let cashWithdrawalAPI = require("./controllers/teller/cash-withdrawal");

  let account_number = req.body.account_number;
  let amount = req.body.amount;
  let voucher_date = req.body.voucher_date;
  let transaction_details = req.body.transaction_details;
  let username = req.body.username;
  let approved_by = req.body.approved_by;
  let machine_id = ip.address();
  let branch = req.body.branch;
  let batch_no = req.body.batch_no;
  let document_ref = req.body.document_ref;
  let narration = req.body.narration;
  let trans_ref = req.body.trans_ref;
  let source_of_funds = req.body.source_of_funds;
  let form_code = req.body.form_code;
  let key = req.body.key;

  if (key === "validate") {
    try {
      con = await oracledb.getConnection({
        user: DB_USER,
        password: DB_PASSWORD,
        connectString: DB_CONNECTION_STRING,
        timeout: DB_CONNECTION_TIMEOUT,
      });

      const data = await con.execute(
        `select GET_ACCTSTATUS(:account_number) from dual`,
        {
          account_number,
        }
      );

      if (data.rows[0][0] === "N" || data.rows[0][0] === "CR") {
        return res.send(false);
      } else {
        return res.send(true);
      }
    } catch (err) {
      console.log(err);
    }
  }
  if (key === "approved-CAW") {
    try {
      con = await oracledb.getConnection({
        user: DB_USER,
        password: DB_PASSWORD,
        connectString: DB_CONNECTION_STRING,
        timeout: DB_CONNECTION_TIMEOUT,
      });

      const data = await con.execute(
        `SELECT *  FROM vw_approved_cash WHERE USER_NAME = :username
      `,
        {
          username,
        }
      );

      const arr = [];
      if (data.rows) {
        for (let i = 0; i < data.rows.length; i++) {
          const description = data.rows[i][1];
          const actual_code = data.rows[i][0];

          arr.push({
            label: `${actual_code} - ${description}`,
            value: `${actual_code}`,
          });
        }
      }
      return res.send(arr);
    } catch (err) {
      console.log(err);
    }
  }

  if (key === "approval-details") {
    try {
      con = await oracledb.getConnection({
        user: DB_USER,
        password: DB_PASSWORD,
        connectString: DB_CONNECTION_STRING,
        timeout: DB_CONNECTION_TIMEOUT,
      });

      const query = {
        A: `SELECT acct_link , trans_amount , trans_number  FROM vw_app_cashdetails WHERE trans_number = :batch_no`,
        R: `SELECT 
        acct_link,
        trans_amount,
        trans_number,
        description,
        class_code,
        rej_cnt
    FROM 
        (SELECT 
            a.acct_link,
            a.trans_amount,
            a.trans_number,
            b.DESCRIPTION,
            b.class_code,
            a.rej_cnt
         FROM 
            cashier_limit_rej a
         JOIN 
            CODE_DESC b ON a.REJECTION_REASON = b.ACTUAL_CODE
         WHERE 
            a.trans_number = :batch_no 
            AND b.CODE_TYPE = 'REJ'
         ORDER BY 
            a.rej_cnt DESC
        )
    WHERE 
        ROWNUM = 1    
        `,
      };
      const data = await con.execute(query[req.body.approvalStatus], {
        batch_no,
      });
      // console.log(req.body.approvalStatus, { data });
      return res.send(data.rows);
    } catch (err) {
      console.log(err);
    }
  }

  cashWithdrawalAPI
    .cashWithdrawalFunc(
      account_number,
      amount,
      voucher_date,
      transaction_details,
      username,
      approved_by,
      machine_id,
      branch,
      batch_no,
      document_ref,
      narration,
      trans_ref,
      source_of_funds,
      form_code
    )
    .then((result) => {
      // console.log(result);
      // if (result) {
      res.send(result);
      // }
    });
});

app.post("/api/cash-deposit", (req, res) => {
  let cashDepositAPI = require("./controllers/teller/cash-deposit");

  let account_number = req.body.account_number;
  let amount = req.body.amount;
  let voucher_date = req.body.voucher_date;
  let transaction_details = req.body.transaction_details;
  let username = req.body.username;
  let approved_by = req.body.approved_by;
  let machine_id = ip.address();
  let branch = req.body.branch;
  let batch_no = req.body.batch_no;
  let document_ref = req.body.document_ref;
  let narration = req.body.narration;
  let trans_ref = req.body.trans_ref;
  let source_of_funds = req.body.source_of_funds;
  let form_code = req.body.form_code;
  let third_party = req.body.third_party;

  cashDepositAPI
    .cashDepositFunc(
      account_number,
      amount,
      voucher_date,
      transaction_details,
      username,
      approved_by,
      machine_id,
      branch,
      batch_no,
      document_ref,
      narration,
      trans_ref,
      source_of_funds,
      form_code,
      third_party
    )
    .then((result) => {
      // console.log(result);
      // if (result) {
      res.send(result);
      // }
    });
});

// app.post("/api/denominations", (req, res) => {
//   const {
//     denominations,
//     postingDate,
//     teller_name,
//     branch,
//     batch_no,
//     accountNumber,
//     collection_flag,
//   } = req.body;
//  console.log(req.body)
//   async function postDenominations() {
//     let con;

//     try {
//       con = await oracledb.getConnection({
//         user: DB_USER,
//         password: DB_PASSWORD,
//         connectString: DB_CONNECTION_STRING,
//         timeout: DB_CONNECTION_TIMEOUT,
//       });

//       //
//       // TELLER_NAME =:global.username

//       /*vault_upd (quantity_p IN NUMBER,
// denomination_code_p IN VARCHAR,
// currency_code_p IN VARCHAR,
// amount_p IN NUMBER,
// teller_contra_p IN  VARCHAR,
// trans_no_P IN NUMBER,
// VAULT_ACCOUNT_p IN VARCHAR,
// CONTRA_ACCOUNT_p IN VARCHAR,
// TELLER_NAME_p IN VARCHAR,
// POSTING_DATE_p IN DATE,
// COLLECTION_FLAG_p IN VARCHAR,
// COLLECTION_NO_p IN VARCHAR,
// UPDATE_INDICATOR_p IN VARCHAR,
// USER_NAME_p IN VARCHAR,
// BATCH_NO_p IN VARCHAR,
// BR_p IN VARCHAR
// )*/
//       if (denominations) {
//         Object.keys(denominations).map(async (i) => {
//           console.log(denominations[i] , i)
//           const data = await con.execute(
//             `BEGIN BANKOWNER.vault_upd(:quantity , :denomination_code , :currency_code, :amount , :teller_contra , :trans_no , :VAULT_ACCOUNT , :CONTRA_ACCOUNT , :TELLER_NAME , TO_DATE(:postingDate , 'YYYY-MM-DD') , :COLLECTION_FLAG , :COLLECTION_NO , 'Y' , :USER_NAME , :BATCH_NO , :BRANCH); END;
//             `,
//             {
//               quantity: denominations[i]?.quantity,
//               denomination_code: i,
//               currency_code: i.currency_code,
//               amount: denominations[i]?.amount,
//               teller_contra: teller_name,
//               trans_no: batch_no,
//               VAULT_ACCOUNT: teller_name,
//               CONTRA_ACCOUNT: accountNumber,
//               TELLER_NAME: teller_name,
//               COLLECTION_FLAG: collection_flag,
//               postingDate,
//               USER_NAME: teller_name,
//               BATCH_NO: batch_no,
//               BRANCH: branch,
//             }
//           );
//         });

//         console.log("Success")
//         return res.send({
//           responseCode: "000" ,
//           responseMessage: "Transaction posted successfully",
//         });
//       }

//       // let arr = [];
//       // if (data) {
//       //   res.send({
//       //
//       //   });
//       // }
//     } catch (err) {
//       res.send(err);
//     }
//   }

//   postDenominations();
// });

app.post("/api/denominations", async (req, res) => {
  const {
    denominations,
    postingDate,
    teller_name,
    branch,
    batch_no,
    accountNumber,
    collection_flag,
  } = req.body;
  console.log(req.body);

  function generateRandomString(length) {
    const prefix = "";
    const characters = "0123456789";
    const prefixLength = prefix.length;
    const charactersLength = characters.length;

    let result = prefix;

    for (let i = prefixLength; i < length; i++) {
      const randomIndex = Math.floor(Math.random() * charactersLength);
      const randomCharacter = characters.charAt(randomIndex);
      result += randomCharacter;
    }

    return result;
  }

  async function postDenominations() {
    let con;

    try {
      con = await oracledb.getConnection({
        user: DB_USER,
        password: DB_PASSWORD,
        connectString: DB_CONNECTION_STRING,
        timeout: DB_CONNECTION_TIMEOUT,
      });

      if (denominations) {
        const promises = Object.keys(denominations).map(async (i) => {
          console.log(
            parseFloat(denominations[i]?.amount),
            denominations[i]?.quantity,
            i,
            generateRandomString(7)
          );

          await con.execute(
            `BEGIN vault_upd(:quantity , :denomination_code , :currency_code, :amount , :teller_contra , :trans_no , :VAULT_ACCOUNT , :CONTRA_ACCOUNT , :TELLER_NAME , get_postingdate() , :COLLECTION_FLAG , :COLLECTION_NO , 'Y' , :USER_NAME , :BATCH_NO , :BRANCH); END;`,
            {
              quantity: denominations[i]?.quantity,
              denomination_code: i,
              currency_code: denominations[i]?.currency_code,
              amount: denominations[i]?.amount,
              // amount: ,
              teller_contra: teller_name,
              trans_no: parseFloat(batch_no),
              VAULT_ACCOUNT: teller_name,
              CONTRA_ACCOUNT: accountNumber,
              TELLER_NAME: teller_name,
              COLLECTION_FLAG: collection_flag,
              COLLECTION_NO: generateRandomString(7),
              // postingDate,
              USER_NAME: teller_name,
              BATCH_NO: batch_no,
              BRANCH: branch,
            }
          );
        });

        await Promise.all(promises);

        // console.log("Success");
        return res.send({
          responseCode: "000",
          responseMessage: "Transaction posted successfully",
        });
      }
    } catch (err) {
      res.send(err);
      console.log(err);
    } finally {
      if (con) {
        await con.close();
      }
    }
  }

  await postDenominations();
});

app.post("/api/transaction-status", (req, res) => {
  const {
    username,
    account_number,
    trans_number,
    batch_number,
    status,
    key,
    amount,
    branch,
    terminal,
    currency,
  } = req.body;
  // return res.send([req.body]);
  async function transactionDetails() {
    let con;

    try {
      con = await oracledb.getConnection({
        user: DB_USER,
        password: DB_PASSWORD,
        connectString: DB_CONNECTION_STRING,
        timeout: DB_CONNECTION_TIMEOUT,
      });
      let bindVars = {
        username,
      };
      if (key === "delete") {
        console.log({
          username,
          account_number,
          trans_number,
          amount,
          branch,
          terminal,
          currency,
        });
        const data = await con.execute(
          `BEGIN PKG_CASHTRX_RT.prc_deltel_unapp(:trans_number , :account_number , :amount , :branch , :username , get_currcode(:currency) ,:terminal , :response ); END;
          `,
          {
            username,
            account_number,
            trans_number: `${trans_number}`,
            amount,
            branch,
            terminal,
            currency,
            response: {
              type: oracledb.STRING,
              dir: oracledb.BIND_OUT,
            },
          }
        );

        return res.send(data.outBinds.response);
      }

      const data = await con.execute(
        ` Select batch_no , trans_no , acct_link , get_acctdesc(acct_link), get_curriso(currency_code) , transaction_details , amount ,value_date , status, applimit_type FROM USER_DAYS_TRANS_STATUS where user_name = :username  and batch_no like '%'||:batch_number||'%' and status like :status||'%'
        and acct_link like '%'||:account_number||'%' order by trans_no DESC`,
        { username, batch_number, status, account_number }
      );

      return res.send(data.rows);
    } catch (err) {
      console.log(err);
      return res.send(err);
    }
  }

  transactionDetails();
});

app.post("/api/transaction-validation", async (req, res) => {
  const {
    vaultAccount,
    amount,
    accountNumber,
    batchNo,
    branch,
    transType,
    key,
    narration,
  } = req.body;
  // console.log(req.body);
  if (key === "approval") {
    try {
      let con = await oracledb.getConnection({
        user: DB_USER,
        password: DB_PASSWORD,
        connectString: DB_CONNECTION_STRING,
        timeout: DB_CONNECTION_TIMEOUT,
      });
      const data = await con.execute(
        `begin prc_withdra_send_toapp(:amount, :accountNumber, :vaultAccount,:batchNo , :branch ,:narration,  :message ); END ;
`,
        {
          amount,
          accountNumber,
          vaultAccount,
          batchNo,
          branch,
          narration,
          message: { dir: oracledb.BIND_OUT, type: oracledb.STRING },
        }
      );
      console.log("Success");
      return res.send({
        responseMessage: data.outBinds.message,
      });
    } catch (e) {
      console.log(e);
      return res.send("Something went wrong!!");
    }
  }
  async function validate() {
    let con;

    try {
      con = await oracledb.getConnection({
        user: DB_USER,
        password: DB_PASSWORD,
        connectString: DB_CONNECTION_STRING,
        timeout: DB_CONNECTION_TIMEOUT,
      });

      if (transType === "I") {
        const data = await con.execute(
          `begin prc_deposit_val(:amount, :accountNumber, :vaultAccount,:batchNo , :branch ,  :message ); END ;
      `,
          {
            amount,
            accountNumber,
            vaultAccount,
            batchNo,
            branch,
            message: { dir: oracledb.BIND_OUT, type: oracledb.STRING },
          }
        );

        res.send({
          responseMessage: data.outBinds.message,
        });
      } else {
        const data = await con.execute(
          `begin pkg_cashtrx_rt.prc_withdrawl_val(:amount, :accountNumber, :vaultAccount,:batchNo , :branch ,  :message ); END ;
      `,
          {
            amount,
            accountNumber,
            vaultAccount,
            batchNo,
            branch,
            message: { dir: oracledb.BIND_OUT, type: oracledb.STRING },
          }
        );

        res.send({
          responseMessage: data.outBinds.message,
        });
      }
    } catch (err) {
      res.send(err);
      console.log(err);
    } finally {
      if (con) {
        await con.close();
      }
    }
  }

  await validate();
});

app.post("/api/cheque-deposit", (req, res) => {
  const type_of_acct = req.body.type_of_acct;

  async function chequeDeposit() {
    let con;

    try {
      con = await oracledb.getConnection({
        user: DB_USER,
        password: DB_PASSWORD,
        connectString: DB_CONNECTION_STRING,
        timeout: DB_CONNECTION_TIMEOUT,
      });

      const data =
        await con.execute(`SELECT ALL CODE_DESC.ACTUAL_CODE, CODE_DESC.DESCRIPTION
      FROM CODE_DESC WHERE CODE_DESC.CODE_TYPE ='BNC'
      AND ACTUAL_CODE NOT IN (GET_BANKCODE)
      ORDER BY ACTUAL_CODE ASC
      `);

      const data2 =
        await con.execute(`SELECT ALL CODE_DESC.ACTUAL_CODE, CODE_DESC.DESCRIPTION, CODE_DESC.SHORT_DESCRP
        FROM CODE_DESC
        WHERE CODE_DESC.CODE_TYPE ='CCC'
        AND ACTUAL_CODE != 'RTD'
        AND CLASS_CODE='Y'`);

      // res.send("get started")

      const arr = [];
      if (data.rows) {
        for (let i = 0; i < data.rows.length; i++) {
          const description = data.rows[i][1];
          const actual_code = data.rows[i][0];

          arr.push({
            label: `${actual_code} - ${description}`,
            value: `${actual_code}`,
          });
        }
      }

      const arr2 = [];
      if (data2.rows) {
        for (let i = 0; i < data2.rows.length; i++) {
          const description = data2.rows[i][1];
          const actual_code = data2.rows[i][0];

          arr2.push({
            label: `${actual_code} - ${description}`,
            value: `${actual_code}`,
          });
        }
      }

      res.send({ issuingBankCode: arr, chequeCategory: arr2 });
    } catch (err) {
      res.send(err);
    }
  }

  chequeDeposit();
});

app.post("/api/cash-limit", (req, res) => {
  const { username } = req.body;

  async function cashLimit() {
    let con;

    try {
      con = await oracledb.getConnection({
        user: DB_USER,
        password: DB_PASSWORD,
        connectString: DB_CONNECTION_STRING,
        timeout: DB_CONNECTION_TIMEOUT,
      });

      //
      // TELLER_NAME =:global.username
      const data = await con.execute(
        `select CURR_ISO , MAX_ONLINE_CR , MIN_OFF_DR , MAX_FLOOR_LIM , MIN_FLOOR_LIM
        from VW_TELLER_LIMIT_MAIN where TELLER_NAME = GET_TELL_ROLE(:username)`,
        { username }
      );

      const data2 = await con.execute(
        `select CURR_ISO , MAX_ONLINE_CR , MIN_OFF_DR , MAX_FLOOR_LIM , MIN_FLOOR_LIM
        from VW_TELLER_LIMIT_EXCEP where TELLER_NAME = :username`,
        { username }
      );

      let arr = [];
      if (data) {
        res.send({ main: data.rows, exceptional: data2.rows });
      }
    } catch (err) {
      res.send(err);
    }
  }

  cashLimit();
});

app.post("/api/multi-currency-deposit", (req, res) => {
  const type_of_acct = req.body.type_of_acct;

  async function chequeDeposit() {
    let con;

    try {
      con = await oracledb.getConnection({
        user: DB_USER,
        password: DB_PASSWORD,
        connectString: DB_CONNECTION_STRING,
        timeout: DB_CONNECTION_TIMEOUT,
      });

      const data = await con.execute(`select DEAL_NO , REQUEST_NO
        from treas_advice`);

      // return res.send(data);
      let arr = [];
      if (data) {
        res.send(data.rows);
      }
    } catch (err) {
      res.send(err);
    }
  }

  chequeDeposit();
});

app.post("/api/till-position", (req, res) => {
  const { username, currency_code, type, date, batchNumber, key } = req.body;
  async function tillPosition() {
    let con;

    try {
      con = await oracledb.getConnection({
        user: DB_USER,
        password: DB_PASSWORD,
        connectString: DB_CONNECTION_STRING,
        timeout: DB_CONNECTION_TIMEOUT,
      });
      if (key === "vault") {
        if (type === "Cash Received") {
          if (batchNumber) {
            const data = await con.execute(
              `SELECT a.denomination_code as denomination , CURR_DENOMINATIONS.DENOMINATION_DESCRP, a.quantity , a.amount  FROM VW_VAULT_TRANS_TEMP a JOIN CURR_DENOMINATIONS ON a.CURRENCY_CODE = CURR_DENOMINATIONS.CURRENCY_CODE WHERE a.BATCH_NO = :batchNumber AND a.DENOMINATION_CODE = CURR_DENOMINATIONS.DENOMINATION_CODE
              `,
              { batchNumber }
            );

            return res.send(data.rows);
          }
        }
        return res?.send({
          message: "Missing key",
        });
      }

      if (type === "Pending Cash In") {
        if (batchNumber) {
          const data = await con.execute(
            `SELECT VW_VAULT_TRANS_TEMP.denomination_code as denomination , CURR_DENOMINATIONS.DENOMINATION_DESCRP  , VW_VAULT_TRANS_TEMP.amount , VW_VAULT_TRANS_TEMP.quantity  FROM VW_VAULT_TRANS_TEMP JOIN CURR_DENOMINATIONS ON VW_VAULT_TRANS_TEMP.CURRENCY_CODE = CURR_DENOMINATIONS.CURRENCY_CODE WHERE VW_VAULT_TRANS_TEMP.COLLECTION_FLAG = 'O' AND VW_VAULT_TRANS_TEMP.BATCH_NO = :batchNumber AND VW_VAULT_TRANS_TEMP.DENOMINATION_CODE = CURR_DENOMINATIONS.DENOMINATION_CODE
            `,
            { batchNumber }
          );

          // const arr = [];
          // if (data.rows) {
          //   for (let i = 0; i < data.rows.length; i++) {
          //     arr.push({
          //       requested_by: data.rows[i][0],
          //       amount: data.rows[i][1],

          //       batch_no: data.rows[i][2],
          //     });
          //   }
          // }

          return res.send(data.rows);
        }
        const data = await con.execute(
          `SELECT teller_id , amount , batch_no FROM TB_CASH_REQUEST_BOOK Where FLAG = 'A' and TELLER_ID = :username AND CURRENCY = :currency_code AND POSTING_DATE = GET_POSTINGDATE()`,
          { username, currency_code }
        );

        const arr = [];
        if (data.rows) {
          for (let i = 0; i < data.rows.length; i++) {
            arr.push([data.rows[i][0], data.rows[i][1], data.rows[i][2]]);
          }
        }

        return res.send(arr);
      }

      if (type === "Pending Cash Out") {
        if (batchNumber) {
          const data = await con.execute(
            `SELECT VW_VAULT_TRANS_TEMP.denomination_code as denomination , CURR_DENOMINATIONS.DENOMINATION_DESCRP  , VW_VAULT_TRANS_TEMP.amount, VW_VAULT_TRANS_TEMP.quantity  FROM VW_VAULT_TRANS_TEMP JOIN CURR_DENOMINATIONS ON VW_VAULT_TRANS_TEMP.CURRENCY_CODE = CURR_DENOMINATIONS.CURRENCY_CODE WHERE VW_VAULT_TRANS_TEMP.BATCH_NO = :batchNumber AND VW_VAULT_TRANS_TEMP.DENOMINATION_CODE = CURR_DENOMINATIONS.DENOMINATION_CODE
            `,
            { batchNumber }
          );

          // const arr = [];
          // if (data.rows) {
          //   for (let i = 0; i < data.rows.length; i++) {
          //     arr.push({
          //       requested_by: data.rows[i][0],
          //       amount: data.rows[i][1],

          //       batch_no: data.rows[i][2],
          //     });
          //   }
          // }

          return res.send(data.rows);
        }
        const data = await con.execute(
          `SELECT trans_to , trans_amount , batch_no FROM CHG_VW Where POSTED_BY = :username AND CURRENCY_CODE = :currency_code AND POSTING_DATE = GET_POSTINGDATE()`,
          { username, currency_code }
        );

        const arr = [];
        if (data.rows) {
          for (let i = 0; i < data.rows.length; i++) {
            arr.push([data.rows[i][0], data.rows[i][1], data.rows[i][2]]);
          }
        }

        return res.send(arr);
      }

      if (type === "Ungranted Cash Request") {
        if (batchNumber) {
          const data = await con.execute(
            `SELECT TB_TELLER_DENOMINATION.denomination_code as denomination , CURR_DENOMINATIONS.DENOMINATION_DESCRP , TB_TELLER_DENOMINATION.quantity FROM TB_TELLER_DENOMINATION JOIN CURR_DENOMINATIONS ON CURR_DENOMINATIONS.CURRENCY_CODE = '010' WHERE TB_TELLER_DENOMINATION.BATCH_NO = :batchNumber AND TB_TELLER_DENOMINATION.DENOMINATION_CODE = CURR_DENOMINATIONS.DENOMINATION_CODE
            `,
            { batchNumber }
          );

          return res.send(data.rows);
        }
        const data = await con.execute(
          `SELECT REQUEST_FROM , AMOUNT , BATCH_NO FROM CRQS_VW Where TELLER_ID =:username AND CURRENCY = :currency_code AND REQUEST_DATE = GET_POSTINGDATE() AND FLAG = 'N'`,
          { username, currency_code }
        );

        const arr = [];
        if (data.rows) {
          for (let i = 0; i < data.rows.length; i++) {
            arr.push([data.rows[i][0], data.rows[i][1], data.rows[i][2]]);
          }
        }

        return res.send(arr);
      }

      if (type === "Cash Received") {
        if (batchNumber) {
          const data = await con.execute(
            `SELECT VW_VAULT_TRANS_ALL.denomination_code as denomination , CURR_DENOMINATIONS.DENOMINATION_DESCRP, VW_VAULT_TRANS_ALL.quantity , VW_VAULT_TRANS_ALL.amount  FROM VW_VAULT_TRANS_ALL JOIN CURR_DENOMINATIONS ON VW_VAULT_TRANS_ALL.CURRENCY_CODE = CURR_DENOMINATIONS.CURRENCY_CODE WHERE VW_VAULT_TRANS_ALL.COLLECTION_FLAG = 'I' AND VW_VAULT_TRANS_ALL.BATCH_NO = :batchNumber AND VW_VAULT_TRANS_ALL.DENOMINATION_CODE = CURR_DENOMINATIONS.DENOMINATION_CODE
            `,
            { batchNumber }
          );

          // const arr = [];
          // if (data.rows) {
          //   for (let i = 0; i < data.rows.length; i++) {
          //     arr.push({
          //       requested_by: data.rows[i][0],
          //       amount: data.rows[i][1],

          //       batch_no: data.rows[i][2],
          //     });
          //   }
          // }

          return res.send(data.rows);
        }
        const data = await con.execute(
          `SELECT sender , posting_date , amount , batch_no FROM VW_TEL_TRANSFER v Where RECIEVER = :username AND CURRENCY_CODE = GET_ISO_CODE(:currency_code) and exists (select 1 from TB_cash_request_book b where b.batch_no=V.batch_no and flag='Y' AND B.TELLER_ID=V.RECIEVER) AND POSTING_DATE = GET_POSTINGDATE()`,
          { username, currency_code }
        );

        const arr = [];
        if (data.rows) {
          for (let i = 0; i < data.rows.length; i++) {
            arr.push([
              data.rows[i][0],
              new Date(data.rows[i][1]).toLocaleDateString("en-GB", {
                day: "2-digit",
                month: "short",
                year: "numeric",
              }),
              data.rows[i][2],
              data.rows[i][3],
            ]);
            // arr.push({
            //   sender: data.rows[i][0],
            //   transfer_date: new Date(data.rows[i][1]).toLocaleDateString(
            //     "en-GB",
            //     {
            //       day: "2-digit",
            //       month: "short",
            //       year: "numeric",
            //     }
            //   ),

            //   amount: data.rows[i][2],
            //   batchNumber: data.rows[i][3],
            // });
          }
        }

        return res.send(arr);
      }

      //

      // SENDER = :global.username AND CURRENCY_CODE =GET_ISO_CODE(:DUMMY.CURRENCY_CODE)
      // AND POSTING_DATE = GET_POSTINGDATE
      if (type === "Cash Sent") {
        if (batchNumber) {
          const data = await con.execute(
            `SELECT VW_VAULT_TRANS_TEMP.denomination_code as denomination , CURR_DENOMINATIONS.DENOMINATION_DESCRP, VW_VAULT_TRANS_TEMP.quantity , VW_VAULT_TRANS_TEMP.amount  FROM VW_VAULT_TRANS_TEMP JOIN CURR_DENOMINATIONS ON VW_VAULT_TRANS_TEMP.CURRENCY_CODE = CURR_DENOMINATIONS.CURRENCY_CODE WHERE VW_VAULT_TRANS_TEMP.BATCH_NO = :batchNumber AND VW_VAULT_TRANS_TEMP.DENOMINATION_CODE = CURR_DENOMINATIONS.DENOMINATION_CODE
            `,
            { batchNumber }
          );
          return res.send(data.rows);
        }
        const data = await con.execute(
          `SELECT reciever , posting_date , amount , batch_no FROM TEL_TRANSFER_ENQ Where SENDER = :username AND CURRENCY_CODE = GET_ISO_CODE(:currency_code) AND POSTING_DATE = GET_POSTINGDATE()`,
          { username, currency_code }
        );

        const arr = [];
        if (data.rows) {
          for (let i = 0; i < data.rows.length; i++) {
            arr.push([
              data.rows[i][0],
              new Date(data.rows[i][1]).toLocaleDateString("en-GB", {
                day: "2-digit",
                month: "short",
                year: "numeric",
              }),
              data.rows[i][2],
              data.rows[i][3],
            ]);
          }
        }

        return res.send(arr);
      }

      const data = await con.execute(
        `SELECT VAULT_DENOMINATIONS_NEW.DENOMINATION_CODE , VAULT_DENOMINATIONS_NEW.DENOMINATION_QTY ,CURR_DENOMINATIONS.DENOMINATION_DESCRP FROM VAULT_DENOMINATIONS_NEW join CURR_DENOMINATIONS ON VAULT_DENOMINATIONS_NEW.CURRENCY_CODE = CURR_DENOMINATIONS.CURRENCY_CODE where VAULT_DENOMINATIONS_NEW.CURRENCY_CODE = :currency_code and VAULT_DENOMINATIONS_NEW.VAULT_ACCOUNT = :username AND VAULT_DENOMINATIONS_NEW.DENOMINATION_CODE = CURR_DENOMINATIONS.DENOMINATION_CODE ORDER BY TO_NUMBER(VAULT_DENOMINATIONS_NEW.DENOMINATION_CODE) DESC
      `,
        { username, currency_code }
      );

      // return res.send(data);
      const data2 = await con.execute(
        `SELECT * FROM VW_TILL_ACTIVITY Where user_name = :username and currency_code = :currency_code`,
        { username, currency_code }
      );

      const arr = [];
      if (data.rows) {
        for (let i = 0; i < data.rows.length; i++) {
          arr.push([
            data.rows[i][0],
            data.rows[i][2],
            data.rows[i][0] * data.rows[i][1],
            data.rows[i][1],
          ]);
        }
      }

      // return res.send(arr);
      let arr2 = "";
      if (data2.rows) {
        arr2 = {
          cash_sent: data2.rows[0][2],
          cash_received: data2.rows[0][3],
          pending_cash_in: data2.rows[0][4],
          pending_cash_out: data2.rows[0][5],
          ungranted_cash_request: data2.rows[0][6],
        };
      }

      res.send({ denominations: arr, tillActivities: arr2 });
    } catch (err) {
      res.send(err);
    }
  }

  tillPosition();
});

// --------------------- VAULT CASH OUTWARDS SCREEN -----------------------------
// vault cash movement outwards
app.post("/api/get-cash-movement-outwards-lovs", (req, res) => {
  const currency = req.body.currency;
  const global_branch = req.body.global_branch;
  let currencyData = [];
  let branchesData = [];
  let response = [];
  let getCashMovementOutwardsAPI = async () => {
    try {
      const db = await oracledb.getConnection({
        user: DB_USER,
        password: DB_PASSWORD,
        connectString: DB_CONNECTION_STRING,
        timeout: DB_CONNECTION_TIMEOUT,
      });

      let arr0 = "";
      let arr1 = "";

      // node native promisify
      const execute = util.promisify(db.execute).bind(db);

      if (currency === "currency") {
        const data = await execute(
          `select iso_code,currency_code 
        from tb_currency
        where app_flag = 'Y'
        ORDER BY iso_code`
        );
        if (data) {
          for (let i = 0; i < data.rows.length; i++) {
            for (let x = 0; x < data.metaData.length; x++) {
              arr0 +=
                '"' +
                [data.metaData[x].name.toLowerCase()] +
                '" : "' +
                data.rows[i][x] +
                '",';
            }

            currencyData.push(
              JSON.parse(
                "{" +
                  arr0.replace(/(\r\n|\n|\r)/gm, "").replace(/,\s*$/, "") +
                  "}"
              )
            );
          }

          // res.send(response);
        } else {
          res.send("Something went wrong... Nothing was returned!!");
        }
      }

      // branches
      if (global_branch) {
        const data = await execute(
          `select br_code, br_description
          from tb_branch
          where br_code NOT IN ('0','${global_branch}','000')  ORDER BY br_description ASC`
        );

        if (data) {
          for (let i = 0; i < data.rows.length; i++) {
            for (let x = 0; x < data.metaData.length; x++) {
              arr1 +=
                '"' +
                [data.metaData[x].name.toLowerCase()] +
                '" : "' +
                data.rows[i][x] +
                '",';
            }

            branchesData.push(
              JSON.parse(
                "{" +
                  arr1.replace(/(\r\n|\n|\r)/gm, "").replace(/,\s*$/, "") +
                  "}"
              )
            );
          }

          // res.send(response);
        } else {
          res.send("Something went wrong... Nothing was returned!!");
        }
      }

      response.push({
        currency: currencyData,
        branch: branchesData,
      });

      res.send(response);
    } catch (err) {
      console.log(err, "error");
      throw err;
    } finally {
      // conn.end();
    }
  };

  getCashMovementOutwardsAPI();
});

// get teller number and name
app.post("/api/get-vault-account-and-name", (req, res) => {
  const account_class = req.body.account_class;
  const currency_code = req.body.currency_code;

  let getTellerAccount = async () => {
    try {
      const db = await oracledb.getConnection({
        user: DB_USER,
        password: DB_PASSWORD,
        connectString: DB_CONNECTION_STRING,
        timeout: DB_CONNECTION_TIMEOUT,
      });

      const response = [];
      let arr0 = "";
      // node native promisify
      const execute = util.promisify(db.execute).bind(db);
      const data = await execute(`
      select A.acct_link, get_acctdesc(a.acct_link) account_desc
      from auto_recon A, G_LEDGER B
      where SHORT_CODE = '${account_class}'
      AND A.ACCT_LINK = B.ACCT_LINK
      AND B.CURRENCY_CODE =  '${currency_code}'
        `);

      if (data) {
        for (let i = 0; i < data.rows.length; i++) {
          for (let x = 0; x < data.metaData.length; x++) {
            arr0 +=
              '"' +
              [data.metaData[x].name.toLowerCase()] +
              '" : "' +
              data.rows[i][x] +
              '",';
          }

          response.push(
            JSON.parse(
              "{" +
                arr0.replace(/(\r\n|\n|\r)/gm, "").replace(/,\s*$/, "") +
                "}"
            )
          );
        }

        res.send(response);
      } else {
        res.send("Something went wrong... Nothing was returned!!");
      }
    } finally {
      // conn.end();
    }
  };

  return getTellerAccount();
});

//get vault contra and contra name
app.post("/api/get-vault-contra-and-contra-name", (req, res) => {
  const teller_name = req.body.teller_name;
  const currency_code = req.body.currency_code;

  let getTellerContraAndName = async () => {
    try {
      const db = await oracledb.getConnection({
        user: DB_USER,
        password: DB_PASSWORD,
        connectString: DB_CONNECTION_STRING,
        timeout: DB_CONNECTION_TIMEOUT,
      });

      const response = [];
      let arr0 = "";
      // node native promisify
      const execute = util.promisify(db.execute).bind(db);
      const data = await execute(`

      select NVL(M.assigned_teller,'${teller_name}') contra_account, b.currency_code
                     from  users_teller_currency b ,menu_users M
                     where  b.teller_name =GET_TELL_ROLE('${teller_name}')
                     AND M.USER_NAME='${teller_name}'
                     AND B.CURRENCY_CODE = '${currency_code}'  `);

      if (data) {
        for (let i = 0; i < data.rows.length; i++) {
          for (let x = 0; x < data.metaData.length; x++) {
            arr0 +=
              '"' +
              [data.metaData[x].name.toLowerCase()] +
              '" : "' +
              data.rows[i][x] +
              '",';
          }

          response.push(
            JSON.parse(
              "{" +
                arr0.replace(/(\r\n|\n|\r)/gm, "").replace(/,\s*$/, "") +
                "}"
            )
          );
        }

        res.send(response);
      } else {
        res.send("Something went wrong... Nothing was returned!!");
      }
    } finally {
      // conn.end();
    }
  };

  return getTellerContraAndName();
});

// get vault denominations
app.post("/api/get-vault-denominations", (req, res) => {
  const vault_account = req.body.vault_account;
  const currency_code = req.body.currency_code;

  let getVaultDenominations = async () => {
    try {
      const db = await oracledb.getConnection({
        user: DB_USER,
        password: DB_PASSWORD,
        connectString: DB_CONNECTION_STRING,
        timeout: DB_CONNECTION_TIMEOUT,
      });

      const response = [];
      let arr0 = "";
      // node native promisify
      const execute = util.promisify(db.execute).bind(db);
      const data = await execute(`
  select denomination_code, denomination_descrp, denomination_qty, amount  from VW_CURRDENO_NEW
 where VAULT_ACCOUNT = '${vault_account}' 
 AND CURRENCY_CODE = '${currency_code}' ORDER BY TO_NUMBER(denomination_code) desc`);

      if (data) {
        for (let i = 0; i < data.rows.length; i++) {
          for (let x = 0; x < data.metaData.length; x++) {
            arr0 +=
              '"' +
              [data.metaData[x].name.toLowerCase()] +
              '" : "' +
              data.rows[i][x] +
              '",';
          }

          response.push(
            JSON.parse(
              "{" +
                arr0.replace(/(\r\n|\n|\r)/gm, "").replace(/,\s*$/, "") +
                "}"
            )
          );
        }

        res.send(response);
      } else {
        res.send("Something went wrong... Nothing was returned!!");
      }
    } finally {
      // conn.end();
    }
  };

  return getVaultDenominations();
});

// get code details 2 derrick

// procedure for cash movement outward
app.post("/api/prc-cash-movement-outward", async (req, res) => {
  const {
    accountNumber,
    amount,
    value_date,
    chanel,
    trans_desc,
    voucher_num,
    posted_by,
    approved_by,
    terminal,
    branch,
    trans_code,
    exchange_rate,
    batchNo,
    approval_flag,
    document_ref,
    src_fund,
    narration,
    trans_ref,
    form_code,
  } = req.body;

  async function cashMovementOutwardPrc() {
    let con;

    try {
      con = await oracledb.getConnection({
        user: DB_USER,
        password: DB_PASSWORD,
        connectString: DB_CONNECTION_STRING,
        timeout: DB_CONNECTION_TIMEOUT,
      });

      // res.send(formattedDate);
      const data = await con.execute(
        `begin prc_cash_outward(:accountNumber, :amount, :value_date, :chanel, :trans_desc, :voucher_num, :posted_by, 
          :approved_by, :terminal,  :branch , :trans_code, :exchange_rate,:batchNo, :document_ref, :approval_flag, :narration, :trans_ref, :src_fund, :form_code, :response_code, :message ); END ;
    `,
        {
          accountNumber,
          amount,
          value_date,
          chanel,
          trans_desc,
          voucher_num,
          posted_by,
          approved_by,
          terminal,
          branch,
          trans_code,
          exchange_rate,
          batchNo,
          document_ref,
          approval_flag,
          narration,
          trans_ref,
          src_fund,
          form_code,
          response_code: { dir: oracledb.BIND_OUT, type: oracledb.STRING },
          message: { dir: oracledb.BIND_OUT, type: oracledb.STRING },
        }
      );

      res.send({
        responseCode: "000",
        responseMessage: "Transaction posted successfully",
      });
    } catch (err) {
      res.send(err);
      console.log(err);
    } finally {
      if (con) {
        await con.close();
      }
    }
  }

  await cashMovementOutwardPrc();
});

app.post("/api/denominations-vault", async (req, res) => {
  const {
    denominations,
    // postingDate,
    teller_name,
    branch,
    batch_no,
    accountNumber,
    collection_flag,
    collection_no,
    teller_contra,
  } = req.body;
  console.log(req.body);

  function generateRandomString(length) {
    const prefix = "";
    const characters = "0123456789";
    const prefixLength = prefix.length;
    const charactersLength = characters.length;

    let result = prefix;

    for (let i = prefixLength; i < length; i++) {
      const randomIndex = Math.floor(Math.random() * charactersLength);
      const randomCharacter = characters.charAt(randomIndex);
      result += randomCharacter;
    }

    return result;
  }

  async function postDenominations() {
    let con;

    try {
      con = await oracledb.getConnection({
        user: DB_USER,
        password: DB_PASSWORD,
        connectString: DB_CONNECTION_STRING,
        timeout: DB_CONNECTION_TIMEOUT,
      });

      if (denominations) {
        const promises = Object.keys(denominations).map(async (i) => {
          console.log(
            parseFloat(denominations[i]?.amount),
            denominations[i]?.quantity,
            i,
            generateRandomString(7)
          );

          await con.execute(
            `BEGIN vault_upd(:quantity , :denomination_code , :currency_code, :amount , :teller_contra , :trans_no , :VAULT_ACCOUNT , :CONTRA_ACCOUNT , :TELLER_NAME , get_postingdate() , :COLLECTION_FLAG , :COLLECTION_NO , 'N' , :USER_NAME , :BATCH_NO , :BRANCH); END;`,
            {
              quantity: denominations[i]?.quantity,
              denomination_code: i,
              currency_code: denominations[i]?.currency_code,
              amount: denominations[i]?.amount,
              // amount: ,
              teller_contra: teller_name,
              trans_no: parseFloat(batch_no),
              VAULT_ACCOUNT: teller_contra,
              CONTRA_ACCOUNT: accountNumber,
              TELLER_NAME: teller_name,
              COLLECTION_FLAG: collection_flag,
              COLLECTION_NO: collection_no,
              // postingDate: postingDate,
              USER_NAME: teller_name,
              BATCH_NO: batch_no,
              BRANCH: branch,
            }
          );
        });

        await Promise.all(promises);

        // console.log("Success");
        return res.send({
          responseCode: "000",
          responseMessage: "Transaction posted successfully",
        });
      }
    } catch (err) {
      res.send(err);
      console.log(err);
    } finally {
      if (con) {
        await con.close();
      }
    }
  }

  await postDenominations();
});
// --------------------- TELLER CASH OUTWARDS SCREEN END -----------------------------

// ------------------------------ PRODUCT AMENDMENT FOR JUDE BY DERRICK----------------------
app.post("/api/get-product-amendment", (req, res) => {
  const prod_code = "'" + req.body.prod_code + "'";
  const prod_group = "'" + req.body.prod_group + "'";
  const prod_cat = "'" + req.body.prod_cat + "'";

  let getProductAmendment = async () => {
    try {
      const db = await oracledb.getConnection({
        user: DB_USER,
        password: DB_PASSWORD,
        connectString: DB_CONNECTION_STRING,
        timeout: DB_CONNECTION_TIMEOUT,
      });
      const execute = util.promisify(db.execute).bind(db);

      // return res.send("ghamna");
      // res.send(con);
      const data = await execute(
        `select * from prod_enq_vw where PROD_CODE LIKE '%'||${prod_code}||'%' AND
        PROD_GROUP LIKE '%'||${prod_group}||'%' AND
        PROD_CAT LIKE '%'||${prod_cat}||'%'
        and app_flag='Y' order by prod_code`
      );
      if (data) {
        // res.send(response);

        var arr0 = "";
        var arr = [];

        for (let i = 0; i < data.rows.length; i++) {
          for (let x = 0; x < data.metaData.length; x++) {
            arr0 +=
              '"' +
              [data.metaData[x].name.toLowerCase()] +
              '" : "' +
              data.rows[i][x] +
              '",';
          }

          arr.push(JSON.parse("{" + arr0.replace(/,\s*$/, "") + "}"));
        }

        return res.send(arr);

        // res.send({
        //   responseCode: "000",
        //   responseMessage : arr
        // });
      } else {
        res.send("Something went wrong... Nothing was returned!!");
      }
    } catch (err) {
      console.log(err);
      res.send("err");
    }
  };
  getProductAmendment();
});

app.post("/api/get-product-controls", (req, res) => {
  const prod_code = "'" + req.body.prod_code + "'";

  let getProductControls = async () => {
    try {
      const db = await oracledb.getConnection({
        user: DB_USER,
        password: DB_PASSWORD,
        connectString: DB_CONNECTION_STRING,
        timeout: DB_CONNECTION_TIMEOUT,
      });
      const execute = util.promisify(db.execute).bind(db);

      // return res.send("ghamna");
      // res.send(con);
      const data = await execute(
        `select * from CONTROL_TOTALS_ACCT where prod_code = ${prod_code} `
      );
      if (data) {
        // res.send(response);

        var arr0 = "";
        var arr = [];

        for (let i = 0; i < data.rows.length; i++) {
          for (let x = 0; x < data.metaData.length; x++) {
            arr0 +=
              '"' +
              [data.metaData[x].name.toLowerCase()] +
              '" : "' +
              data.rows[i][x] +
              '",';
          }

          arr.push(JSON.parse("{" + arr0.replace(/,\s*$/, "") + "}"));
        }

        return res.send(arr);

        // res.send({
        //   responseCode: "000",
        //   responseMessage : arr
        // });
      } else {
        res.send("Something went wrong... Nothing was returned!!");
      }
    } catch (err) {
      console.log(err);
      res.send("err");
    }
  };
  getProductControls();
});

app.post("/api/get-product-controls-account-number", (req, res) => {
  const currency_code = "'" + req.body.currency_code + "'";

  let getProductControlsAccountNumber = async () => {
    try {
      const db = await oracledb.getConnection({
        user: DB_USER,
        password: DB_PASSWORD,
        connectString: DB_CONNECTION_STRING,
        timeout: DB_CONNECTION_TIMEOUT,
      });
      const execute = util.promisify(db.execute).bind(db);

      // return res.send("ghamna");
      // res.send(con);
      const data = await execute(
        `SELECT ALL G_LEDGER.ACCT_LINK, G_LEDGER.ACCOUNT_DESCRP
        FROM G_LEDGER  WHERE LEVEL_IDENTIFIER='C' and TYPE_OF_ACCT='9' 
         and currency_code = ${currency_code} order by ACCT_LINK `
      );
      if (data) {
        // res.send(response);

        const arr = [];
        if (data.rows) {
          for (let i = 0; i < data.rows.length; i++) {
            const description = data.rows[i][1];
            const actual_code = data.rows[i][0];

            arr.push({
              label: `${actual_code} - ${description}`,
              value: actual_code,
              // short_descrp: short_descrp,
            });
          }
        }

        return res.send(arr);

        // res.send({
        //   responseCode: "000",
        //   responseMessage : arr
        // });
      } else {
        res.send("Something went wrong... Nothing was returned!!");
      }
    } catch (err) {
      console.log(err);
      res.send("err");
    }
  };
  getProductControlsAccountNumber();
});

// ---------------------------------------END HERE-------------------------------------------

// transactional journal
app.post("/api/transaction-journal", (req, res) => {
  const {
    username,
    amountFrom,
    amountTo,
    transType,
    batch_number,
    date1,
    date2,
    key,
    acct_link,
  } = req.body;
  // return res.send([req.body]);
  async function transactionJournal() {
    let con;

    try {
      con = await oracledb.getConnection({
        user: DB_USER,
        password: DB_PASSWORD,
        connectString: DB_CONNECTION_STRING,
        timeout: DB_CONNECTION_TIMEOUT,
      });

      if (key === "lov") {
        const data = await con.execute(
          `select ACTUAL_CODE, DESCRIPTION
          from code_desc
         where code_type = 'TR'
         AND STATUS = 'Y'
         union
         select null ACTUAL_CODE, 'ALL TRANSACTIONS ' DESCRIPTION
          from dual
         `
        );
        const arr = [];
        for (let i = 0; i < data.rows.length; i++) {
          const actual_code = data.rows[i][0] ?? "";
          const description = data.rows[i][1];

          arr.push({
            value: data.rows[i][2],
            label: `${actual_code} - ${description}`,
          });
        }

        return res.send(arr);
      }

      var determinant;
      let bindVars = {
        username,
        amountFrom,
        amountTo,
        transType,
        batchNo: batch_number,
        date1,
        date2,
      };
      if (acct_link) {
        determinant = ` AND ACCT_LINK = :acct_link `;
        bindVars = {
          username,
          amountFrom,
          amountTo,
          transType,
          batchNo: batch_number,
          date1,
          date2,
          acct_link,
        };
      }

      const data = await con.execute(
        ` SELECT
    batch_no,
    trans_no,
    acct_link,
    get_acctdesc(acct_link) as account_desc,
    get_curriso(currency_code) as currency_code,
    transaction_details,
    local_equivalent_db,
    local_equivalent_cr,
    value_date
FROM
    vw_actrans_all
WHERE
    user_name = :username
    AND batch_no LIKE '%'||:batchNo||'%'
     AND posting_date BETWEEN TO_DATE(:date1, 'MON-DD-YYYY') AND TO_DATE(:date2, 'MON-DD-YYYY')
    AND ABS(NVL(local_equivalent_cr, 0) - NVL(local_equivalent_db, 0)) BETWEEN NVL(:amountFrom, 0) AND NVL(:amountTo, 9999999999999)
    AND transaction_type LIKE '%'||:transType||'%'
     ${determinant ? determinant : " "}
    ORDER BY
    trans_no DESC
    `,
        bindVars
      );

      if (data) {
        var arr0 = "";
        var arr = [];

        for (let i = 0; i < data.rows.length; i++) {
          for (let x = 0; x < data.metaData.length; x++) {
            arr0 +=
              '"' +
              [data.metaData[x].name.toLowerCase()] +
              '" : "' +
              data.rows[i][x] +
              '",';
          }

          arr.push(
            JSON.parse(
              "{" +
                arr0.replace(/(\r\n|\n|\r)/gm, "").replace(/,\s*$/, "") +
                "}"
            )
          );
        }

        return res.send(arr);
      } else {
        res.send("Something went wrong... Nothing was returned!!");
      }
    } catch (err) {
      console.log(err);
      res.send(err);
    }
  }

  transactionJournal();
});

app.post("/api/transaction-journal-get-other-details", (req, res) => {
  const { batchNo, postingDate } = req.body;
  // return res.send([req.body]);
  async function getOtherDetails() {
    let con;

    try {
      con = await oracledb.getConnection({
        user: DB_USER,
        password: DB_PASSWORD,
        connectString: DB_CONNECTION_STRING,
        timeout: DB_CONNECTION_TIMEOUT,
      });

      const data = await con.execute(
        ` select acct_link, amount, customer_no, transaction_details, trans_no, posting_sys_time from vw_actrans_all where batch_no='${batchNo}' and posting_date='${postingDate}'`
      );

      // return res.send(data);

      if (data) {
        var arr0 = "";
        var arr = [];

        for (let i = 0; i < data.rows.length; i++) {
          for (let x = 0; x < data.metaData.length; x++) {
            arr0 +=
              '"' +
              [data.metaData[x].name.toLowerCase()] +
              '" : "' +
              data.rows[i][x] +
              '",';
          }

          arr.push(JSON.parse("{" + arr0.replace(/,\s*$/, "") + "}"));
        }

        return res.send(arr);
      } else {
        res.send("Something went wrong... Nothing was returned!!");
      }
    } catch (err) {
      console.log(err);
      res.send(err);
    }
  }

  getOtherDetails();
});

// get denomination breakdown
// get journal denomination breakdown
app.post("/api/transaction-journal-get-denomination-breakdown", (req, res) => {
  const { batchNo, postingDate, currency_code } = req.body;
  // return res.send([req.body]);
  async function getDenominationBreakdown() {
    let con;

    try {
      con = await oracledb.getConnection({
        user: DB_USER,
        password: DB_PASSWORD,
        connectString: DB_CONNECTION_STRING,
        timeout: DB_CONNECTION_TIMEOUT,
      });

      const data = await con.execute(
        `select a.denomination_code, b.DENOMINATION_DESCRP, a.amount, a.quantity  from VW_VAULT_TRANS_ALL a join CURR_DENOMINATIONS b on a.denomination_code = b.denomination_code where a.batch_no = '${batchNo}' and a.posting_date = '${postingDate}' and a.CURRENCY_CODE=GET_CURRCODE('${currency_code}') and b.CURRENCY_CODE=GET_CURRCODE('${currency_code}') `
      );

      // return res.send(data);

      if (data) {
        var arr0 = "";
        var arr = [];

        for (let i = 0; i < data.rows.length; i++) {
          for (let x = 0; x < data.metaData.length; x++) {
            arr0 +=
              '"' +
              [data.metaData[x].name.toLowerCase()] +
              '" : "' +
              data.rows[i][x] +
              '",';
          }

          arr.push(JSON.parse("{" + arr0.replace(/,\s*$/, "") + "}"));
        }

        return res.send(arr);
      } else {
        res.send("Something went wrong... Nothing was returned!!");
      }
    } catch (err) {
      console.log(err);
      res.send(err);
    }
  }

  getDenominationBreakdown();
});

// get transactions jourmal transaction types
app.get("/api/transaction-journal-transaction-types", (req, res) => {
  // return res.send([req.body]);
  async function getJournalTransactionTypes() {
    let con;

    try {
      con = await oracledb.getConnection({
        user: DB_USER,
        password: DB_PASSWORD,
        connectString: DB_CONNECTION_STRING,
        timeout: DB_CONNECTION_TIMEOUT,
      });

      const data = await con.execute(
        `
        select ACTUAL_CODE as value, ACTUAL_CODE || '-' || DESCRIPTION as label
 from code_desc
where code_type = 'TR'
AND STATUS = 'Y'


 `
      );

      // return res.send(data);

      if (data) {
        var arr0 = "";
        var arr = [];

        for (let i = 0; i < data.rows.length; i++) {
          for (let x = 0; x < data.metaData.length; x++) {
            arr0 +=
              '"' +
              [data.metaData[x].name.toLowerCase()] +
              '" : "' +
              data.rows[i][x] +
              '",';
          }

          arr.push(JSON.parse("{" + arr0.replace(/,\s*$/, "") + "}"));
        }
        arr.push({ label: "ALL TRANSACTIONS", value: "" });

        return res.send(arr);
      } else {
        res.send("Something went wrong... Nothing was returned!!");
      }
    } catch (err) {
      console.log(err);
      res.send(err);
    }
  }

  getJournalTransactionTypes();
});

app.get("/api/getMandatoryFieldError", (req, res) => {
  async function getMandatoryFieldError() {
    let con;

    try {
      con = await oracledb.getConnection({
        user: DB_USER,
        password: DB_PASSWORD,
        connectString: DB_CONNECTION_STRING,
      });

      const response = [];
      const headLevel = [];
      const resp = [];
      let arr0 = "";

      // node native promisify
      // const execute = util.promisify(db.execute).bind(db);

      const data = await con.execute(`
      select code, err_mesg  from ERROR_CODE where code = '00103'
      `);
      // WHERE LEVEL_INDICATOR='H' and BS_DESC <>'.'

      // PYMT;
      if (data) {
        console.log("data");
      } else {
        console.log("no data");
      }
      //  POSTING_DATEBATCH_DESC;

      // console.log(data);

      if (data) {
        for (let i = 0; i < data.rows.length; i++) {
          for (let x = 0; x < data.metaData.length; x++) {
            arr0 +=
              '"' +
              [data.metaData[x].name.toLowerCase()] +
              '" : "' +
              data.rows[i][x] +
              '",';
          }

          response.push(
            JSON.parse(
              "{" +
                arr0.replace(/(\r\n|\n|\r)/gm, "").replace(/,\s*$/, "") +
                "}"
            )
          );
        }

        res.send(response);
      } else {
        res.send(err);
        console.log("error");
      }
    } catch (err) {
      res.send(err);

      throw err;
    }
  }

  getMandatoryFieldError();
});

app.post("/api/third-party", (req, res) => {
  const {
    batch_no,
    title,
    first_name,
    last_name,
    middle_name,
    alias,
    prefix,
    gender,
    dob,
    place_of_birth,
    residence,
    mothers_name,
    SNN,
    IDNumber,
    nationality1,
    nationality2,
    nationality3,
    occupation,
    taxNo,
    sow,
    passport,
    deceased,
    IDType,
    email,
    employer_name,
    tax_reg_number,
    employer_address,
    employer_phone,
    contact,
  } = req.body.formData;

  async function thirdParty() {
    let con;

    try {
      con = await oracledb.getConnection({
        user: DB_USER,
        password: DB_PASSWORD,
        connectString: DB_CONNECTION_STRING,
        timeout: DB_CONNECTION_TIMEOUT,
      });

      const result = await con.execute(
        `INSERT INTO TB_AML_THIRDPARTY (BATCH_NO, TITLE, FIRST_NAME, LAST_NAME, MIDDLE_NAME, ALIAS, PREFIX, GENDER, DOB, PLACE_OF_BIRTH, RESIDENCE, MOTHERS_NAME, SNN, ID_NUMBER, NATIONALITY1, NATIONALITY2, NATIONALITY3, OCCUPATION, TAX_NO, SOURCE__OF_WEALTH, PASSPORT, DECEASED, IDENTIFICATION_TYPE, EMAIL, EMPLOYER_NAME, TAX_REG_NUNBER, EMPLOYER_ADDRESS, EMPLOYER_PHONE, PHONE_NUMBER) VALUES (:BATCH_NO, :TITLE, :FIRST_NAME, :LAST_NAME, :MIDDLE_NAME, :ALIAS, :PREFIX, :GENDER , :DOB, :PLACE_OF_BIRTH, :RESIDENCE, :MOTHERS_NAME, :SNN, :ID_NUMBER, :NATIONALITY1, :NATIONALITY2, :NATIONALITY3, :OCCUPATION, :TAX_NO, :SOURCE_OF_WEALTH, :PASSPORT, :DECEASED, :IDENTIFICATION_TYPE, :EMAIL, :EMPLOYER_NAME, :TAX_REGNO, :EMPLOYER_ADDRESS, :EMPLOYER_PHONE, :PHONE_NUMBER)`,
        {
          BATCH_NO: batch_no,
          TITLE: title,
          FIRST_NAME: first_name,
          LAST_NAME: last_name,
          MIDDLE_NAME: middle_name ? middle_name : null,
          ALIAS: alias ? alias : null,
          PREFIX: prefix ? prefix : null,
          GENDER: gender ? gender : null,
          DOB: dob ? new Date(dob) : null,
          PLACE_OF_BIRTH: place_of_birth ? place_of_birth : null,
          RESIDENCE: residence ? residence : null,
          MOTHERS_NAME: mothers_name ? mothers_name : null,
          SNN: SNN ? SNN : null,
          ID_NUMBER: IDNumber,
          NATIONALITY1: nationality1 ? nationality1 : null,
          NATIONALITY2: nationality2 ? nationality2 : null,
          NATIONALITY3: nationality3 ? nationality3 : null,
          OCCUPATION: occupation ? occupation : null,
          TAX_NO: taxNo ? taxNo : null,
          SOURCE_OF_WEALTH: sow ? sow : null,
          PASSPORT: passport ? passport : null,
          DECEASED: deceased ? deceased : null,
          IDENTIFICATION_TYPE: IDType,
          EMAIL: email ? email : null,
          EMPLOYER_NAME: employer_name ? employer_name : null,
          TAX_REGNO: tax_reg_number ? tax_reg_number : null,
          EMPLOYER_ADDRESS: employer_address ? employer_address : null,
          EMPLOYER_PHONE: employer_phone ? employer_phone : null,
          PHONE_NUMBER: contact ? contact : null,
        }
      );
      if (result) {
        return res.send({
          responseCode: "000",
          responseMessage: "Saved Successfully",
        });
      } else {
        return {
          responseMessage: "Saving failed",
        };
      }
    } catch (err) {
      console.log(err);
      return res.send({
        responseMessage: "error",
      });
    }
  }

  thirdParty();
});

app.post("/api/notification", (req, res) => {
  // return res.send("ghana");
  async function NotificationRequest() {
    const {
      activity_code,
      channel_id,
      // dateTime,
      branch,
      done_by,
      // postingDate,
      terminal_id,
      para1,
      para2,
      para3,
      para4,
      para5,
      para6,
      para7,
      para8,
      para9,
      para10,
    } = req.body;
    try {
      const db = await oracledb.getConnection({
        user: DB_USER,
        password: DB_PASSWORD,
        connectString: DB_CONNECTION_STRING,
        timeout: DB_CONNECTION_TIMEOUT,
      });
      const response = [];
      const execute = util.promisify(db.execute).bind(db);
      const data = await execute(
        `INSERT INTO tb_waste_system(ACTIVITY_CODE, CHANNEL_ID, DONE_BY, BRANCH, TERMINAL_ID, PARA1, PARA2, PARA3, PARA4, PARA5, PARA6, PARA7, PARA8, PARA9, PARA10) 
          VALUES (:ACTIVITY_CODE, :CHANNEL_ID, :DONE_BY, :BRANCH, :TERMINAL_ID, :PARA1, :PARA2, :PARA3, :PARA4, :PARA5, :PARA6, :PARA7, :PARA8, :PARA9, :PARA10)`,
        {
          ACTIVITY_CODE: activity_code,
          CHANNEL_ID: channel_id,
          DONE_BY: done_by,
          BRANCH: branch,
          TERMINAL_ID: terminal_id,
          PARA1: para1,
          PARA2: para2,
          PARA3: para3,
          PARA4: para4,
          PARA5: para5,
          PARA6: para6,
          PARA7: para7,
          PARA8: para8,
          PARA9: para9,
          PARA10: para10,
        },
        { autoCommit: true },
        function (err, result) {
          if (err) {
            res.send(err.message);
            return "Error occurred while inserting request";
          }
          if (result) {
            if (result.rowsAffected > 0) {
              var code = "000";
              var mess = "Request Successfully inserted";
              response = {
                responseCode: code,
                responseMessage: mess,
              };
              res.send(response);
            }
          }
        }
      );
    } catch (err) {
      res.send(err);
    }
  }
  NotificationRequest();
});

app.post("/api/get-facilities-grid", (req, res) => {
  const { customer_no_v } = req.body;
  let getDisbursementGrid = async () => {
    try {
      const db = await oracledb.getConnection({
        user: DB_USER,
        password: DB_PASSWORD,
        connectString: DB_CONNECTION_STRING,
        timeout: DB_CONNECTION_TIMEOUT,
      });

      const response = [];
      let arr0 = "";

      // node native promisify
      const execute = util.promisify(db.execute).bind(db);

      const data = await execute(
        `select * from VW_LOAN_GEN_ENQnew where 
CUSTOMER_NUMBER LIKE '%'||'${customer_no_v}'||'%'
--and rownum <= 3 
`
      );

      if (data) {
        for (let i = 0; i < data.rows.length; i++) {
          for (let x = 0; x < data.metaData.length; x++) {
            arr0 +=
              '"' +
              [data.metaData[x].name.toLowerCase()] +
              '" : "' +
              data.rows[i][x] +
              '",';
          }

          response.push(
            JSON.parse(
              "{" +
                arr0.replace(/(\r\n|\n|\r)/gm, "").replace(/,\s*$/, "") +
                "}"
            )
          );
        }

        res.send(response);
      } else {
        res.send("Something went wrong... Nothing was returned!!");
      }
    } catch (e) {
      res.send(e);
    }
  };

  getDisbursementGrid();
});

// Get Facility Service Account API Endpoint - ORACLE
app.post("/api/get-facility-service-account", (req, res) => {
  // console.log("runnins");
  const { customerType, facilityType } = req.body;
  let getFacilityServiceAccount = async () => {
    try {
      const db = await oracledb.getConnection({
        user: DB_USER,
        password: DB_PASSWORD,
        connectString: DB_CONNECTION_STRING,
        timeout: DB_CONNECTION_TIMEOUT,
      });

      const response = [];
      let arr0 = "";

      // node native promisify
      const execute = util.promisify(db.execute).bind(db);

      const data = await execute(
        `select  acct_link || '  -  ' || ACCOUNT_DESCRP as label, acct_link || '-' || customer_number || '-' || currency_code || '-' || ACCOUNT_DESCRP || '-' || currency || '-' || member_status as value from vw_LOAN_ledger a where status_indicator ='N' and c_type='${customerType}' and ( ('${facilityType}' not in ('02') and allow_overdraft = 'Y' and (prod_code||currency_code) in (select (prod_code||currency) from charges_accruals) ) ) and not exists (select 1 from product_details b where a.customer_number = b.customer_number and app_flag not in ('01','99','00'))`
      );

      if (data) {
        const arr = data.rows.map((i) => {
          return {
            label: i[0],
            value: i[1],
          };
        });
        res.send(arr);
      } else {
        res.send("Something went wrong... Nothing was returned!!");
      }
    } finally {
      // conn.end();
    }
  };

  getFacilityServiceAccount();
});

app.post("/api/get-facility-service-account-new", (req, res) => {
  const { acct_link } = req.body;
  let getFacilityServiceAccount = async () => {
    // console.log("runnins");
    try {
      const db = await oracledb.getConnection({
        user: DB_USER,
        password: DB_PASSWORD,
        connectString: DB_CONNECTION_STRING,
        timeout: DB_CONNECTION_TIMEOUT,
      });

      const response = [];
      let arr0 = "";

      // node native promisify
      const execute = util.promisify(db.execute).bind(db);

      const data = await execute(
        `select distinct account_descrp ,customer_number, description, date_opened, get_branchdesc(branch_code) branch,
 get_custemail(customer_number) email, get_custaddress(customer_number) address,
 get_custphoneno(customer_number) mobile, currency_code, member_status from vw_LOAN_ledger a where acct_link='${acct_link}' 
 and status_indicator ='N'
and  not exists (select 1 from product_details b 
where a.customer_number = b.customer_number and app_flag not in ('01','99','00'))`
      );

      if (data) {
        for (let i = 0; i < data.rows.length; i++) {
          for (let x = 0; x < data.metaData.length; x++) {
            arr0 +=
              '"' +
              [data.metaData[x].name.toLowerCase()] +
              '" : "' +
              data.rows[i][x] +
              '",';
          }

          response.push(
            JSON.parse(
              "{" +
                arr0.replace(/(\r\n|\n|\r)/gm, "").replace(/,\s*$/, "") +
                "}"
            )
          );
        }

        res.send(response);
      } else {
        res.send("Something went wrong... Nothing was returned!!");
      }
    } catch (e) {
      res.send(e);
    }
  };

  getFacilityServiceAccount();
});

app.post("/api/get-origination-accounts", (req, res) => {
  const { accountName, facilityType, customerType, determinant } = req.body;
  let getFacilityServiceAccount = async () => {
    try {
      const db = await oracledb.getConnection({
        user: DB_USER,
        password: DB_PASSWORD,
        connectString: DB_CONNECTION_STRING,
        timeout: DB_CONNECTION_TIMEOUT,
      });
      // console.log("runnins");
      const response = [];
      let arr0 = "";

      // node native promisify

      const execute = util.promisify(db.execute).bind(db);
      const query = {
        all: `select account_descrp, acct_link, currency, customer_number, currency_code, member_status 
from vw_LOAN_ledger a 
where status_indicator ='N'
and c_type='I' 
and upper(account_descrp) LIKE '%'||upper('${accountName}')||'%'
and  not exists (select 1 from product_details b 
where a.customer_number = b.customer_number and app_flag not in ('01','99','00'))`,

        restricted: `select account_descrp, acct_link, currency, customer_number, currency_code, member_status
from vw_LOAN_ledger a 
where status_indicator ='N' and upper(account_descrp) LIKE '%'||upper('${accountName}')||'%' and c_type='${customerType}' and ( ('${facilityType}' not in ('02') and allow_overdraft = 'Y' 
and (prod_code||currency_code) in (select (prod_code||currency) from charges_accruals) ) ) and not exists (select 1 from product_details b where a.customer_number = b.customer_number and app_flag not in ('01','99','00'))`,
      };
      const data = await execute(query[determinant]);
      // console.log(req.body, query[determinant]);
      if (data) {
        const response = data.rows.map((row) => {
          const obj = {};
          for (let i = 0; i < data.metaData.length; i++) {
            obj[data.metaData[i].name.toLowerCase()] = row[i];
          }
          return obj;
        });

        res.send(response);
      } else {
        res.send("Something went wrong... Nothing was returned!!");
      }
    } catch (e) {
      console.log(e.toString());
      res.send(e);
    }
  };

  getFacilityServiceAccount();
});

// Get Member Status
app.post("/api/get-member-status", (req, res) => {
  let { customer_number } = req.body;
  let getMemberStatus = async () => {
    try {
      const db = await oracledb.getConnection({
        user: DB_USER,
        password: DB_PASSWORD,
        connectString: DB_CONNECTION_STRING,
        timeout: DB_CONNECTION_TIMEOUT,
      });

      const response = [];
      let arr0 = "";

      // return res.send({transaction_number : transaction_number, yo: "yo"});

      // node native promisify
      const execute = util.promisify(db.execute).bind(db);

      const data = await execute(
        `select get_member_status('${customer_number}')member_status,
        count(acct_class)classified from vw_valid_loans 
         where acct_class>=get_npa and customer_number='${customer_number}'`
      );

      if (data) {
        for (let i = 0; i < data.rows.length; i++) {
          for (let x = 0; x < data.metaData.length; x++) {
            arr0 +=
              '"' +
              [data.metaData[x].name.toLowerCase()] +
              '" : "' +
              data.rows[i][x] +
              '",';
          }

          response.push(
            JSON.parse(
              "{" +
                arr0.replace(/(\r\n|\n|\r)/gm, "").replace(/,\s*$/, "") +
                "}"
            )
          );
        }

        res.send(response);
      } else {
        res.send("Something went wrong... Nothing was returned!!");
      }
    } catch (e) {
      res.send(e);
    }
  };

  getMemberStatus();
});

// branch branch
app.get("/api/get-branch-report", (req, res) => {
  let getBranchReport = async () => {
    try {
      const db = await oracledb.getConnection({
        user: DB_USER,
        password: DB_PASSWORD,
        connectString: DB_CONNECTION_STRING,
        timeout: DB_CONNECTION_TIMEOUT,
      });

      const response = [];
      let arr0 = "";

      // node native promisify
      const execute = util.promisify(db.execute).bind(db);

      const data = await execute(
        `select BR_CODE as value, BR_CODE || ' - ' || BR_DESCRIPTION as label from tb_branch`
      );

      if (data) {
        for (let i = 0; i < data.rows.length; i++) {
          for (let x = 0; x < data.metaData.length; x++) {
            arr0 +=
              '"' +
              [data.metaData[x].name.toLowerCase()] +
              '" : "' +
              data.rows[i][x] +
              '",';
          }

          response.push(
            JSON.parse(
              "{" +
                arr0.replace(/(\r\n|\n|\r)/gm, "").replace(/,\s*$/, "") +
                "}"
            )
          );
        }

        res.send(response);
      } else {
        res.send("Something went wrong... Nothing was returned!!");
      }
    } finally {
      // conn.end();
    }
  };

  getBranchReport();
});

app.post("/api/change-password", async (req, res) => {
  const { username, password, password1, password2, ip, branch } = req.body;

  let response_code;
  let response_message;
  try {
    const db = await oracledb.getConnection({
      user: DB_USER,
      password: DB_PASSWORD,
      connectString: DB_CONNECTION_STRING,
      timeout: DB_CONNECTION_TIMEOUT,
    });
    const execute = util.promisify(db.execute).bind(db);
    // return console.log({
    //   username,
    //   password,
    //   password1,
    //   password2,
    //   branch,
    //   ip,
    // });

    const data = await execute(
      `begin prc_pass_reset(:username, :password, :password1, :password2, :branch , :host , :ip, :msg, :msg_code); end;`,
      {
        username,
        password,
        password1,
        password2,
        branch,
        ip,
        host: null,
        msg: { dir: oracledb.BIND_OUT, type: oracledb.STRING },
        msg_code: { dir: oracledb.BIND_OUT, type: oracledb.NUMBER },
      }
    );

    console.log({ data });

    return res.send(data.outBinds);
  } catch (err) {
    console.log(err);
  }
});

app.post("/api/lien", async (req, res) => {
  const {
    account_number,
    amount,
    lien_type,
    doc_no,
    branch,
    effective_date,
    expiry_date,
    next_review_date,
    comments,
    posted_by,
    lien_number,
    ip_address,
    key,
    subKey,
  } = req.body;

  let response_code;
  let response_message;
  try {
    console.log(req.body);

    const db = await oracledb.getConnection({
      user: DB_USER,
      password: DB_PASSWORD,
      connectString: DB_CONNECTION_STRING,
      timeout: DB_CONNECTION_TIMEOUT,
    });

    const execute = util.promisify(db.execute).bind(db);
    if (key === "lien-creation") {
      // console.log({ req: req.body });
      if (subKey == "lien-type") {
        const data = await execute(
          ` select actual_code as value , actual_code || '-' || description as label from code_desc
        where code_type = 'LIE' and STATUS='Y'`
        );
        console.log(data);
        const arr = data?.rows.map((i) => ({
          value: i[0],
          label: i[1],
        }));

        return res.send(arr);
      }

      if (subKey == "fetch-details") {
        const data = await execute(`
          select account_descrp , currency_code || '-'|| get_currdesc(currency_code) , prod_code || '-'|| get_productdesc(prod_code) from g_ledger where acct_link = '${account_number}'`);
        console.log(data);
        const arr = data?.rows.map((i) => ({
          account_name: i[0],
          currency: i[1],
          product: i[2],
        }));

        return res.send(arr[0]);
      }
      if (subKey == "create-lien") {
        const data = await execute(
          `
          BEGIN BANKOWNER.prc_lien_rqt(:account_number , :amount , :lien_type , :doc_no , :branch , :effective_date , :expiry_date , :next_review_date , :comments , :posted_by , :msg , :msg_code , :req_no , :ip_address); END;`,
          {
            account_number,
            amount: parseFloat(amount),
            ip_address,
            lien_type,
            doc_no,
            branch,
            effective_date: new Date(effective_date),
            expiry_date: new Date(expiry_date),
            next_review_date: new Date(next_review_date),
            comments,
            posted_by,
            msg: { dir: oracledb.BIND_OUT, type: oracledb.STRING },
            msg_code: { dir: oracledb.BIND_OUT, type: oracledb.NUMBER },
            req_no: { dir: oracledb.BIND_OUT, type: oracledb.STRING },
          }
        );
        console.log(data);

        return res.send(data?.outBinds);
      }
    } else if (key === "lien-approval") {
      if (subKey == "fetch-pending-approvals") {
        const data = await execute(`
        select lIEN_NUMBER , acct_link , account_name , lien_amount , expiry_date , effective_date , comments FROM VW_LIEN_app where branch_code ='${branch}'`);
        // console.log(data);

        return res.send(data.rows);
      }

      if (subKey == "fetch-approved-liens") {
        const data = await execute(
          `
        SELECT
        Lien_NUMBER,
        Acct_Link,
        Account_Name,
        Lien_Amount,
        Expiry_Date,
        Effective_Date,
        Comments
      FROM
        vw_app_lien
      WHERE
        BRANCH_CODE = NVL(:branch, BRANCH_CODE) AND
        acct_link = NVL(:account_number, acct_link)
      ORDER BY
        Lien_Number DESC
      `,
          { branch, account_number }
        );
        // console.log(data);

        return res.send(data.rows);
      }

      if (subKey == "fetch-pending-approval-details") {
        const data = await execute(`
        SELECT 
        LIEN_CODE, LIEN_TYPE, ACCT_LINK, 
           ACCOUNT_NAME, CURR_CODE || '-'|| get_currdesc(curr_code), LIEN_NUMBER, 
           LIEN_AMOUNT, EXPIRY_DATE, EFFECTIVE_DATE, 
           NEXT_REVIEW_DATE
        FROM VW_UNAPP_LIEN WHERE LIEN_NUMBER = ${lien_number}`);
        // console.log({ data, lien_number });
        return res.send(data.rows);
      }

      if (subKey == "approve-lien") {
        const data = await execute(
          `
          BEGIN BANKOWNER.prc_lien_app(:account_number , :amount , :lien_type , :doc_no , :branch , :effective_date , :expiry_date , :next_review_date , :comments , :posted_by , :msg , :msg_code , :req_no , :ip_address); END;`,
          {
            account_number,
            amount: parseFloat(amount),
            ip_address,
            lien_type,
            doc_no,
            branch,
            effective_date: new Date(effective_date),
            expiry_date: new Date(expiry_date),
            next_review_date: new Date(next_review_date),
            comments,
            posted_by,
            msg: { dir: oracledb.BIND_OUT, type: oracledb.STRING },
            msg_code: { dir: oracledb.BIND_OUT, type: oracledb.NUMBER },
            req_no: lien_number,
          }
        );
        console.log(data);

        return res.send(data?.outBinds);
      }
    } else if (key === "lien-cancellation") {
      // console.log("click");

      if (subKey == "get-branch-lov") {
        const data = await execute(
          `select br_code ,br_description from TB_branch 
    order by br_description asc`
        );
        // console.log(data);
        // const arr = [];
        const response = data.rows.map((i) => ({
          label: `${i[0]} - ${i[1]}`,
          value: i[0],
        }));

        return res.send(response);
      }
      if (subKey == "cancel-lien") {
        const data = await execute(
          ` BEGIN BANKOWNER.prc_lien_CAnC(:account_number , :amount , :lien_type , :doc_no , :branch , :effective_date , :expiry_date , :next_review_date , :comments , :posted_by , :msg , :msg_code , :req_no , :ip_address); END;`,
          {
            account_number,
            amount: parseFloat(amount),
            ip_address,
            lien_type,
            doc_no,
            branch,
            effective_date: new Date(effective_date),
            expiry_date: new Date(expiry_date),
            next_review_date: new Date(next_review_date),
            comments,
            posted_by,
            msg: { dir: oracledb.BIND_OUT, type: oracledb.STRING },
            msg_code: { dir: oracledb.BIND_OUT, type: oracledb.NUMBER },
            req_no: lien_number,
          }
        );
        console.log(data);

        return res.send(data?.outBinds);
      }

      if (subKey == "approve-cancellation") {
        const data = await execute(
          `
          BEGIN BANKOWNER.prc_lien_cancapp(:account_number , :amount , :lien_type , :doc_no , :branch , :effective_date , :expiry_date , :next_review_date , :comments , :posted_by , :msg , :msg_code , :req_no , :ip_address); END;`,
          {
            account_number,
            amount: parseFloat(amount),
            ip_address,
            lien_type,
            doc_no,
            branch,
            effective_date: new Date(effective_date),
            expiry_date: new Date(expiry_date),
            next_review_date: new Date(next_review_date),
            comments,
            posted_by,
            msg: { dir: oracledb.BIND_OUT, type: oracledb.STRING },
            msg_code: { dir: oracledb.BIND_OUT, type: oracledb.NUMBER },
            req_no: lien_number,
          }
        );
        console.log(data);

        return res.send(data?.outBinds);
      }
    }
  } catch (err) {
    console.log(err);
    res.send({ "An error occurred": err });
  }
});

app.post("/api/end-of-day", async (req, res) => {
  const { key, process, username } = req.body;

  let response_code;
  let response_message;
  try {
    const db = await oracledb.getConnection({
      user: DB_USER,
      password: DB_PASSWORD,
      connectString: DB_CONNECTION_STRING,
      timeout: DB_CONNECTION_TIMEOUT,
    });
    const execute = util.promisify(db.execute).bind(db);
    if (key == "get-processes-lov") {
      const data =
        await execute(`SELECT A.ACTUAL_CODE, A.ACTUAL_CODE || ' - ' || A.DESCRIPTION,A.CLASS_CODE FROM CODE_DESC A
WHERE A.CODE_TYPE='EPA'
AND A.STATUS='Y'
AND NOT EXISTS (SELECT 1 FROM EOD_LOG B,PARAMETERS C
WHERE A.ACTUAL_CODE = B.PROCESS_CODE
AND B.PROC_DATE = C.POSTING_DATE)
ORDER BY MAKER ASC`);

      const arr = data?.rows.map((i) => ({
        value: i[0],
        label: i[1],
      }));

      return res.send(arr);
    }

    async function getPostingDate() {
      const data = await execute(`select get_Postingdate() from dual`);
      // console.log(data.rows[0][0], "ghhhh");
      return data.rows[0][0];
    }
    if (key == "get-processes") {
      const data = await execute(
        `begin prc_eod_process(:username, :process, :msg, :msg_code); end;`,
        {
          username,
          process: process,
          msg: { dir: oracledb.BIND_OUT, type: oracledb.STRING },
          msg_code: { dir: oracledb.BIND_OUT, type: oracledb.NUMBER },
        }
      );
      const data2 = await execute(`select * from VW_EOD_PROCESS_STATE`);

      return res.send({ processes: data2.rows, date: await getPostingDate() });
    }

    if (key == "refresh") {
      const data = await execute(
        `begin prc_eod_process_REFRESH(:username, :process, :msg, :msg_code); end;`,
        {
          username,
          process: process,
          msg: { dir: oracledb.BIND_OUT, type: oracledb.STRING },
          msg_code: { dir: oracledb.BIND_OUT, type: oracledb.NUMBER },
        }
      );

      console.log({ data, process, username });
      return res.send(data.rows);
    }

    if (key == "last_executed") {
      const data = await execute(
        `select PROC_DATE ,  DESCRIPTION  from VW_LASTEOD_PROCESS`
      );
      console.log({ data: data.rows });
      return res.send(data.rows[0]);
    }

    if (key == "run-eod") {
      const data = await execute(
        `begin prc_execute_eodproc(:process , :username ); end;`,
        {
          username,
          process: process,
          // msg: { dir: oracledb.BIND_OUT, type: oracledb.STRING },
          // msg_code: { dir: oracledb.BIND_OUT, type: oracledb.NUMBER },
        }
      );

      console.log({ data });
      return res.send(data.rows);
    }
  } catch (err) {
    console.log(err);
  }
});

app.get("/api/get-product-type", (req, res) => {
  let getProductType = async () => {
    try {
      const db = await oracledb.getConnection({
        user: DB_USER,
        password: DB_PASSWORD,
        connectString: DB_CONNECTION_STRING,
        timeout: DB_CONNECTION_TIMEOUT,
      });

      const response = [];
      let arr0 = "";

      // node native promisify
      const execute = util.promisify(db.execute).bind(db);

      const data = await execute(
        `select PROD_CODE as value, PROD_CODE || ' - ' || DESCRIPTION as label from tb_product`
      );

      if (data) {
        for (let i = 0; i < data.rows.length; i++) {
          for (let x = 0; x < data.metaData.length; x++) {
            arr0 +=
              '"' +
              [data.metaData[x].name.toLowerCase()] +
              '" : "' +
              data.rows[i][x] +
              '",';
          }

          response.push(
            JSON.parse(
              "{" +
                arr0.replace(/(\r\n|\n|\r)/gm, "").replace(/,\s*$/, "") +
                "}"
            )
          );
        }

        res.send(response);
      } else {
        res.send("Something went wrong... Nothing was returned!!");
      }
    } finally {
      // conn.end();
    }
  };

  getProductType();
});

app.post("/api/get-arrears", (req, res) => {
  let { branchCode, dateAs, productType, arm, accountNumber } = req.body;
  let getArrears = async () => {
    try {
      const db = await oracledb.getConnection({
        user: DB_USER,
        password: DB_PASSWORD,
        connectString: DB_CONNECTION_STRING,
        timeout: DB_CONNECTION_TIMEOUT,
      });

      const response = [];
      let arr0 = "";
      // console.log(req.body, "ghana");
      // return res.send({transaction_number : transaction_number, yo: "yo"});

      // node native promisify
      const execute = util.promisify(db.execute).bind(db);

      const data = await execute(
        `select 
   iso_code currency, princ_act, repay_acct, account_name, 
   amt_granted, effective_date, expiry_date, princ_bal, princ_arr, 
   int_arr, total_arr, days_arr,arrears_since,legacy
from bankowner.vw_rep_loanarrears_dt
where arrears_date= '${dateAs ?? ""}'
and branch_code like '%'||'${branchCode ?? ""}'||'%'
and prod_code like '%'||'${productType ?? ""}'||'%'
and arm_code like '%'||'${arm ?? ""}'||'%'
and princ_act like '%'||'${accountNumber ?? ""}'||'%'
and substr(prod_code,1,1)=5
order by days_arr desc`
      );

      if (data) {
        // for (let i = 0; i < data.rows.length; i++) {
        //   for (let x = 0; x < data.metaData.length; x++) {
        //     arr0 +=
        //       '"' +
        //       [data.metaData[x].name.toLowerCase()] +
        //       '" : "' +
        //       data.rows[i][x] +
        //       '",';
        //   }

        //   response.push(
        //     JSON.parse(
        //       "{" +
        //         arr0.replace(/(\r\n|\n|\r)/gm, "").replace(/,\s*$/, "") +
        //         "}"
        //     )
        //   );
        // }

        res.send(data.rows);
      } else {
        res.send("Something went wrong... Nothing was returned!!");
      }
    } catch (e) {
      res.send(e);
    }
  };

  getArrears();
});

app.get("/api/get-arm", (req, res) => {
  let getArm = async () => {
    try {
      const db = await oracledb.getConnection({
        user: DB_USER,
        password: DB_PASSWORD,
        connectString: DB_CONNECTION_STRING,
        timeout: DB_CONNECTION_TIMEOUT,
      });

      const response = [];
      let arr0 = "";

      // node native promisify
      const execute = util.promisify(db.execute).bind(db);

      const data = await execute(
        `select ARM_CODE as value, ARM_CODE || ' - ' || ARM_NAME as label from tbl_arm where ARM_TYPE in ('O')`
      );

      if (data) {
        for (let i = 0; i < data.rows.length; i++) {
          for (let x = 0; x < data.metaData.length; x++) {
            arr0 +=
              '"' +
              [data.metaData[x].name.toLowerCase()] +
              '" : "' +
              data.rows[i][x] +
              '",';
          }

          response.push(
            JSON.parse(
              "{" +
                arr0.replace(/(\r\n|\n|\r)/gm, "").replace(/,\s*$/, "") +
                "}"
            )
          );
        }

        res.send(response);
      } else {
        res.send("Something went wrong... Nothing was returned!!");
      }
    } finally {
      // conn.end();
    }
  };

  getArm();
});

// Get Loan Limit
app.get("/api/get-loan-limit", async (req, res) => {
  try {
    const db = await oracledb.getConnection({
      user: DB_USER,
      password: DB_PASSWORD,
      connectString: DB_CONNECTION_STRING,
      timeout: DB_CONNECTION_TIMEOUT,
    });

    // node native promisify
    const execute = util.promisify(db.execute).bind(db);

    const data = await execute(`select get_loanlimt from dual`);

    if (data && data.rows.length > 0) {
      // Assuming there's only one row and one column in the result
      const loanLimit = parseFloat(data.rows[0][0]);
      res.send({ loanLimit });
    } else {
      res.status(404).send("Loan limit not found.");
    }
  } catch (error) {
    console.error("Error fetching loan limit:", error);
    res.status(500).send("Internal Server Error");
  }
});

//  Loan Quotation Prc
app.post("/api/lending-quotation", async (req, res) => {
  const {
    f_no_v,
    int_rate_v,
    fac_amount_v,
    primora_v,
    intmora_v,
    loan_tenor_v,
    eff_date_v,
    int_type_v,
    rep_plan_v,
    rep_cnt_v,
    date_st_v,
    proc_fees_v,
    last_day_v,
    rep_plan_i,
    i_rep_cnt_v,
    ballon_v,
    ballon_install_v,
    first_prinrepay_date,
    last_repay_date,
    legal_form_v,
    currency_v,
    exempt_month_v,
    netMonthSal_v,
  } = req.body;

  try {
    const connection = await oracledb.getConnection({
      user: DB_USER,
      password: DB_PASSWORD,
      connectString: DB_CONNECTION_STRING,
    });
    await connection.execute(
      `BEGIN pck_lending.loan_schedule_quotation(
        :f_no_v,
    :int_rate_v,
    :fac_amount_v,
    :primora_v,
    :intmora_v,
    :loan_tenor_v,
    :eff_date_v,
    :int_type_v,
    :rep_plan_v,
    :rep_cnt_v,
    :date_st_v,
    :proc_fees_v,
    :last_day_v,
    :rep_plan_i,
    :i_rep_cnt_v,
    :ballon_v,
    :ballon_install_v,
    :first_prinrepay_date,
    :last_repay_date,
    :legal_form_v,
    :currency_v,
    :exempt_month_v,
    :netMonthSal_v); END;`,
      {
        f_no_v: {
          val: f_no_v,
          dir: oracledb.BIND_IN,
          maxSize: 20,
        },
        int_rate_v: {
          val: int_rate_v,
          dir: oracledb.BIND_IN,
          maxSize: 20,
        },
        fac_amount_v: {
          val: fac_amount_v,
          dir: oracledb.BIND_IN,
          maxSize: 20,
        },
        primora_v: {
          val: primora_v,
          dir: oracledb.BIND_IN,
          maxSize: 20,
        },
        intmora_v: {
          val: intmora_v,
          dir: oracledb.BIND_IN,
          maxSize: 20,
        },
        loan_tenor_v: {
          val: loan_tenor_v,
          dir: oracledb.BIND_IN,
          maxSize: 20,
        },
        eff_date_v: {
          val: eff_date_v,
          dir: oracledb.BIND_IN,
          maxSize: 20,
        },
        int_type_v: {
          val: int_type_v,
          dir: oracledb.BIND_IN,
          maxSize: 20,
        },
        rep_plan_v: {
          val: rep_plan_v,
          dir: oracledb.BIND_IN,
          maxSize: 20,
        },
        rep_cnt_v: {
          val: rep_cnt_v,
          dir: oracledb.BIND_IN,
          maxSize: 20,
        },
        date_st_v: {
          val: date_st_v,
          dir: oracledb.BIND_IN,
          maxSize: 20,
        },
        proc_fees_v: {
          val: proc_fees_v,
          dir: oracledb.BIND_IN,
          maxSize: 20,
        },
        last_day_v: {
          val: last_day_v,
          dir: oracledb.BIND_IN,
          maxSize: 20,
        },
        rep_plan_i: {
          val: rep_plan_i,
          dir: oracledb.BIND_IN,
          maxSize: 20,
        },
        i_rep_cnt_v: {
          val: i_rep_cnt_v,
          dir: oracledb.BIND_IN,
          maxSize: 20,
        },
        ballon_v: {
          val: ballon_v,
          dir: oracledb.BIND_IN,
          maxSize: 20,
        },
        ballon_install_v: {
          val: ballon_install_v,
          dir: oracledb.BIND_IN,
          maxSize: 20,
        },
        first_prinrepay_date: {
          val: first_prinrepay_date,
          dir: oracledb.BIND_IN,
          maxSize: 20,
        },
        last_repay_date: {
          val: last_repay_date,
          dir: oracledb.BIND_IN,
          maxSize: 20,
        },
        legal_form_v: {
          val: legal_form_v,
          dir: oracledb.BIND_IN,
          maxSize: 20,
        },
        currency_v: {
          val: currency_v,
          dir: oracledb.BIND_IN,
          maxSize: 20,
        },
        exempt_month_v: {
          val: exempt_month_v,
          dir: oracledb.BIND_IN,
          maxSize: 20,
        },
        netMonthSal_v: {
          val: netMonthSal_v,
          dir: oracledb.BIND_IN,
          maxSize: 20,
        },
      },

      function (err, result) {
        if (err) {
          console.log(err);
          response = {
            responseCode: "900",
            responseMessage: "Internal Server Error",
            // resData: result.outBinds
          };
          res.send(response);
        }
        if (result) {
          // console.log(result);
          response = {
            responseCode: "000",
            responseMessage: "Loan Schedule Generated Successfully",
          };

          res.send(response);
          // if () {
          //   const message = result.outBinds.response_v;
          //   response = {
          //     responseCode: "000",
          //     responseMessage: message,
          //   };
          // } else {
          //   response = {
          //     responseCode: "998",
          //     responseMessage: result.outBinds.response_v,
          //   };
          // }
          // res.send(response);
        }
      }
    );
  } catch (error) {
    console.error("Error:", error);
    res.send({
      // error: error.toString();
      responseCode: `999`,
      responseMessage: "Internal server error",
    });
  }
});

// Get Exisiting Facilities with Bank
app.post("/api/get-financial-summary", (req, res) => {
  const { customerNumber } = req.body;
  let getFinancialSummary = async () => {
    try {
      const db = await oracledb.getConnection({
        user: DB_USER,
        password: DB_PASSWORD,
        connectString: DB_CONNECTION_STRING,
        timeout: DB_CONNECTION_TIMEOUT,
      });

      const response = [];
      let arr0 = "";

      // node native promisify
      const execute = util.promisify(db.execute).bind(db);

      const data = await execute(
        `select * from vw_facility_summary where customer_number = '${customerNumber}'`
      );

      if (data) {
        for (let i = 0; i < data.rows.length; i++) {
          for (let x = 0; x < data.metaData.length; x++) {
            arr0 +=
              '"' +
              [data.metaData[x].name.toLowerCase()] +
              '" : "' +
              data.rows[i][x] +
              '",';
          }

          response.push(
            JSON.parse(
              "{" +
                arr0.replace(/(\r\n|\n|\r)/gm, "").replace(/,\s*$/, "") +
                "}"
            )
          );
        }

        res.send(response);
      } else {
        res.send("Something went wrong... Nothing was returned!!");
      }
    } catch (e) {
      res.send(e);
    }
  };

  getFinancialSummary();
});

// Get Banks
app.get("/api/get-banks", (req, res) => {
  // const { curr } = req.body;
  let getBanks = async () => {
    try {
      const db = await oracledb.getConnection({
        user: DB_USER,
        password: DB_PASSWORD,
        connectString: DB_CONNECTION_STRING,
        timeout: DB_CONNECTION_TIMEOUT,
      });

      const response = [];
      let arr0 = "";

      // node native promisify
      const execute = util.promisify(db.execute).bind(db);

      const data = await execute(
        `SELECT distinct ALTERNATE_BIC || ' - ' || GET_BANKDESC(get_swiftbankcode(ALTERNATE_BIC,CURRENCY_CODE)) as label,
ALTERNATE_BIC as value
FROM TB_BANKS_ACCT
WHERE ALTERNATE_BIC != GET_SWIFTCODE
AND get_swiftbankcode(ALTERNATE_BIC,CURRENCY_CODE)  IS NOT NULL
and currency_code = get_iso_currcode('KES')`
      );

      if (data) {
        for (let i = 0; i < data.rows.length; i++) {
          for (let x = 0; x < data.metaData.length; x++) {
            arr0 +=
              '"' +
              [data.metaData[x].name.toLowerCase()] +
              '" : "' +
              data.rows[i][x] +
              '",';
          }

          response.push(
            JSON.parse(
              "{" +
                arr0.replace(/(\r\n|\n|\r)/gm, "").replace(/,\s*$/, "") +
                "}"
            )
          );
        }

        res.send(response);
      } else {
        res.send("Something went wrong... Nothing was returned!!");
      }
    } catch (e) {
      res.send(e);
    }
  };

  getBanks();
});

// Get Available Balance
// app.post("/api/get-available-balance", async (req, res) => {
//   const { customer_number } = req.body;

//   try {
//     const db = await oracledb.getConnection({
//       user: DB_USER,
//       password: DB_PASSWORD,
//       connectString: DB_CONNECTION_STRING,
//       timeout: DB_CONNECTION_TIMEOUT,
//     });

//     // node native promisify
//     const execute = util.promisify(db.execute).bind(db);

//     const result = await execute(
//       `SELECT TO_NUMBER(get_avbal((SELECT acct_link FROM g_ledger WHERE customer_number = :cust_num AND prod_code = '112'))) AS av_bal FROM dual`,
//       [customer_number]
//     );

//     if (result.rows && result.rows.length > 0) {
//       // Convert the av_bal to a double
//       const avBal = parseFloat(result.rows[0][0]);

//       res.send({ av_bal: avBal });
//     } else {
//       res.send("No data found for the provided customer number.");
//     }
//   } catch (error) {
//     console.error("Error: ", error);
//     res.status(500).send("Something went wrong.");
//   }
// });
app.post("/api/get-available-balance", (req, res) => {
  let { account_number } = req.body;
  let getAvailableBalance = async () => {
    try {
      const db = await oracledb.getConnection({
        user: DB_USER,
        password: DB_PASSWORD,
        connectString: DB_CONNECTION_STRING,
        timeout: DB_CONNECTION_TIMEOUT,
      });

      const response = [];
      let arr0 = "";

      // return res.send({transaction_number : transaction_number, yo: "yo"});

      // node native promisify
      const execute = util.promisify(db.execute).bind(db);

      const data = await execute(
        `select get_avbal((select acct_link from g_ledger where acct_link='${account_number}'and prod_code='112')) as av_bal from dual`
      );

      if (data) {
        for (let i = 0; i < data.rows.length; i++) {
          for (let x = 0; x < data.metaData.length; x++) {
            arr0 +=
              '"' +
              [data.metaData[x].name.toLowerCase()] +
              '" : "' +
              data.rows[i][x] +
              '",';
          }

          response.push(
            JSON.parse(
              "{" +
                arr0.replace(/(\r\n|\n|\r)/gm, "").replace(/,\s*$/, "") +
                "}"
            )
          );
        }

        res.send(response);
      } else {
        res.send("Something went wrong... Nothing was returned!!");
      }
    } catch (e) {
      res.send(e);
    }
  };

  getAvailableBalance();
});

// Get Existing Repayment Account
// app.post("/api/get-existing-repayment-acc", (req, res) => {
//   let { loanProduct, currency, facilityServiceAccount } = req.body;
//   let getExistingRepaymentAccount = async () => {
//     try {
//       const db = await oracledb.getConnection({
//         user: DB_USER,
//         password: DB_PASSWORD,
//         connectString: DB_CONNECTION_STRING,
//         timeout: DB_CONNECTION_TIMEOUT,
//       });

//       const response = [];
//       let arr0 = "";

//       // return res.send({transaction_number : transaction_number, yo: "yo"});

//       // node native promisify
//       const execute = util.promisify(db.execute).bind(db);

//       const data = await execute(
//         `select count(repayment_account) as count from vw_valid_loans where legal_form='${loanProduct}' and currency_code='${currency}' and repayment_account='${facilityServiceAccount}'`
//       );

//       if (data) {
//         for (let i = 0; i < data.rows.length; i++) {
//           for (let x = 0; x < data.metaData.length; x++) {
//             arr0 +=
//               '"' +
//               [data.metaData[x].name.toLowerCase()] +
//               '" : "' +
//               data.rows[i][x] +
//               '",';
//           }

//           response.push(
//             JSON.parse(
//               "{" +
//                 arr0.replace(/(\r\n|\n|\r)/gm, "").replace(/,\s*$/, "") +
//                 "}"
//             )
//           );
//         }

//         res.send(response);
//       } else {
//         res.send("Something went wrong... Nothing was returned!!");
//       }
//     } catch (e) {
//       res.send(e);
//     }
//   };

//   getExistingRepaymentAccount();
// });

app.post("/api/get-existing-repayment-account", (req, res) => {
  let { loanProduct, currency, customerNumber } = req.body;
  let getEx = async () => {
    try {
      const db = await oracledb.getConnection({
        user: DB_USER,
        password: DB_PASSWORD,
        connectString: DB_CONNECTION_STRING,
        timeout: DB_CONNECTION_TIMEOUT,
      });

      const response = [];
      let arr0 = "";

      // return res.send({transaction_number : transaction_number, yo: "yo"});

      // node native promisify
      const execute = util.promisify(db.execute).bind(db);

      const data = await execute(
        `SELECT COUNT(customer_number) AS count 
        --get_PROD_MEMBER_status('5${loanProduct}','${currency}')prod_active_status
      FROM vw_valid_loans
      WHERE prod_code = '5${loanProduct}'
        AND currency_code = '${currency}'
        AND customer_number = '${customerNumber}'`
      );

      if (data) {
        for (let i = 0; i < data.rows.length; i++) {
          for (let x = 0; x < data.metaData.length; x++) {
            arr0 +=
              '"' +
              [data.metaData[x].name.toLowerCase()] +
              '" : "' +
              data.rows[i][x] +
              '",';
          }

          response.push(
            JSON.parse(
              "{" +
                arr0.replace(/(\r\n|\n|\r)/gm, "").replace(/,\s*$/, "") +
                "}"
            )
          );
        }

        res.send(response);
      } else {
        res.send("Something went wrong... Nothing was returned!!");
      }
    } catch (e) {
      res.send(e);
    }
  };

  getEx();
});

// Get Product Details
app.post("/api/get-product-details", (req, res) => {
  let { legal_form, currency } = req.body;
  let getProductDetails = async () => {
    try {
      const db = await oracledb.getConnection({
        user: DB_USER,
        password: DB_PASSWORD,
        connectString: DB_CONNECTION_STRING,
        timeout: DB_CONNECTION_TIMEOUT,
      });

      const response = [];
      let arr0 = "";

      // return res.send({transaction_number : transaction_number, yo: "yo"});

      // node native promisify
      const execute = util.promisify(db.execute).bind(db);

      const data = await execute(
        `SELECT NVL (int_type, '01') as int_type, NVL (repayment_frequency, '01') as repayment_frequency, NVL (maturity_period, 6) as maturity_period, NVL (int_freq, '01') as int_freq, lien_fee, int_pay_count, prin_pay_count, LAST_DAY, weeks_in_month, MORA_ALL, GUARANTOR_LIMIT, GUARANTOR_BENEFICIARY_LIMIT FROM facility_controlss WHERE type_of_acct = '5' AND legal_form = '${legal_form}' AND currency = '${currency}'`
      );

      if (data) {
        for (let i = 0; i < data.rows.length; i++) {
          for (let x = 0; x < data.metaData.length; x++) {
            arr0 +=
              '"' +
              [data.metaData[x].name.toLowerCase()] +
              '" : "' +
              data.rows[i][x] +
              '",';
          }

          response.push(
            JSON.parse(
              "{" +
                arr0.replace(/(\r\n|\n|\r)/gm, "").replace(/,\s*$/, "") +
                "}"
            )
          );
        }

        res.send(response);
      } else {
        res.send("Something went wrong... Nothing was returned!!");
      }
    } catch (e) {
      res.send(e);
    }
  };

  getProductDetails();
});

// Get Interest Charges
app.post("/api/get-interest-charges", (req, res) => {
  let { legal_form, currency, amt } = req.body;
  let getInterestCharges = async () => {
    try {
      const db = await oracledb.getConnection({
        user: DB_USER,
        password: DB_PASSWORD,
        connectString: DB_CONNECTION_STRING,
        timeout: DB_CONNECTION_TIMEOUT,
      });

      const response = [];
      let arr0 = "";

      // return res.send({transaction_number : transaction_number, yo: "yo"});

      // node native promisify
      const execute = util.promisify(db.execute).bind(db);

      const data = await execute(
        `SELECT NVL (charges_rate, base_rate) as base_rate, charges_rate as prime_rate, nvl(eff_interest,charges_rate)eff_interest FROM charges_type_acct WHERE type_of_acct = '5' AND legal_form = '${legal_form}' AND currency = '${currency}' AND '${amt}' BETWEEN ABS (max_bal) AND ABS (min_bal)`
      );

      if (data) {
        for (let i = 0; i < data.rows.length; i++) {
          for (let x = 0; x < data.metaData.length; x++) {
            arr0 +=
              '"' +
              [data.metaData[x].name.toLowerCase()] +
              '" : "' +
              data.rows[i][x] +
              '",';
          }

          response.push(
            JSON.parse(
              "{" +
                arr0.replace(/(\r\n|\n|\r)/gm, "").replace(/,\s*$/, "") +
                "}"
            )
          );
        }

        res.send(response);
      } else {
        res.send("Something went wrong... Nothing was returned!!");
      }
    } catch (e) {
      res.send(e);
    }
  };

  getInterestCharges();
});

app.post("/api/get-od-interest-charges", (req, res) => {
  let { cur, amt } = req.body;
  let getInterestCharges = async () => {
    try {
      const db = await oracledb.getConnection({
        user: DB_USER,
        password: DB_PASSWORD,
        connectString: DB_CONNECTION_STRING,
        timeout: DB_CONNECTION_TIMEOUT,
      });

      const response = [];
      let arr0 = "";

      // return res.send({transaction_number : transaction_number, yo: "yo"});

      // node native promisify
      const execute = util.promisify(db.execute).bind(db);

      const data = await execute(
        `SELECT get_loan_baserate,
                   interest_variance,
                   1,
                   charges_rate,
                   eff_interest
              FROM charges_type_acct a
             WHERE     type_of_acct = '1'
                   AND legal_form = '12'
                   AND currency = '${cur}'
                   AND '${amt}' BETWEEN ABS (max_bal)
                                              AND ABS (min_bal)`
      );

      if (data) {
        for (let i = 0; i < data.rows.length; i++) {
          for (let x = 0; x < data.metaData.length; x++) {
            arr0 +=
              '"' +
              [data.metaData[x].name.toLowerCase()] +
              '" : "' +
              data.rows[i][x] +
              '",';
          }

          response.push(
            JSON.parse(
              "{" +
                arr0.replace(/(\r\n|\n|\r)/gm, "").replace(/,\s*$/, "") +
                "}"
            )
          );
        }

        res.send(response);
      } else {
        res.send("Something went wrong... Nothing was returned!!");
      }
    } catch (e) {
      res.send(e);
    }
  };

  getInterestCharges();
});

// Get Loan Charges
app.post("/api/get-loan-charges", (req, res) => {
  let { legal_form, currency, amt, fac_type } = req.body;
  let getLoanCharges = async () => {
    try {
      const db = await oracledb.getConnection({
        user: DB_USER,
        password: DB_PASSWORD,
        connectString: DB_CONNECTION_STRING,
        timeout: DB_CONNECTION_TIMEOUT,
      });

      const response = [];
      let arr0 = "";

      // return res.send({transaction_number : transaction_number, yo: "yo"});

      // node native promisify
      const execute = util.promisify(db.execute).bind(db);

      const data = await execute(
        `select fee_code, description, perc, val, fee_type from vw_facility_fees where type_of_facility='${fac_type}' and legal_form = '${legal_form}' and currency_code = '${currency}' and '${amt}' between nvl(minimum_amt ,0) and nvl(maximum_amt,0) order by fee_code`
      );

      if (data) {
        for (let i = 0; i < data.rows.length; i++) {
          for (let x = 0; x < data.metaData.length; x++) {
            arr0 +=
              '"' +
              [data.metaData[x].name.toLowerCase()] +
              '" : "' +
              data.rows[i][x] +
              '",';
          }

          response.push(
            JSON.parse(
              "{" +
                arr0.replace(/(\r\n|\n|\r)/gm, "").replace(/,\s*$/, "") +
                "}"
            )
          );
        }

        res.send(response);
      } else {
        res.send("Something went wrong... Nothing was returned!!");
      }
    } catch (e) {
      res.send(e);
    }
  };

  getLoanCharges();
});

app.post("/api/get-od-charges", (req, res) => {
  let { currency, amt, fac_type } = req.body;
  let getLoanCharges = async () => {
    try {
      const db = await oracledb.getConnection({
        user: DB_USER,
        password: DB_PASSWORD,
        connectString: DB_CONNECTION_STRING,
        timeout: DB_CONNECTION_TIMEOUT,
      });

      const response = [];
      let arr0 = "";

      // return res.send({transaction_number : transaction_number, yo: "yo"});

      // node native promisify
      const execute = util.promisify(db.execute).bind(db);

      const data = await execute(
        `select fee_code, description, perc, val, fee_type from vw_facility_fees where type_of_facility='${fac_type}' and currency_code = '${currency}' and '${amt}' between nvl(minimum_amt ,0) and nvl(maximum_amt,0) order by fee_code`
      );

      if (data) {
        for (let i = 0; i < data.rows.length; i++) {
          for (let x = 0; x < data.metaData.length; x++) {
            arr0 +=
              '"' +
              [data.metaData[x].name.toLowerCase()] +
              '" : "' +
              data.rows[i][x] +
              '",';
          }

          response.push(
            JSON.parse(
              "{" +
                arr0.replace(/(\r\n|\n|\r)/gm, "").replace(/,\s*$/, "") +
                "}"
            )
          );
        }

        res.send(response);
      } else {
        res.send("Something went wrong... Nothing was returned!!");
      }
    } catch (e) {
      res.send(e);
    }
  };

  getLoanCharges();
});

// Post Loan Fees
app.post("/api/insert-loan-fees", async (req, res) => {
  let { loanAppNo, feeCharges, requestedAmount } = req.body; // Now includes requestedAmount
  try {
    const db = await oracledb.getConnection({
      user: DB_USER,
      password: DB_PASSWORD,
      connectString: DB_CONNECTION_STRING,
      timeout: DB_CONNECTION_TIMEOUT,
    });

    const insertPromises = feeCharges.map(async (charge) => {
      const { fee_code, fee_type, perc, val } = charge;

      // Calculate fee amount based on the percentage and requested amount
      const feeAmount = fee_type
        ? Math.round((perc * requestedAmount) / 100)
        : 0;

      const sql = `
        INSERT INTO TB_LOAN_APP_FEES
        (LOAN_APP_NO, FEE_CODE, FEE_TYPE, FEE_RATE, FEE_AMOUNT)
        VALUES (:loanAppNo, :fee_code, :fee_type, :perc, :feeAmount)`;

      const binds = {
        loanAppNo,
        fee_code,
        fee_type,
        perc,
        feeAmount,
      };

      return await db.execute(sql, binds);
    });

    await Promise.all(insertPromises); // Wait for all insertions to complete
    res.send({ message: "Fees inserted successfully." });
  } catch (error) {
    console.error("Error inserting fees: ", error);
    res.status(500).send({ message: "Error inserting fees.", error });
  }
});

// GET TRANS TYPE
app.get("/api/get-trans-type", (req, res) => {
  // const code = "'"+req.body.code+"'";

  async function getTransType() {
    let con;

    try {
      con = await oracledb.getConnection({
        user: DB_USER,
        password: DB_PASSWORD,
        connectString: DB_CONNECTION_STRING,
        timeout: DB_CONNECTION_TIMEOUT,
      });

      const data = await con.execute(
        `select CODE_DESC DESCRIPTION,  A.SYS_CODE  ACTUAL_CODE , A.SYS_CODE
     from   code_desc b, sysgen_transactions a
    where   b.code_type = 'TR'
     and    a.actual_code = b.actual_code
     AND A.SYS_CODE in (SELECT tr_code FROM batch_transcode)`
      );

      if (data.rows) {
        const arr = [];

        for (let i = 0; i < data.rows.length; i++) {
          const description = data.rows[i][0];
          const actual_code = data.rows[i][1];

          arr.push({
            description: description,
            actual_code: actual_code,
          });
        }

        res.send(arr);
        // console.log(arr)
      } else {
        res.send(err);
        console.log(err);
      }
    } catch (err) {
      res.send(err);
    }
  }

  getTransType();
});

// Get Details of Loans to be verified
app.post("/api/get-loans-verification-details", (req, res) => {
  const { loanAppNo } = req.body;
  let getOriginatedLoansDetails = async () => {
    try {
      const db = await oracledb.getConnection({
        user: DB_USER,
        password: DB_PASSWORD,
        connectString: DB_CONNECTION_STRING,
        timeout: DB_CONNECTION_TIMEOUT,
      });

      const response = [];
      let arr0 = "";

      // node native promisify
      const execute = util.promisify(db.execute).bind(db);

      const data = await execute(
        `select * from VW_PROD_DETAILS where loan_app_no = '${loanAppNo}'`
      );

      if (data) {
        for (let i = 0; i < data.rows.length; i++) {
          for (let x = 0; x < data.metaData.length; x++) {
            arr0 +=
              '"' +
              [data.metaData[x].name.toLowerCase()] +
              '" : "' +
              data.rows[i][x] +
              '",';
          }

          response.push(
            JSON.parse(
              "{" +
                arr0.replace(/(\r\n|\n|\r)/gm, "").replace(/,\s*$/, "") +
                "}"
            )
          );
        }

        res.send(response);
      } else {
        res.send("Something went wrong... Nothing was returned!!");
      }
    } catch (e) {
      res.send(e);
    }
  };

  getOriginatedLoansDetails();
});

// Get Employment Details
app.post("/api/get-employment-details", (req, res) => {
  const { customerNumber } = req.body;
  let getEmpDetails = async () => {
    try {
      const db = await oracledb.getConnection({
        user: DB_USER,
        password: DB_PASSWORD,
        connectString: DB_CONNECTION_STRING,
        timeout: DB_CONNECTION_TIMEOUT,
      });

      const response = [];
      let arr0 = "";

      // node native promisify
      const execute = util.promisify(db.execute).bind(db);

      const data = await execute(
        `select EMPLOYMENT_CATEGORY, CUSTOMER_NUMBER, ADDRESS1, POSITION_HELD, EMPLOYED_SINCE, CITY, PHONE1 from TB_EMPLOYEMENT where CUSTOMER_NUMBER = '${customerNumber}'`
      );

      if (data) {
        for (let i = 0; i < data.rows.length; i++) {
          for (let x = 0; x < data.metaData.length; x++) {
            arr0 +=
              '"' +
              [data.metaData[x].name.toLowerCase()] +
              '" : "' +
              data.rows[i][x] +
              '",';
          }

          response.push(
            JSON.parse(
              "{" +
                arr0.replace(/(\r\n|\n|\r)/gm, "").replace(/,\s*$/, "") +
                "}"
            )
          );
        }

        res.send(response);
      } else {
        res.send("Something went wrong... Nothing was returned!!");
      }
    } catch (e) {
      // conn.end();
      res.send(e.toString());
    }
  };

  getEmpDetails();
});

// Get Loans Due
app.post("/api/get-loans-due", (req, res) => {
  const { sd, ed } = req.body;
  let getLoansDue = async () => {
    try {
      const db = await oracledb.getConnection({
        user: DB_USER,
        password: DB_PASSWORD,
        connectString: DB_CONNECTION_STRING,
        timeout: DB_CONNECTION_TIMEOUT,
      });

      const response = [];
      let arr0 = "";

      // node native promisify
      const execute = util.promisify(db.execute).bind(db);

      const data = await execute(
        `select a.FACILITY_NO,b.CUSTOMER_NUMBER,GET_ACCTDESC(b.PRINCIPAL_ACCOUNT) "CUSTOMER_NAME",
b.PRINCIPAL_ACCOUNT,PRINCIPAL "PRINCIPAL_DUE",INTEREST "INTEREST_DUE",MONTHP "TOTAL_AMOUNT"
from VW_REPAYMENT_SCHEDULE a,facility b
where a.FACILITY_NO = b.FACILITY_NO
and get_currentmonth in  EXTRACT(Month FROM DATE_DUE)
and get_currentyear in  EXTRACT(Year FROM DATE_DUE)
AND DATE_DUE BETWEEN NVL('${sd}','1-JAN-1900') AND NVL('${ed}','1-DEC-9999')`
      );

      if (data) {
        for (let i = 0; i < data.rows.length; i++) {
          for (let x = 0; x < data.metaData.length; x++) {
            arr0 +=
              '"' +
              [data.metaData[x].name.toLowerCase()] +
              '" : "' +
              data.rows[i][x] +
              '",';
          }

          response.push(
            JSON.parse(
              "{" +
                arr0.replace(/(\r\n|\n|\r)/gm, "").replace(/,\s*$/, "") +
                "}"
            )
          );
        }

        res.send(response);
      } else {
        res.send("Something went wrong... Nothing was returned!!");
      }
    } catch (e) {
      res.send(e);
    }
  };

  getLoansDue();
});

// Get Loans Disbursed
app.post("/api/get-loans-disbursed", (req, res) => {
  const { sd, ed } = req.body;
  let getLoansDisbursed = async () => {
    try {
      const db = await oracledb.getConnection({
        user: DB_USER,
        password: DB_PASSWORD,
        connectString: DB_CONNECTION_STRING,
        timeout: DB_CONNECTION_TIMEOUT,
      });

      const response = [];
      let arr0 = "";

      // node native promisify
      const execute = util.promisify(db.execute).bind(db);

      const data = await execute(
        `select * 
from vw_fac_disb_today
where APPROVAL_DATE = get_postingdate
and APPROVAL_DATE BETWEEN NVL('${sd}','1-JAN-1900') AND NVL('${ed}','1-DEC-9999')`
      );

      if (data) {
        for (let i = 0; i < data.rows.length; i++) {
          for (let x = 0; x < data.metaData.length; x++) {
            arr0 +=
              '"' +
              [data.metaData[x].name.toLowerCase()] +
              '" : "' +
              data.rows[i][x] +
              '",';
          }

          response.push(
            JSON.parse(
              "{" +
                arr0.replace(/(\r\n|\n|\r)/gm, "").replace(/,\s*$/, "") +
                "}"
            )
          );
        }

        res.send(response);
      } else {
        res.send("Something went wrong... Nothing was returned!!");
      }
    } catch (e) {
      res.send(e);
    }
  };

  getLoansDisbursed();
});

// Get Loans Report3
app.post("/api/get-loans-report3", (req, res) => {
  const { sd, ed } = req.body;
  let getLoansReport3 = async () => {
    try {
      const db = await oracledb.getConnection({
        user: DB_USER,
        password: DB_PASSWORD,
        connectString: DB_CONNECTION_STRING,
        timeout: DB_CONNECTION_TIMEOUT,
      });

      const response = [];
      let arr0 = "";

      // node native promisify
      const execute = util.promisify(db.execute).bind(db);

      const data = await execute(
        `select b.ACCT_LINK "Account_Number", b.ACCOUNT_DESCRP "Beneficiary_Name",c.BANK_CODE "Bank_Code",c.BEN_ACCT "Beneficiary_Account_No",a.FACILITY_AMOUNT "Payment_Amount"
,'425' "Transaction_Type_Code",'LOAN' "Purpose_Of_Payment",d.CUSTOMER_ADDRESS1 "Beneficiary_Addr_Line_1",'OUR' "Charge_Type",'KES' "Transaction_Currency",'RTGS' "Payment_Type"
from facility a,g_ledger b,product_details c,customer d
where a.PRINCIPAL_ACCOUNT = b.ACCT_LINK
and c.FACILITY_NO = a.FACILITY_NO
and a.CUSTOMER_NUMBER = d.CUSTOMER_NUMBER
and a.APPROVAL_DATE BETWEEN NVL('${sd}','1-JAN-1900') AND NVL('${ed}','1-DEC-9999')`
      );

      if (data) {
        for (let i = 0; i < data.rows.length; i++) {
          for (let x = 0; x < data.metaData.length; x++) {
            arr0 +=
              '"' +
              [data.metaData[x].name.toLowerCase()] +
              '" : "' +
              data.rows[i][x] +
              '",';
          }

          response.push(
            JSON.parse(
              "{" +
                arr0.replace(/(\r\n|\n|\r)/gm, "").replace(/,\s*$/, "") +
                "}"
            )
          );
        }

        res.send(response);
      } else {
        res.send("Something went wrong... Nothing was returned!!");
      }
    } catch (e) {
      res.send(e);
    }
  };

  getLoansReport3();
});

// Get Loans Report4
app.get("/api/get-loans-report4", (req, res) => {
  let getLoansReport4 = async () => {
    try {
      const db = await oracledb.getConnection({
        user: DB_USER,
        password: DB_PASSWORD,
        connectString: DB_CONNECTION_STRING,
        timeout: DB_CONNECTION_TIMEOUT,
      });

      const response = [];
      let arr0 = "";

      // node native promisify
      const execute = util.promisify(db.execute).bind(db);

      const data = await execute(
        `select a.PRINCIPAL_ACCOUNT "Account_Number",c.ACCOUNT_DESCRP "NAME",GET_BRANCHDESC(c.BRANCH_CODE) "BRANCH", a.FACILITY_AMOUNT "TOTAL_APPLIED",b.PRINCIPAL "Instal_Without_Int",
b.INTEREST "Monthly_Int", b.INTEREST * 10 "interest",a.FACILITY_AMOUNT + b.INTEREST * 10 "Principal",b.PRINCIPAL+b.INTEREST "Amt_Month",a.EFFECTIVE_DATE ||' TO '|| a.LAST_REPAY_DATE "Duration"
from facility a, R_SCHEDULE_TEMP b,g_ledger c
where a.FACILITY_NO = b.FACILITY_NO
and a.PRINCIPAL_ACCOUNT = c.ACCT_LINK
and b.REPAY_SEQ_NO = '1'
and rownum <= 1000`
      );

      if (data) {
        for (let i = 0; i < data.rows.length; i++) {
          for (let x = 0; x < data.metaData.length; x++) {
            arr0 +=
              '"' +
              [data.metaData[x].name.toLowerCase()] +
              '" : "' +
              data.rows[i][x] +
              '",';
          }

          response.push(
            JSON.parse(
              "{" +
                arr0.replace(/(\r\n|\n|\r)/gm, "").replace(/,\s*$/, "") +
                "}"
            )
          );
        }

        res.send(response);
      } else {
        res.send("Something went wrong... Nothing was returned!!");
      }
    } catch (e) {
      res.send(e);
    }
  };

  getLoansReport4();
});

app.post("/api/get-loans-report44", (req, res) => {
  const { branch_code } = req.body;
  let getLoansReport4 = async () => {
    try {
      const db = await oracledb.getConnection({
        user: DB_USER,
        password: DB_PASSWORD,
        connectString: DB_CONNECTION_STRING,
        timeout: DB_CONNECTION_TIMEOUT,
      });

      const response = [];
      let arr0 = "";

      // node native promisify
      const execute = util.promisify(db.execute).bind(db);

      const data = await execute(
        `select a.PRINCIPAL_ACCOUNT "Account_Number",c.ACCOUNT_DESCRP "NAME",GET_BRANCHDESC(c.BRANCH_CODE) "BRANCH", a.FACILITY_AMOUNT "TOTAL_APPLIED",b.PRINCIPAL "Instal_Without_Int",
b.INTEREST "Monthly_Int", b.INTEREST * 10 "interest",a.FACILITY_AMOUNT + b.INTEREST * 10 "Principal",b.PRINCIPAL+b.INTEREST "Amt_Month",a.EFFECTIVE_DATE ||' TO '|| a.LAST_REPAY_DATE "Duration"
from facility a, R_SCHEDULE_TEMP b,g_ledger c
where a.FACILITY_NO = b.FACILITY_NO
and a.PRINCIPAL_ACCOUNT = c.ACCT_LINK
and b.REPAY_SEQ_NO = '1'
and c.branch_code like '%'|| '${branch_code}' ||'%'`
      );

      if (data) {
        for (let i = 0; i < data.rows.length; i++) {
          for (let x = 0; x < data.metaData.length; x++) {
            arr0 +=
              '"' +
              [data.metaData[x].name.toLowerCase()] +
              '" : "' +
              data.rows[i][x] +
              '",';
          }

          response.push(
            JSON.parse(
              "{" +
                arr0.replace(/(\r\n|\n|\r)/gm, "").replace(/,\s*$/, "") +
                "}"
            )
          );
        }

        res.send(response);
      } else {
        res.send("Something went wrong... Nothing was returned!!");
      }
    } catch (e) {
      res.send(e);
    }
  };

  getLoansReport4();
});

// Get loan Cancel Cus
app.post("/api/get-loan-cancel-customers", (req, res) => {
  const { branchCode } = req.body;
  let getCancelCustomers = async () => {
    try {
      const db = await oracledb.getConnection({
        user: DB_USER,
        password: DB_PASSWORD,
        connectString: DB_CONNECTION_STRING,
        timeout: DB_CONNECTION_TIMEOUT,
      });

      const response = [];
      let arr0 = "";

      // node native promisify
      const execute = util.promisify(db.execute).bind(db);

      const data = await execute(
        `SELECT X.CUSTOMER_NUMBER || ' - ' || X.CUSTOMER_NAME as label, X.CUSTOMER_NUMBER as value FROM CUSTOMER X
WHERE EXISTS (SELECT 1 FROM VW_VALID_LOANS Y 
WHERE X.CUSTOMER_NUMBER = Y.CUSTOMER_NUMBER
AND Y.BRANCH_CODE = '${branchCode}')`
      );

      if (data) {
        for (let i = 0; i < data.rows.length; i++) {
          for (let x = 0; x < data.metaData.length; x++) {
            arr0 +=
              '"' +
              [data.metaData[x].name.toLowerCase()] +
              '" : "' +
              data.rows[i][x] +
              '",';
          }

          response.push(
            JSON.parse(
              "{" +
                arr0.replace(/(\r\n|\n|\r)/gm, "").replace(/,\s*$/, "") +
                "}"
            )
          );
        }

        res.send(response);
      } else {
        res.send("Something went wrong... Nothing was returned!!");
      }
    } catch (e) {
      // conn.end();
      res.send(e.toString());
    }
  };

  getCancelCustomers();
});

// Get Cancel Acct
app.post("/api/get-cancel-acct", (req, res) => {
  const { cusNo, branchCode } = req.body;
  let getCancelAcct = async () => {
    try {
      const db = await oracledb.getConnection({
        user: DB_USER,
        password: DB_PASSWORD,
        connectString: DB_CONNECTION_STRING,
        timeout: DB_CONNECTION_TIMEOUT,
      });

      const response = [];
      let arr0 = "";

      // node native promisify
      const execute = util.promisify(db.execute).bind(db);

      const data = await execute(
        `SELECT DISTINCT X.PRINCIPAL_ACCOUNT || ' - ' || X.ACCOUNT_DESCRP as label,X.PRINCIPAL_ACCOUNT || ' - ' || X.ACCOUNT_DESCRP || ' - ' || X.FACILITY_NO as value FROM VW_VALID_LOANS X
WHERE X.CUSTOMER_NUMBER = '${cusNo}'
AND X.BRANCH_CODE= '${branchCode}'`
      );

      if (data) {
        for (let i = 0; i < data.rows.length; i++) {
          for (let x = 0; x < data.metaData.length; x++) {
            arr0 +=
              '"' +
              [data.metaData[x].name.toLowerCase()] +
              '" : "' +
              data.rows[i][x] +
              '",';
          }

          response.push(
            JSON.parse(
              "{" +
                arr0.replace(/(\r\n|\n|\r)/gm, "").replace(/,\s*$/, "") +
                "}"
            )
          );
        }

        res.send(response);
      } else {
        res.send("Something went wrong... Nothing was returned!!");
      }
    } catch (e) {
      // conn.end();
      res.send(e.toString());
    }
  };

  getCancelAcct();
});

// Get accrued Balance
app.post("/api/get-accrued-bal", (req, res) => {
  const { acct_link } = req.body;
  let getAccruedBal = async () => {
    try {
      const db = await oracledb.getConnection({
        user: DB_USER,
        password: DB_PASSWORD,
        connectString: DB_CONNECTION_STRING,
        timeout: DB_CONNECTION_TIMEOUT,
      });

      const response = [];
      let arr0 = "";

      // node native promisify
      const execute = util.promisify(db.execute).bind(db);

      const data = await execute(
        `select POST_AV_BAL,ACR_CHG,ACR_PENAL
    from vw_casa_ledger where acct_link = '${acct_link}'`
      );

      if (data) {
        for (let i = 0; i < data.rows.length; i++) {
          for (let x = 0; x < data.metaData.length; x++) {
            arr0 +=
              '"' +
              [data.metaData[x].name.toLowerCase()] +
              '" : "' +
              data.rows[i][x] +
              '",';
          }

          response.push(
            JSON.parse(
              "{" +
                arr0.replace(/(\r\n|\n|\r)/gm, "").replace(/,\s*$/, "") +
                "}"
            )
          );
        }

        res.send(response);
      } else {
        res.send("Something went wrong... Nothing was returned!!");
      }
    } catch (e) {
      // conn.end();
      res.send(e.toString());
    }
  };

  getAccruedBal();
});

// Get Prin Arr
app.post("/api/get-prin-arr", (req, res) => {
  const { fac_no } = req.body;
  let getWriteoffAcctDetails = async () => {
    try {
      const db = await oracledb.getConnection({
        user: DB_USER,
        password: DB_PASSWORD,
        connectString: DB_CONNECTION_STRING,
        timeout: DB_CONNECTION_TIMEOUT,
      });

      const response = [];
      let arr0 = "";

      // node native promisify
      const execute = util.promisify(db.execute).bind(db);

      const data = await execute(
        `select ABS(nvl(PRIN_PASTDUE,0)) prin_arr, abs(nvl(OD_INT_PASTDUE,0)) int_arr
 from REPAYMENT_SCHD_HD
 where facility_no = '${fac_no}'`
      );

      if (data) {
        for (let i = 0; i < data.rows.length; i++) {
          for (let x = 0; x < data.metaData.length; x++) {
            arr0 +=
              '"' +
              [data.metaData[x].name.toLowerCase()] +
              '" : "' +
              data.rows[i][x] +
              '",';
          }

          response.push(
            JSON.parse(
              "{" +
                arr0.replace(/(\r\n|\n|\r)/gm, "").replace(/,\s*$/, "") +
                "}"
            )
          );
        }

        res.send(response);
      } else {
        res.send("Something went wrong... Nothing was returned!!");
      }
    } catch (e) {
      // conn.end();
      res.send(e.toString());
    }
  };

  getWriteoffAcctDetails();
});

// Get interest Arrears
app.post("/api/get-int-arr", (req, res) => {
  const { acct_link } = req.body;
  let getArrInt = async () => {
    try {
      const db = await oracledb.getConnection({
        user: DB_USER,
        password: DB_PASSWORD,
        connectString: DB_CONNECTION_STRING,
        timeout: DB_CONNECTION_TIMEOUT,
      });

      const response = [];
      let arr0 = "";

      // node native promisify
      const execute = util.promisify(db.execute).bind(db);

      const data = await execute(
        `select  ARREARS_INT,
 ARREARS_INTIN_SUSP
 from vw_ledger_enq
 where ACCT_LINK= '${acct_link}'`
      );

      if (data) {
        for (let i = 0; i < data.rows.length; i++) {
          for (let x = 0; x < data.metaData.length; x++) {
            arr0 +=
              '"' +
              [data.metaData[x].name.toLowerCase()] +
              '" : "' +
              data.rows[i][x] +
              '",';
          }

          response.push(
            JSON.parse(
              "{" +
                arr0.replace(/(\r\n|\n|\r)/gm, "").replace(/,\s*$/, "") +
                "}"
            )
          );
        }

        res.send(response);
      } else {
        res.send("Something went wrong... Nothing was returned!!");
      }
    } catch (e) {
      // conn.end();
      res.send(e.toString());
    }
  };

  getArrInt();
});

// Get Payment Balance
app.post("/api/get-pay-bal", (req, res) => {
  const { facNo } = req.body;
  let getPaymentBal = async () => {
    try {
      const db = await oracledb.getConnection({
        user: DB_USER,
        password: DB_PASSWORD,
        connectString: DB_CONNECTION_STRING,
        timeout: DB_CONNECTION_TIMEOUT,
      });

      const response = [];
      let arr0 = "";

      // node native promisify
      const execute = util.promisify(db.execute).bind(db);

      const data = await execute(
        `SELECT NVL(SUM(AMOUNT_REPAID),0) as pay_bal
FROM REPAYMENT_SCHEDULE
WHERE
FACILITY_NO = '${facNo}'
 AND INT_SEQ_NO >=0
 AND NVL(AMOUNT_REPAID,0) >0`
      );

      if (data) {
        for (let i = 0; i < data.rows.length; i++) {
          for (let x = 0; x < data.metaData.length; x++) {
            arr0 +=
              '"' +
              [data.metaData[x].name.toLowerCase()] +
              '" : "' +
              data.rows[i][x] +
              '",';
          }

          response.push(
            JSON.parse(
              "{" +
                arr0.replace(/(\r\n|\n|\r)/gm, "").replace(/,\s*$/, "") +
                "}"
            )
          );
        }

        res.send(response);
      } else {
        res.send("Something went wrong... Nothing was returned!!");
      }
    } catch (e) {
      // conn.end();
      res.send(e.toString());
    }
  };

  getPaymentBal();
});

// Get Payment Arrears
app.post("/api/get-pay-arr", (req, res) => {
  const { facNo } = req.body;
  let getPaymentArr = async () => {
    try {
      const db = await oracledb.getConnection({
        user: DB_USER,
        password: DB_PASSWORD,
        connectString: DB_CONNECTION_STRING,
        timeout: DB_CONNECTION_TIMEOUT,
      });

      const response = [];
      let arr0 = "";

      // node native promisify
      const execute = util.promisify(db.execute).bind(db);

      const data = await execute(
        `SELECT NVL(SUM(AMOUNT_REPAID),0) as pay_arr
FROM REPAYMENT_SCHEDULE
WHERE
FACILITY_NO = '${facNo}'
 AND REPAY_SEQ_NO >=0
 AND NVL(AMOUNT_REPAID,0) >0`
      );

      if (data) {
        for (let i = 0; i < data.rows.length; i++) {
          for (let x = 0; x < data.metaData.length; x++) {
            arr0 +=
              '"' +
              [data.metaData[x].name.toLowerCase()] +
              '" : "' +
              data.rows[i][x] +
              '",';
          }

          response.push(
            JSON.parse(
              "{" +
                arr0.replace(/(\r\n|\n|\r)/gm, "").replace(/,\s*$/, "") +
                "}"
            )
          );
        }

        res.send(response);
      } else {
        res.send("Something went wrong... Nothing was returned!!");
      }
    } catch (e) {
      // conn.end();
      res.send(e.toString());
    }
  };

  getPaymentArr();
});

// Get accrued Balance
// app.post("/api/get-accrued-bal", (req, res) => {
//   const { acct_link } = req.body;
//   let getAccruedBal = async () => {
//     try {
//       const db = await oracledb.getConnection({
//         user: DB_USER,
//         password: DB_PASSWORD,
//         connectString: DB_CONNECTION_STRING,
//         timeout: DB_CONNECTION_TIMEOUT,
//       });

//       const response = [];
//       let arr0 = "";

//       // node native promisify
//       const execute = util.promisify(db.execute).bind(db);

//       const data = await execute(
//         `select POST_AV_BAL,ACR_CHG,ACR_PENAL
//     from vw_casa_ledger where acct_link = '${acct_link}'`
//       );

//       if (data) {
//         for (let i = 0; i < data.rows.length; i++) {
//           for (let x = 0; x < data.metaData.length; x++) {
//             arr0 +=
//               '"' +
//               [data.metaData[x].name.toLowerCase()] +
//               '" : "' +
//               data.rows[i][x] +
//               '",';
//           }

//           response.push(
//             JSON.parse(
//               "{" +
//                 arr0.replace(/(\r\n|\n|\r)/gm, "").replace(/,\s*$/, "") +
//                 "}"
//             )
//           );
//         }

//         res.send(response);
//       } else {
//         res.send("Something went wrong... Nothing was returned!!");
//       }
//     } catch (e) {
//       // conn.end();
//       res.send(e.toString());
//     }
//   };

//   getAccruedBal();
// });

// Get Cus
app.post("/api/get-loan-customers", (req, res) => {
  const { branchCode } = req.body;
  let getCustomers = async () => {
    try {
      const db = await oracledb.getConnection({
        user: DB_USER,
        password: DB_PASSWORD,
        connectString: DB_CONNECTION_STRING,
        timeout: DB_CONNECTION_TIMEOUT,
      });

      const response = [];
      let arr0 = "";

      // node native promisify
      const execute = util.promisify(db.execute).bind(db);

      const data = await execute(
        `SELECT X.CUSTOMER_NUMBER as value,X.CUSTOMER_NUMBER || ' - ' || X.CUSTOMER_NAME as label FROM CUSTOMER X
WHERE BRANCH_CODE='${branchCode}' 
AND EXISTS (SELECT 1 FROM VW_VALID_LOANS Y WHERE 
X.CUSTOMER_NUMBER = Y.CUSTOMER_NUMBER
)`
      );

      if (data) {
        for (let i = 0; i < data.rows.length; i++) {
          for (let x = 0; x < data.metaData.length; x++) {
            arr0 +=
              '"' +
              [data.metaData[x].name.toLowerCase()] +
              '" : "' +
              data.rows[i][x] +
              '",';
          }

          response.push(
            JSON.parse(
              "{" +
                arr0.replace(/(\r\n|\n|\r)/gm, "").replace(/,\s*$/, "") +
                "}"
            )
          );
        }

        res.send(response);
      } else {
        res.send("Something went wrong... Nothing was returned!!");
      }
    } catch (e) {
      // conn.end();
      res.send(e.toString());
    }
  };

  getCustomers();
});

// Get Prin Acct
app.post("/api/get-prin-acct", (req, res) => {
  const { cusNo } = req.body;
  let getPrinAcct = async () => {
    try {
      const db = await oracledb.getConnection({
        user: DB_USER,
        password: DB_PASSWORD,
        connectString: DB_CONNECTION_STRING,
        timeout: DB_CONNECTION_TIMEOUT,
      });

      const response = [];
      let arr0 = "";

      // node native promisify
      const execute = util.promisify(db.execute).bind(db);

      const data = await execute(
        `SELECT DISTINCT X.PRINCIPAL_ACCOUNT || ' - ' || Y.ACCOUNT_DESCRP as label,GET_CURRISO(Y.CURRENCY_CODE) || ' - ' || Y.ACCOUNT_DESCRP || ' - ' || X.FACILITY_NO as value FROM FACILITY X,G_LEDGER Y
WHERE X.WRITE_OFF_AMOUNT IS NULL
AND X.WRITE_OFF_DATE IS NULL
AND X.PRINCIPAL_ACCOUNT = Y.ACCT_LINK
AND X.CUSTOMER_NUMBER = '${cusNo}'`
      );

      if (data) {
        for (let i = 0; i < data.rows.length; i++) {
          for (let x = 0; x < data.metaData.length; x++) {
            arr0 +=
              '"' +
              [data.metaData[x].name.toLowerCase()] +
              '" : "' +
              data.rows[i][x] +
              '",';
          }

          response.push(
            JSON.parse(
              "{" +
                arr0.replace(/(\r\n|\n|\r)/gm, "").replace(/,\s*$/, "") +
                "}"
            )
          );
        }

        res.send(response);
      } else {
        res.send("Something went wrong... Nothing was returned!!");
      }
    } catch (e) {
      // conn.end();
      res.send(e.toString());
    }
  };

  getPrinAcct();
});

// Get Repay Acct Details
app.post("/api/get-repay-acct-details", (req, res) => {
  const { facNo } = req.body;
  let getRepayAcctDetails = async () => {
    try {
      const db = await oracledb.getConnection({
        user: DB_USER,
        password: DB_PASSWORD,
        connectString: DB_CONNECTION_STRING,
        timeout: DB_CONNECTION_TIMEOUT,
      });

      const response = [];
      let arr0 = "";

      // node native promisify
      const execute = util.promisify(db.execute).bind(db);

      const data = await execute(
        `SELECT
 FACILITY_NO,EFFECTIVE_DATE,LAST_REPAY_DATE,
  abs(SHADOW_BALANCE_TODAY) as principal_balance,FACILITY_AMOUNT,
  DESCRIPTION,MAINTENANCE_FEE_ACCOUNT,CURRENCY_CODE,
  get_curriso(CURRENCY_CODE) as cur
  from LOAN_ENQ_VW
  where FACILITY_NO = '${facNo}'`
      );

      if (data) {
        for (let i = 0; i < data.rows.length; i++) {
          for (let x = 0; x < data.metaData.length; x++) {
            arr0 +=
              '"' +
              [data.metaData[x].name.toLowerCase()] +
              '" : "' +
              data.rows[i][x] +
              '",';
          }

          response.push(
            JSON.parse(
              "{" +
                arr0.replace(/(\r\n|\n|\r)/gm, "").replace(/,\s*$/, "") +
                "}"
            )
          );
        }

        res.send(response);
      } else {
        res.send("Something went wrong... Nothing was returned!!");
      }
    } catch (e) {
      // conn.end();
      res.send(e.toString());
    }
  };

  getRepayAcctDetails();
});

// Get New Repay Acct
app.post("/api/get-new-repay-acct", (req, res) => {
  const { cus_no, cur, repay_acct } = req.body;
  let getNewRepayAcct = async () => {
    try {
      const db = await oracledb.getConnection({
        user: DB_USER,
        password: DB_PASSWORD,
        connectString: DB_CONNECTION_STRING,
        timeout: DB_CONNECTION_TIMEOUT,
      });

      const response = [];
      let arr0 = "";

      // node native promisify
      const execute = util.promisify(db.execute).bind(db);

      const data = await execute(
        `SELECT X.ACCT_LINK || ' - ' || X.ACCOUNT_DESCRP as label,X.ACCT_LINK || ' - ' || X.ACCOUNT_DESCRP || ' - ' || Y.DESCRIPTION as value
FROM G_LEDGER X,TB_PRODUCT Y
WHERE Y.PROD_GROUP=X.TYPE_OF_ACCT
   AND Y.PROD_SGROUP = X.LEGAL_FORM
AND CUSTOMER_NUMBER = '${cus_no}'
AND X.CURRENCY_CODE = '${cur}'
AND X.ACCT_LINK != '${repay_acct}'
AND  TYPE_OF_ACCT IN ('1','2')`
      );

      if (data) {
        for (let i = 0; i < data.rows.length; i++) {
          for (let x = 0; x < data.metaData.length; x++) {
            arr0 +=
              '"' +
              [data.metaData[x].name.toLowerCase()] +
              '" : "' +
              data.rows[i][x] +
              '",';
          }

          response.push(
            JSON.parse(
              "{" +
                arr0.replace(/(\r\n|\n|\r)/gm, "").replace(/,\s*$/, "") +
                "}"
            )
          );
        }

        res.send(response);
      } else {
        res.send("Something went wrong... Nothing was returned!!");
      }
    } catch (e) {
      // conn.end();
      res.send(e.toString());
    }
  };

  getNewRepayAcct();
});

//////////// Loan Write-Off APIs ///////////////////////////////

// Get Writeoff Customers
app.get("/api/get-loan-writeoff-customers", async (req, res) => {
  try {
    const db = await oracledb.getConnection({
      user: DB_USER,
      password: DB_PASSWORD,
      connectString: DB_CONNECTION_STRING,
      timeout: DB_CONNECTION_TIMEOUT,
    });

    const execute = util.promisify(db.execute).bind(db);

    const query = `
      select CUSTOMER_NUMBER || ' - ' || CUSTOMER_NAME label, CUSTOMER_NUMBER value from (
SELECT  X.CUSTOMER_NAME,X.CUSTOMER_NUMBER FROM CUSTOMER X
WHERE
EXISTS (SELECT 1 FROM VW_VALID_LOANS Y 
WHERE  
X.CUSTOMER_NUMBER = Y.CUSTOMER_NUMBER
 )
union

SELECT  X.CUSTOMER_NAME,X.CUSTOMER_NUMBER FROM CUSTOMER X
WHERE
EXISTS (SELECT 1 FROM VW_OD_classified Y 
WHERE  
X.CUSTOMER_NUMBER = Y.CUSTOMER_NUMBER
 ))a where not exists(select 1 from tb_acct_writeoff b where a.CUSTOMER_NUMBER=get_customerno(b.acct_link))
    `;

    const data = await execute(query);

    const response = data.rows.map((row) => ({
      label: row[0],
      value: row[1],
    }));

    res.json(response);
  } catch (error) {
    console.error("Error executing query:", error);
    res.status(500).send("Internal server error");
  }
});

// Check Customer Count
app.post("/api/get-customer-count", async (req, res) => {
  const { customer_number } = req.body;
  try {
    const db = await oracledb.getConnection({
      user: DB_USER,
      password: DB_PASSWORD,
      connectString: DB_CONNECTION_STRING,
      timeout: DB_CONNECTION_TIMEOUT,
    });

    // node native promisify
    const execute = util.promisify(db.execute).bind(db);

    const data = await execute(`SELECT count(CUSTOMER_NUMBER) count
	FROM VW_VALID_LOANS X
		WHERE X.CUSTOMER_NUMBER = '${customer_number}'`);

    if (data && data.rows.length > 0) {
      // Assuming there's only one row and one column in the result
      const loanLimit = parseFloat(data.rows[0][0]);
      res.send({ loanLimit });
    } else {
      res.status(404).send("Loan limit not found.");
    }
  } catch (error) {
    console.error("Error fetching loan limit:", error);
    res.status(500).send("Internal Server Error");
  }
});

// Get Accts
app.post("/api/get-customer-accounts", async (req, res) => {
  const { customer_number } = req.body;
  try {
    const db = await oracledb.getConnection({
      user: DB_USER,
      password: DB_PASSWORD,
      connectString: DB_CONNECTION_STRING,
      timeout: DB_CONNECTION_TIMEOUT,
    });

    const execute = util.promisify(db.execute).bind(db);

    const query = `
      SELECT DISTINCT X.PRINCIPAL_ACCOUNT as value,X.PRINCIPAL_ACCOUNT || ' - ' || X.ACCOUNT_DESCRP as label, X.FACILITY_NO FROM VW_VALID_LOANS X
WHERE 
 X.CUSTOMER_NUMBER = '${customer_number}'
ORDER BY X.FACILITY_NO
    `;

    const data = await execute(query);

    const response = data.rows.map((row) => ({
      value: row[0],
      label: row[1],
    }));

    res.json(response);
  } catch (error) {
    console.error("Error executing query:", error);
    res.status(500).send("Internal server error");
  }
});

// Get OD Accts
app.post("/api/get-customer-od-accounts", async (req, res) => {
  const { customer_number } = req.body;
  try {
    const db = await oracledb.getConnection({
      user: DB_USER,
      password: DB_PASSWORD,
      connectString: DB_CONNECTION_STRING,
      timeout: DB_CONNECTION_TIMEOUT,
    });

    const execute = util.promisify(db.execute).bind(db);

    const query = `
      select DISTINCT PRINCIPAL_ACCOUNT as value, PRINCIPAL_ACCOUNT || ' - ' || get_acctdesc(PRINCIPAL_ACCOUNT) as label, FACILITY_NO
from facility
where CUSTOMER_NUMBER = '${customer_number}'
ORDER BY FACILITY_NO 
    `;

    const data = await execute(query);

    const response = data.rows.map((row) => ({
      value: row[0],
      label: row[1],
    }));

    res.json(response);
  } catch (error) {
    console.error("Error executing query:", error);
    res.status(500).send("Internal server error");
  }
});

// Get cancel Acct Details
app.post("/api/get-writeoff-acct-details", (req, res) => {
  const { prin_acct } = req.body;
  let getWriteoffAcctDetails = async () => {
    try {
      const db = await oracledb.getConnection({
        user: DB_USER,
        password: DB_PASSWORD,
        connectString: DB_CONNECTION_STRING,
        timeout: DB_CONNECTION_TIMEOUT,
      });

      const response = [];
      let arr0 = "";

      // node native promisify
      const execute = util.promisify(db.execute).bind(db);

      const data = await execute(
        ` select  legal_form, currency_code,	GET_CLASSDESC(ACCT_CLASS) acct_status,
 type_of_acct, branch_code,
 customer_number,principal_account, 
 maintenance_fee_account, szloanapplnno, 
 interest_rate, effective_date,REPNT_PERIOD_MONTHS,
 last_repay_date, od_interest_amount , 
 shadow_balance_today, facility_amount,
 facility_no, cot_amount,description,
 od_intin_susp,pen_intin_susp,
 od_int_pastdue,od_accrued_int
  from loan_enq_vw
  where principal_account = '${prin_acct}'`
      );

      if (data) {
        for (let i = 0; i < data.rows.length; i++) {
          for (let x = 0; x < data.metaData.length; x++) {
            arr0 +=
              '"' +
              [data.metaData[x].name.toLowerCase()] +
              '" : "' +
              data.rows[i][x] +
              '",';
          }

          response.push(
            JSON.parse(
              "{" +
                arr0.replace(/(\r\n|\n|\r)/gm, "").replace(/,\s*$/, "") +
                "}"
            )
          );
        }

        res.send(response);
      } else {
        res.send("Something went wrong... Nothing was returned!!");
      }
    } catch (e) {
      // conn.end();
      res.send(e.toString());
    }
  };

  getWriteoffAcctDetails();
});

// Get Prin Arr
app.post("/api/get-prin-arr", (req, res) => {
  const { fac_no } = req.body;
  let getWriteoffAcctDetails = async () => {
    try {
      const db = await oracledb.getConnection({
        user: DB_USER,
        password: DB_PASSWORD,
        connectString: DB_CONNECTION_STRING,
        timeout: DB_CONNECTION_TIMEOUT,
      });

      const response = [];
      let arr0 = "";

      // node native promisify
      const execute = util.promisify(db.execute).bind(db);

      const data = await execute(
        `select ABS(nvl(PRIN_PASTDUE,0)) prin_arr, abs(nvl(OD_INT_PASTDUE,0)) int_arr
 from REPAYMENT_SCHD_HD
 where facility_no = '${fac_no}'`
      );

      if (data) {
        for (let i = 0; i < data.rows.length; i++) {
          for (let x = 0; x < data.metaData.length; x++) {
            arr0 +=
              '"' +
              [data.metaData[x].name.toLowerCase()] +
              '" : "' +
              data.rows[i][x] +
              '",';
          }

          response.push(
            JSON.parse(
              "{" +
                arr0.replace(/(\r\n|\n|\r)/gm, "").replace(/,\s*$/, "") +
                "}"
            )
          );
        }

        res.send(response);
      } else {
        res.send("Something went wrong... Nothing was returned!!");
      }
    } catch (e) {
      // conn.end();
      res.send(e.toString());
    }
  };

  getWriteoffAcctDetails();
});

// Get Arrears Bal & Int
app.post("/api/get-arr-bal", (req, res) => {
  const { acct_link } = req.body;
  let getWriteoffAcctDetails = async () => {
    try {
      const db = await oracledb.getConnection({
        user: DB_USER,
        password: DB_PASSWORD,
        connectString: DB_CONNECTION_STRING,
        timeout: DB_CONNECTION_TIMEOUT,
      });

      const response = [];
      let arr0 = "";

      // node native promisify
      const execute = util.promisify(db.execute).bind(db);

      const data = await execute(
        `select  ARREARS_INT,
 ARREARS_INTIN_SUSP 
 from vw_ledger_enq
 where ACCT_LINK= '${acct_link}'`
      );

      if (data) {
        for (let i = 0; i < data.rows.length; i++) {
          for (let x = 0; x < data.metaData.length; x++) {
            arr0 +=
              '"' +
              [data.metaData[x].name.toLowerCase()] +
              '" : "' +
              data.rows[i][x] +
              '",';
          }

          response.push(
            JSON.parse(
              "{" +
                arr0.replace(/(\r\n|\n|\r)/gm, "").replace(/,\s*$/, "") +
                "}"
            )
          );
        }

        res.send(response);
      } else {
        res.send("Something went wrong... Nothing was returned!!");
      }
    } catch (e) {
      // conn.end();
      res.send(e.toString());
    }
  };

  getWriteoffAcctDetails();
});

// Get repay count
app.post("/api/get-repayment-count", (req, res) => {
  const { fac_no } = req.body;
  let getWriteoffAcctDetails = async () => {
    try {
      const db = await oracledb.getConnection({
        user: DB_USER,
        password: DB_PASSWORD,
        connectString: DB_CONNECTION_STRING,
        timeout: DB_CONNECTION_TIMEOUT,
      });

      const response = [];
      let arr0 = "";

      // node native promisify
      const execute = util.promisify(db.execute).bind(db);

      const data = await execute(
        `SELECT count(ACTIVITY_DATE) count 
	FROM REPAYMENT_SCHEDULE
	WHERE FACILITY_NO= '${fac_no}'
	AND ACTIVITY_DATE > GET_POSTINGDATE
	AND NVL(REPAY_SEQ_NO,0)>0`
      );

      if (data) {
        for (let i = 0; i < data.rows.length; i++) {
          for (let x = 0; x < data.metaData.length; x++) {
            arr0 +=
              '"' +
              [data.metaData[x].name.toLowerCase()] +
              '" : "' +
              data.rows[i][x] +
              '",';
          }

          response.push(
            JSON.parse(
              "{" +
                arr0.replace(/(\r\n|\n|\r)/gm, "").replace(/,\s*$/, "") +
                "}"
            )
          );
        }

        res.send(response);
      } else {
        res.send("Something went wrong... Nothing was returned!!");
      }
    } catch (e) {
      // conn.end();
      res.send(e.toString());
    }
  };

  getWriteoffAcctDetails();
});

// Get recovery officer
app.get("/api/get-rec-officer", async (req, res) => {
  try {
    const db = await oracledb.getConnection({
      user: DB_USER,
      password: DB_PASSWORD,
      connectString: DB_CONNECTION_STRING,
      timeout: DB_CONNECTION_TIMEOUT,
    });

    const execute = util.promisify(db.execute).bind(db);

    const query = `
       select user_name value, user_name || ' - ' || fullname label from vw_collector_details where flag='A' 
    `;

    const data = await execute(query);

    const response = data.rows.map((row) => ({
      value: row[0],
      label: row[1],
    }));

    res.json(response);
  } catch (error) {
    console.error("Error executing query:", error);
    res.status(500).send("Internal server error");
  }
});

// Get account balances
app.post("/api/get-acct-balances", (req, res) => {
  const { prin_acct_rev } = req.body;
  let getWriteoffAcctDetails = async () => {
    try {
      const db = await oracledb.getConnection({
        user: DB_USER,
        password: DB_PASSWORD,
        connectString: DB_CONNECTION_STRING,
        timeout: DB_CONNECTION_TIMEOUT,
      });

      const response = [];
      let arr0 = "";

      // node native promisify
      const execute = util.promisify(db.execute).bind(db);

      const data = await execute(
        `select syspost_av_bal, acr_chg, acr_penal
    from vw_casa_ledger where acct_link = '${prin_acct_rev}'`
      );

      if (data) {
        for (let i = 0; i < data.rows.length; i++) {
          for (let x = 0; x < data.metaData.length; x++) {
            arr0 +=
              '"' +
              [data.metaData[x].name.toLowerCase()] +
              '" : "' +
              data.rows[i][x] +
              '",';
          }

          response.push(
            JSON.parse(
              "{" +
                arr0.replace(/(\r\n|\n|\r)/gm, "").replace(/,\s*$/, "") +
                "}"
            )
          );
        }

        res.send(response);
      } else {
        res.send("Something went wrong... Nothing was returned!!");
      }
    } catch (e) {
      // conn.end();
      res.send(e.toString());
    }
  };

  getWriteoffAcctDetails();
});

// get cus
app.get("/api/get-writeoff-rec-customers", async (req, res) => {
  try {
    const db = await oracledb.getConnection({
      user: DB_USER,
      password: DB_PASSWORD,
      connectString: DB_CONNECTION_STRING,
      timeout: DB_CONNECTION_TIMEOUT,
    });

    const execute = util.promisify(db.execute).bind(db);

    const query = `
      SELECT X.CUSTOMER_NUMBER || ' - ' || X.CUSTOMER_NAME as label, X.CUSTOMER_NUMBER as value, G.ACCT_LINK, get_amt_reco(W.ACCT_LINK)TOTAL
FROM CUSTOMER X, G_LEDGER G, TB_ACCT_WRITEOFF W 
WHERE X.CUSTOMER_NUMBER = G.CUSTOMER_NUMBER 
AND W.ACCT_LINK = G.ACCT_LINK
AND NVL(get_amt_reco(W.ACCT_LINK),0) < W.WRITE_OFF_AMOUNT
    `;

    const data = await execute(query);

    const response = data.rows.map((row) => ({
      label: row[0],
      value: row[1],
    }));

    res.json(response);
  } catch (error) {
    console.error("Error executing query:", error);
    res.status(500).send("Internal server error");
  }
});

app.post("/api/get-writeoff-rec-accts", async (req, res) => {
  const { prin_acct } = req.body;
  try {
    const db = await oracledb.getConnection({
      user: DB_USER,
      password: DB_PASSWORD,
      connectString: DB_CONNECTION_STRING,
      timeout: DB_CONNECTION_TIMEOUT,
    });

    const execute = util.promisify(db.execute).bind(db);

    const query = `
      SELECT A.ACCT_LINK as value, A.ACCT_LINK || ' - ' || ACCOUNT_DESCRP as label FROM TB_ACCT_WRITEOFF A, G_ledger b
WHERE A.ACCT_LINK  = B.ACCT_LINK
AND CUSTOMER_NUMBER = '${prin_acct}'
    `;

    const data = await execute(query);

    const response = data.rows.map((row) => ({
      label: row[0],
      value: row[1],
    }));

    res.json(response);
  } catch (error) {
    console.error("Error executing query:", error);
    res.status(500).send("Internal server error");
  }
});

// Get cancel Acct Details
app.post("/api/get-cancel-acct-details", (req, res) => {
  const { prin_acct } = req.body;
  let getCancelAcctDetails = async () => {
    try {
      const db = await oracledb.getConnection({
        user: DB_USER,
        password: DB_PASSWORD,
        connectString: DB_CONNECTION_STRING,
        timeout: DB_CONNECTION_TIMEOUT,
      });

      const response = [];
      let arr0 = "";

      // node native promisify
      const execute = util.promisify(db.execute).bind(db);

      const data = await execute(
        `select
 legal_form, currency_code,
 type_of_acct, branch_code,
 customer_number,principal_account, 
 maintenance_fee_account, szloanapplnno, 
 interest_rate, effective_date,
 last_repay_date, od_interest_amount, 
 shadow_balance_today, facility_amount,
 facility_no, cot_amount,description,
 od_intin_susp,pen_intin_susp,
 od_int_pastdue,od_accrued_int,INT_PAYMENTS,penal_payments,
 GET_CLASSDESC(ACCT_CLASS) class_desc from loan_enq_vw
where principal_account = '${prin_acct}'`
      );

      if (data) {
        for (let i = 0; i < data.rows.length; i++) {
          for (let x = 0; x < data.metaData.length; x++) {
            arr0 +=
              '"' +
              [data.metaData[x].name.toLowerCase()] +
              '" : "' +
              data.rows[i][x] +
              '",';
          }

          response.push(
            JSON.parse(
              "{" +
                arr0.replace(/(\r\n|\n|\r)/gm, "").replace(/,\s*$/, "") +
                "}"
            )
          );
        }

        res.send(response);
      } else {
        res.send("Something went wrong... Nothing was returned!!");
      }
    } catch (e) {
      // conn.end();
      res.send(e.toString());
    }
  };

  getCancelAcctDetails();
});

/////////////////// LOAN RECLASSIFICATION APIs /////////////////////

app.get("/api/get-loan-reclass-customers", async (req, res) => {
  try {
    const db = await oracledb.getConnection({
      user: DB_USER,
      password: DB_PASSWORD,
      connectString: DB_CONNECTION_STRING,
      timeout: DB_CONNECTION_TIMEOUT,
    });

    const execute = util.promisify(db.execute).bind(db);

    const query = `
      SELECT X.CUSTOMER_NUMBER || ' - ' || X.CUSTOMER_NAME label, X.CUSTOMER_NUMBER value
      FROM CUSTOMER X, VW_VALID_LOANS b 
      WHERE X.CUSTOMER_NUMBER = b.CUSTOMER_NUMBER
        AND EXISTS (SELECT 1 FROM VW_VALID_LOANS Y WHERE X.CUSTOMER_NUMBER = Y.CUSTOMER_NUMBER)
      UNION ALL
      SELECT DISTINCT X.CUSTOMER_NUMBER || ' - ' || X.CUSTOMER_NAME label, X.CUSTOMER_NUMBER value
      FROM customer x, VW_VALID_APPROVED_OD c, facility b
      WHERE X.CUSTOMER_NUMBER = b.CUSTOMER_NUMBER
        AND c.PRINCIPAL_ACCOUNT = b.PRINCIPAL_ACCOUNT
    `;

    const data = await execute(query);

    const response = data.rows.map((row) => ({
      label: row[0],
      value: row[1],
    }));

    res.json(response);
  } catch (error) {
    console.error("Error executing query:", error);
    res.status(500).send("Internal server error");
  }
});

// app.get("/api/get-loan-reclass-customersss", async (req, res) => {
//   try {
//     const db = await oracledb.getConnection({
//       user: DB_USER,
//       password: DB_PASSWORD,
//       connectString: DB_CONNECTION_STRING,
//       timeout: DB_CONNECTION_TIMEOUT,
//     });

//     const execute = util.promisify(db.execute).bind(db);

//     const query = `
//       SELECT X.CUSTOMER_NUMBER || ' - ' || X.CUSTOMER_NAME label, X.CUSTOMER_NUMBER value
//       FROM CUSTOMER X, VW_VALID_LOANS b
//       WHERE X.CUSTOMER_NUMBER = b.CUSTOMER_NUMBER
//         AND EXISTS (SELECT 1 FROM VW_VALID_LOANS Y WHERE X.CUSTOMER_NUMBER = Y.CUSTOMER_NUMBER)
//       UNION ALL
//       SELECT DISTINCT X.CUSTOMER_NUMBER || ' - ' || X.CUSTOMER_NAME label, X.CUSTOMER_NUMBER value
//       FROM customer x, VW_VALID_APPROVED_OD c, facility b
//       WHERE X.CUSTOMER_NUMBER = b.CUSTOMER_NUMBER
//         AND c.PRINCIPAL_ACCOUNT = b.PRINCIPAL_ACCOUNT
//     `;

//     // You may limit the number of rows returned if applicable
//     // For instance, you can add "FETCH FIRST <limit> ROWS ONLY" to the end of your query

//     const data = await execute(query);

//     const response = data.rows.map((row) => ({
//       label: row[0],
//       value: row[1],
//     }));

//     res.json(response);
//   } catch (error) {
//     console.error("Error executing query:", error);
//     res.status(500).send("Internal server error");
//   }
// });

// Get Prin Reclass Acct
// app.post("/api/get-prin-reclass-acct", (req, res) => {
//   const { cusNo } = req.body;
//   let getPrinReclassAcct = async () => {
//     try {
//       const db = await oracledb.getConnection({
//         user: DB_USER,
//         password: DB_PASSWORD,
//         connectString: DB_CONNECTION_STRING,
//         timeout: DB_CONNECTION_TIMEOUT,
//       });

//       const response = [];
//       let arr0 = "";

//       // node native promisify
//       const execute = util.promisify(db.execute).bind(db);

//       const data = await execute(
//         `SELECT DISTINCT c.PRINCIPAL_ACCOUNT || ' - ' || get_acctdesc(c.PRINCIPAL_ACCOUNT) as label,c.PRINCIPAL_ACCOUNT || ' - ' || get_acctdesc(c.PRINCIPAL_ACCOUNT) || ' - ' || b.FACILITY_NO as value
// from customer x, VW_VALID_APPROVED_OD c,facility b
// WHERE X.CUSTOMER_NUMBER = '${cusNo}'
// and c.PRINCIPAL_ACCOUNT = b.PRINCIPAL_ACCOUNT
// and b.CUSTOMER_NUMBER=x.CUSTOMER_NUMBER`
//       );

//       if (data) {
//         for (let i = 0; i < data.rows.length; i++) {
//           for (let x = 0; x < data.metaData.length; x++) {
//             arr0 +=
//               '"' +
//               [data.metaData[x].name.toLowerCase()] +
//               '" : "' +
//               data.rows[i][x] +
//               '",';
//           }

//           response.push(
//             JSON.parse(
//               "{" +
//                 arr0.replace(/(\r\n|\n|\r)/gm, "").replace(/,\s*$/, "") +
//                 "}"
//             )
//           );
//         }

//         res.send(response);
//       } else {
//         res.send("Something went wrong... Nothing was returned!!");
//       }
//     } catch (e) {
//       // conn.end();
//       res.send(e.toString());
//     }
//   };

//   getPrinReclassAcct();
// });

app.post("/api/get-prin-reclass-acct-od", async (req, res) => {
  const { cusNo } = req.body;
  try {
    const db = await oracledb.getConnection({
      user: DB_USER,
      password: DB_PASSWORD,
      connectString: DB_CONNECTION_STRING,
      timeout: DB_CONNECTION_TIMEOUT,
    });

    const execute = util.promisify(db.execute).bind(db);

    const query = `
      SELECT DISTINCT c.PRINCIPAL_ACCOUNT || ' - ' || get_acctdesc(c.PRINCIPAL_ACCOUNT) as label,c.PRINCIPAL_ACCOUNT as value 
from customer x, VW_VALID_APPROVED_OD c,facility b
WHERE X.CUSTOMER_NUMBER = '${cusNo}'
and c.PRINCIPAL_ACCOUNT = b.PRINCIPAL_ACCOUNT
and b.CUSTOMER_NUMBER=x.CUSTOMER_NUMBER
    `;

    const data = await execute(query);

    const response = data.rows.map((row) => ({
      label: row[0],
      value: row[1],
    }));

    res.json(response);
  } catch (error) {
    console.error("Error executing query:", error);
    res.status(500).send("Internal server error");
  }
});

app.post("/api/get-prin-reclass-acct-loans", async (req, res) => {
  const { cusNo } = req.body;
  try {
    const db = await oracledb.getConnection({
      user: DB_USER,
      password: DB_PASSWORD,
      connectString: DB_CONNECTION_STRING,
      timeout: DB_CONNECTION_TIMEOUT,
    });

    const execute = util.promisify(db.execute).bind(db);

    const query = `
      SELECT DISTINCT X.PRINCIPAL_ACCOUNT as value,X.PRINCIPAL_ACCOUNT || ' - ' || X.ACCOUNT_DESCRP as label, X.FACILITY_NO FROM VW_VALID_LOANS X
WHERE X.CUSTOMER_NUMBER = '${cusNo}'
ORDER BY X.FACILITY_NO
    `;

    const data = await execute(query);

    const response = data.rows.map((row) => ({
      value: row[0],
      label: row[1],
    }));

    res.json(response);
  } catch (error) {
    console.error("Error executing query:", error);
    res.status(500).send("Internal server error");
  }
});

app.post("/api/get-reclass-details", (req, res) => {
  const { prin_acct } = req.body;
  let getWriteoffAcctDetails = async () => {
    try {
      const db = await oracledb.getConnection({
        user: DB_USER,
        password: DB_PASSWORD,
        connectString: DB_CONNECTION_STRING,
        timeout: DB_CONNECTION_TIMEOUT,
      });

      const response = [];
      let arr0 = "";

      // node native promisify
      const execute = util.promisify(db.execute).bind(db);

      const data = await execute(
        ` SELECT SHADOW_BALANCE_TODAY,  
CASE WHEN od_interest_amount = 0 THEN  OD_INTIN_SUSP ELSE od_interest_amount END  INTEREST ,
 CASE WHEN cot_amount = 0 THEN  PEN_INTIN_SUSP ELSE cot_amount END PEN,
 facility_no
  FROM  BANKOWNER.loan_enq_vw
WHERE PRINCIPAL_ACCOUNT = '${prin_acct}'`
      );

      if (data) {
        for (let i = 0; i < data.rows.length; i++) {
          for (let x = 0; x < data.metaData.length; x++) {
            arr0 +=
              '"' +
              [data.metaData[x].name.toLowerCase()] +
              '" : "' +
              data.rows[i][x] +
              '",';
          }

          response.push(
            JSON.parse(
              "{" +
                arr0.replace(/(\r\n|\n|\r)/gm, "").replace(/,\s*$/, "") +
                "}"
            )
          );
        }

        res.send(response);
      } else {
        res.send("Something went wrong... Nothing was returned!!");
      }
    } catch (e) {
      // conn.end();
      res.send(e.toString());
    }
  };

  getWriteoffAcctDetails();
});

app.post("/api/get-reclass-details2", (req, res) => {
  const { prin_acct } = req.body;
  let getWriteoffAcctDetails = async () => {
    try {
      const db = await oracledb.getConnection({
        user: DB_USER,
        password: DB_PASSWORD,
        connectString: DB_CONNECTION_STRING,
        timeout: DB_CONNECTION_TIMEOUT,
      });

      const response = [];
      let arr0 = "";

      // node native promisify
      const execute = util.promisify(db.execute).bind(db);

      const data = await execute(
        ` SELECT DAYS_ARR, ACCT_CLASS
FROM ARREARS_MASTER
WHERE PRINC_ACT = '${prin_acct}'`
      );

      if (data) {
        for (let i = 0; i < data.rows.length; i++) {
          for (let x = 0; x < data.metaData.length; x++) {
            arr0 +=
              '"' +
              [data.metaData[x].name.toLowerCase()] +
              '" : "' +
              data.rows[i][x] +
              '",';
          }

          response.push(
            JSON.parse(
              "{" +
                arr0.replace(/(\r\n|\n|\r)/gm, "").replace(/,\s*$/, "") +
                "}"
            )
          );
        }

        res.send(response);
      } else {
        res.send("Something went wrong... Nothing was returned!!");
      }
    } catch (e) {
      // conn.end();
      res.send(e.toString());
    }
  };

  getWriteoffAcctDetails();
});

app.post("/api/get-class-desc", (req, res) => {
  const { cur_class } = req.body;
  let getWriteoffAcctDetails = async () => {
    try {
      const db = await oracledb.getConnection({
        user: DB_USER,
        password: DB_PASSWORD,
        connectString: DB_CONNECTION_STRING,
        timeout: DB_CONNECTION_TIMEOUT,
      });

      const response = [];
      let arr0 = "";

      // node native promisify
      const execute = util.promisify(db.execute).bind(db);

      const data = await execute(
        `select  DESCRIPTION 
from bankowner.code_desc
where CODE_TYPE = 'ATC'
AND ACTUAL_CODE = '${cur_class}'`
      );

      if (data) {
        for (let i = 0; i < data.rows.length; i++) {
          for (let x = 0; x < data.metaData.length; x++) {
            arr0 +=
              '"' +
              [data.metaData[x].name.toLowerCase()] +
              '" : "' +
              data.rows[i][x] +
              '",';
          }

          response.push(
            JSON.parse(
              "{" +
                arr0.replace(/(\r\n|\n|\r)/gm, "").replace(/,\s*$/, "") +
                "}"
            )
          );
        }

        res.send(response);
      } else {
        res.send("Something went wrong... Nothing was returned!!");
      }
    } catch (e) {
      // conn.end();
      res.send(e.toString());
    }
  };

  getWriteoffAcctDetails();
});

// Lending Origination API
//  Loan Origination
// app.post("/api/lending-onboarding", async (req, res) => {
//   const {
//     //repay_acct_v, // Repayment account number
//     // customer_account,// customer account to credit loan amount
//     legal_form_v, // Product code Eg: (CUSTOMER SALARY LOAN 59)
//     branch, // Branch of the customer or Headoffice branch code Eg:000
//     currency_v, // Currency code
//     repnt_period_months_v, // or in months
//     int_type, // 01-FLAT,02-REING BALANCE,03-AMORTIZATION METHOD,05-FLOATING RATE
//     rate, // Interest rate
//     mora, // morator
//     int_mora, // Interest chargduring moratorium period (N = No,Y = Yes)
//     AMT, // Loan Amount
//     EFF_DATE, // Effece date
//     int_repay_plan_v, // Inter repayment plan
//     repayment_plan_v, // Repayment plan
//     last_repay_date_v, // Last repayyment date
//     LAST_DAY_V, // Last day of  month for repayment
//     exempt_month_v, // Exemptednth for repayment
//     sector_v, // Sector c
//     sub_sector_v, // Sub-sec code
//     lienamt_v, // Lien amount
//     username_v, // Username
//     NO_OF_TRANCHES_V, // Number tranches
//     bank_code_v, // Bank code
//     hostname_v, // Hostname
//     facility_no_v, // Facility ner
//     fac_type_v, // Facility type
//     prime_rate_v, // Prime rate
//     trans_details, // Transacn details
//     other_purpose_v, // Other purpose
//     documents_ref_no_v, // Document reference number
//     staff_cat_v, // Staff cat
//     vendor_code_v, // Vendor code
//     ballon_installment_v, // Ballon installment
//     introductory_source_v, //introductory source
//     employer_code_v, // Employer code
//     source_funds_v, // Source funds
//     no_of_disb_v, // Number of disbursements
//     agreed_amount_v, // Agreed amount
//     dealer_code_v, // Dealer e
//     cust_no, // Customer Number
//     action_v, // Action i.e
//     typeOfAccount, // Type of account
//     loan_app_no_v,
//     prin_pay_count_v,
//     int_pay_count_v,
//     bnk_code_v,
//     ben_acct_v,
//     para1, // Parameter 1
//     para2, // Parameter 2
//     para3, // Parameter 3
//     para4, // Parameter 4
//     para5, // Parameter 5
//   } = req.body;
//   const customer_number = req.body.customer_account;
//   const repay_acct_v = req.body.repay_acct_v;
//   // console.log(Number(AMT));
//   // Define the validation rules
//   // const validationRules = {
//   //     repay_acct_v: 'required',
//   //     customer_account: 'required',
//   //     legal_form_v: 'required',
//   //     branch: 'required',
//   //     currency_v: 'required',
//   //     repnt_period_months_v: 'required|integer',
//   //     int_type: 'required',
//   //     rate: 'required|integer',
//   //     mora: 'required|integer',
//   //     int_mora: 'required',
//   //     AMT: 'required|integer',
//   //     EFF_DATE: 'required',
//   //     int_repay_plan_v: 'required',
//   //     repayment_plan_v: 'required',
//   //     LAST_DAY_V: 'required',
//   //     exempt_month_v: 'required',
//   //     sector_v: 'required',
//   //     sub_sector_v: 'required',
//   //     username_v: 'required',
//   //     fac_type_v: 'required',
//   //     trans_details: 'required',
//   //     introductory_source_v: 'required',
//   //     no_of_disb_v: 'required|integer',
//   //     agreed_amount_v: 'required',
//   //     dealer_code_v: 'required',
//   //   };
//   //   var response = [];
//   //       // Perform validation (You can use a validation library like Joi for more robust validation)

//   // for (const key in validationRules){
//   //   if (!req.body[key]){
//   //     response = {
//   //               responseCode: "999",
//   //               responseMessage: `${key} is required`,

//   //             };
//   //             return response;

//   //   }
//   // }
//   // console.log(typeof(customer_account) + customer_account);

//   try {
//     const connection = await oracledb.getConnection({
//       user: DB_USER,
//       password: DB_PASSWORD,
//       connectString: DB_CONNECTION_STRING,
//     });
//     await connection.execute(
//       `BEGIN Prc_lending_MOB_Onboard(
//         :repay_acct_v,
//         :repa_acct_v,
//         :legal_form_v,
//         :branch,
//         :currency_v,
//         :repnt_period_months_v,
//         :int_type,
//         :rate,
//         :mora,
//         :int_mora,
//         :AMT,
//         :EFF_DATE,
//         :int_repay_plan_v,
//         :repayment_plan_v,
//         :last_repay_date_v,
//         :LAST_DAY_V,
//         :exempt_month_v,
//         :sector_v,
//         :sub_sector_v,
//         :lienamt_v,
//         :username_v,
//         :NO_OF_TRANCHES_V,
//         :bank_code_v,
//         :hostname_v,
//         :response_v,
//         :facility_no_v,
//         :fac_type_v,
//         :prime_rate_v,
//         :trans_details,
//         :other_purpose_v,
//         :documents_ref_no_v,
//         :staff_cat_v,
//         :vendor_code_v,
//         :ballon_installment_v,
//         :introductory_source_v,
//         :employer_code_v,
//         :source_funds_v,
//         :no_of_disb_v,
//         :agreed_amount_v,
//         :dealer_code_v,
//         :cust_no,
//         :action_v,
//         :toa_v,
//         :loan_app_no_v,
//         :prin_pay_count_v,
//         :int_pay_count_v,
//         :bnk_code_v,
//         :ben_acct_v,
//         :para1,:para2,:para3,:para4,:para5); END;`,
//       {
//         repay_acct_v: {
//           val: repay_acct_v.trim(),
//           dir: oracledb.BIND_IN,
//           maxSize: 20,
//         },
//         repa_acct_v: {
//           val: customer_number.trim(),
//           dir: oracledb.BIND_IN,
//           type: oracledb.STRING,
//           maxSize: 20,
//         },
//         legal_form_v: { val: legal_form_v, dir: oracledb.BIND_IN, maxSize: 20 },
//         branch: { val: branch, dir: oracledb.BIND_IN, maxSize: 20 },
//         currency_v: { val: currency_v, dir: oracledb.BIND_IN, maxSize: 20 },
//         repnt_period_months_v: {
//           val: repnt_period_months_v,
//           dir: oracledb.BIND_IN,
//           maxSize: 20,
//         },
//         int_type: { val: int_type, dir: oracledb.BIND_INOUT, maxSize: 200 },
//         rate: { val: rate, dir: oracledb.BIND_IN, maxSize: 20 },
//         mora: { val: mora, dir: oracledb.BIND_INOUT, maxSize: 200 },
//         int_mora: { val: int_mora, dir: oracledb.BIND_INOUT, maxSize: 200 },
//         AMT: { val: AMT, dir: oracledb.BIND_INOUT, maxSize: 200 },
//         EFF_DATE: {
//           val: new Date(EFF_DATE),
//           dir: oracledb.BIND_INOUT,
//           maxSize: 200,
//         },
//         int_repay_plan_v: {
//           val: int_repay_plan_v,
//           dir: oracledb.BIND_INOUT,
//           maxSize: 200,
//         },
//         repayment_plan_v: {
//           val: repayment_plan_v,
//           dir: oracledb.BIND_INOUT,
//           maxSize: 200,
//         },
//         last_repay_date_v: {
//           type: oracledb.DATE,
//           dir: oracledb.BIND_OUT,
//           maxSize: 200,
//         },
//         LAST_DAY_V: { val: LAST_DAY_V, dir: oracledb.BIND_IN, maxSize: 20 },
//         exempt_month_v: {
//           val: exempt_month_v,
//           dir: oracledb.BIND_IN,
//           maxSize: 20,
//         },
//         sector_v: { val: sector_v, dir: oracledb.BIND_IN, maxSize: 20 },
//         sub_sector_v: { val: sub_sector_v, dir: oracledb.BIND_IN, maxSize: 20 },
//         lienamt_v: { val: lienamt_v, dir: oracledb.BIND_INOUT, maxSize: 200 },
//         username_v: { val: username_v, dir: oracledb.BIND_IN, maxSize: 20 },
//         NO_OF_TRANCHES_V: {
//           val: NO_OF_TRANCHES_V,
//           dir: oracledb.BIND_IN,
//           maxSize: 20,
//         },
//         bank_code_v: { val: bank_code_v, dir: oracledb.BIND_IN, maxSize: 20 },
//         hostname_v: { val: hostname_v, dir: oracledb.BIND_IN, maxSize: 20 },
//         response_v: {
//           type: oracledb.STRING,
//           dir: oracledb.BIND_OUT,
//           maxSize: 400,
//         },
//         facility_no_v: {
//           type: oracledb.STRING,
//           dir: oracledb.BIND_OUT,
//           maxSize: 400,
//         },
//         fac_type_v: { val: fac_type_v, dir: oracledb.BIND_IN, maxSize: 20 },
//         prime_rate_v: {
//           val: prime_rate_v,
//           dir: oracledb.BIND_INOUT,
//           maxSize: 200,
//         },
//         trans_details: {
//           val: trans_details,
//           dir: oracledb.BIND_IN,
//           maxSize: 20,
//         },
//         other_purpose_v: {
//           val: other_purpose_v,
//           dir: oracledb.BIND_IN,
//           maxSize: 20,
//         },
//         documents_ref_no_v: {
//           val: documents_ref_no_v,
//           dir: oracledb.BIND_IN,
//           maxSize: 20,
//         },
//         staff_cat_v: { val: staff_cat_v, dir: oracledb.BIND_IN, maxSize: 20 },
//         vendor_code_v: {
//           val: vendor_code_v,
//           dir: oracledb.BIND_IN,
//           maxSize: 20,
//         },
//         ballon_installment_v: {
//           val: ballon_installment_v,
//           dir: oracledb.BIND_IN,
//           maxSize: 20,
//         },
//         introductory_source_v: {
//           val: introductory_source_v,
//           dir: oracledb.BIND_IN,
//           maxSize: 20,
//         },
//         employer_code_v: {
//           val: employer_code_v,
//           dir: oracledb.BIND_IN,
//           maxSize: 20,
//         },
//         source_funds_v: {
//           val: source_funds_v,
//           dir: oracledb.BIND_IN,
//           maxSize: 20,
//         },
//         no_of_disb_v: { val: no_of_disb_v, dir: oracledb.BIND_IN, maxSize: 20 },
//         agreed_amount_v: {
//           val: agreed_amount_v,
//           dir: oracledb.BIND_INOUT,
//           maxSize: 200,
//         },
//         dealer_code_v: {
//           val: dealer_code_v,
//           dir: oracledb.BIND_IN,
//           maxSize: 20,
//         },
//         cust_no: { val: cust_no, dir: oracledb.BIND_IN, maxSize: 20 },
//         action_v: { val: action_v, dir: oracledb.BIND_IN, maxSize: 20 },
//         toa_v: { val: typeOfAccount, dir: oracledb.BIND_IN, maxSize: 20 },
//         loan_app_no_v: {
//           val: loan_app_no_v,
//           dir: oracledb.BIND_INOUT,
//           maxSize: 200,
//         },
//         prin_pay_count_v: {
//           val: prin_pay_count_v,
//           dir: oracledb.BIND_INOUT,
//           maxSize: 200,
//         },
//         int_pay_count_v: {
//           val: int_pay_count_v,
//           dir: oracledb.BIND_INOUT,
//           maxSize: 200,
//         },
//         bnk_code_v: {
//           val: bnk_code_v,
//           dir: oracledb.BIND_IN,
//           maxSize: 20,
//         },
//         ben_acct_v: {
//           val: ben_acct_v,
//           dir: oracledb.BIND_IN,
//           maxSize: 20,
//         },
//         para1: { val: para1, dir: oracledb.BIND_IN, maxSize: 20 },
//         para2: { val: para2, dir: oracledb.BIND_IN, maxSize: 20 },
//         para3: { val: para3, dir: oracledb.BIND_IN, maxSize: 20 },
//         para4: { val: para4, dir: oracledb.BIND_IN, maxSize: 20 },
//         para5: { val: para5, dir: oracledb.BIND_IN, maxSize: 20 },
//       },

//       function (err, result) {
//         if (err) {
//           console.log(err);
//           response = {
//             responseCode: "999",
//             responseMessage: "Internal Server Error",
//             // resData: result.outBinds
//           };
//           res.send(response);
//         }
//         if (result) {
//           //  console.log(result);
//           if (result.outBinds.response_v.includes("07526")) {
//             const message = result.outBinds.response_v;
//             response = {
//               responseCode: "000",
//               responseMessage: message,
//             };
//           } else {
//             response = {
//               responseCode: "998",
//               responseMessage: result.outBinds.response_v,
//             };
//           }
//           res.send(response);
//         }
//       }
//     );
//   } catch (error) {
//     console.error("Error:", error);
//     res.send({
//       // error: error.toString();
//       responseCode: `999`,
//       responseMessage: "Internal server error",
//     });
//   }
// });
app.post("/api/lending-onboarding", async (req, res) => {
  const {
    //repay_acct_v, // Repayment account number
    // customer_account,// customer account to credit loan amount
    legal_form_v, // Product code Eg: (CUSTOMER SALARY LOAN 59)
    branch, // Branch of the customer or Headoffice branch code Eg:000
    currency_v, // Currency code
    repnt_period_months_v, // or in months
    int_type, // 01-FLAT,02-REING BALANCE,03-AMORTIZATION METHOD,05-FLOATING RATE
    rate, // Interest rate
    mora, // morator
    int_mora, // Interest chargduring moratorium period (N = No,Y = Yes)
    AMT, // Loan Amount
    EFF_DATE, // Effece date
    int_repay_plan_v, // Inter repayment plan
    repayment_plan_v, // Repayment plan
    last_repay_date_v, // Last repayyment date
    LAST_DAY_V, // Last day of  month for repayment
    exempt_month_v, // Exemptednth for repayment
    sector_v, // Sector c
    sub_sector_v, // Sub-sec code
    lienamt_v, // Lien amount
    username_v, // Username
    NO_OF_TRANCHES_V, // Number tranches
    bank_code_v, // Bank code
    hostname_v, // Hostname
    facility_no_v, // Facility ner
    fac_type_v, // Facility type
    prime_rate_v, // Prime rate
    trans_details, // Transacn details
    other_purpose_v, // Other purpose
    documents_ref_no_v, // Document reference number
    staff_cat_v, // Staff cat
    vendor_code_v, // Vendor code
    ballon_installment_v, // Ballon installment
    introductory_source_v, //introductory source
    employer_code_v, // Employer code
    source_funds_v, // Source funds
    no_of_disb_v, // Number of disbursements
    agreed_amount_v, // Agreed amount
    dealer_code_v, // Dealer e
    cust_no, // Customer Number
    action_v, // Action i.e
    typeOfAccount, // Type of account
    loan_app_no_v,
    prin_pay_count_v,
    int_pay_count_v,
    bnk_code_v,
    ben_acct_v,
    para1, // Parameter 1
    para2, // Parameter 2
    para3, // Parameter 3
    para4, // Parameter 4
    para5, // Parameter 5
  } = req.body;
  const customer_number = req.body.customer_account;
  const repay_acct_v = req.body.repay_acct_v;
  try {
    const connection = await oracledb.getConnection({
      user: DB_USER,
      password: DB_PASSWORD,
      connectString: DB_CONNECTION_STRING,
    });
    await connection.execute(
      `BEGIN Prc_lending_MOB_Onboard(
        :repay_acct_v,
        :repa_acct_v,
        :legal_form_v,
        :branch,
        :currency_v,
        :repnt_period_months_v,
        :int_type,
        :rate,
        :mora,
        :int_mora,
        :AMT,
        :EFF_DATE,
        :int_repay_plan_v,
        :repayment_plan_v,
        :last_repay_date_v,
        :LAST_DAY_V,
        :exempt_month_v,
        :sector_v,
        :sub_sector_v,
        :lienamt_v,
        :username_v,
        :NO_OF_TRANCHES_V,
        :bank_code_v,
        :hostname_v,
        :response_v,
        :facility_no_v,
        :fac_type_v,
        :prime_rate_v,
        :trans_details,
        :other_purpose_v,
        :documents_ref_no_v,
        :staff_cat_v,
        :vendor_code_v,
        :ballon_installment_v,
        :introductory_source_v,
        :employer_code_v,
        :source_funds_v,
        :no_of_disb_v,
        :agreed_amount_v,
        :dealer_code_v,
        :cust_no,
        :action_v,
        :toa_v,
        :loan_app_no_v,
        :prin_pay_count_v,
        :int_pay_count_v,
        :bnk_code_v,
        :ben_acct_v,
        :para1,:para2,:para3,:para4,:para5); END;`,
      {
        repay_acct_v: {
          val: repay_acct_v.trim(),
          dir: oracledb.BIND_IN,
          maxSize: 20,
        },
        repa_acct_v: {
          val: customer_number.trim(),
          dir: oracledb.BIND_IN,
          type: oracledb.STRING,
          maxSize: 20,
        },
        legal_form_v: { val: legal_form_v, dir: oracledb.BIND_IN, maxSize: 20 },
        branch: { val: branch, dir: oracledb.BIND_IN, maxSize: 20 },
        currency_v: { val: currency_v, dir: oracledb.BIND_IN, maxSize: 20 },
        repnt_period_months_v: {
          val: repnt_period_months_v,
          dir: oracledb.BIND_IN,
          maxSize: 20,
        },
        int_type: { val: int_type, dir: oracledb.BIND_INOUT, maxSize: 200 },
        rate: { val: rate, dir: oracledb.BIND_IN, maxSize: 20 },
        mora: { val: mora, dir: oracledb.BIND_INOUT, maxSize: 200 },
        int_mora: { val: int_mora, dir: oracledb.BIND_INOUT, maxSize: 200 },
        AMT: { val: AMT, dir: oracledb.BIND_INOUT, maxSize: 200 },
        EFF_DATE: {
          val: new Date(EFF_DATE),
          dir: oracledb.BIND_INOUT,
          maxSize: 200,
        },
        int_repay_plan_v: {
          val: int_repay_plan_v,
          dir: oracledb.BIND_INOUT,
          maxSize: 200,
        },
        repayment_plan_v: {
          val: repayment_plan_v,
          dir: oracledb.BIND_INOUT,
          maxSize: 200,
        },
        last_repay_date_v: {
          type: oracledb.DATE,
          dir: oracledb.BIND_OUT,
          maxSize: 200,
        },
        LAST_DAY_V: { val: LAST_DAY_V, dir: oracledb.BIND_IN, maxSize: 20 },
        exempt_month_v: {
          val: exempt_month_v,
          dir: oracledb.BIND_IN,
          maxSize: 20,
        },
        sector_v: { val: sector_v, dir: oracledb.BIND_IN, maxSize: 20 },
        sub_sector_v: { val: sub_sector_v, dir: oracledb.BIND_IN, maxSize: 20 },
        lienamt_v: { val: lienamt_v, dir: oracledb.BIND_INOUT, maxSize: 200 },
        username_v: { val: username_v, dir: oracledb.BIND_IN, maxSize: 20 },
        NO_OF_TRANCHES_V: {
          val: NO_OF_TRANCHES_V,
          dir: oracledb.BIND_IN,
          maxSize: 20,
        },
        bank_code_v: { val: bank_code_v, dir: oracledb.BIND_IN, maxSize: 20 },
        hostname_v: os.hostname(),
        response_v: {
          type: oracledb.STRING,
          dir: oracledb.BIND_OUT,
          maxSize: 400,
        },
        facility_no_v: {
          type: oracledb.STRING,
          dir: oracledb.BIND_OUT,
          maxSize: 400,
        },
        fac_type_v: { val: fac_type_v, dir: oracledb.BIND_IN, maxSize: 20 },
        prime_rate_v: {
          val: prime_rate_v,
          dir: oracledb.BIND_INOUT,
          maxSize: 200,
        },
        trans_details: {
          val: trans_details,
          dir: oracledb.BIND_IN,
          maxSize: 20,
        },
        other_purpose_v: {
          val: other_purpose_v,
          dir: oracledb.BIND_IN,
          maxSize: 20,
        },
        documents_ref_no_v: {
          val: documents_ref_no_v,
          dir: oracledb.BIND_IN,
          maxSize: 20,
        },
        staff_cat_v: { val: staff_cat_v, dir: oracledb.BIND_IN, maxSize: 20 },
        vendor_code_v: {
          val: vendor_code_v,
          dir: oracledb.BIND_IN,
          maxSize: 20,
        },
        ballon_installment_v: {
          val: ballon_installment_v,
          dir: oracledb.BIND_IN,
          maxSize: 20,
        },
        introductory_source_v: {
          val: introductory_source_v,
          dir: oracledb.BIND_IN,
          maxSize: 20,
        },
        employer_code_v: {
          val: employer_code_v,
          dir: oracledb.BIND_IN,
          maxSize: 20,
        },
        source_funds_v: {
          val: source_funds_v,
          dir: oracledb.BIND_IN,
          maxSize: 20,
        },
        no_of_disb_v: { val: no_of_disb_v, dir: oracledb.BIND_IN, maxSize: 20 },
        agreed_amount_v: {
          val: agreed_amount_v,
          dir: oracledb.BIND_INOUT,
          maxSize: 200,
        },
        dealer_code_v: {
          val: dealer_code_v,
          dir: oracledb.BIND_IN,
          maxSize: 20,
        },
        cust_no: { val: cust_no, dir: oracledb.BIND_IN, maxSize: 20 },
        action_v: { val: action_v, dir: oracledb.BIND_IN, maxSize: 20 },
        toa_v: { val: typeOfAccount, dir: oracledb.BIND_IN, maxSize: 20 },
        loan_app_no_v: {
          val: loan_app_no_v,
          dir: oracledb.BIND_INOUT,
          maxSize: 200,
        },
        prin_pay_count_v: {
          val: prin_pay_count_v,
          dir: oracledb.BIND_INOUT,
          maxSize: 200,
        },
        int_pay_count_v: {
          val: int_pay_count_v,
          dir: oracledb.BIND_INOUT,
          maxSize: 200,
        },
        bnk_code_v: {
          val: bnk_code_v,
          dir: oracledb.BIND_IN,
          maxSize: 20,
        },
        ben_acct_v: {
          val: ben_acct_v,
          dir: oracledb.BIND_IN,
          maxSize: 20,
        },
        para1: { val: para1, dir: oracledb.BIND_IN, maxSize: 20 },
        para2: { val: para2, dir: oracledb.BIND_IN, maxSize: 20 },
        para3: { val: para3, dir: oracledb.BIND_IN, maxSize: 20 },
        para4: { val: para4, dir: oracledb.BIND_IN, maxSize: 20 },
        para5: { val: para5, dir: oracledb.BIND_IN, maxSize: 20 },
      },

      function (err, result) {
        if (err) {
          console.log(err);
          response = {
            responseCode: "999",
            responseMessage:
              "An Unexpected Error Occurred. Please Contact Support.",
            // resData: result.outBinds
          };
          res.send(response);
        }
        if (result) {
          //  console.log(result);
          if (result.outBinds.response_v.includes("07526")) {
            const message = result.outBinds.response_v;
            response = {
              responseCode: "000",
              responseMessage: message,
            };
          } else {
            response = {
              responseCode: "998",
              responseMessage: result.outBinds.response_v,
            };
          }
          res.send(response);
        }
      }
    );
  } catch (error) {
    console.error("Error:", error);
    res.send({
      // error: error.toString();
      responseCode: `999`,
      responseMessage: "An unexpected error occurred. Please contact support.",
    });
  }
});

// lending reject approval prc
app.post("/api/lending-approval-reject", async (req, res) => {
  const {
    source_v,
    app_flag_v,
    loan_app_no_v,
    username_v,
    decide1_v,
    hostname_v,
    cancel_reason_v,
    item_code_v,
    loan_disb_acct_v,
    branch_v,
    currency_v,
    request_amt_v,
    frmcode_v,
    relation_officer_v,
    prog_v,
    response_v,
  } = req.body;

  try {
    const connection = await oracledb.getConnection({
      user: DB_USER,
      password: DB_PASSWORD,
      connectString: DB_CONNECTION_STRING,
    });

    await connection.execute(
      `BEGIN prc_reject_loan_approval(
        :source_v, 
        :app_flag_v,
        :loan_app_no_v, 
        :username_v,
        :decide1_v,
        :hostname_v,
        :cancel_reason_v, 
        :item_code_v,
        :loan_disb_acct_v,
        :branch_v,
        :currency_v,
        :request_amt_v,
        :frmcode_v,
        :relation_officer_v,
        :machine_id_v,
        :machine_ip_v,
        :prog_v,
        :response_v
        ); END;`,
      {
        source_v,
        app_flag_v,
        loan_app_no_v,
        username_v,
        decide1_v,
        hostname_v,
        cancel_reason_v,
        item_code_v,
        loan_disb_acct_v,
        branch_v,
        currency_v,
        request_amt_v: parseFloat(request_amt_v),
        frmcode_v,
        relation_officer_v,
        machine_id_v: os.hostname(),
        machine_ip_v: ip.address(),
        prog_v,
        response_v: {
          type: oracledb.STRING,
          dir: oracledb.BIND_OUT,
          maxSize: 400,
        },
      },

      function (err, result) {
        if (err) {
          console.log(err);
          response = {
            responseCode: "999",
            responseMessage: "Internal Server Error",
          };
          res.send(response);
        }
        if (result) {
          // return res.send(result);
          if (result.outBinds.response_v?.includes("07526")) {
            const message = result.outBinds.response_v;
            response = {
              responseCode: "000",
              responseMessage: message,
            };
          } else {
            response = {
              responseCode: "998",
              responseMessage: result.outBinds.response_v,
            };
          }
          res.send(response);
        }
      }
    );
  } catch (error) {
    console.error("Error:", error);
    res.send({
      // error: error.toString();
      responseCode: 999,
      responseMessage: "Internal server error",
    });
  }
});

// Still Loans
//  Loan Origination
app.post("/api/loans-onboarding", async (req, res) => {
  const {
    //repay_acct_v, // Repayment account number
    // customer_account,// customer account to credit loan amount
    legal_form_v, // Product code Eg: (CUSTOMER SALARY LOAN 59)
    branch, // Branch of the customer or Headoffice branch code Eg:000
    currency_v, // Currency code
    repnt_period_months_v, // or in months
    int_type, // 01-FLAT,02-REING BALANCE,03-AMORTIZATION METHOD,05-FLOATING RATE
    rate, // Interest rate
    mora, // morator
    int_mora, // Interest chargduring moratorium period (N = No,Y = Yes)
    AMT, // Loan Amount
    EFF_DATE, // Effece date
    int_repay_plan_v, // Inter repayment plan
    repayment_plan_v, // Repayment plan
    last_repay_date_v, // Last repayyment date
    LAST_DAY_V, // Last day of  month for repayment
    exempt_month_v, // Exemptednth for repayment
    sector_v, // Sector c
    sub_sector_v, // Sub-sec code
    lienamt_v, // Lien amount
    username_v, // Username
    NO_OF_TRANCHES_V, // Number tranches
    bank_code_v, // Bank code
    hostname_v, // Hostname
    facility_no_v, // Facility ner
    fac_type_v, // Facility type
    prime_rate_v, // Prime rate
    trans_details, // Transacn details
    other_purpose_v, // Other purpose
    documents_ref_no_v, // Document reference number
    staff_cat_v, // Staff cat
    vendor_code_v, // Vendor code
    ballon_installment_v, // Ballon installment
    introductory_source_v, //introductory source
    employer_code_v, // Employer code
    source_funds_v, // Source funds
    no_of_disb_v, // Number of disbursements
    agreed_amount_v, // Agreed amount
    dealer_code_v, // Dealer e
    cust_no, // Customer Number
    action_v, // Action i.e
    typeOfAccount, // Type of account
    para1, // Parameter 1
    para2, // Parameter 2
    para3, // Parameter 3
    para4, // Parameter 4
    para5, // Parameter 5
  } = req.body;
  const customer_number = req.body.customer_account;
  const repay_acct_v = req.body.repay_acct_v;
  // console.log(Number(AMT));
  // Define the validation rules
  // const validationRules = {
  //     repay_acct_v: 'required',
  //     customer_account: 'required',
  //     legal_form_v: 'required',
  //     branch: 'required',
  //     currency_v: 'required',
  //     repnt_period_months_v: 'required|integer',
  //     int_type: 'required',
  //     rate: 'required|integer',
  //     mora: 'required|integer',
  //     int_mora: 'required',
  //     AMT: 'required|integer',
  //     EFF_DATE: 'required',
  //     int_repay_plan_v: 'required',
  //     repayment_plan_v: 'required',
  //     LAST_DAY_V: 'required',
  //     exempt_month_v: 'required',
  //     sector_v: 'required',
  //     sub_sector_v: 'required',
  //     username_v: 'required',
  //     fac_type_v: 'required',
  //     trans_details: 'required',
  //     introductory_source_v: 'required',
  //     no_of_disb_v: 'required|integer',
  //     agreed_amount_v: 'required',
  //     dealer_code_v: 'required',
  //   };
  //   var response = [];
  //       // Perform validation (You can use a validation library like Joi for more robust validation)

  // for (const key in validationRules){
  //   if (!req.body[key]){
  //     response = {
  //               responseCode: "999",
  //               responseMessage: `${key} is required`,

  //             };
  //             return response;

  //   }
  // }
  // console.log(typeof(customer_account) + customer_account);

  try {
    const connection = await oracledb.getConnection({
      user: DB_USER,
      password: DB_PASSWORD,
      connectString: DB_CONNECTION_STRING,
    });
    await connection.execute(
      `BEGIN Prc_lending_MOB_Onboard(
        :repay_acct_v,
        :repa_acct_v,
        :legal_form_v,
        :branch,
        :currency_v,
        :repnt_period_months_v,
        :int_type,
        :rate,
        :mora,
        :int_mora,
        :AMT,
        :EFF_DATE,
        :int_repay_plan_v,
        :repayment_plan_v,
        :last_repay_date_v,
        :LAST_DAY_V,
        :exempt_month_v,
        :sector_v,
        :sub_sector_v,
        :lienamt_v,
        :username_v,
        :NO_OF_TRANCHES_V,
        :bank_code_v,
        :hostname_v,
        :response_v,
        :facility_no_v,
        :fac_type_v,
        :prime_rate_v,
        :trans_details,
        :other_purpose_v,
        :documents_ref_no_v,
        :staff_cat_v,
        :vendor_code_v,
        :ballon_installment_v,
        :introductory_source_v,
        :employer_code_v,
        :source_funds_v,
        :no_of_disb_v,
        :agreed_amount_v,
        :dealer_code_v,
        :cust_no,
        :action_v,
        :toa_v,
        :para1,:para2,:para3,:para4,:para5); END;`,
      {
        repay_acct_v: {
          val: repay_acct_v.trim(),
          dir: oracledb.BIND_IN,
          maxSize: 20,
        },
        repa_acct_v: {
          val: customer_number.trim(),
          dir: oracledb.BIND_IN,
          type: oracledb.STRING,
          maxSize: 20,
        },
        legal_form_v: { val: legal_form_v, dir: oracledb.BIND_IN, maxSize: 20 },
        branch: { val: branch, dir: oracledb.BIND_IN, maxSize: 20 },
        currency_v: { val: currency_v, dir: oracledb.BIND_IN, maxSize: 20 },
        repnt_period_months_v: {
          val: repnt_period_months_v,
          dir: oracledb.BIND_IN,
          maxSize: 20,
        },
        int_type: { val: int_type, dir: oracledb.BIND_INOUT, maxSize: 200 },
        rate: { val: rate, dir: oracledb.BIND_IN, maxSize: 20 },
        mora: { val: mora, dir: oracledb.BIND_INOUT, maxSize: 200 },
        int_mora: { val: int_mora, dir: oracledb.BIND_INOUT, maxSize: 200 },
        AMT: { val: AMT, dir: oracledb.BIND_INOUT, maxSize: 200 },
        EFF_DATE: {
          val: new Date(EFF_DATE),
          dir: oracledb.BIND_INOUT,
          maxSize: 200,
        },
        int_repay_plan_v: {
          val: int_repay_plan_v,
          dir: oracledb.BIND_INOUT,
          maxSize: 200,
        },
        repayment_plan_v: {
          val: repayment_plan_v,
          dir: oracledb.BIND_INOUT,
          maxSize: 200,
        },
        last_repay_date_v: {
          type: oracledb.DATE,
          dir: oracledb.BIND_OUT,
          maxSize: 200,
        },
        LAST_DAY_V: { val: LAST_DAY_V, dir: oracledb.BIND_IN, maxSize: 20 },
        exempt_month_v: {
          val: exempt_month_v,
          dir: oracledb.BIND_IN,
          maxSize: 20,
        },
        sector_v: { val: sector_v, dir: oracledb.BIND_IN, maxSize: 20 },
        sub_sector_v: { val: sub_sector_v, dir: oracledb.BIND_IN, maxSize: 20 },
        lienamt_v: { val: lienamt_v, dir: oracledb.BIND_INOUT, maxSize: 200 },
        username_v: { val: username_v, dir: oracledb.BIND_IN, maxSize: 20 },
        NO_OF_TRANCHES_V: {
          val: NO_OF_TRANCHES_V,
          dir: oracledb.BIND_IN,
          maxSize: 20,
        },
        bank_code_v: { val: bank_code_v, dir: oracledb.BIND_IN, maxSize: 20 },
        hostname_v: { val: hostname_v, dir: oracledb.BIND_IN, maxSize: 20 },
        response_v: {
          type: oracledb.STRING,
          dir: oracledb.BIND_OUT,
          maxSize: 400,
        },
        facility_no_v: {
          type: oracledb.STRING,
          dir: oracledb.BIND_OUT,
          maxSize: 400,
        },
        fac_type_v: { val: fac_type_v, dir: oracledb.BIND_IN, maxSize: 20 },
        prime_rate_v: {
          val: prime_rate_v,
          dir: oracledb.BIND_INOUT,
          maxSize: 200,
        },
        trans_details: {
          val: trans_details,
          dir: oracledb.BIND_IN,
          maxSize: 20,
        },
        other_purpose_v: {
          val: other_purpose_v,
          dir: oracledb.BIND_IN,
          maxSize: 20,
        },
        documents_ref_no_v: {
          val: documents_ref_no_v,
          dir: oracledb.BIND_IN,
          maxSize: 20,
        },
        staff_cat_v: { val: staff_cat_v, dir: oracledb.BIND_IN, maxSize: 20 },
        vendor_code_v: {
          val: vendor_code_v,
          dir: oracledb.BIND_IN,
          maxSize: 20,
        },
        ballon_installment_v: {
          val: ballon_installment_v,
          dir: oracledb.BIND_IN,
          maxSize: 20,
        },
        introductory_source_v: {
          val: introductory_source_v,
          dir: oracledb.BIND_IN,
          maxSize: 20,
        },
        employer_code_v: {
          val: employer_code_v,
          dir: oracledb.BIND_IN,
          maxSize: 20,
        },
        source_funds_v: {
          val: source_funds_v,
          dir: oracledb.BIND_IN,
          maxSize: 20,
        },
        no_of_disb_v: { val: no_of_disb_v, dir: oracledb.BIND_IN, maxSize: 20 },
        agreed_amount_v: {
          val: agreed_amount_v,
          dir: oracledb.BIND_INOUT,
          maxSize: 200,
        },
        dealer_code_v: {
          val: dealer_code_v,
          dir: oracledb.BIND_IN,
          maxSize: 20,
        },
        cust_no: { val: cust_no, dir: oracledb.BIND_IN, maxSize: 20 },
        action_v: { val: action_v, dir: oracledb.BIND_IN, maxSize: 20 },
        toa_v: { val: typeOfAccount, dir: oracledb.BIND_IN, maxSize: 20 },
        para1: { val: para1, dir: oracledb.BIND_IN, maxSize: 20 },
        para2: { val: para2, dir: oracledb.BIND_IN, maxSize: 20 },
        para3: { val: para3, dir: oracledb.BIND_IN, maxSize: 20 },
        para4: { val: para4, dir: oracledb.BIND_IN, maxSize: 20 },
        para5: { val: para5, dir: oracledb.BIND_IN, maxSize: 20 },
      },

      function (err, result) {
        if (err) {
          console.log(err);
          response = {
            responseCode: "999",
            responseMessage: "Internal Server Error",
            // resData: result.outBinds
          };
          res.send(response);
        }
        if (result) {
          //  console.log(result);
          if (result.outBinds.response_v.includes("07526")) {
            const message = result.outBinds.response_v;
            response = {
              responseCode: "000",
              responseMessage: message,
            };
          } else {
            response = {
              responseCode: "998",
              responseMessage: result.outBinds.response_v,
            };
          }
          res.send(response);
        }
      }
    );
  } catch (error) {
    console.error("Error:", error);
    res.send({
      responseCode: "999",
      responseMessage: "Internal server error",
    });
  }
});

//////////// FIDELITY CREDIT DISBURSEMENT APIs /////////////////////////

// loan type
app.get("/api/get-loan-types-fid", (req, res) => {
  let getLoanType = async () => {
    try {
      const db = await oracledb.getConnection({
        user: DB_USER,
        password: DB_PASSWORD,
        connectString: DB_CONNECTION_STRING,
        timeout: DB_CONNECTION_TIMEOUT,
      });

      const response = [];
      let arr0 = "";

      // node native promisify
      const execute = util.promisify(db.execute).bind(db);

      const data = await execute(
        `select description value, description label
from tb_product
where prod_group = 5 
union all
select '599', 'OVERDRAFT' from dual`
      );

      if (data) {
        for (let i = 0; i < data.rows.length; i++) {
          for (let x = 0; x < data.metaData.length; x++) {
            arr0 +=
              '"' +
              [data.metaData[x]?.name?.toLowerCase()] +
              '" : "' +
              data.rows[i][x] +
              '",';
          }

          response.push(
            JSON.parse(
              "{" +
                arr0.replace(/(\r\n|\n|\r)/gm, "").replace(/,\s*$/, "") +
                "}"
            )
          );
        }

        res.send(response);
      } else {
        res.send("Something went wrong... Nothing was returned!!");
      }
    } finally {
      // conn.end();
    }
  };

  getLoanType();
});

// branch
app.get("/api/get-branch-fid", (req, res) => {
  let getBranch = async () => {
    try {
      const db = await oracledb.getConnection({
        user: DB_USER,
        password: DB_PASSWORD,
        connectString: DB_CONNECTION_STRING,
        timeout: DB_CONNECTION_TIMEOUT,
      });

      const response = [];
      let arr0 = "";

      // node native promisify
      const execute = util.promisify(db.execute).bind(db);

      const data = await execute(
        `SELECT DISTINCT BR_CODE value,BR_CODE || ' - ' || BR_DESCRIPTION label FROM TB_BRANCH`
      );

      if (data) {
        for (let i = 0; i < data.rows.length; i++) {
          for (let x = 0; x < data.metaData.length; x++) {
            arr0 +=
              '"' +
              [data.metaData[x]?.name?.toLowerCase()] +
              '" : "' +
              data.rows[i][x] +
              '",';
          }

          response.push(
            JSON.parse(
              "{" +
                arr0.replace(/(\r\n|\n|\r)/gm, "").replace(/,\s*$/, "") +
                "}"
            )
          );
        }

        res.send(response);
      } else {
        res.send("Something went wrong... Nothing was returned!!");
      }
    } finally {
      // conn.end();
    }
  };

  getBranch();
});

// channel
app.get("/api/get-channel-fid", (req, res) => {
  let getChannel = async () => {
    try {
      const db = await oracledb.getConnection({
        user: DB_USER,
        password: DB_PASSWORD,
        connectString: DB_CONNECTION_STRING,
        timeout: DB_CONNECTION_TIMEOUT,
      });

      const response = [];
      let arr0 = "";

      // node native promisify
      const execute = util.promisify(db.execute).bind(db);

      const data = await execute(
        `select actual_code value, actual_code || ' - ' || description label
from code_desc
where code_type ='CHN'
and SHORT_DESCRP is not null`
      );

      if (data) {
        for (let i = 0; i < data.rows.length; i++) {
          for (let x = 0; x < data.metaData.length; x++) {
            arr0 +=
              '"' +
              [data.metaData[x]?.name?.toLowerCase()] +
              '" : "' +
              data.rows[i][x] +
              '",';
          }

          response.push(
            JSON.parse(
              "{" +
                arr0.replace(/(\r\n|\n|\r)/gm, "").replace(/,\s*$/, "") +
                "}"
            )
          );
        }

        res.send(response);
      } else {
        res.send("Something went wrong... Nothing was returned!!");
      }
    } finally {
      // conn.end();
    }
  };

  getChannel();
});

// disbursement grid
app.post("/api/get-disbursement-grid", (req, res) => {
  const {
    cust_name_v,
    amt_v,
    app_no_v,
    channel_v,
    approved_by_v,
    branch_code_v,
    facility_type_v,
  } = req.body;
  let getDisbursementGrid = async () => {
    try {
      const db = await oracledb.getConnection({
        user: DB_USER,
        password: DB_PASSWORD,
        connectString: DB_CONNECTION_STRING,
        timeout: DB_CONNECTION_TIMEOUT,
      });

      const response = [];
      let arr0 = "";

      // node native promisify
      const execute = util.promisify(db.execute).bind(db);

      const data = await execute(
        `select applicant_no, applicant_name, amount, no_of_tranches, posting_sys_date, GET_BRANCHDESC(branch_code) branch_desc, GET_CURRISO(currency) curr, approved_by, channel, facility_type from loans_app_summ
where app_flag='07'
and applicant_name like '%'||'${cust_name_v}'||'%'
and amount>nvl('${amt_v}',0) 
and applicant_no like '%'||'${app_no_v}'||'%'
and channel like '%'||'${channel_v}'||'%'
and approved_by like '%'||'${approved_by_v}'||'%'
and branch_code like '%'||nvl('${branch_code_v}','')||'%'
--and facility_type like upper('%'||'${facility_type_v}'||'%')
and source_v = 'FID'
`
      );

      if (data) {
        for (let i = 0; i < data.rows.length; i++) {
          for (let x = 0; x < data.metaData.length; x++) {
            arr0 +=
              '"' +
              [data.metaData[x].name.toLowerCase()] +
              '" : "' +
              data.rows[i][x] +
              '",';
          }

          response.push(
            JSON.parse(
              "{" +
                arr0.replace(/(\r\n|\n|\r)/gm, "").replace(/,\s*$/, "") +
                "}"
            )
          );
        }

        res.send(response);
      } else {
        res.send("Something went wrong... Nothing was returned!!");
      }
    } catch (e) {
      res.send(e);
    }
  };

  getDisbursementGrid();
});

// disbursement details
app.post("/api/get-disbursement-details-fid", (req, res) => {
  let { loan_app_no } = req.body;
  let getDisbursementDetails = async () => {
    try {
      const db = await oracledb.getConnection({
        user: DB_USER,
        password: DB_PASSWORD,
        connectString: DB_CONNECTION_STRING,
        timeout: DB_CONNECTION_TIMEOUT,
      });

      const response = [];
      let arr0 = "";

      // return res.send({transaction_number : transaction_number, yo: "yo"});

      // node native promisify
      const execute = util.promisify(db.execute).bind(db);

      const data = await execute(
        ` select * from vw_loan_prod_details where loan_app_no = '${loan_app_no}'`
      );

      if (data) {
        for (let i = 0; i < data.rows.length; i++) {
          for (let x = 0; x < data.metaData.length; x++) {
            arr0 +=
              '"' +
              [data.metaData[x].name.toLowerCase()] +
              '" : "' +
              data.rows[i][x] +
              '",';
          }

          response.push(
            JSON.parse(
              "{" +
                arr0.replace(/(\r\n|\n|\r)/gm, "").replace(/,\s*$/, "") +
                "}"
            )
          );
        }

        res.send(response);
      } else {
        res.send("Something went wrong... Nothing was returned!!");
      }
    } catch (e) {
      res.send(e);
    }
  };

  getDisbursementDetails();
});

// get tranches disburesed
app.post("/api/get-tranches-disbursed-fid", (req, res) => {
  let { loan_app_no } = req.body;
  let getTranchDisb = async () => {
    try {
      const db = await oracledb.getConnection({
        user: DB_USER,
        password: DB_PASSWORD,
        connectString: DB_CONNECTION_STRING,
        timeout: DB_CONNECTION_TIMEOUT,
      });

      const execute = util.promisify(db.execute).bind(db);
      const response = [];
      let arr0 = "";

      // return res.send({transaction_number : transaction_number, yo: "yo"});

      // node native promisify

      const data = await execute(
        `select sum(nvl(amount,0)) amount_disbursed,count(a.loan_app_no) tranche_disburesed
        from tb_loans_tranches a,parameters b
            where a.loan_app_no='${loan_app_no}'
            and a.disbursed = 'Y' 
        and facility_no is not null`
      );

      if (data) {
        for (let i = 0; i < data.rows.length; i++) {
          for (let x = 0; x < data.metaData.length; x++) {
            arr0 +=
              '"' +
              [data.metaData[x].name.toLowerCase()] +
              '" : "' +
              data.rows[i][x] +
              '",';
          }

          response.push(
            JSON.parse(
              "{" +
                arr0.replace(/(\r\n|\n|\r)/gm, "").replace(/,\s*$/, "") +
                "}"
            )
          );
        }

        res.send(response);
      } else {
        res.send("Something went wrong... Nothing was returned!!");
      }
    } catch (e) {
      res.send(e);
    }
  };

  getTranchDisb();
});

// get tranches disburesed
app.post("/api/get-tranches-due-fid", (req, res) => {
  let { loan_app_no } = req.body;
  let getTranchDue = async () => {
    try {
      const db = await oracledb.getConnection({
        user: DB_USER,
        password: DB_PASSWORD,
        connectString: DB_CONNECTION_STRING,
        timeout: DB_CONNECTION_TIMEOUT,
      });

      const response = [];
      let arr0 = "";

      // return res.send({transaction_number : transaction_number, yo: "yo"});

      // node native promisify
      const execute = util.promisify(db.execute).bind(db);

      const data = await execute(
        `SELECT COUNT (a.loan_app_no) tranche_due,
                                   SUM (NVL (amount, 0)) amt
                              FROM tb_loans_tranches a, parameters b
                             WHERE     a.tranch_due_date <= b.posting_date
                                   AND a.loan_app_no = '${loan_app_no}'
                                   AND a.disbursed = 'N'
                                   AND facility_no IS NULL`
      );

      if (data) {
        for (let i = 0; i < data.rows.length; i++) {
          for (let x = 0; x < data.metaData.length; x++) {
            arr0 +=
              '"' +
              [data.metaData[x].name.toLowerCase()] +
              '" : "' +
              data.rows[i][x] +
              '",';
          }

          response.push(
            JSON.parse(
              "{" +
                arr0.replace(/(\r\n|\n|\r)/gm, "").replace(/,\s*$/, "") +
                "}"
            )
          );
        }

        res.send(response);
      } else {
        res.send("Something went wrong... Nothing was returned!!");
      }
    } catch (e) {
      res.send(e);
    }
  };

  getTranchDue();
});

// get loan dates
app.get("/api/get-loan-dates-fid", (req, res) => {
  let getLoanDates = async () => {
    try {
      const db = await oracledb.getConnection({
        user: DB_USER,
        password: DB_PASSWORD,
        connectString: DB_CONNECTION_STRING,
        timeout: DB_CONNECTION_TIMEOUT,
      });

      const response = [];
      let arr0 = "";

      // return res.send({transaction_number : transaction_number, yo: "yo"});

      // node native promisify
      const execute = util.promisify(db.execute).bind(db);

      const data = await execute(
        `SELECT posting_date eff_date,
                               prev_business_date (
                                   ADD_MONTHS (posting_date, 1)) next_review_date
                          FROM parameters`
      );

      if (data) {
        for (let i = 0; i < data.rows.length; i++) {
          for (let x = 0; x < data.metaData.length; x++) {
            arr0 +=
              '"' +
              [data.metaData[x].name.toLowerCase()] +
              '" : "' +
              data.rows[i][x] +
              '",';
          }

          response.push(
            JSON.parse(
              "{" +
                arr0.replace(/(\r\n|\n|\r)/gm, "").replace(/,\s*$/, "") +
                "}"
            )
          );
        }

        res.send(response);
      } else {
        res.send("Something went wrong... Nothing was returned!!");
      }
    } catch (e) {
      res.send(e);
    }
  };

  getLoanDates();
});

// Get Fees
app.post("/api/get-fees-fid", (req, res) => {
  const { loan_app_no } = req.body;
  let getFees = async () => {
    try {
      const db = await oracledb.getConnection({
        user: DB_USER,
        password: DB_PASSWORD,
        connectString: DB_CONNECTION_STRING,
        timeout: DB_CONNECTION_TIMEOUT,
      });

      const response = [];
      let arr0 = "";

      // node native promisify
      const execute = util.promisify(db.execute).bind(db);

      const data = await execute(
        `select GET_CODEDESC_INFO(FEE_CODE,'LFE') fee_desc, fee_rate, fee_amount from TB_LOAN_APP_FEES
where LOAN_APP_NO='${loan_app_no}'
ORDER BY FEE_CODE`
      );

      if (data) {
        for (let i = 0; i < data.rows.length; i++) {
          for (let x = 0; x < data.metaData.length; x++) {
            arr0 +=
              '"' +
              [data.metaData[x].name.toLowerCase()] +
              '" : "' +
              data.rows[i][x] +
              '",';
          }

          response.push(
            JSON.parse(
              "{" +
                arr0.replace(/(\r\n|\n|\r)/gm, "").replace(/,\s*$/, "") +
                "}"
            )
          );
        }

        res.send(response);
      } else {
        res.send("Something went wrong... Nothing was returned!!");
      }
    } catch (e) {
      // conn.end();
      res.send(e.toString());
    }
  };

  getFees();
});

// preview schedule
// const fidLMS = require("../functions/fidLMS");
// const express = require("express");
// const { json } = require("body-parser");
// const router = express.Router();

// router.post("/baserec", (req, res) => {
//   try {
//     fidLMS.saveBaseLoanRec({ ...req.body }).then((result) => {
//       //console.log(result);
//       res.json(result);
//     });
//   } catch (error) {
//     console.log(error);
//     return error;
//   }
// });

// module.exports = router;

// const oracledb = require("oracledb");
// const dbconn = require("../startup/dbconfig");
// oracledb.outformat = oracledb.OUT_FORMAT_OBJECT;

// async function saveBaseLoanRec(req) {
//   try {
//     let pool = await oracledb.getConnection(dbconn);
//     let myResponse = await pool.execute(
//       `begin PRC_FIDELITYLOAN_ONBOARD(:action_v,:loanNumber,:effectiveDate,:origBranch,:facilityAmount,:tenor,:loanProdCode,
//                                       :interestRate,:loanCurrency,:approvedBy,:repaymentFrequency,
//                                       :interestType,:channel,:customerNumber,:firstName,:lastName,:repayAccount,:zoneCode,
//                                       :repayProdCode,:repayCurrency,:repayBranch,:response); commit; end;`,
//       {
//         loanNumber: { dir: oracledb.BIND_IN, val: req.loanNumber },
//         action_v: { dir: oracledb.BIND_IN, val: req.action_v },
//         effectiveDate: { dir: oracledb.BIND_IN, val: req.effectiveDate },
//         origBranch: { dir: oracledb.BIND_IN, val: req.origBranch },
//         facilityAmount: { dir: oracledb.BIND_IN, val: req.facilityAmount },
//         tenor: { dir: oracledb.BIND_IN, val: req.tenor },
//         loanProdCode: { dir: oracledb.BIND_IN, val: req.loanProdCode },
//         interestRate: { dir: oracledb.BIND_IN, val: req.interestRate },
//         loanCurrency: { dir: oracledb.BIND_IN, val: req.loanCurrency },
//         approvedBy: { dir: oracledb.BIND_IN, val: req.approvedBy },
//         repaymentFrequency: {
//           dir: oracledb.BIND_IN,
//           val: req.repaymentFrequency,
//         },
//         interestType: { dir: oracledb.BIND_IN, val: req.interestType },
//         channel: { dir: oracledb.BIND_IN, val: req.channel },
//         customerNumber: { dir: oracledb.BIND_IN, val: req.customerNumber },
//         firstName: { dir: oracledb.BIND_IN, val: req.firstName },
//         lastName: { dir: oracledb.BIND_IN, val: req.lastName },
//         repayAccount: { dir: oracledb.BIND_IN, val: req.repayAccount },
//         zoneCode: { dir: oracledb.BIND_IN, val: req.zoneCode },
//         repayProdCode: { dir: oracledb.BIND_IN, val: req.repayProdCode },
//         repayCurrency: { dir: oracledb.BIND_IN, val: req.repayCurrency },
//         repayBranch: { dir: oracledb.BIND_IN, val: req.repayBranch },
//         response: { dir: oracledb.BIND_OUT, type: oracledb.DB_TYPE_VARCHAR },
//       }
//     );
//     console.log(myResponse.outBinds);
//     return myResponse.outBinds;
//   } catch (error) {
//     console.log(error);
//     return error;
//   }
// }

// module.exports = {
//   saveBaseLoanRec: saveBaseLoanRec,
// };

// app.post("/api/baserec", async (req, res) => {
//   async function saveBaseLoanRec(req) {
//     try {
//       const db = await oracledb.getConnection({
//         user: DB_USER,
//         password: DB_PASSWORD,
//         connectString: DB_CONNECTION_STRING,
//         timeout: DB_CONNECTION_TIMEOUT,
//       });

//       const execute = util.promisify(db.execute).bind(db);
//       // let pool = await oracledb.getConnection(dbconn);
//       let myResponse = await execute(
//         `begin PRC_FIDELITYLOAN_ONBOARD(:action_v,:loanNumber,:effectiveDate,:origBranch,:facilityAmount,:tenor,:loanProdCode,
//                                       :interestRate,:loanCurrency,:postedBy,:repaymentFrequency,
//                                       :interestType,:channel,:customerNumber,:firstName,:lastName,:repayAccount,:zoneCode,
//                                       :repayProdCode,:repayCurrency,:repayBranch,:hostName,:response); commit; end;`,
//         {
//           action_v: { dir: oracledb.BIND_IN, val: req.action_v },
//           loanNumber: { dir: oracledb.BIND_IN, val: req.loanNumber },
//           effectiveDate: { dir: oracledb.BIND_IN, val: req.effectiveDate },
//           origBranch: { dir: oracledb.BIND_IN, val: req.origBranch },
//           facilityAmount: { dir: oracledb.BIND_IN, val: req.facilityAmount },
//           tenor: { dir: oracledb.BIND_IN, val: req.tenor },
//           loanProdCode: { dir: oracledb.BIND_IN, val: req.loanProdCode },
//           interestRate: { dir: oracledb.BIND_IN, val: req.interestRate },
//           loanCurrency: { dir: oracledb.BIND_IN, val: req.loanCurrency },
//           postedBy: { dir: oracledb.BIND_IN, val: req.postedBy },
//           repaymentFrequency: {
//             dir: oracledb.BIND_IN,
//             val: req.repaymentFrequency,
//           },
//           interestType: { dir: oracledb.BIND_IN, val: req.interestType },
//           channel: { dir: oracledb.BIND_IN, val: req.channel },
//           customerNumber: { dir: oracledb.BIND_IN, val: req.customerNumber },
//           firstName: { dir: oracledb.BIND_IN, val: req.firstName },
//           lastName: { dir: oracledb.BIND_IN, val: req.lastName },
//           repayAccount: { dir: oracledb.BIND_IN, val: req.repayAccount },
//           zoneCode: { dir: oracledb.BIND_IN, val: req.zoneCode },
//           repayProdCode: { dir: oracledb.BIND_IN, val: req.repayProdCode },
//           repayCurrency: { dir: oracledb.BIND_IN, val: req.repayCurrency },
//           repayBranch: { dir: oracledb.BIND_IN, val: req.repayBranch },
//           hostName: { dir: oracledb.BIND_IN, val: os.hostname() },
//           response: { dir: oracledb.BIND_OUT, type: oracledb.DB_TYPE_VARCHAR },
//         }
//       );
//       console.log(myResponse.outBinds);
//       return myResponse.outBinds;

//     } catch (error) {
//       console.log(error);
//       return error;
//     }
//   }

//   try {
//     const response = await saveBaseLoanRec(req.body);
//     res.send(response);
//   } catch (error) {
//     console.log(error);
//   }
// });

app.post("/api/baserec", async (req, res) => {
  async function saveBaseLoanRec(req) {
    try {
      const db = await oracledb.getConnection({
        user: DB_USER,
        password: DB_PASSWORD,
        connectString: DB_CONNECTION_STRING,
        timeout: DB_CONNECTION_TIMEOUT,
      });

      const execute = util.promisify(db.execute).bind(db);
      let myResponse = await execute(
        `begin PRC_FIDELITYLOAN_ONBOARD(:action_v,:loanNumber,:effectiveDate,:origBranch,:facilityAmount,:tenor,:loanProdCode,
                                      :interestRate,:loanCurrency,:postedBy,:repaymentFrequency,
                                      :interestType,:channel,:customerNumber,:firstName,:lastName,:repayAccount,:zoneCode,
                                      :repayProdCode,:repayCurrency,:repayBranch,:hostName,:response); commit; end;`,
        {
          action_v: { dir: oracledb.BIND_IN, val: req.action_v },
          loanNumber: { dir: oracledb.BIND_IN, val: req.loanNumber },
          effectiveDate: { dir: oracledb.BIND_IN, val: req.effectiveDate },
          origBranch: { dir: oracledb.BIND_IN, val: req.origBranch },
          facilityAmount: { dir: oracledb.BIND_IN, val: req.facilityAmount },
          tenor: { dir: oracledb.BIND_IN, val: req.tenor },
          loanProdCode: { dir: oracledb.BIND_IN, val: req.loanProdCode },
          interestRate: { dir: oracledb.BIND_IN, val: req.interestRate },
          loanCurrency: { dir: oracledb.BIND_IN, val: req.loanCurrency },
          postedBy: { dir: oracledb.BIND_IN, val: req.postedBy },
          repaymentFrequency: {
            dir: oracledb.BIND_IN,
            val: req.repaymentFrequency,
          },
          interestType: { dir: oracledb.BIND_IN, val: req.interestType },
          channel: { dir: oracledb.BIND_IN, val: req.channel },
          customerNumber: { dir: oracledb.BIND_IN, val: req.customerNumber },
          firstName: { dir: oracledb.BIND_IN, val: req.firstName },
          lastName: { dir: oracledb.BIND_IN, val: req.lastName },
          repayAccount: { dir: oracledb.BIND_IN, val: req.repayAccount },
          zoneCode: { dir: oracledb.BIND_IN, val: req.zoneCode },
          repayProdCode: { dir: oracledb.BIND_IN, val: req.repayProdCode },
          repayCurrency: { dir: oracledb.BIND_IN, val: req.repayCurrency },
          repayBranch: { dir: oracledb.BIND_IN, val: req.repayBranch },
          hostName: { dir: oracledb.BIND_IN, val: os.hostname() },
          response: { dir: oracledb.BIND_OUT, type: oracledb.DB_TYPE_VARCHAR },
        }
      );
      return myResponse.outBinds;
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  try {
    const result = await saveBaseLoanRec(req.body);

    function handleResponse(err, result) {
      let response;
      if (err) {
        console.log(err);
        response = {
          responseCode: "999",
          responseMessage: "Internal Server Error",
        };
      } else if (result) {
        if (result.response?.includes("07526")) {
          const message = result.response;
          response = {
            responseCode: "000",
            responseMessage: message,
          };
        } else {
          response = {
            responseCode: "998",
            responseMessage: result.response,
          };
        }
      }
      res.send(response);
    }

    handleResponse(null, result);
  } catch (error) {
    function handleResponse(err) {
      let response;
      if (err) {
        console.log(err);
        response = {
          responseCode: "999",
          responseMessage: "Internal Server Error",
        };
      }
      res.send(response);
    }

    handleResponse(error);
  }
});
///////////////////////////////////////////////////////////////////////

//Type of Account
app.post("/api/typeOfAccount", async (req, res) => {
  const repay_acct_v = req.body.repay_acct_v;

  try {
    const db = await oracledb.getConnection({
      user: process.env.DB_USER,
      password: process.env.DB_PASSWORD,
      connectString: process.env.DB_CONNECTION_STRING,
      timeout: process.env.DB_CONNECTION_TIMEOUT,
    });

    const execute = util.promisify(db.execute).bind(db);

    const data = await execute(
      `select type_of_acct from g_ledger where acct_link='${repay_acct_v}'`
    );

    if (data) {
      res.send(
        data.rows[0][0]
        // responseMessage: response,
      );
    } else {
      res.send("Something went wrong... Nothing was returned!!");
    }
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: "An error occurred" });
  } finally {
    //end
  }
});

// app.post("/api/loan-booking", async (req, res) => {
//   const {
//     repay_acct_v, // Repayment account number
//     customer_account, // customer account to credit loan amount
//     legal_form_v, // Product c Eg: (CUSTOMER SALARY LOAN 59)
//     branch, // Branch of the tomer or Headoffice branch code Eg:000
//     currency_v, // Currency c
//     repnt_period_months_v, // or in months
//     int_type, // 01-FLAT,02-REING BALANCE,03-AMORTIZATION METHOD,05-FLOATING RATE
//     rate, // Interest rate
//     mora, // morator
//     int_mora, // Interest chargduring moratorium period (N = No,Y = Yes)
//     AMT, // Loan Amount
//     EFF_DATE, // Effece date
//     int_repay_plan_v, // Inter repayment plan
//     repayment_plan_v, // Repayment plan
//     last_repay_date_v, // Last ryment date
//     LAST_DAY_V, // Last day of  month for repayment
//     exempt_month_v, // Exemptednth for repayment
//     sector_v, // Sector c
//     sub_sector_v, // Sub-sec code
//     lienamt_v, // Lien amount
//     username_v, // Username
//     NO_OF_TRANCHES_V, // Number tranches
//     bank_code_v, // Bank c
//     hostname_v, // Hostn
//     facility_no_v, // Facility ner
//     fac_type_v, // Facility t
//     prime_rate_v, // Prime r
//     trans_details, // Transacn details
//     other_purpose_v, // Other puse
//     documents_ref_no_v, // Docum reference number
//     staff_cat_v, // Staff categ
//     vendor_code_v, // Vendor c
//     ballon_installment_v, // Baln installment
//     introductory_source_v, //troductory source
//     employer_code_v, // Employerde
//     source_funds_v, // Source funds
//     no_of_disb_v, // Number of bursements
//     agreed_amount_v, // Agd amount
//     dealer_code_v, // Dealer e
//     para1, // Paramete
//     para2, // Paramete
//     para3, // Paramete
//     para4,
//     para5,
//   } = req.body;
//   try {
//     let data = JSON.stringify({
//       repay_acct_v: repay_acct_v,
//       repa_acct_v: customer_account,
//       legal_form_v: legal_form_v,
//       branch: branch,
//       currency_v: currency_v,
//       repnt_period_months_v: repnt_period_months_v,
//       int_type: int_type,
//       rate: rate,
//       mora: mora,
//       int_mora: int_mora,
//       AMT: AMT,
//       EFF_DATE: EFF_DATE,
//       int_repay_plan_v: int_repay_plan_v,
//       repayment_plan_v: repayment_plan_v,
//       last_repay_date_v: last_repay_date_v,
//       LAST_DAY_V: LAST_DAY_V,
//       exempt_month_v: exempt_month_v,
//       sector_v: sector_v,
//       sub_sector_v: sub_sector_v,
//       lienamt_v: lienamt_v,
//       username_v: username_v,
//       NO_OF_TRANCHES_V: NO_OF_TRANCHES_V,
//       bank_code_v: bank_code_v,
//       hostname_v: hostname_v,
//       facility_no_v: facility_no_v,
//       fac_type_v: fac_type_v,
//       prime_rate_v: prime_rate_v,
//       trans_details: trans_details,
//       other_purpose_v: other_purpose_v,
//       documents_ref_no_v: documents_ref_no_v,
//       staff_cat_v: staff_cat_v,
//       vendor_code_v: vendor_code_v,
//       ballon_installment_v: ballon_installment_v,
//       introductory_source_v: introductory_source_v,
//       employer_code_v: employer_code_v,
//       source_funds_v: source_funds_v,
//       no_of_disb_v: no_of_disb_v,
//       agreed_amount_v: agreed_amount_v,
//       dealer_code_v: dealer_code_v,
//       para1: para1,
//       para2: para2,
//       para3: para3,
//       para4: para4,
//       para5: para5,
//     });

//     let config = {
//       method: "post",
//       maxBodyLength: Infinity,
//       url: "https://x100plus.unionsg.com:10443/ULA/public/api/v1/lending-onboarding",
//       headers: {
//         Accept: "application/json",
//         "x-api-key": "base64:L3job8HQ64khHSEBxEAQ5zL+tOoQgibjqfSDH8Sj7Yk=",
//         "Content-Type": "application/json",
//       },
//       data: data,
//     };

//    await axios
//      .request(config, {
//        timeout: 60000, // Set the timeout duration in milliseconds (e.g., 10000 ms = 10 seconds)
//      })
//      .then((response) => {
//        console.log(JSON.stringify(response.data));
//        res.send(response);
//      })
//      .catch((error) => {
//        console.log(error);
//        res.send({
//          responseCode: "998",
//          responseMessage: "Internal server error",
//          resData: error,
//        });
//      });

//   } catch (error) {
//     console.error("Error:", error);
//     res.send({
//       responseCode: "999",
//       // resData: error,
//       responseMessage: "Internal server error",

//     });
//   }
// });

//GET CURRENCY
app.get("/api/get-currency-breado/:id", (req, res) => {
  const { id } = req.params;

  async function getCurrency() {
    let con;

    try {
      con = await oracledb.getConnection({
        user: DB_USER,
        password: DB_PASSWORD,
        connectString: DB_CONNECTION_STRING,
        timeout: DB_CONNECTION_TIMEOUT,
      });

      const data = await con.execute(
        `select  iso_code, description , currency_code from tb_currency`
      );

      if (data.rows) {
        const arr = [];

        if (id === "1") {
          for (let i = 0; i < data.rows.length; i++) {
            const actual_code = data.rows[i][0];
            const description = data.rows[i][1];

            arr.push({
              value: data.rows[i][2],
              label: `${actual_code} - ${description}`,
            });
          }
        } else {
          for (let i = 0; i < data.rows.length; i++) {
            const actual_code = data.rows[i][0];
            const description = data.rows[i][1];
            arr.push({
              iso_code: data.rows[i][1],
              description,
              currency: actual_code,
            });
          }
        }

        res.send(arr);
        // console.log(arr)
      }
    } catch (err) {
      res.send(err);
    }
  }

  getCurrency();
});

//GET ACCOUNT NAME
app.post("/api/get-account-name", (req, res) => {
  async function getAccountName() {
    let con;
    const account_number = "'" + req.body.account_number + "'";
    try {
      con = await oracledb.getConnection({
        user: DB_USER,
        password: DB_PASSWORD,
        connectString: DB_CONNECTION_STRING,
        timeout: DB_CONNECTION_TIMEOUT,
      });

      if (con) {
        // console.log("i dey inside");
      }

      const data = await con.execute(
        `SELECT ACCOUNT_DESCRP
          FROM BANKOWNER.VW_CASA_LEDGER
          WHERE ACCT_LINK=${account_number}`
      );
      // res.send(data.rows)

      if (data.rows) {
        const arr = [];

        // console.log(data);
        for (let i = 0; i < data.rows.length; i++) {
          const account_descrp = data.rows[i][0];

          arr.push({
            account_description: account_descrp,
          });
        }

        res.send(arr);
      } else {
        res.send("error");
        // console.log(err);
      }
    } catch (err) {
      throw err;
    }
  }
  getAccountName();
});

// Loan Classification - Sasra Form 2D
app.post("/api/loan-classification", (req, res) => {
  // console.log(req.body);
  let query = "";
  const classification = req.body.classification;
  const request_provision_from = req.body.requestProvisionFrom?.replace(
    "%",
    ""
  );
  const request_provision_to =
    req.body.requestProvisionTo?.replace("%", "") || "100";
  const column = req.body.column;

  const order = req.body.order;
  const start_date = req.body.startDate;
  let end_date = req.body.endDate;
  if (start_date) {
    if (!end_date) {
      end_date =
        new Date(Date.now()).getDate() +
        "-" +
        new Date(Date.now())
          .toLocaleString("default", { month: "short" })
          .toUpperCase() +
        "-" +
        new Date(Date.now()).getFullYear();
    } else {
      end_date = end_date;
    }
  }

  if (!start_date) {
    query = ` WHERE RUN_DATE='31-OCT-2018'`;
  }
  if (start_date) {
    query += ` WHERE RUN_DATE BETWEEN TO_DATE('${start_date}', 'DD-MON-YYYY') AND TO_DATE('${end_date}', 'DD-MON-YYYY')`;
  }

  if (classification) {
    query += ` AND Classification = '${classification}'`;
  }
  if (request_provision_from) {
    query += ` AND TO_NUMBER(REPLACE(req_provision, '%')) BETWEEN ${request_provision_from} AND ${request_provision_to}`;
  }
  if (column) {
    if (column === "req_provision") {
      query += ` ORDER BY TO_NUMBER(REGEXP_REPLACE(${column}, '%')) ${order}`;
    } else {
      query += ` ORDER BY ${column} ${order}`;
    }
  }

  const queryCommand =
    `SELECT Classification, balance, req_provision, cur_prov_amt  FROM vw_SASRA_FORM2D` +
    query;
  // console.log(queryCommand);
  async function getCodeDetails() {
    let con;

    try {
      con = await oracledb.getConnection({
        user: DB_USER,
        password: DB_PASSWORD,
        connectString: DB_CONNECTION_STRING,
        timeout: DB_CONNECTION_TIMEOUT,
      });

      // if (con) {
      //   console.log("con");
      // } else {
      //   console.log("no con");
      // }
      const data = await con.execute(queryCommand);

      // return res.send(data);
      if (data.rows) {
        const arr = [];

        for (let i = 0; i < data.rows.length; i++) {
          const classification =
            data.rows[i][0] === null ? " - " : data.rows[i][0];
          const balance = data.rows[i][1] === null ? " - " : data.rows[i][1];
          const request_provision =
            data.rows[i][2] === null ? " - " : data.rows[i][2];
          const currency_provision_amount =
            data.rows[i][3] === null ? " - " : data.rows[i][3];

          const bal = formatAmount(balance);
          const curr_prov_amt = formatAmount(currency_provision_amount);

          arr.push({
            classification,
            bal,
            request_provision,
            curr_prov_amt,
          });
        }

        res.send(arr);
      } else {
        res.send(err);
        console.log(err);
      }
    } catch (err) {
      console.log(err);
      res.send(err);
    }
  }

  getCodeDetails();
});

app.post("/api/get-base64-image", async (req, res) => {
  try {
    const accno = req.body.accno;

    // Create a connection pool
    const connection = await oracledb.getConnection({
      user: DB_USER,
      password: DB_PASSWORD,
      connectString: DB_CONNECTION_STRING,
      timeout: DB_CONNECTION_TIMEOUT,
    });

    // Query the database for the blobs using bind variables
    const result = await connection.execute(
      `SELECT ACCSIGN, PHOTO FROM IMAGE.TBLSIG_DETAILS WHERE ACCNO = :accno`,
      [accno]
    );

    if (result.rows.length === 0) {
      return res
        .status(404)
        .send("No signature found for the specified account number");
    }

    // console.log(result);

    // Get the LOB objects from the result
    const photoLob = result.rows[0][1];
    const accsignLob = result.rows[0][0];

    // Convert the LOB objects to base64 strings
    const photoBase64 = await lobToBase64(photoLob);
    const accsignBase64 = await lobToBase64(accsignLob);

    // Send the base64 strings as the response
    res.json({
      photo: `data:image/jpeg;base64,${photoBase64}`,
      accsign: `data:image/jpeg;base64,${accsignBase64}`,
    });
  } catch (err) {
    console.log(err);
    res.status(500).send("Error getting sign verification");
  }
});

async function lobToBase64(lob) {
  return new Promise((resolve, reject) => {
    let base64 = "";
    lob.setEncoding("base64");
    lob.on("data", (chunk) => {
      base64 += chunk;
    });
    lob.on("end", () => {
      resolve(base64);
    });
    lob.on("error", (err) => {
      reject(err);
    });
  });
}

app.get("/api/get-transaction-type", (req, res) => {
  async function getTransactionType() {
    let con;
    try {
      con = await oracledb.getConnection({
        user: DB_USER,
        password: DB_PASSWORD,
        connectString: DB_CONNECTION_STRING,
        timeout: DB_CONNECTION_TIMEOUT,
      });

      if (con) {
        console.log("i dey inside");
      }

      const data = await con.execute(
        `SELECT TR,TD 
        FROM FUNDTRANS_TRANS 
        WHERE TR != 'FNT'`
      );

      let response = [];
      let arr0 = "";
      if (data) {
        for (let i = 0; i < data.rows.length; i++) {
          for (let x = 0; x < data.metaData.length; x++) {
            arr0 +=
              '"' +
              [data.metaData[x].name.toLowerCase()] +
              '" : "' +
              data.rows[i][x] +
              '",';
          }

          response.push(JSON.parse("{" + arr0.replace(/,\s*$/, "") + "}"));
        }

        res.send(response);
      } else {
        res.send("Something went wrong... Nothing was returned!!");
      }
    } catch (err) {
      res.send(err);
    }
  }
  getTransactionType();
});

///////////////////////////////////////////////////////////////////
//CHEQUE DEPOSIT
app.post("/api/postChequeDepositForm", (req, res) => {
  console.log("ghana");
  async function postChequeDepositForm() {
    let con;

    try {
      con = await oracledb.getConnection({
        user: DB_USER,
        password: DB_PASSWORD,
        connectString: DB_CONNECTION_STRING,
        timeout: DB_CONNECTION_TIMEOUT,
      });
      // const ipAddress = getIPAddress().address;

      const creditAccount = req.body.creditAccount;
      const chequeCategory = req.body.chequeCategory;
      const clearingAccount = req.body.clearingAccount;
      const numberOfCheques = req.body.numberOfCheques;
      const chequeNumber = req.body.chequeNumber;
      const issuingBankCode = req.body.issuingBankCode;
      const chequeAmount = req.body.chequeAmount;
      const voucherDate = req.body.voucherDate;
      const totalAmount = req.body.totalAmount;
      const chequeSum = req.body.chequeSum;
      const batchNumber = req.body.batchNumber;
      const username = req.body.username;
      const hostname = req.body.hostname;
      const narration1 = req.body.narration1;
      const narration2 = req.body.narration2;
      const formCode = req.body.formCode;
      const valueDate = req.body.valueDate;

      con.execute(
        "BEGIN prc_chequedeposit_addrec_rt(:craccount_v,:CHEQUE_TYPE_v,:clearing_house_code_v,:no_of_cheques_v,:cheque_no_v,:bank_code_v,:cheque_amount_v,:voucher_date_v,:total_amount_v,:chq_sum_v,:batchno_v,:USERNAME_v,:HOSTNAME_v,:narration1_v,:narration2_v,:FRMCODE_v,:value_date_v,:response_code,:response_mess); END;",
        {
          craccount_v: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: creditAccount,
          },
          CHEQUE_TYPE_v: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: chequeCategory,
          },
          clearing_house_code_v: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: clearingAccount,
          },
          no_of_cheques_v: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: numberOfCheques,
          },
          cheque_no_v: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: chequeNumber,
          },
          bank_code_v: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: issuingBankCode,
          },
          // console.log(),
          cheque_amount_v: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: chequeAmount,
          },
          voucher_date_v: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: voucherDate,
          },
          total_amount_v: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: totalAmount,
          },
          chq_sum_v: {
            type: oracledb.NUMBER,
            dir: oracledb.BIND_IN,
            val: chequeSum,
          },
          batchno_v: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: batchNumber,
          },
          USERNAME_v: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: username,
          },
          HOSTNAME_v: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: hostname,
          },
          narration1_v: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: narration1,
          },
          narration2_v: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: narration2,
          },
          FRMCODE_v: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: formCode,
          },
          value_date_v: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: valueDate,
          },
          response_code: {
            type: oracledb.STRING,
            dir: oracledb.BIND_OUT,
          },
          response_mess: {
            type: oracledb.STRING,
            dir: oracledb.BIND_OUT,
          },
          // p_trans_type: {
          //   type: oracledb.STRING, dir: oracledb.BIND_IN, val: receipt_trans_type,
          // },
          // output_param: { type: oracledb.STRING, dir: oracledb.BIND_OUT }
        },

        function (err, result) {
          if (err) {
            throw err;
          }
          // return res.send(p)
          console.log(batchNumber, "e no work");

          console.log(batchNumber);
          if (result) {
            console.log(username);

            // console.log(posting_machine_ip,"posting_machine_ip")
            if (result.outBinds.response_code === "780") {
              let message = result.outBinds.response_mess;
              response = {
                success: result.outBinds.response_code,
                // credit_postings : p,
                message: message,
                // token_id: tokennumber(50),
              };

              res.send(response);
            } else {
              console.log(creditAccount);

              let message = result.outBinds.response_mess;

              response = {
                success: true,
                message: message,
                // token_id: tokennumber(50),
              };

              res.send(response);
            }
          }
        }
      );
    } catch (err) {
      throw err;
    }
  }
  postChequeDepositForm();
});

app.post("/api/getChequeDepositData", (req, res) => {
  const batchNumber = req.body.batchNumber;

  async function getChequeDepositData() {
    let con;
    try {
      con = await oracledb.getConnection({
        user: DB_USER,
        password: DB_PASSWORD,
        connectString: DB_CONNECTION_STRING,
        timeout: DB_CONNECTION_TIMEOUT,
      });

      if (con) {
        // console.log("i say i dey insidee");
      }

      const data = await con.execute(
        `SELECT SEQ_NO,to_char(VALUE_DATE,'DD-MON-YYYY') as value_date,CHEQUE_NO,CHEQUE_TYPE,BANK_CODE,CHEQUE_AMOUNT,NARRATION1
         FROM MULTI_CHQ
         WHERE BATCHNO = '${batchNumber}'
         ORDER BY SEQ_NO ASC`
      );
      let finalresponse = [];
      let bankCode = "";
      let chequeCategory = "";
      let response = [];
      let arr0 = "";
      if (data) {
        for (let i = 0; i < data.rows.length; i++) {
          for (let x = 0; x < data.metaData.length; x++) {
            arr0 +=
              '"' +
              [data.metaData[x].name.toLowerCase()] +
              '" : "' +
              data.rows[i][x] +
              '",';
          }

          response.push(JSON.parse("{" + arr0.replace(/,\s*$/, "") + "}"));
        }
        bankCode = response[0].bank_code;
        chequeCategory = response[0].cheque_type;
      } else {
        res.send("Something went wrong... Nothing was returned!!");
      }

      const data2 = await con.execute(
        `SELECT CODE_DESC.DESCRIPTION
        FROM CODE_DESC WHERE CODE_DESC.CODE_TYPE ='BNC'
        AND ACTUAL_CODE = ${bankCode}
        ORDER BY ACTUAL_CODE ASC`
      );

      let response1 = [];
      let arr1 = "";
      if (data2) {
        for (let i = 0; i < data2.rows.length; i++) {
          for (let x = 0; x < data2.metaData.length; x++) {
            arr1 +=
              '"' +
              [data2.metaData[x].name.toLowerCase()] +
              '" : "' +
              data2.rows[i][x] +
              '",';
          }

          response1.push(JSON.parse("{" + arr1.replace(/,\s*$/, "") + "}"));
        }
      } else {
        res.send("Something went wrong... Nothing was returned!!");
      }

      const data3 = await con.execute(
        `SELECT CODE_DESC.DESCRIPTION as chequeDescription
        FROM CODE_DESC
        WHERE CODE_DESC.CODE_TYPE ='CCC'
        AND ACTUAL_CODE = '${chequeCategory}'
        AND CLASS_CODE='Y'`
      );

      let response2 = [];
      let arr2 = "";
      if (data3) {
        for (let i = 0; i < data3.rows.length; i++) {
          for (let x = 0; x < data3.metaData.length; x++) {
            arr2 +=
              '"' +
              [data3.metaData[x].name.toLowerCase()] +
              '" : "' +
              data3.rows[i][x] +
              '",';
          }

          response2.push(JSON.parse("{" + arr2.replace(/,\s*$/, "") + "}"));
        }
      } else {
        res.send("Something went wrong... Nothing was returned!!");
      }

      // res.send({response,response1,response2});
      // finalresponse.push(response[0],response1[0],(response2[0]))

      finalresponse.push([
        ...Object.values(response[0]),
        ...Object.values(response1[0]),
        ...Object.values(response2[0]),
      ]);

      res.send(finalresponse);
    } catch (err) {
      console.log(err);
    }
  }
  getChequeDepositData();
});

app.post("/api/applyChequeDepositForm", (req, res) => {
  console.log("ghana");
  async function applyChequeDepositForm() {
    let con;

    try {
      con = await oracledb.getConnection({
        user: DB_USER,
        password: DB_PASSWORD,
        connectString: DB_CONNECTION_STRING,
        timeout: DB_CONNECTION_TIMEOUT,
      });
      // const ipAddress = getIPAddress().address;

      const creditAccount = req.body.creditAccount;
      const chequeCategory = req.body.chequeCategory;
      const numberOfCheques = req.body.numberOfCheques;
      const totalAmount = req.body.totalAmount;
      const chequeAmount = req.body.chequeAmount;
      const gridCount = req.body.gridCount;
      const batchNumber = req.body.batchNumber;
      const username = req.body.username;
      const hostname = req.body.hostname;
      const formCode = req.body.formCode;

      // const clearingAccount = req.body.clearingAccount;
      // const chequeNumber = req.body.chequeNumber;
      // const issuingBankCode = req.body.issuingBankCode;
      // const voucherDate = req.body.voucherDate;
      // const chequeSum = req.body.chequeSum;
      // const narration1 = req.body.narration1;
      // const narration2 = req.body.narration2;
      // const valueDate = req.body.valueDate;

      con.execute(
        "BEGIN prc_chequedeposit_FINALPOST(:craccount_v,:CHK_TRANS_V,:no_of_cheques_v,:total_amount_V,:chq_sum_v,:CHQ_CNT_V,:batchno_v,:USERNAME_v,:HOSTNAME_v,:FRMCODE_v,:response_code,:response_mess); END;",
        {
          craccount_v: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: creditAccount,
          },
          CHK_TRANS_V: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: chequeCategory,
          },
          no_of_cheques_v: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: numberOfCheques,
          },
          total_amount_V: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: totalAmount,
          },
          chq_sum_v: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: chequeAmount,
          },
          CHQ_CNT_V: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: gridCount,
          },
          batchno_v: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: batchNumber,
          },
          USERNAME_v: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: username,
          },
          HOSTNAME_v: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: hostname,
          },
          FRMCODE_v: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: formCode,
          },
          response_code: {
            type: oracledb.STRING,
            dir: oracledb.BIND_OUT,
          },
          response_mess: {
            type: oracledb.STRING,
            dir: oracledb.BIND_OUT,
          },
          // p_trans_type: {
          //   type: oracledb.STRING, dir: oracledb.BIND_IN, val: receipt_trans_type,
          // },
          // output_param: { type: oracledb.STRING, dir: oracledb.BIND_OUT }
        },

        function (err, result) {
          if (err) {
            throw err;
          }
          // return res.send(p)
          // console.log(batchNumber, "e no work");

          // console.log(batchNumber);
          if (result) {
            // console.log(username);

            // console.log(posting_machine_ip,"posting_machine_ip")
            if (result.outBinds.response_code === "777") {
              let message = result.outBinds.response_mess;
              response = {
                success: result.outBinds.response_code,
                message: message,
                errorCode: result.outBinds.response_code,
              };

              res.send(response);
            } else if (result.outBinds.response_code === "778") {
              let message = result.outBinds.response_mess;
              response = {
                success: result.outBinds.response_code,
                message: message,
                errorCode: result.outBinds.response_code,
              };

              res.send(response);
            } else if (result.outBinds.response_code === "779") {
              let message = result.outBinds.response_mess;
              response = {
                success: result.outBinds.response_code,
                message: message,
                errorCode: result.outBinds.response_code,
              };

              res.send(response);
            } else if (result.outBinds.response_code === "780") {
              let message = result.outBinds.response_mess;
              response = {
                success: result.outBinds.response_code,
                message: message,
                errorCode: result.outBinds.response_code,
              };

              res.send(response);
            } else if (result.outBinds.response_code === "000") {
              let message = result.outBinds.response_mess;
              response = {
                success: result.outBinds.response_code,
                message: message,
              };

              res.send(response);
            }
          }
        }
      );
    } catch (err) {
      throw err;
    }
  }
  applyChequeDepositForm();
});

app.post("/api/checkChequeNumber", (req, res) => {
  console.log("ghana");
  async function checkChequeNumber() {
    let con;

    try {
      con = await oracledb.getConnection({
        user: DB_USER,
        password: DB_PASSWORD,
        connectString: DB_CONNECTION_STRING,
        timeout: DB_CONNECTION_TIMEOUT,
      });
      // const ipAddress = getIPAddress().address;

      const debitAccount = req.body.debitAccount;
      const chequeNumber = req.body.chequeNumber;

      con.execute(
        "BEGIN prc_validate_cheque(:acct_link_v,:cheque_no_v,:reponse); END;",
        {
          acct_link_v: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: debitAccount,
          },
          cheque_no_v: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: chequeNumber,
          },
          reponse: {
            type: oracledb.STRING,
            dir: oracledb.BIND_OUT,
          },
        },

        function (err, result) {
          if (err) {
            throw err;
          }
          // return res.send(p)
          // console.log(debitAccount, "e no work");

          // console.log(debitAccount);
          if (result) {
            console.log(debitAccount);

            // console.log(posting_machine_ip,"posting_machine_ip")//////////
            if (
              result.outBinds.reponse?.includes("06508") ||
              result.outBinds.reponse?.includes("06949") ||
              result.outBinds.reponse?.includes("06950") ||
              result.outBinds.reponse?.includes("06951")
            ) {
              // result.outBinds.reponse === "ERR - 06508: This Cheque No is Invalid" ||
              let message = result.outBinds.reponse;
              response = {
                success: false,
                // credit_postings : p,
                message: message,
                // token_id: tokennumber(50),
              };

              res.send(response);
            } else {
              console.log(chequeNumber);

              let message = result.outBinds.reponse;

              response = {
                success: true,
                message: message,
                // token_id: tokennumber(50),
              };

              res.send(response);
            }
          }
        }
      );
    } catch (err) {
      throw err;
    }
  }
  checkChequeNumber();
});

app.get("/api/getBankCode", (req, res) => {
  console.log("suarez");
  async function getBankCode() {
    let con;

    try {
      con = await oracledb.getConnection({
        user: DB_USER,
        password: DB_PASSWORD,
        connectString: DB_CONNECTION_STRING,
        timeout: DB_CONNECTION_TIMEOUT,
      });

      const data = await con.execute(`SELECT BANK_CODE FROM BANK`);

      let response = " ";
      response = data.rows[0][0];

      const bankCode = await con.execute(
        `SELECT CODE_DESC.ACTUAL_CODE, CODE_DESC.DESCRIPTION
              FROM CODE_DESC WHERE CODE_DESC.CODE_TYPE ='BNC' AND NVL(STATUS, 'Y')='Y'
              AND ACTUAL_CODE = ${response}
              `
      );

      let array = [];
      let arr0 = "";
      if (bankCode) {
        for (let i = 0; i < bankCode.rows.length; i++) {
          for (let x = 0; x < bankCode.metaData.length; x++) {
            arr0 +=
              '"' +
              [bankCode.metaData[x].name.toLowerCase()] +
              '" : "' +
              bankCode.rows[i][x] +
              '",';
          }

          array.push(JSON.parse("{" + arr0.replace(/,\s*$/, "") + "}"));
        }

        res.send(array);
      } else {
        res.send("Something went wrong... Nothing was returned!!");
      }
    } catch (err) {
      throw err;
    }
  }
  getBankCode();
});

app.post("/api/removeChequeDepositRow", (req, res) => {
  const seqNo = req.body.seqNo;

  async function removeChequeDepositRow() {
    let con;
    try {
      con = await oracledb.getConnection({
        user: DB_USER,
        password: DB_PASSWORD,
        connectString: DB_CONNECTION_STRING,
        timeout: DB_CONNECTION_TIMEOUT,
      });

      if (con) {
        // console.log("i say i dey insidee");
      }

      const data = await con.execute(
        `DELETE *
           FROM MULTI_CHQ
           WHERE SEQ_NO = '${seqNo}'`
      );

      let response = [];
      let arr0 = "";
      if (data) {
        for (let i = 0; i < data.rows.length; i++) {
          for (let x = 0; x < data.metaData.length; x++) {
            arr0 +=
              '"' +
              [data.metaData[x].name.toLowerCase()] +
              '" : "' +
              data.rows[i][x] +
              '",';
          }

          response.push(JSON.parse("{" + arr0.replace(/,\s*$/, "") + "}"));
        }

        res.send(response);
      } else {
        res.send("Something went wrong... Nothing was returned!!");
      }

      // res.send(data.rows);
    } catch (err) {
      console.log(err);
    }
  }
  removeChequeDepositRow();
});

//BATCH POSTING
app.get("/api/getBatchTransactionType", (req, res) => {
  async function getBatchTransactionType() {
    let con;
    try {
      con = await oracledb.getConnection({
        user: DB_USER,
        password: DB_PASSWORD,
        connectString: DB_CONNECTION_STRING,
        timeout: DB_CONNECTION_TIMEOUT,
      });

      if (con) {
        console.log("i dey inside");
      }

      const data = await con.execute(
        `select CODE_DESC DESCRIPTION,  A.SYS_CODE  ACTUAL_CODE , A.SYS_CODE 
        from   code_desc b, sysgen_transactions a 
       where   b.code_type = 'TR' and NVL(b.STATUS, 'Y')='Y' 
        and    a.actual_code = b.actual_code 
        AND A.SYS_CODE in (SELECT tr_code FROM batch_transcode) 
           order by CODE_DESC
        `
      );

      let response = [];
      let arr0 = "";
      if (data) {
        for (let i = 0; i < data.rows.length; i++) {
          for (let x = 0; x < data.metaData.length; x++) {
            arr0 +=
              '"' +
              [data.metaData[x].name.toLowerCase()] +
              '" : "' +
              data.rows[i][x] +
              '",';
          }

          response.push(JSON.parse("{" + arr0.replace(/,\s*$/, "") + "}"));
        }

        res.send(response);
      } else {
        res.send("Something went wrong... Nothing was returned!!");
      }

      // res.send(data.rows);
    } catch (err) {
      console.log(err);
    }
  }
  getBatchTransactionType();
});

//ENQUIRIES//
//CUSTOMER SEARCH BY NAME
app.post("/api/getCustomerDetails", (req, res) => {
  const customerName = req.body.customerName;
  const customerID = req.body.customerID;
  const phoneNumber = req.body.phoneNumber;
  const branch = req.body.branch;
  const relationshipType = req.body.relationshipType;
  const { from } = req.body;
  console.log(req.body, "resss");

  async function getDetails() {
    let con;
    try {
      con = await oracledb.getConnection({
        user: DB_USER,
        password: DB_PASSWORD,
        connectString: DB_CONNECTION_STRING,
        timeout: DB_CONNECTION_TIMEOUT,
      });

      if (con) {
        // console.log("i say i dey insidee");
      }

      let determinant = "";

      if (customerName) {
        if (determinant) {
          determinant += `AND UPPER(ACCOUNT_DESCRP) LIKE UPPER('%${customerName}%')`;
        } else {
          determinant += `WHERE UPPER(ACCOUNT_DESCRP) LIKE UPPER('%${customerName}%')`;
        }
      }
      if (customerID) {
        if (determinant) {
          determinant += `AND CUSTOMER_NUMBER LIKE '%${customerID}%'`;
        } else {
          determinant += `WHERE CUSTOMER_NUMBER LIKE '%${customerID}%'`;
        }
      }
      if (branch) {
        if (determinant) {
          determinant += `AND BRANCH = '${branch}'`;
        } else {
          determinant += `WHERE BRANCH = '${branch}'`;
        }
      }
      if (relationshipType) {
        if (determinant) {
          determinant += `AND PRODUCT = '${relationshipType}'`;
        } else {
          determinant += `WHERE PRODUCT = '${relationshipType}'`;
        }
      }
      if (phoneNumber) {
        if (determinant) {
          determinant += `AND phone = '${phoneNumber}'`;
        } else {
          determinant += `WHERE phone = '${phoneNumber}'`;
        }
      }

      const data = await con.execute(
        `SELECT ${
          from === "MAC" ? "distinct customer_name" : "customer_name"
        } , CUSTOMER_NUMBER, phone, BRANCH, PRODUCT
         FROM (
          SELECT ACCOUNT_DESCRP AS customer_name, CUSTOMER_NUMBER, NVL(PHONE,' ') AS phone, BRANCH, PRODUCT, ROWNUM AS rn
          FROM CASA_ACCT_LIST ${determinant}
        )
        WHERE rn <= 40
        ORDER BY CUSTOMER_NUMBER`
      );

      let response = [];
      let arr0 = "";
      if (data) {
        for (let i = 0; i < data.rows.length; i++) {
          for (let x = 0; x < data.metaData.length; x++) {
            arr0 +=
              '"' +
              [data.metaData[x].name.toLowerCase()] +
              '" : "' +
              data.rows[i][x] +
              '",';
          }

          response.push(JSON.parse("{" + arr0.replace(/,\s*$/, "") + "}"));
        }

        res.send(response);
      } else {
        res.send("Something went wrong... Nothing was returned!!");
      }

      // res.send(data.rows);
    } catch (err) {
      console.log(err);
    }
  }
  getDetails();
});

app.get("/api/getBranch", (req, res) => {
  async function getBranch() {
    let con;
    try {
      con = await oracledb.getConnection({
        user: DB_USER,
        password: DB_PASSWORD,
        connectString: DB_CONNECTION_STRING,
        timeout: DB_CONNECTION_TIMEOUT,
      });

      if (con) {
        console.log("i dey inside");
      }

      const data = await con.execute(
        `SELECT BR_DESCRIPTION,BR_CODE FROM TB_BRANCH
        ORDER BY BR_CODE`
      );

      res.send(data.rows);
    } catch (err) {
      res.send(err);
    }
  }
  getBranch();
});

app.get("/api/getLOVbranches", (req, res) => {
  async function getBranch() {
    let con;
    try {
      con = await oracledb.getConnection({
        user: DB_USER,
        password: DB_PASSWORD,
        connectString: DB_CONNECTION_STRING,
        timeout: DB_CONNECTION_TIMEOUT,
      });

      if (con) {
        console.log("i dey inside");
      }

      const data = await con.execute(
        `select br_description, br_code 
         from tb_branch 
         where length(br_code)>1
         order by br_code`
      );

      let response = [];
      let arr0 = "";

      if (data) {
        for (let i = 0; i < data.rows.length; i++) {
          for (let x = 0; x < data.metaData.length; x++) {
            arr0 +=
              '"' +
              [data.metaData[x]?.name?.toLowerCase()] +
              '" : "' +
              data.rows[i][x] +
              '",';
          }

          response.push(
            JSON.parse(
              "{" +
                arr0.replace(/(\r\n|\n|\r)/gm, "").replace(/,\s*$/, "") +
                "}"
            )
          );
        }

        res.send(response);
      } else {
        res.send("Something went wrong... Nothing was returned!!");
      }

      // res.send(data.rows);
    } catch (err) {
      res.send(err);
    }
  }
  getBranch();
});

app.post("/api/getInvidualRelationshipAmendment/CustomerInfo", (req, res) => {
  const customerID = req.body.customerID;

  async function getCustomerInfoInvidualRelationshipAmendment() {
    let con;
    try {
      con = await oracledb.getConnection({
        user: DB_USER,
        password: DB_PASSWORD,
        connectString: DB_CONNECTION_STRING,
        timeout: DB_CONNECTION_TIMEOUT,
      });

      if (con) {
        console.log("i dey inside");
      }

      const data = await con.execute(
        `SELECT CUSTOMER_NUMBER,nvl(SWIFT_CODE,' ') as swift_code,nvl(DECEASED,' ') as DECEASED,nvl(WHEREABOUTS_UNKNOWN,' ') as WHEREABOUTS_UNKNOWN,nvl(AR_AP_TRACKING,' ') as AR_AP_TRACKING,nvl(MT920,' ') as MT920,nvl(MT940,' ') as MT940,nvl(segment,' ') as segment,nvl(sub_segment,' ') as sub_segment,nvl(Type_of_customer,' ') as Type_of_customer,nvl(c_type,' ') as c_type,nvl(SECTOR,' ') as SECTOR,nvl(sub_sector,' ') as sub_sector,nvl(DOCUMENT_REQ_TYPE,' ') as document_req_type,customer_name 
        FROM vw_customer_all
        WHERE CUSTOMER_NUMBER = '${customerID}'`
      );

      let response = [];
      let arr0 = "";
      if (data) {
        for (let i = 0; i < data.rows.length; i++) {
          for (let x = 0; x < data.metaData.length; x++) {
            arr0 +=
              '"' +
              [data.metaData[x].name.toLowerCase()] +
              '" : "' +
              data.rows[i][x] +
              '",';
          }

          response.push(JSON.parse("{" + arr0.replace(/,\s*$/, "") + "}"));
        }
      } else {
        res.send("Something went wrong... Nothing was returned!!");
      }

      let customerType = response[0].c_type;
      let customerCategory = response[0].type_of_customer;
      let segment = response[0].segment;
      let subSegment = response[0].sub_segment;
      let sector = response[0].sector;
      let subSector = response[0].sub_sector;
      let documentReqType = response[0].document_req_type;

      const dataTwo = await con.execute(
        `SELECT ACTUAL_CODE, DESCRIPTION
          FROM code_desc
          WHERE ACTUAL_CODE = '${customerType}' AND code_type = 'CUT'
          UNION ALL
          SELECT ACTUAL_CODE, DESCRIPTION
          FROM code_desc
          WHERE ACTUAL_CODE = '${customerCategory}' AND code_type = 'CRT'
          UNION ALL
          SELECT ACTUAL_CODE, DESCRIPTION
          FROM code_desc
          WHERE ACTUAL_CODE = '${sector}' AND code_type = 'MAS'
          UNION ALL
          SELECT ACTUAL_CODE, DESCRIPTION
          FROM code_desc
          WHERE ACTUAL_CODE = '${subSector}' AND code_type = 'MAS'
          UNION ALL
          SELECT SEG_CODE, SEG_DESCRIPTION
          FROM VW_SEGRM_LIST
          WHERE SEG_CODE = '${segment}' AND SEG_LEVEL = '2'
          UNION ALL
          SELECT SEG_CODE, SEG_DESCRIPTION
          FROM VW_SEGRM_LIST
          WHERE SEG_CODE = '${subSegment}' AND SEG_LEVEL = '3'`
      );

      let response2 = [];
      let arr1 = "";
      if (dataTwo) {
        for (let i = 0; i < dataTwo.rows.length; i++) {
          for (let x = 0; x < dataTwo.metaData.length; x++) {
            arr1 +=
              '"' +
              [dataTwo.metaData[x].name.toLowerCase()] +
              '" : "' +
              dataTwo.rows[i][x] +
              '",';
          }

          response2.push(JSON.parse("{" + arr1.replace(/,\s*$/, "") + "}"));
        }
      } else {
        res.send("Something went wrong... Nothing was returned!!");
      }
      res.send({ response, response2 });
    } catch (err) {
      res.send(err);
    }
  }
  getCustomerInfoInvidualRelationshipAmendment();
});

app.post(
  "/api/getInvidualRelationshipAmendment/AntiMoneyLaundering",
  (req, res) => {
    const customerID = req.body.customerID;
    async function getAntiMoneyLaundering() {
      let con;
      try {
        con = await oracledb.getConnection({
          user: DB_USER,
          password: DB_PASSWORD,
          connectString: DB_CONNECTION_STRING,
          timeout: DB_CONNECTION_TIMEOUT,
        });

        if (con) {
          console.log("i dey inside");
        }

        const data = await con.execute(
          `SELECT nvl(cast(NO_WITHDRAWAL_MONTH as varchar(10)),' ') as NO_WITHDRAWAL_MONTH,
       nvl(cast(NO_DEPOSIT_MONTH as varchar(10)),' ') as NO_DEPOSIT_MONTH,
       nvl(cast(AMT_WITHDRAWAL_MONTH as varchar(10)),' ') as AMT_WITHDRAWAL_MONTH,
       nvl(cast(AMT_DEPOSIT_MONTH as varchar(10)),' ') as AMT_DEPOSIT_MONTH,
       nvl(cast(ANNUAL_INCOME as varchar(10)),' ') as ANNUAL_INCOME,
       nvl(cast(RISK_CODE as varchar(10)),' ') as RISK_CODE,
       nvl(cast(PEP as varchar(10)),' ') as PEP,
       st.CODE_TYPE,
       st.SOURCE_CODE,
       st.DESCRIPTION,
       st.SELECTED
FROM vw_aml
JOIN vw_source_trans st
  ON vw_aml.CUSTOMER_NUMBER = st.CUSTOMER_NUMBER
WHERE vw_aml.CUSTOMER_NUMBER = '${customerID}'`
        );
        let response = [];
        let arr0 = "";
        if (data) {
          for (let i = 0; i < data.rows.length; i++) {
            for (let x = 0; x < data.metaData.length; x++) {
              arr0 +=
                '"' +
                [data.metaData[x].name.toLowerCase()] +
                '" : "' +
                data.rows[i][x] +
                '",';
            }

            response.push(JSON.parse("{" + arr0.replace(/,\s*$/, "") + "}"));
          }

          res.send(response);
        } else {
          res.send("Something went wrong... Nothing was returned!!");
        }

        // res.send({response,secondData});
      } catch (err) {
        res.send(err);
      }
    }
    getAntiMoneyLaundering();
  }
);

app.post(
  "/api/getInvidualRelationshipAmendment/AntiMoneyLaundering/SourceOfFunds",
  (req, res) => {
    const codeType = req.body.codeType;
    const customerID = req.body.customerID;

    async function getSourceOfFunds() {
      let con;
      try {
        con = await oracledb.getConnection({
          user: DB_USER,
          password: DB_PASSWORD,
          connectString: DB_CONNECTION_STRING,
          timeout: DB_CONNECTION_TIMEOUT,
        });

        if (con) {
          console.log("i dey inside");
        }

        const data = await con.execute(
          `SELECT CODE_TYPE,SOURCE_CODE,DESCRIPTION,SELECTED
        FROM vw_source_trans
        WHERE CODE_TYPE = '${codeType}'
        AND CUSTOMER_NUMBER= '${customerID}'`
        );
        let response = [];
        let arr0 = "";
        if (data) {
          for (let i = 0; i < data.rows.length; i++) {
            for (let x = 0; x < data.metaData.length; x++) {
              arr0 +=
                '"' +
                [data.metaData[x].name.toLowerCase()] +
                '" : "' +
                data.rows[i][x] +
                '",';
            }

            response.push(JSON.parse("{" + arr0.replace(/,\s*$/, "") + "}"));
          }

          res.send(response);
        } else {
          res.send("Something went wrong... Nothing was returned!!");
        }
      } catch (err) {
        res.send(err);
      }
    }
    getSourceOfFunds();
  }
);

app.post(
  "/api/getInvidualRelationshipAmendment/RelationAccounts",
  (req, res) => {
    const customerID = req.body.customerID;

    async function getRelationAccounts() {
      let con;
      try {
        con = await oracledb.getConnection({
          user: DB_USER,
          password: DB_PASSWORD,
          connectString: DB_CONNECTION_STRING,
          timeout: DB_CONNECTION_TIMEOUT,
        });

        if (con) {
          console.log("i dey inside");
        }

        const data = await con.execute(
          `SELECT nvl(RELATION_NO,' ') as RELATION_NO,nvl(FIRST_NAME,' ') as FIRST_NAME,nvl(SURNAME,' ') as SURNAME,nvl(GENDER,' ') as GENDER,to_char(DATE_OF_BIRTH,'DD-MON-YYYY') as date_of_birth,nvl(mobile1,' ') as mobile1
        FROM vw_relation_enq
        WHERE CUSTOMER_NUMBER = '${customerID}'`
        );
        let response = [];
        let arr0 = "";
        if (data) {
          for (let i = 0; i < data.rows.length; i++) {
            for (let x = 0; x < data.metaData.length; x++) {
              arr0 +=
                '"' +
                [data.metaData[x].name.toLowerCase()] +
                '" : "' +
                data.rows[i][x] +
                '",';
            }

            response.push(JSON.parse("{" + arr0.replace(/,\s*$/, "") + "}"));
          }

          res.send(response);
        } else {
          res.send("Something went wrong... Nothing was returned!!");
        }
      } catch (err) {
        res.send(err);
      }
    }
    getRelationAccounts();
  }
);

app.post(
  "/api/getInvidualRelationshipAmendment/RelationDetails",
  (req, res) => {
    const relationID = req.body.relationID;

    async function getRelationDetails() {
      let con;
      try {
        con = await oracledb.getConnection({
          user: DB_USER,
          password: DB_PASSWORD,
          connectString: DB_CONNECTION_STRING,
          timeout: DB_CONNECTION_TIMEOUT,
        });

        if (con) {
          console.log("i dey inside");
        }

        const data = await con.execute(
          `SELECT NVL(FIRST_NAME,' ') AS FIRST_NAME,NVL(LAST_NAME,' ') AS MIDDLE_NAME,NVL(SURNAME,' ') AS SURNAME,NVL(ALIAS_NAME,' ') AS ALIAS_NAME,NVL(GENDER,' ') AS GENDER,NVL(MOBILE1,' ') AS MOBILE1,NVL(TITLE,' ') AS TITLE,NVL(PLACE_OF_BIRTH,' ') AS PLACE_OF_BIRTH,NVL(SUFFIX,' ') AS SUFFIX,NVL(EMAIL_ADDRESS,' ') AS EMAIL_ADDRESS,to_char(DATE_OF_BIRTH,'YYYY-MM-DD') AS DATE_OF_BIRTH,NVL(DORMICILE_COUNTRY,' ') AS DORMICILE_COUNTRY,RESIDENCE_STATUS,NVL(RESIDENCE_COUNTRY,' ') AS RESIDENCE_COUNTRY,NVL(NATIONALITY,' ') AS NATIONALITY,NVL(ID_TYPE,' ') AS ID_TYPE,NVL(ID_NUMBER,' ') AS ID_NUMBER,COSOLIDATED_STATEMENT,NVL(STAFF_CATEGORY,' ') AS STAFF_CATEGORY,NVL(CONSTITUTIONAL_CODE,' ') AS CONSTITUTIONAL_CODE,to_char(ID_EXPIRY_DATE,'YYYY-MM-DD') AS ID_EXPIRY_DATE,to_char(ID_ISSUE_DATE,'YYYY-MM-DD') AS ID_ISSUE_DATE,NVL(ID_ISSUED_AT,' ') AS ID_ISSUED_AT,NVL(RESIDENTIAL_ADDRESS,' ') AS RESIDENTIAL_ADDRESS,NVL(ID_ISSUED_AUTHORITY,' ') AS ID_ISSUED_AUTHORITY,NVL(MARITAL_STATUS,' ') AS MARITAL_STATUS,NVL(CAST(NUMBER_OF_DEPENDANTS AS VARCHAR(10)), ' ') AS NUMBER_OF_DEPENDANTS,NVL(NEXT_OF_KIN,' ') AS NEXT_OF_KIN,NVL(CAST(NUMBER_OF_CARS AS VARCHAR(10)), ' ') AS NUMBER_OF_CARS,NVL(MOTHERS_FNAME,' ') AS MOTHERS_FNAME,NVL(MOTHERS_MAIDEN_NAME,' ') AS MOTHERS_MAIDEN_NAME,NVL(MOTHERS_MI_NAME,' ') AS MOTHERS_MI_NAME,NVL(NEXT_OF_KIN_ADDRESS,' ') AS NEXT_OF_KIN_ADDRESS,NVL(NEXT_OF_KIN_PHONE,' ') AS NEXT_OF_KIN_PHONE,NVL(QUALIFICATION,' ') AS QUALIFICATION,NVL(PREFERED_ATM_LANG,' ') AS PREFERED_ATM_LANG,NVL(NATURE_OF_WORK,' ') AS NATURE_OF_WORK,NVL(PREFERED_PHONE_LANG,' ') AS PREFERED_PHONE_LANG 
        FROM vw_relation_enq 
        WHERE RELATION_NO = '${relationID}'`
        );
        let response = [];
        let arr0 = "";
        if (data) {
          for (let i = 0; i < data.rows.length; i++) {
            for (let x = 0; x < data.metaData.length; x++) {
              arr0 +=
                '"' +
                [data.metaData[x].name.toLowerCase()] +
                '" : "' +
                data.rows[i][x] +
                '",';
            }

            response.push(JSON.parse("{" + arr0.replace(/,\s*$/, "") + "}"));
          }

          // res.send(response);
        } else {
          res.send("Something went wrong... Nothing was returned!!");
        }

        let title = response[0].title;
        let suffix = response[0].title;
        let domicileCountry = response[0].dormicile_country;
        let residenceCountry = response[0].residence_country;
        let nationality = response[0].nationality;
        let qualification = response[0].residence_country;
        let workType = response[0].nature_of_work;
        let idType = response[0].id_type;
        let ATM = response[0].prefered_atm_lang;
        let Phone = response[0].prefered_phone_lang;

        const dataTwo = await con.execute(
          `SELECT ACTUAL_CODE , DESCRIPTION
         FROM code_desc
         WHERE ACTUAL_CODE = '${title}' AND code_type = 'SAL'
         UNION ALL
         SELECT ACTUAL_CODE, DESCRIPTION
         FROM code_desc
         WHERE ACTUAL_CODE = '${suffix}' AND code_type = 'TIT'
         UNION ALL
         SELECT ACTUAL_CODE, DESCRIPTION
         FROM code_desc
         WHERE ACTUAL_CODE = '${domicileCountry}' AND code_type = 'CON'
         UNION ALL
         SELECT ACTUAL_CODE, DESCRIPTION
         FROM code_desc
         WHERE ACTUAL_CODE = '${residenceCountry}' AND code_type = 'CON'
         UNION ALL
         SELECT ACTUAL_CODE, DESCRIPTION
         FROM code_desc
         WHERE ACTUAL_CODE = '${nationality}' AND code_type = 'NAT'
         UNION ALL
         SELECT ACTUAL_CODE, DESCRIPTION
         FROM code_desc
         WHERE ACTUAL_CODE = '${qualification}' AND code_type = 'QUA'
         UNION ALL
         SELECT ACTUAL_CODE, DESCRIPTION
         FROM code_desc
         WHERE ACTUAL_CODE = '${workType}' AND code_type = 'WTY'
         UNION ALL
         SELECT ACTUAL_CODE, DESCRIPTION
         FROM code_desc
         WHERE ACTUAL_CODE = '${idType}' AND code_type = 'DCP'
         UNION ALL
         SELECT ACTUAL_CODE, DESCRIPTION
         FROM code_desc
         WHERE ACTUAL_CODE = '${ATM}' AND code_type = 'LNG'
         UNION ALL
         SELECT ACTUAL_CODE, DESCRIPTION
         FROM code_desc
         WHERE ACTUAL_CODE = '${Phone}' AND code_type = 'LNG'
         `
        );

        let response2 = [];
        let arr1 = "";
        if (dataTwo) {
          for (let i = 0; i < dataTwo.rows.length; i++) {
            for (let x = 0; x < dataTwo.metaData.length; x++) {
              arr1 +=
                '"' +
                [dataTwo.metaData[x].name.toLowerCase()] +
                '" : "' +
                dataTwo.rows[i][x] +
                '",';
            }

            response2.push(JSON.parse("{" + arr1.replace(/,\s*$/, "") + "}"));
          }
        } else {
          res.send("Something went wrong... Nothing was returned!!");
        }
        res.send({ response, response2 });
      } catch (err) {
        res.send(err);
      }
    }
    getRelationDetails();
  }
);

app.post("/api/getInvidualRelationshipAmendment/AddressDetails", (req, res) => {
  const customerID = req.body.customerID;

  async function getAddressDetails() {
    let con;
    try {
      con = await oracledb.getConnection({
        user: DB_USER,
        password: DB_PASSWORD,
        connectString: DB_CONNECTION_STRING,
        timeout: DB_CONNECTION_TIMEOUT,
      });

      if (con) {
        console.log("i dey inside");
      }

      const data = await con.execute(
        `SELECT RELATION_NO,NVL(PO_ADDRESS1,' ') AS PO_ADDRESS1,NVL(PO_CITY,' ') AS PO_CITY,NVL(HOUSE_TYPE,' ') AS HOUSE_TYPE,NVL(PH_ADDRESS1,' ') AS PH_ADDRESS1,NVL(PH_ADDRESS2,' ') AS PH_ADDRESS2,NVL(LOCATION,' ') AS LOCATION 
        FROM vw_address_enq
        WHERE CUSTOMER_NUMBER = '${customerID}'`
      );
      let response = [];
      let arr0 = "";
      if (data) {
        for (let i = 0; i < data.rows.length; i++) {
          for (let x = 0; x < data.metaData.length; x++) {
            arr0 +=
              '"' +
              [data.metaData[x].name.toLowerCase()] +
              '" : "' +
              data.rows[i][x] +
              '",';
          }

          response.push(JSON.parse("{" + arr0.replace(/,\s*$/, "") + "}"));
        }

        res.send(response);
      } else {
        res.send("Something went wrong... Nothing was returned!!");
      }
    } catch (err) {
      res.send(err);
    }
  }
  getAddressDetails();
});

app.post("/api/getInvidualRelationshipAmendment/AddressInfo", (req, res) => {
  const relationID = req.body.relationID;

  async function getAddressDetails() {
    let con;
    try {
      con = await oracledb.getConnection({
        user: DB_USER,
        password: DB_PASSWORD,
        connectString: DB_CONNECTION_STRING,
        timeout: DB_CONNECTION_TIMEOUT,
      });

      if (con) {
        console.log("i dey inside");
      }

      const data = await con.execute(
        `SELECT NVL(E_MAIL,' ') AS EMAIL,NVL(PHONE1,' ') AS PHONE1,NVL(PHONE2,' ') AS PHONE2,NVL(HOUSE_TYPE,' ') AS HOUSE_TYPE,NVL(PH_ADDRESS2,' ') AS FLAT,NVL(NATURE_OF_OWNERSHIP,' ') AS NATURE_OF_OWNERSHIP,NVL(CAST(COST_OF_ACCOM AS VARCHAR(10)), ' ') AS COST_OF_ACCOM,STYED_SINCE,NVL(PH_ADDRESS3,' ') AS STREET_NAME,NVL(CAST(CURRENT_VALUE AS VARCHAR(10)),' ') AS CURRENT_VALUE,NVL(LOCATION,' ') AS LOCATION,NVL(PH_CITY,' ') AS PH_CITY,NVL(CAST(BALANCE_MORTGUAGE AS VARCHAR(10)),' ') AS BALANCE_MORTGUAGE,NVL(CAST(FAX_NO AS VARCHAR(10)), ' ') AS FAX_NO,NVL(PH_NEAREST_LAND_MARK,' ') AS PH_NEAREST_LAND_MARK,NVL(PH_ATTENTION_PARTY,' ') AS PH_ATTENTION_PARTY,NVL(PO_ADDRESS2,' ') AS PO_ADDRESS2,NVL(PO_ADDRESS1,' ') AS PO_ADDRESS1,NVL(POSTAL_ZIP_CODE,' ') as POSTAL_ZIP_CODE,NVL(COUNTRY_CODE,' ') AS COUNTRY_CODE,NVL(PO_CITY,' ') AS PO_CITY,NVL(PO_NEAREST_LAND_MARK,' ') AS PO_NEAREST_LAND_MARK,NVL(PO_ATTENTION_PARTY,' ') AS PO_ATTENTION_PARTY
        FROM vw_address_enq  
        WHERE RELATION_NO = '${relationID}'`
      );
      let response = [];
      let arr0 = "";
      if (data) {
        for (let i = 0; i < data.rows.length; i++) {
          for (let x = 0; x < data.metaData.length; x++) {
            arr0 +=
              '"' +
              [data.metaData[x].name.toLowerCase()] +
              '" : "' +
              data.rows[i][x] +
              '",';
          }

          response.push(JSON.parse("{" + arr0.replace(/,\s*$/, "") + "}"));
        }

        // res.send(response);
      } else {
        res.send("Something went wrong... Nothing was returned!!");
      }

      let houseType = response[0].house_type;
      let phCity = response[0].ph_city;
      let poCity = response[0].po_city;
      let countryCode = response[0].country_code;

      const dataTwo = await con.execute(
        `SELECT ACTUAL_CODE , DESCRIPTION
         FROM code_desc
         WHERE ACTUAL_CODE = '${houseType}' AND code_type = 'SAL'
         UNION ALL
         SELECT ACTUAL_CODE, DESCRIPTION
         FROM code_desc
         WHERE ACTUAL_CODE = '${phCity}' AND code_type = 'CTY'
         UNION ALL
         SELECT ACTUAL_CODE, DESCRIPTION
         FROM code_desc
         WHERE ACTUAL_CODE = '${poCity}' AND code_type = 'CTY'
         UNION ALL
         SELECT ACTUAL_CODE, DESCRIPTION
         FROM code_desc
         WHERE ACTUAL_CODE = '${countryCode}' AND code_type = 'CON'`
      );

      let response2 = [];
      let arr1 = "";
      if (dataTwo) {
        for (let i = 0; i < dataTwo.rows.length; i++) {
          for (let x = 0; x < dataTwo.metaData.length; x++) {
            arr1 +=
              '"' +
              [dataTwo.metaData[x].name.toLowerCase()] +
              '" : "' +
              dataTwo.rows[i][x] +
              '",';
          }

          response2.push(JSON.parse("{" + arr1.replace(/,\s*$/, "") + "}"));
        }
      } else {
        res.send("Something went wrong... Nothing was returned!!");
      }
      res.send({ response, response2 });
    } catch (err) {
      res.send(err);
    }
  }
  getAddressDetails();
});

app.post(
  "/api/getInvidualRelationshipAmendment/EmploymentDetails",
  (req, res) => {
    const customerID = req.body.customerID;

    async function getEmploymentDetails() {
      let con;
      try {
        con = await oracledb.getConnection({
          user: DB_USER,
          password: DB_PASSWORD,
          connectString: DB_CONNECTION_STRING,
          timeout: DB_CONNECTION_TIMEOUT,
        });

        if (con) {
          console.log("i dey inside");
        }

        const data = await con.execute(
          `SELECT RELATION_NO,NVL(CAST(EMPLOYMENT_CATEGORY AS VARCHAR(10)), ' ') AS EMPLOYMENT_CATEGORY,NVL(EMPLOYER_NAME,' ') AS EMPLOYER_NAME,NVL(POSITION_HELD,' ') AS POSITION_HELD,NVL(DEPARTMENT,' ') AS DEPARTMENT
        FROM VW_EMPLOYMENT_ENQ
        WHERE CUSTOMER_NUMBER = '${customerID}'`
        );
        let response = [];
        let arr0 = "";
        if (data) {
          for (let i = 0; i < data.rows.length; i++) {
            for (let x = 0; x < data.metaData.length; x++) {
              arr0 +=
                '"' +
                [data.metaData[x].name.toLowerCase()] +
                '" : "' +
                data.rows[i][x] +
                '",';
            }

            response.push(JSON.parse("{" + arr0.replace(/,\s*$/, "") + "}"));
          }

          res.send(response);
        } else {
          res.send("Something went wrong... Nothing was returned!!");
        }
      } catch (err) {
        res.send(err);
      }
    }
    getEmploymentDetails();
  }
);

app.post("/api/getInvidualRelationshipAmendment/EmploymentInfo", (req, res) => {
  const relationID = req.body.relationID;

  async function getEmploymentInfo() {
    let con;
    try {
      con = await oracledb.getConnection({
        user: DB_USER,
        password: DB_PASSWORD,
        connectString: DB_CONNECTION_STRING,
        timeout: DB_CONNECTION_TIMEOUT,
      });

      if (con) {
        console.log("i dey inside");
      }

      const data = await con.execute(
        `SELECT NVL(CAST(EMPLOYMENT_CATEGORY AS VARCHAR(10)), ' ') AS EMPLOYMENT_CATEGORY,NVL(CITY,' ') AS CITY,NVL(EMPLOYMENT_TYPE,' ') AS EMPLOYMENT_TYPE,NVL(EMPLOYER_NAME,' ') AS EMPLOYER_NAME,NVL(CAST(EMPLOYMENT_NO AS VARCHAR(10)), ' ') AS EMPLOYMENT_NO,FIXED_TERM_CONT,NVL(OTHERS,' ') AS OTHERS,NVL(CAST(FAX_NO AS VARCHAR(10)), ' ') AS FAX_NO,NVL(ADDRESS1,' ') AS ADDRESS1,NVL(ADDRESS2,' ') as ADDRESS2,NVL(LAND_MARK,' ') AS LAND_MARK,NVL(SALARY_DAY,' ') AS SALARY_DAY,NVL(CAST(SALARY_FREQ AS VARCHAR(10)), ' ') AS SALARY_FREQ,NVL(LOCATION,' ') AS LOCATION,NVL(CAST(SALARY_AMT AS VARCHAR(10)), ' ') AS SALARY_AMT,to_char(EMPLOYED_SINCE,'YYYY-MM-DD') AS EMPLOYED_SINCE,NVL(POSITION_HELD,' ') AS POSITION_HELD,to_char(DATE_OF_COMMENCEMENT,'YYYY-MM-DD') as date_began,to_char(END_DATE,'YYYY-MM-DD') as date_exited  
        FROM VW_EMPLOYMENT_ENQ
        WHERE RELATION_NO = '${relationID}'`
      );
      let response = [];
      let arr0 = "";
      if (data) {
        for (let i = 0; i < data.rows.length; i++) {
          for (let x = 0; x < data.metaData.length; x++) {
            arr0 +=
              '"' +
              [data.metaData[x].name.toLowerCase()] +
              '" : "' +
              data.rows[i][x] +
              '",';
          }

          response.push(JSON.parse("{" + arr0.replace(/,\s*$/, "") + "}"));
        }

        res.send(response);
      } else {
        res.send("Something went wrong... Nothing was returned!!");
      }
    } catch (err) {
      res.send(err);
    }
  }
  getEmploymentInfo();
});

app.post("/api/getInvidualRelationshipAmendment/AccountInfo", (req, res) => {
  const accountNumber = req.body.accountNumber;

  async function getAccountInfo() {
    let con;
    try {
      con = await oracledb.getConnection({
        user: DB_USER,
        password: DB_PASSWORD,
        connectString: DB_CONNECTION_STRING,
        timeout: DB_CONNECTION_TIMEOUT,
      });

      if (con) {
        console.log("i dey inside");
      }

      const data = await con.execute(
        `SELECT ACCOUNT_DESCRP,PROD_CODE,TO_CHAR (DATE_OPENED, 'YYYY-MM-DD') AS DATE_OPENED,
        nvl(CURRENCY_CODE,' ') as CURRENCY_CODE,
        TO_CHAR (DATE_OF_LAST_ACTIVITY, 'YYYY-MM-DD')
        AS DATE_OF_LAST_ACTIVITY,
        BRANCH_CODE,
        nvl(CAST(TRANS_COUNT AS VARCHAR(10)),' ') as TRANS_COUNT,
        nvl(SHORT_NAME,' ') as SHORT_NAME,
        nvl(VIEW_FLAG,' ') as VIEW_FLAG,
        STATUS_INDICATOR,
        nvl(CAST(CR_INT_RATE AS VARCHAR(10)),' ') as CR_INT_RATE,
        nvl(CAST(OD_INT_RATE AS VARCHAR(10)),' ') as OD_INT_RATE,
        nvl(CAST(INTEREST_ACCOUNT_NO AS VARCHAR(10)),' ') as INTEREST_ACCOUNT_NO,
        nvl(CAST(OD_ACCOUNT_NO AS VARCHAR(10)),' ') as OD_ACCOUNT_NO,
        nvl(CAST(CREDIT_INT_CODE AS VARCHAR(10)),' ') as CREDIT_INT_CODE,
        nvl(CAST(TRANS_COUNT AS VARCHAR(10)),' ') as DEBIT_INT_CODE,
        nvl(SECTOR,' ') as SECTOR,
        nvl(SUB_SECTOR,' ') as SUB_SECTOR,
        nvl(DELIVERY_METHOD,' ') as DELIVERY_METHOD,
        nvl(INSTITUTE_CLASS,' ') as INSTITUTE_CLASS,
        nvl(ISIC_1,' ') as ISIC_1,nvl(CAST(STATE_FREQ_DAYS AS VARCHAR(10)),' ') as STATE_FREQ_DAYS,
        nvl(CASH_FLAG,' ') as CASH_FLAG,
        nvl(CHQ_FLAG,' ') as CHQ_FLAG,
        nvl(CAST(INT_STATE_FREQ AS VARCHAR(10)),' ') as INT_STATE_FREQ,
        to_char(INT_NEXT_STATE_DATE,'YYYY-MM-DD') as INT_NEXT_STATE_DATE,
        nvl(CAST(NUMBER_STAT_REQD AS VARCHAR(10)),' ') as NUMBER_STAT_REQD,
        nvl(CAST(STATEMENT_CNT AS VARCHAR(10)),' ') as STATEMENT_CNT, 
        to_char(LAST_STAT_DATE,'YYYY-MM-DD') as last_statement_date,
        to_char(STATE_FREQ_DATE,'YYYY-MM-DD') as next_statement_date
      FROM VW_ACDET_TEMP
      WHERE ACCT_LINK = '${accountNumber}'`
      );
      let response = [];
      let arr0 = "";
      if (data) {
        for (let i = 0; i < data.rows.length; i++) {
          for (let x = 0; x < data.metaData.length; x++) {
            arr0 +=
              '"' +
              [data.metaData[x].name.toLowerCase()] +
              '" : "' +
              data.rows[i][x] +
              '",';
          }

          response.push(JSON.parse("{" + arr0.replace(/,\s*$/, "") + "}"));
        }

        // res.send(response);
      } else {
        res.send("Something went wrong... Nothing was returned!!");
      }

      let prodCode = response[0].prod_code;
      let currencyCode = response[0].currency_code;
      let branchCode = response[0].branch_code;
      let accountStatus = response[0].status_indicator;

      const dataTwo = await con.execute(
        `SELECT p.DESCRIPTION AS ProductDescription,
        cd1.ACTUAL_CODE AS CurrencyCode,
        cd1.DESCRIPTION AS CurrencyDescription,
        b.BR_DESCRIPTION AS BranchDescription,
        cd2.ACTUAL_CODE AS AccountStatusCode,
        cd2.DESCRIPTION AS AccountStatusDescription
 FROM TB_PRODUCT p
 JOIN code_desc cd1 ON cd1.ACTUAL_CODE = '${currencyCode}' AND cd1.code_type = 'CUR'
 JOIN tb_branch b ON b.BR_CODE = '${branchCode}'
 JOIN code_desc cd2 ON cd2.ACTUAL_CODE = '${accountStatus}' AND cd2.code_type = 'AMB'
 WHERE p.PROD_CODE = '${prodCode}'`
      );

      let response2 = [];
      let arr1 = "";
      if (dataTwo) {
        for (let i = 0; i < dataTwo.rows.length; i++) {
          for (let x = 0; x < dataTwo.metaData.length; x++) {
            arr1 +=
              '"' +
              [dataTwo.metaData[x].name.toLowerCase()] +
              '" : "' +
              dataTwo.rows[i][x] +
              '",';
          }

          response2.push(JSON.parse("{" + arr1.replace(/,\s*$/, "") + "}"));
        }
      } else {
        res.send("Something went wrong... Nothing was returned!!");
      }
      res.send({ response, response2 });
    } catch (err) {
      res.send(err);
    }
  }
  getAccountInfo();
});

app.post(
  "/api/getInvidualRelationshipAmendment/CustomerEnquiryInfo",
  (req, res) => {
    const customerNumber = req.body.customerNumber;

    async function getCustomerEnquiryInfo() {
      let con;
      try {
        con = await oracledb.getConnection({
          user: DB_USER,
          password: DB_PASSWORD,
          connectString: DB_CONNECTION_STRING,
          timeout: DB_CONNECTION_TIMEOUT,
        });

        if (con) {
          console.log("i dey inside");
        }

        const data = await con.execute(
          `SELECT CLIENT_NAME,to_char(CLIENT_SINCE,'YYYY-MM-DD') AS CLIENT_SINCE,nvl(ADDRESSLINE1,' ') as ADDRESSLINE1,to_char(DOB,'YYYY-MM-DD') AS DOB,nvl(PRIMARY_ID_TYPE,' ') as PRIMARY_ID_TYPE,nvl(MOTHER_MAIDEN_NAME,' ') as MOTHER_MAIDEN_NAME,nvl(PRIMARY_ID_NUMBER,' ') as PRIMARY_ID_NUMBER,nvl(RELATION_OFFICER,' ') as RELATION_OFFICER,nvl(HOME_PHONE,' ') as HOME_PHONE,nvl(EMAIL,' ') as EMAIL,nvl(WORK_PHONE,' ') as WORK_PHONE,SEGMENT,BRANCH_NAME,nvl(PEFERRED_NAME,' ') as PEFERRED_NAME,nvl(CONTACT_METHOD,' ') as CONTACT_METHOD
       FROM VW_CLIENT_SUMMARY
      WHERE CLIENT_ID = '${customerNumber}'`
        );
        let response = [];
        let arr0 = "";
        if (data) {
          for (let i = 0; i < data.rows.length; i++) {
            for (let x = 0; x < data.metaData.length; x++) {
              arr0 +=
                '"' +
                [data.metaData[x].name.toLowerCase()] +
                '" : "' +
                data.rows[i][x] +
                '",';
            }

            response.push(JSON.parse("{" + arr0.replace(/,\s*$/, "") + "}"));
          }

          res.send(response);
        } else {
          res.send("Something went wrong... Nothing was returned!!");
        }
      } catch (err) {
        res.send(err);
      }
    }
    getCustomerEnquiryInfo();
  }
);

//CUSTOMER SEARCH BY NUMBER
app.post("/api/getByCustomerNumber", (req, res) => {
  const customerNumber = req.body.customerNumber;
  async function getByCustomerNumber() {
    let con;
    try {
      con = await oracledb.getConnection({
        user: DB_USER,
        password: DB_PASSWORD,
        connectString: DB_CONNECTION_STRING,
        timeout: DB_CONNECTION_TIMEOUT,
      });

      if (con) {
        console.log("i dey inside");
      }

      const data = await con.execute(
        `SELECT distinct
        c.CUSTOMER_NUMBER,
        NVL(c.CUSTOMER_NAME,'N/A') as CUSTOMER_NAME,
        c.C_TYPE,
        c.TYPE_OF_CUSTOMER,
        c.ARM_CODE,
        nvl(a.PH_ADDRESS2,'N/A') as PH_ADDRESS2,
        nvl(a.PH_ADDRESS3,'N/A') as PH_ADDRESS3,
        gs.ACCT_LINK,
        gs.ACCOUNT_DESCRP,
        l.PRODUCT,
        l.CURRENCY,
        nvl(gs.SHBAL,'.00') AS cleared_balance,
        gs.SHBAL_REVAL AS local_equivalent
    FROM
        CUSTOMER c
    left outer JOIN TB_ADDRESS a ON c.CUSTOMER_NUMBER = a.CUSTOMER_NUMBER 
    JOIN CASA_ACCT_LIST l ON c.CUSTOMER_NUMBER = l.CUSTOMER_NUMBER
    JOIN GL_ACCOUNT_SUMMARY gs ON c.CUSTOMER_NUMBER = gs.CUSTOMER_NUMBER 
     WHERE
    c.CUSTOMER_NUMBER = '${customerNumber}' and  gs.acct_link = l.acct_link`
      );

      let response = [];
      let arr0 = "";
      if (data) {
        for (let i = 0; i < data.rows.length; i++) {
          for (let x = 0; x < data.metaData.length; x++) {
            arr0 +=
              '"' +
              [data.metaData[x].name.toLowerCase()] +
              '" : "' +
              data.rows[i][x] +
              '",';
          }

          response.push(JSON.parse("{" + arr0.replace(/,\s*$/, "") + "}"));
        }

        // res.send(response);
      } else {
        res.send("Something went wrong... Nothing was returned!!");
      }

      let customerType = response[0].c_type;
      let customerCategory = response[0].type_of_customer;
      let armCode = response[0].arm_code;

      // SELECT ARM_NAME FROM TBL_ARM WHERE ARM_CODE='';
      const dataTwo = await con.execute(
        `SELECT cd1.DESCRIPTION AS CustomerTypeDescription,
          cd2.DESCRIPTION AS CustomerCategoryDescription,
          a.ARM_CODE,
          NVL(a.ARM_NAME,'N/A') AS ARM_NAME
   FROM code_desc cd1
   JOIN code_desc cd2 ON cd2.CODE_TYPE = 'CRT' AND cd2.ACTUAL_CODE = '${customerCategory}'
   LEFT OUTER JOIN TBL_ARM a ON a.ARM_CODE = '${armCode}'
   WHERE cd1.CODE_TYPE = 'CUT' AND cd1.ACTUAL_CODE = '${customerType}'`
      );

      let response2 = [];
      let arr1o = "";
      if (dataTwo) {
        for (let i = 0; i < dataTwo.rows.length; i++) {
          for (let x = 0; x < dataTwo.metaData.length; x++) {
            arr1o +=
              '"' +
              [dataTwo.metaData[x].name.toLowerCase()] +
              '" : "' +
              dataTwo.rows[i][x] +
              '",';
          }

          response2.push(JSON.parse("{" + arr1o.replace(/,\s*$/, "") + "}"));
        }
      } else {
        res.send("Something went wrong... Nothing was returned!!");
      }

      const loan = await con.execute(
        `SELECT ACCT_LINK,ACCOUNT_DESCRP,DESCRIPTION,CURR_ISO_CODE,SHADOW_BALANCE_TODAY,FACILITY_NO 
    FROM vw_loan 
            WHERE CUSTOMER_NUMBER = '${customerNumber}'`
      );

      let loanResponse = [];
      let arr1 = "";
      if (loan) {
        for (let i = 0; i < loan.rows.length; i++) {
          for (let x = 0; x < loan.metaData.length; x++) {
            arr1 +=
              '"' +
              [loan.metaData[x].name.toLowerCase()] +
              '" : "' +
              loan.rows[i][x] +
              '",';
          }

          loanResponse.push(JSON.parse("{" + arr1.replace(/,\s*$/, "") + "}"));
        }

        // res.send(response);
      } else {
        res.send("Something went wrong... Nothing was returned!!");
      }

      const investment = await con.execute(
        `SELECT ACCT_LINK as account_number,ACCOUNT_DESCRP as account_description,DESCRIPTION as product,CURR_ISO_CODE as currency,SHADOW_BALANCE_TODAY as balance,DEAL_NO as deal_number
          FROM vw_fix 
          WHERE CUSTOMER_NUMBER ='${customerNumber}'`
      );

      let investmentResponse = [];
      let arr2 = "";
      if (investment) {
        for (let i = 0; i < investment.rows.length; i++) {
          for (let x = 0; x < investment.metaData.length; x++) {
            arr2 +=
              '"' +
              [investment.metaData[x].name.toLowerCase()] +
              '" : "' +
              investment.rows[i][x] +
              '",';
          }

          investmentResponse.push(
            JSON.parse("{" + arr2.replace(/,\s*$/, "") + "}")
          );
        }

        // res.send(response);
      } else {
        res.send("Something went wrong... Nothing was returned!!");
      }

      const trade = await con.execute(
        `SELECT CUST_NAME,DESCRIPTION,to_char(MATURITY_DATE,'DD-MON-YYYY') as expiry_date,CURRCODE as currency,DEAL_AMOUNT,CONTINGENT_AMT
           FROM vw_tradefin
          WHERE CUSTOMER_NUMBER = '${customerNumber}'`
      );

      let tradeResponse = [];
      let arr3 = "";
      if (trade) {
        for (let i = 0; i < trade.rows.length; i++) {
          for (let x = 0; x < trade.metaData.length; x++) {
            arr3 +=
              '"' +
              [trade.metaData[x].name.toLowerCase()] +
              '" : "' +
              trade.rows[i][x] +
              '",';
          }

          tradeResponse.push(JSON.parse("{" + arr3.replace(/,\s*$/, "") + "}"));
        }

        // res.send(response);
      } else {
        res.send("Something went wrong... Nothing was returned!!");
      }

      const gov = await con.execute(
        `SELECT INVEST_ID,PRODUCT,FACE_VALUE,COST_PRICE,UNEARN_DISCOUNT,AMORTISED,UNAMORTISED,to_char(EFFECTIVE_DATE,'DD-MON-YYYY') as effective_date,to_char(MATURITY_DATE,'DD-MON-YYYY') as MATURITY_DATE,TENOR_REMAIN 
          FROM vw_tb_bog_investment 
          WHERE CUSTOMER_ID= '${customerNumber}'`
      );

      let govResponse = [];
      let arr4 = "";
      if (gov) {
        for (let i = 0; i < gov.rows.length; i++) {
          for (let x = 0; x < gov.metaData.length; x++) {
            arr4 +=
              '"' +
              [gov.metaData[x].name.toLowerCase()] +
              '" : "' +
              gov.rows[i][x] +
              '",';
          }

          govResponse.push(JSON.parse("{" + arr4.replace(/,\s*$/, "") + "}"));
        }

        // res.send(response);
      } else {
        res.send("Something went wrong... Nothing was returned!!");
      }

      const memberStatus = await con.execute(
        `select get_cust_stat(${customerNumber}) as status from dual`
      );

      let memberResponse = [];
      let memberArray = "";

      if (memberStatus) {
        for (let i = 0; i < memberStatus.rows.length; i++) {
          for (let x = 0; x < memberStatus.metaData.length; x++) {
            memberArray +=
              '"' +
              [memberStatus.metaData[x].name.toLowerCase()] +
              '" : "' +
              memberStatus.rows[i][x] +
              '",';
          }

          memberResponse.push(
            JSON.parse("{" + memberArray.replace(/,\s*$/, "") + "}")
          );
        }

        res.send({
          response,
          loanResponse,
          investmentResponse,
          tradeResponse,
          govResponse,
          response2,
          memberResponse,
        });
      } else {
        res.send("Something went wrong... Nothing was returned!!");
      }
    } catch (err) {
      res.send(err);
    }
  }
  getByCustomerNumber();
});

app.post("/getOtherDetails", (req, res) => {
  const customerNumber = req.body.customerNumber;

  async function getOtherDetails() {
    let con;
    try {
      con = await oracledb.getConnection({
        user: DB_USER,
        password: DB_PASSWORD,
        connectString: DB_CONNECTION_STRING,
        timeout: DB_CONNECTION_TIMEOUT,
      });

      const data = await con.execute(
        `SELECT RELATION_NO,nvl(RELATION_NAME,'N/A') as RELATION_NAME,nvl(BUILDING_NAME,'N/A') as BUILDING_NAME,nvl(STREET_NAME,'N/A') as STREET_NAME,NVL(CAST(LOCATION AS VARCHAR(10)), 'N/A') AS location,NVL(CAST(MOBILE1 AS VARCHAR(10)), 'N/A') AS contact,NVL(CAST(EMAIL_ADDRESS AS VARCHAR(20)), 'N/A') AS email, to_char(DATE_OF_BIRTH,'DD-MON-YYYY') as date_established
         FROM VW_RELA_INFO 
         WHERE CUSTOMER_NUMBER = '${customerNumber}'`
      );

      let response = [];
      let arr0 = "";

      if (data) {
        for (let i = 0; i < data.rows.length; i++) {
          for (let x = 0; x < data.metaData.length; x++) {
            arr0 +=
              '"' +
              [data.metaData[x].name.toLowerCase()] +
              '" : "' +
              data.rows[i][x] +
              '",';
          }

          response.push(JSON.parse("{" + arr0.replace(/,\s*$/, "") + "}"));
        }

        res.send(response);
        console.log(response);
      } else {
        res.send("Something went wrong... Nothing was returned!!");
      }
    } catch (err) {
      res.send(err);
    }
  }
  getOtherDetails();
});

app.post("/getMemberStatus", (req, res) => {
  const accountNumber = req.body.accountNumber;
  console.log(req.body.accountNumber, "accountNumber");

  async function getMemberStatus() {
    let con;
    try {
      con = await oracledb.getConnection({
        user: DB_USER,
        password: DB_PASSWORD,
        connectString: DB_CONNECTION_STRING,
        timeout: DB_CONNECTION_TIMEOUT,
      });

      const data = await con.execute(
        `select get_cust_stat(${accountNumber}) as status from dual`
      );

      let response = [];
      let arr0 = "";

      if (data) {
        for (let i = 0; i < data.rows.length; i++) {
          for (let x = 0; x < data.metaData.length; x++) {
            arr0 +=
              '"' +
              [data.metaData[x].name.toLowerCase()] +
              '" : "' +
              data.rows[i][x] +
              '",';
          }

          response.push(JSON.parse("{" + arr0.replace(/,\s*$/, "") + "}"));
        }

        console.log(response);
        res.send(response);
        console.log(response);
      } else {
        res.send("Something went wrong... Nothing was returned!!");
      }
    } catch (err) {
      res.send(err);
    }
  }
  getMemberStatus();
});

//BALANCE ENQUIRY
app.post("/api/getBalance", (req, res) => {
  const accountNumber = req.body.accountNumber;
  console.log(req.body.accountNumber, "accountNumber");

  async function getBalanceEnquiry() {
    let con;
    try {
      con = await oracledb.getConnection({
        user: DB_USER,
        password: DB_PASSWORD,
        connectString: DB_CONNECTION_STRING,
        timeout: DB_CONNECTION_TIMEOUT,
      });

      const data = await con.execute(
        `SELECT 
    (SELECT NVL(CAST(vw_tas.DB_AMT AS VARCHAR(10)), ' ') as total_arrears
    FROM vw_ledger_enq vw_le 
    LEFT JOIN vw_total_arrears vw_tas ON vw_tas.ACCT_LINK = vw_le.ACCOUNT_NUMBER
    WHERE vw_le.ACCOUNT_NUMBER = '${accountNumber}') as total_arrears,
    (SELECT nvl(ud.DB_AMT,0) FROM unapp_debit ud WHERE ud.acct_link = '${accountNumber}') as unapp_debit,
    NVL(vw_al.POST_BOOKBAL, 0) as POST_BOOKBAL, 
    NVL(vw_al.POST_AV_BAL, 0) as POST_AV_BAL, 
    vw_le.STATUS_INDICATOR,
    GET_ACCT_STATUS_DESC(vw_le.STATUS_INDICATOR) as STATUS_DESC,
    vw_le.PROD_CODE,
    get_productdesc(vw_le.PROD_CODE) as PROD_DESC,
    vw_le.ACCOUNT_DESCRP, 
    vw_le.CURRENCY_CODE,
    get_curriso(vw_le.CURRENCY_CODE) as CURRENCY_DESC,
    vw_le.BRANCH_CODE,
    GET_BRANCHDESC(vw_le.BRANCH_CODE) as BRANCH_DESC,
    NVL(CAST(CUMULATIVE_INTEREST AS VARCHAR(10)),' ') as CUMULATIVE_INTEREST,
    NVL(CAST(OD_INTEREST_AMOUNT AS VARCHAR(10)),' ') as OD_INTEREST_AMOUNT,  
    vw_le.COT_AMOUNT, 
    NVL(CAST(ARREARS_INT AS VARCHAR(10)),' ') as ARREARS_INT, 
    NVL(CAST(CR_INT_RATE AS VARCHAR(10)),' ') as CR_INT_RATE, 
    NVL(CAST(OD_INT_RATE AS VARCHAR(10)),' ') as OD_INT_RATE, 
    NVL(CAST(COT_RATE AS VARCHAR(10)),' ') as COT_RATE, 
    NVL(CAST(ARREARS_INT_RATE AS VARCHAR(10)),' ') as ARREARS_INT_RATE, 
    NVL(CAST(OD_INTIN_SUSP AS VARCHAR(10)),' ') as OD_INTIN_SUSP, 
    NVL(CAST(PEN_INTIN_SUSP AS VARCHAR(10)),' ') as PEN_INTIN_SUSP, 
    NVL(CAST(ARREARS_INTIN_SUSP AS VARCHAR(10)),' ') as ARREARS_INTIN_SUSP, 
    vw_le.OVERDRAWN_LIMIT, 
    vw_le.LIEN_AMOUNT, 
    vw_le.SHADOW_UNCLEARED, 
    nvl(vw_le.SHADOW_BALANCE_TODAY, 0) as SHADOW_BALANCE_TODAY,
    to_char(DATE_OPENED,'YYYY-MM-DD') as date_opened,
    to_char(DATE_OF_LAST_ACTIVITY,'YYYY-MM-DD') as date_of_last_activity,
    to_char(DATE_ACCOUNT_CLOSED,'YYYY-MM-DD') as date_account_closed,
    to_char(DATE_OF_DORMANCY,'YYYY-MM-DD') as date_of_dormancy,
    to_char(LAST_DEBIT_DATE,'YYYY-MM-DD') as last_db_trans_date,
    to_char(LAST_DATE,'YYYY-MM-DD') as last_cr_trans_date,
    nvl(NO_OF_DEPOSITS, 0) as NO_OF_DEPOSITS,
    nvl(NO_OF_WITHDRAWALS, 0) as NO_OF_WITHDRAWALS,
    vw_le.ACCOUNT_NUMBER,
    vw_le.CUSTOMER_NUMBER,
    pkg_custAcctEnq_rt.fn_acctholder_rt(vw_le.acct_link) as acct_holder,
    pkg_custAcctEnq_rt.fn_custrisk_rt(vw_le.acct_link) as risk_code
    FROM VW_LEDGER_ENQ vw_le 
    INNER JOIN VW_ALL_LEDGER vw_al ON vw_al.acct_link = vw_le.ACCT_LINK 
    WHERE vw_le.ACCT_LINK = '${accountNumber}'`
      );

      let response = [];
      let arr0 = "";

      if (data) {
        for (let i = 0; i < data.rows.length; i++) {
          for (let x = 0; x < data.metaData.length; x++) {
            arr0 +=
              '"' +
              [data.metaData[x].name.toLowerCase()] +
              '" : "' +
              data.rows[i][x] +
              '",';
          }

          response.push(JSON.parse("{" + arr0.replace(/,\s*$/, "") + "}"));
        }

        console.log(response);
        res.send(response);
        console.log(response);
      } else {
        res.send("Something went wrong... Nothing was returned!!");
      }
    } catch (err) {
      console.log(err);
    }
  }
  getBalanceEnquiry();
});

app.post("/api/getTranss", (req, res) => {
  const accountNumber = req.body.accountNumber;
  const startDate = req.body.startDate;
  const endDate = req.body.endDate;
  const translimit = req.body.translimit;

  // console.log(req.body, "accountNumber");

  async function getTrans() {
    let con;
    try {
      con = await oracledb.getConnection({
        user: DB_USER,
        password: DB_PASSWORD,
        connectString: DB_CONNECTION_STRING,
        timeout: DB_CONNECTION_TIMEOUT,
      });

      const data = await con.execute(
        `SELECT pkg_custAcctEnq_rt.fn_acctopenbal_rt(ACCOUNT_NUMBER,POSTING_DATE) as opening_balance, to_char(POSTING_DATE,'DD-MON-YYYY') as POSTING_DATE, to_char(VALUE_DATE,'DD-MON-YYYY') as VALUE_DATE,TRANSACTION_DETAILS,NVL(DOCUMENT_REF,' ') AS DOCUMENT_REF,BATCH_NO,COALESCE(LOCAL_EQUIVALENT_DB,0) AS DEBIT,COALESCE(LOCAL_EQUIVALENT_CR,0) AS CREDIT,TRANS_NO
               FROM vw_actrans_all
               WHERE ACCOUNT_NUMBER = '${accountNumber}'
               AND POSTING_DATE BETWEEN '${startDate}' 
               AND '${endDate}'
               `
      );
      const balance = await con.execute(
        "BEGIN mbank_gen_estatement(:ac_num, :startdate, :enddate, :trans_limit, :rep_identifier, :error_msg); END;",
        {
          ac_num: accountNumber,
          startdate: startDate,
          enddate: endDate,
          trans_limit: translimit,
          rep_identifier: accountNumber,
          error_msg: {
            type: oracledb.STRING,
            dir: oracledb.BIND_OUT,
          },
        }
      );
      return res.send({ balance, data });
      let response = [];
      let arr0 = "";

      if (data) {
        for (let i = 0; i < data.rows.length; i++) {
          for (let x = 0; x < data.metaData.length; x++) {
            arr0 +=
              '"' +
              [data.metaData[x].name.toLowerCase()] +
              '" : "' +
              data.rows[i][x] +
              '",';
          }

          response.push(JSON.parse("{" + arr0.replace(/,\s*$/, "") + "}"));
        }

        res.send(response);

        //         let resp = [];
        //         let prevBalance;
        //         let count = 0

        // response.map((i)=>{

        // if(count > 0){
        //   resp.push({

        //     opening_balance: parseFloat(i.opening_balance + (i.credit - i.debit)),
        //     balance: parseFloat(prevBalance + (i.credit - i.debit)),
        //     posting_date: i.posting_date,
        //     value_date: i.value_date,
        //     transaction_details: i.transaction_details,
        //     document_ref: i.document_ref,
        //     batch_no: i.batch_no,
        //     debit: i.debit,
        //     credit: i.credit,
        //     trans_no: i.trans_no

        // })}else{
        //   prevBalance = i.opening_balance
        //   resp.push({

        //     opening_balance: parseFloat(i.opening_balance + (i.credit - i.debit)),
        //     balance: parseFloat(prevBalance + (i.credit - i.debit)),
        //     posting_date: i.posting_date,
        //     value_date: i.value_date,
        //     transaction_details: i.transaction_details,
        //     document_ref: i.document_ref,
        //     batch_no: i.batch_no,
        //     debit: i.debit,
        //     credit: i.credit,
        //     trans_no: i.trans_no

        // })
        // prevBalance += parseFloat(i.credit - i.debit)

        // count ++;
        // }

        // })

        // return res.send(resp)
        // for (let i = 0; i < response.length; i++) {

        //   return res.send(response[i])
        // return res.send(array[i][opening_balance])
        // return res.send("am herw")
        // return res.send([i])
        // const balance = array[i].opening_balance + (array[i].credit - array[i].debit);
        // const posting_date = array[i].posting_date;
        // const value_date = array[i].value_date;
        // const transaction_details = array[i].transaction_details;
        // const document_ref = array[i].document_ref;
        // const batch_no = array[i].batch_no;
        // const debit = array[i].debit;
        // const credit = array[i].credit;
        // const trans_no = array[i].trans_no;

        // return res.send(balance);

        //   resp.push({
        //     balance: balance,
        //     posting_date: posting_date,
        //     value_date: value_date,
        //     transaction_details: transaction_details,
        //     document_ref: document_ref,
        //     batch_no: batch_no,
        //     debit: debit,
        //     credit: credit,
        //     trans_no: trans_no,
        //   });
        // }

        // res.send(resp);
      } else {
        res.send("Something went wrong... Nothing was returned!!");
      } // res.send(data);
      // console.log(data.rows, "data");
    } catch (err) {
      res.send(err);
    }
  }
  getTrans();
});

app.post("/api/getProductDetails", (req, res) => {
  const currency = req.body.currency;
  const product = req.body.product;

  async function getProductDetails() {
    let con;
    try {
      con = await oracledb.getConnection({
        user: DB_USER,
        password: DB_PASSWORD,
        connectString: DB_CONNECTION_STRING,
        timeout: DB_CONNECTION_TIMEOUT,
      });

      if (con) {
        console.log("i dey inside");
      }

      const data = await con.execute(
        `select CHARGE_FREQUENCY,to_char(LAST_CHARGE_DATE,'YYYY-MM-DD') as LAST_CHARGE_DATE,to_char(NEXT_CHARGE_DATE,'YYYY-MM-DD') as NEXT_CHARGE_DATE,PENALTY_RATE,CHARGE_TO_NEGAVITE,LAST_WORK_DAY 
         from CHARGES_ACCRUALS
         where CURRENCY = '${currency}' and PROD_CODE = '${product}'
         `
      );

      let response = [];
      let arr0 = "";
      if (data) {
        for (let i = 0; i < data.rows.length; i++) {
          for (let x = 0; x < data.metaData.length; x++) {
            arr0 +=
              '"' +
              [data.metaData[x].name.toLowerCase()] +
              '" : "' +
              data.rows[i][x] +
              '",';
          }

          response.push(JSON.parse("{" + arr0.replace(/,\s*$/, "") + "}"));
        }

        res.send(response);
        console.log(response, "data");
      } else {
        res.send("Something went wrong... Nothing was returned!!");
      }
    } catch (err) {
      res.send(err);
    }
  }
  getProductDetails();
});

app.get("/api/getBaseRate", (req, res) => {
  async function getBaseRate() {
    let con;
    try {
      con = await oracledb.getConnection({
        user: DB_USER,
        password: DB_PASSWORD,
        connectString: DB_CONNECTION_STRING,
        timeout: DB_CONNECTION_TIMEOUT,
      });

      const data = await con.execute(
        `SELECT nvl(base_rate,0) as base_rate
         FROM parameters`
      );

      let response = [];
      let arr0 = "";

      if (data) {
        for (let i = 0; i < data.rows.length; i++) {
          for (let x = 0; x < data.metaData.length; x++) {
            arr0 +=
              '"' +
              [data.metaData[x].name.toLowerCase()] +
              '" : "' +
              data.rows[i][x] +
              '",';
          }

          response.push(JSON.parse("{" + arr0.replace(/,\s*$/, "") + "}"));
        }

        res.send(response);
      } else {
        res.send("Something went wrong... Nothing was returned!!");
      }

      // res.send(data);
      console.log(response, "data");
    } catch (err) {
      console.log(err);
    }
  }
  getBaseRate();
});

app.post("/api/getTransac", (req, res) => {
  const accountNumber = req.body.accountNumber;
  const startDate = req.body.startDate;
  const endDate = req.body.endDate;
  const translimit = req.body.translimit;

  // console.log(req.body, "accountNumber");

  async function getTrans() {
    const dates = new Date();
    const month = dates.getMonth() + 1; // getMonth() returns a zero-indexed value, so add 1 to get the actual month number
    const day = dates.getDate();
    const year = dates.getFullYear();
    const hours = dates.getHours();
    const minutes = dates.getMinutes();
    const seconds = dates.getSeconds();
    const ampm = hours >= 12 ? "PM" : "AM"; // determine whether it's AM or PM
    // format the date and time string
    const formattedDate = `${month}/${day}/${year} ${
      hours % 12
    }:${minutes}:${seconds} ${ampm}`;
    const date = new Date(formattedDate);
    console.log(date);
    let con;
    try {
      con = await oracledb.getConnection({
        user: DB_USER,
        password: DB_PASSWORD,
        connectString: DB_CONNECTION_STRING,
        timeout: DB_CONNECTION_TIMEOUT,
      });

      const balance = await con.execute(
        "BEGIN pkg_CustAcctEnq_rt.PRC_gen_statement_rt(:ac_num, :startdate, :enddate, :trans_limit, :rep_identifier, :error_msg); END;",
        {
          ac_num: accountNumber,
          startdate: startDate,
          enddate: endDate,
          trans_limit: translimit,
          rep_identifier: accountNumber,
          error_msg: {
            type: oracledb.STRING,
            dir: oracledb.BIND_OUT,
          },
        }
      );

      const data = await con.execute(
        `SELECT to_char(POST_DATE,'DD-MON-YYYY') as posting_date,to_char(VALUE_DATE,'DD-MON-YYYY') as value_date,TRANSACTION_DETAILS as transaction_details,DOCUMENT_REF as document_ref,BATCH_NO as batch_no,NVL(CAST(AMOUNT_DEBIT AS VARCHAR(10)), ' ') AS debit,NVL(CAST(AMOUNT_CREDIT AS VARCHAR(10)), ' ') as credit,BALANCE as balance,TRANS_NO FROM VW_INT_STATEMENT_rt WHERE ACC_TRANS = '${accountNumber}' AND TRUNC(POST_DATE) BETWEEN '${startDate}'  AND '${endDate}' ORDER BY TRANS_NO`
      );
      // return res.send(balance)
      let response = [];
      let arr0 = "";

      if (data) {
        for (let i = 0; i < data.rows.length; i++) {
          for (let x = 0; x < data.metaData.length; x++) {
            arr0 +=
              '"' +
              [data.metaData[x].name.toLowerCase()] +
              '" : "' +
              data.rows[i][x] +
              '",';
          }

          response.push(JSON.parse("{" + arr0.replace(/,\s*$/, "") + "}"));
        }

        res.send({ balance, response });

        //         let resp = [];
        //         let prevBalance;
        //         let count = 0

        // response.map((i)=>{

        // if(count > 0){
        //   resp.push({

        //     opening_balance: parseFloat(i.opening_balance + (i.credit - i.debit)),
        //     balance: parseFloat(prevBalance + (i.credit - i.debit)),
        //     posting_date: i.posting_date,
        //     value_date: i.value_date,
        //     transaction_details: i.transaction_details,
        //     document_ref: i.document_ref,
        //     batch_no: i.batch_no,
        //     debit: i.debit,
        //     credit: i.credit,
        //     trans_no: i.trans_no

        // })}else{
        //   prevBalance = i.opening_balance
        //   resp.push({

        //     opening_balance: parseFloat(i.opening_balance + (i.credit - i.debit)),
        //     balance: parseFloat(prevBalance + (i.credit - i.debit)),
        //     posting_date: i.posting_date,
        //     value_date: i.value_date,
        //     transaction_details: i.transaction_details,
        //     document_ref: i.document_ref,
        //     batch_no: i.batch_no,
        //     debit: i.debit,
        //     credit: i.credit,
        //     trans_no: i.trans_no

        // })
        // prevBalance += parseFloat(i.credit - i.debit)

        // count ++;
        // }

        // })

        // return res.send(resp)
        // for (let i = 0; i < response.length; i++) {

        //   return res.send(response[i])
        // return res.send(array[i][opening_balance])
        // return res.send("am herw")
        // return res.send([i])
        // const balance = array[i].opening_balance + (array[i].credit - array[i].debit);
        // const posting_date = array[i].posting_date;
        // const value_date = array[i].value_date;
        // const transaction_details = array[i].transaction_details;
        // const document_ref = array[i].document_ref;
        // const batch_no = array[i].batch_no;
        // const debit = array[i].debit;
        // const credit = array[i].credit;
        // const trans_no = array[i].trans_no;

        // return res.send(balance);

        //   resp.push({
        //     balance: balance,
        //     posting_date: posting_date,
        //     value_date: value_date,
        //     transaction_details: transaction_details,
        //     document_ref: document_ref,
        //     batch_no: batch_no,
        //     debit: debit,
        //     credit: credit,
        //     trans_no: trans_no,
        //   });
        // }

        // res.send(resp);
      } else {
        res.send("Something went wrong... Nothing was returned!!");
      } // res.send(data);
      // console.log(data.rows, "data");
    } catch (err) {
      res.send(err);
    }
  }
  getTrans();
});

app.post("/api/getTrans", (req, res) => {
  const accountNumber = req.body.accountNumber;
  const startDate = req.body.startDate;
  const endDate = req.body.endDate;

  // console.log(req.body, "accountNumber");

  async function getTrans() {
    let con;
    try {
      con = await oracledb.getConnection({
        user: "BANKOWNER",
        password: "pass1234",
        connectString: "192.168.1.60:9534/UNSGP",
      });

      const data = await con.execute(
        `SELECT pkg_custAcctEnq_rt.fn_acctopenbal_rt(ACCOUNT_NUMBER,POSTING_DATE) as opening_balance, to_char(POSTING_DATE,'DD-MON-YYYY') as POSTING_DATE, to_char(VALUE_DATE,'DD-MON-YYYY') as VALUE_DATE,TRANSACTION_DETAILS,NVL(DOCUMENT_REF,' ') AS DOCUMENT_REF,BATCH_NO,COALESCE(LOCAL_EQUIVALENT_DB,0) AS DEBIT,COALESCE(LOCAL_EQUIVALENT_CR,0) AS CREDIT,TRANS_NO
             FROM vw_actrans_all
             WHERE ACCOUNT_NUMBER = '${accountNumber}'
             AND POSTING_DATE BETWEEN '${startDate}' 
             AND '${endDate}'
             `
      );

      let response = [];
      let arr0 = "";

      if (data) {
        for (let i = 0; i < data.rows.length; i++) {
          for (let x = 0; x < data.metaData.length; x++) {
            arr0 +=
              '"' +
              [data.metaData[x].name.toLowerCase()] +
              '" : "' +
              data.rows[i][x] +
              '",';
          }

          response.push(JSON.parse("{" + arr0.replace(/,\s*$/, "") + "}"));
        }

        res.send(response);

        //         let resp = [];
        //         let prevBalance;
        //         let count = 0

        // response.map((i)=>{

        // if(count > 0){
        //   resp.push({

        //     opening_balance: parseFloat(i.opening_balance + (i.credit - i.debit)),
        //     balance: parseFloat(prevBalance + (i.credit - i.debit)),
        //     posting_date: i.posting_date,
        //     value_date: i.value_date,
        //     transaction_details: i.transaction_details,
        //     document_ref: i.document_ref,
        //     batch_no: i.batch_no,
        //     debit: i.debit,
        //     credit: i.credit,
        //     trans_no: i.trans_no

        // })}else{
        //   prevBalance = i.opening_balance
        //   resp.push({

        //     opening_balance: parseFloat(i.opening_balance + (i.credit - i.debit)),
        //     balance: parseFloat(prevBalance + (i.credit - i.debit)),
        //     posting_date: i.posting_date,
        //     value_date: i.value_date,
        //     transaction_details: i.transaction_details,
        //     document_ref: i.document_ref,
        //     batch_no: i.batch_no,
        //     debit: i.debit,
        //     credit: i.credit,
        //     trans_no: i.trans_no

        // })
        // prevBalance += parseFloat(i.credit - i.debit)

        // count ++;
        // }

        // })

        // return res.send(resp)
        // for (let i = 0; i < response.length; i++) {

        //   return res.send(response[i])
        // return res.send(array[i][opening_balance])
        // return res.send("am herw")
        // return res.send([i])
        // const balance = array[i].opening_balance + (array[i].credit - array[i].debit);
        // const posting_date = array[i].posting_date;
        // const value_date = array[i].value_date;
        // const transaction_details = array[i].transaction_details;
        // const document_ref = array[i].document_ref;
        // const batch_no = array[i].batch_no;
        // const debit = array[i].debit;
        // const credit = array[i].credit;
        // const trans_no = array[i].trans_no;

        // return res.send(balance);

        //   resp.push({
        //     balance: balance,
        //     posting_date: posting_date,
        //     value_date: value_date,
        //     transaction_details: transaction_details,
        //     document_ref: document_ref,
        //     batch_no: batch_no,
        //     debit: debit,
        //     credit: credit,
        //     trans_no: trans_no,
        //   });
        // }

        // res.send(resp);
      } else {
        res.send("Something went wrong... Nothing was returned!!");
      }

      // res.send(data);
      // console.log(data.rows, "data");
    } catch (err) {
      res.send(err);
    }
  }
  getTrans();
});

//CREDIT ANALYSIS APIs

app.get("/api/get-credit-analysis-branch-lov", (req, res) => {
  let getCreditAnalysisBranch = async () => {
    try {
      const db = await oracledb.getConnection({
        user: DB_USER,
        password: DB_PASSWORD,
        connectString: DB_CONNECTION_STRING,
        timeout: DB_CONNECTION_TIMEOUT,
      });

      const response = [];
      let arr0 = "";

      // node native promisify
      const execute = util.promisify(db.execute).bind(db);

      const data = await execute(
        `SELECT ALL TB_BRANCH.BR_CODE AS VALUE,TB_BRANCH.BR_CODE || '-' || TB_BRANCH.BR_DESCRIPTION 
        AS LABEL FROM TB_BRANCH WHERE FLAG_STATUS='A'`
      );

      if (data) {
        for (let i = 0; i < data.rows.length; i++) {
          for (let x = 0; x < data.metaData.length; x++) {
            arr0 +=
              '"' +
              [data.metaData[x].name.toLowerCase()] +
              '" : "' +
              data.rows[i][x] +
              '",';
          }

          response.push(
            JSON.parse(
              "{" +
                arr0.replace(/(\r\n|\n|\r)/gm, "").replace(/,\s*$/, "") +
                "}"
            )
          );
        }

        res.send(response);
      } else {
        res.send("Something went wrong... Nothing was returned!!");
      }
    } finally {
      // conn.end();
    }
  };

  getCreditAnalysisBranch();
});

app.post("/api/get-credit-analysis-table-data", (req, res) => {
  const { customer_number, customer_name, branch_code, relation_number } =
    req.body;

  let getCreditAnalysisTableData = async () => {
    try {
      const db = await oracledb.getConnection({
        user: DB_USER,
        password: DB_PASSWORD,
        connectString: DB_CONNECTION_STRING,
        timeout: DB_CONNECTION_TIMEOUT,
      });

      const response = [];
      let arr0 = "";

      // node native promisify
      const execute = util.promisify(db.execute).bind(db);

      const query = `select customer_number,relation_no,customer_name,nvl(phone1,' ') as phone1, nvl(to_char(date_established, 'DD-MON-YYYY'), ' ') AS date_established ,agreed_amount,posted_by,ret_status
      from VW_RELATION_CREDIT where 
      customer_number like '%'||'${customer_number}'||'%'
      and customer_name like UPPER('%'||'${customer_name}'||'%')
      and branch_code like '%'||'${branch_code}'||'%' 
      and app_flag = 'N'
      and relation_no like '%'||'${relation_number}'||'%'`;

      const data = await execute(query);

      if (data) {
        for (let i = 0; i < data.rows.length; i++) {
          arr0 = ""; // Reset arr0 for each row
          for (let x = 0; x < data.metaData.length; x++) {
            arr0 +=
              '"' +
              data.metaData[x].name.toLowerCase() +
              '" : "' +
              data.rows[i][x] +
              '",';
          }

          response.push(
            JSON.parse(
              "{" +
                arr0.replace(/(\r\n|\n|\r)/gm, "").replace(/,\s*$/, "") +
                "}"
            )
          );
        }

        res.send(response);
      } else {
        res.send("Something went wrong... Nothing was returned!!");
      }

      await db.close();
    } catch (e) {
      console.error(e);
      res.status(500).send(e.toString());
    }
  };

  getCreditAnalysisTableData();
});

//customer summary for CREDIT ANALYSIS
app.post("/api/get-credit-analysis-customer-summary", (req, res) => {
  const { loan_app_no } = req.body;

  let getCreditAnalysisCustomerSummary = async () => {
    try {
      const db = await oracledb.getConnection({
        user: DB_USER,
        password: DB_PASSWORD,
        connectString: DB_CONNECTION_STRING,
        timeout: DB_CONNECTION_TIMEOUT,
      });

      const response = [];
      let arr0 = "";

      // node native promisify
      const execute = util.promisify(db.execute).bind(db);

      const query = `select customer_group, branch, sector, to_char(dob,'YYYY-MM-DD') as dob,nvl(business,' ') as business from VW_CUST_SUMMARY where loan_app_no = '${loan_app_no}'`;

      const data = await execute(query);

      if (data) {
        for (let i = 0; i < data.rows.length; i++) {
          arr0 = ""; // Reset arr0 for each row
          for (let x = 0; x < data.metaData.length; x++) {
            arr0 +=
              '"' +
              data.metaData[x].name.toLowerCase() +
              '" : "' +
              data.rows[i][x] +
              '",';
          }

          response.push(
            JSON.parse(
              "{" +
                arr0.replace(/(\r\n|\n|\r)/gm, "").replace(/,\s*$/, "") +
                "}"
            )
          );
        }

        res.send(response);
      } else {
        res.send("Something went wrong... Nothing was returned!!");
      }

      await db.close();
    } catch (e) {
      console.error(e);
      res.status(500).send(e.toString());
    }
  };

  getCreditAnalysisCustomerSummary();
});

/// CREDIT ANALYSIS TABLE (EXISTING FACILITY)///

app.post("/api/get-credit-analysis-existing-facility", (req, res) => {
  let getCreditAnalysisExistingFacility = async () => {
    const { customerNumber } = req.body;
    try {
      const db = await oracledb.getConnection({
        user: DB_USER,
        password: DB_PASSWORD,
        connectString: DB_CONNECTION_STRING,
        timeout: DB_CONNECTION_TIMEOUT,
      });

      const response = [];
      let arr0 = "";

      // node native promisify
      const execute = util.promisify(db.execute).bind(db);

      const query = `select fac_type, loan_ac,GET_ACCT_BAL(loan_ac) cur_balance,ccy,loan_amt,to_char(exp_date,'DD-MON-YYYY') as exp_date,customer_number from vw_facility_summary where customer_number ='${customerNumber}'`;

      const data = await execute(query);

      if (data) {
        for (let i = 0; i < data.rows.length; i++) {
          arr0 = ""; // Reset arr0 for each row
          for (let x = 0; x < data.metaData.length; x++) {
            arr0 +=
              '"' +
              data.metaData[x].name.toLowerCase() +
              '" : "' +
              data.rows[i][x] +
              '",';
          }

          response.push(
            JSON.parse(
              "{" +
                arr0.replace(/(\r\n|\n|\r)/gm, "").replace(/,\s*$/, "") +
                "}"
            )
          );
        }

        res.send(response);
      } else {
        res.send("Something went wrong... Nothing was returned!!");
      }

      await db.close();
    } catch (e) {
      console.error(e);
      res.status(500).send(e.toString());
    }
  };

  getCreditAnalysisExistingFacility();
});

/// CREDIT ANALYSIS TABLE (PROPOSED FACILITY)///
app.post("/api/get-credit-analysis-proposed-facility", (req, res) => {
  let getCreditAnalysisProposedFacility = async () => {
    const { customerNumber } = req.body;
    try {
      const db = await oracledb.getConnection({
        user: DB_USER,
        password: DB_PASSWORD,
        connectString: DB_CONNECTION_STRING,
        timeout: DB_CONNECTION_TIMEOUT,
      });

      const response = [];
      let arr0 = "";

      // node native promisify
      const execute = util.promisify(db.execute).bind(db);

      const query = `select fac_type, ccy, amount, period from vw_facility_app_summary where customer_number ='${customerNumber}'`;

      const data = await execute(query);

      if (data) {
        for (let i = 0; i < data.rows.length; i++) {
          arr0 = ""; // Reset arr0 for each row
          for (let x = 0; x < data.metaData.length; x++) {
            arr0 +=
              '"' +
              data.metaData[x].name.toLowerCase() +
              '" : "' +
              data.rows[i][x] +
              '",';
          }

          response.push(
            JSON.parse(
              "{" +
                arr0.replace(/(\r\n|\n|\r)/gm, "").replace(/,\s*$/, "") +
                "}"
            )
          );
        }

        res.send(response);
      } else {
        res.send("Something went wrong... Nothing was returned!!");
      }

      await db.close();
    } catch (e) {
      console.error(e);
      res.status(500).send(e.toString());
    }
  };
  getCreditAnalysisProposedFacility();
});

/// CREDIT ANALYSIS TABLE (CUSTOMER ACCOUNT STATISTICS)
app.post("/api/get-credit-analysis-proposed-facility", (req, res) => {
  let getCreditAnalysisCustomerAccountStatistics = async () => {
    const { customerNumber } = req.body;
    try {
      const db = await oracledb.getConnection({
        user: DB_USER,
        password: DB_PASSWORD,
        connectString: DB_CONNECTION_STRING,
        timeout: DB_CONNECTION_TIMEOUT,
      });

      const response = [];
      let arr0 = "";

      // node native promisify
      const execute = util.promisify(db.execute).bind(db);

      const query = `select fac_type, ccy, amount, period from vw_facility_app_summary where customer_number ='${customerNumber}'`;

      const data = await execute(query);

      if (data) {
        for (let i = 0; i < data.rows.length; i++) {
          arr0 = ""; // Reset arr0 for each row
          for (let x = 0; x < data.metaData.length; x++) {
            arr0 +=
              '"' +
              data.metaData[x].name.toLowerCase() +
              '" : "' +
              data.rows[i][x] +
              '",';
          }

          response.push(
            JSON.parse(
              "{" +
                arr0.replace(/(\r\n|\n|\r)/gm, "").replace(/,\s*$/, "") +
                "}"
            )
          );
        }

        res.send(response);
      } else {
        res.send("Something went wrong... Nothing was returned!!");
      }

      await db.close();
    } catch (e) {
      console.error(e);
      res.status(500).send(e.toString());
    }
  };
  getCreditAnalysisCustomerAccountStatistics();
});

app.post("/api/get-customer-account-statistics", (req, res) => {
  let getCustomerAccountStatistics = async () => {
    const { customerNumber, startDate, endDate } = req.body;
    try {
      const db = await oracledb.getConnection({
        user: DB_USER,
        password: DB_PASSWORD,
        connectString: DB_CONNECTION_STRING,
        timeout: DB_CONNECTION_TIMEOUT,
      });

      const response = [];
      let arr0 = "";

      // node native promisify
      const execute = util.promisify(db.execute).bind(db);

      const query = `select to_char(MONTH_DATE,'DD-MON-YYYY') AS MONTH_DATE,NO_CASA,HIGHEST_BALANCE,LOWEST_BALANCE,AVERAGE_BALANCE,DEBIT_TURNOVER,CREDIT_TURNOVER,NVL(CAST(COMMISSION AS VARCHAR(10)), ' ') AS COMMISSION,NVL(CAST(INTEREST AS VARCHAR(10)), ' ') AS INTEREST,NVL(CAST(COT AS VARCHAR(10)), ' ') AS COT
from vw_custstat_summ where customer_number ='${customerNumber}'`;

      const data = await execute(query);

      if (data) {
        for (let i = 0; i < data.rows.length; i++) {
          arr0 = ""; // Reset arr0 for each row
          for (let x = 0; x < data.metaData.length; x++) {
            arr0 +=
              '"' +
              data.metaData[x].name.toLowerCase() +
              '" : "' +
              data.rows[i][x] +
              '",';
          }

          response.push(
            JSON.parse(
              "{" +
                arr0.replace(/(\r\n|\n|\r)/gm, "").replace(/,\s*$/, "") +
                "}"
            )
          );
        }

        res.send(response);
      } else {
        res.send("Something went wrong... Nothing was returned!!");
      }

      await db.close();
    } catch (e) {
      console.error(e);
      res.status(500).send(e.toString());
    }
  };
  getCustomerAccountStatistics();
});

app.get("/api/get-statistics-date", (req, res) => {
  // res.send("ghghg");

  async function getDates() {
    let con;
    try {
      con = await oracledb.getConnection({
        user: DB_USER,
        password: DB_PASSWORD,
        connectString: DB_CONNECTION_STRING,
        timeout: DB_CONNECTION_TIMEOUT,
      });

      const data = await con.execute(
        `SELECT to_char(start_year,'YYYY-MM-DD') as start_date,to_char(posting_date,'YYYY-MM-DD') as end_date
        FROM parameters
             `
      );

      // res.send(data);
      let response = [];
      let arr0 = "";

      if (data) {
        for (let i = 0; i < data.rows.length; i++) {
          for (let x = 0; x < data.metaData.length; x++) {
            arr0 +=
              '"' +
              [data.metaData[x].name.toLowerCase()] +
              '" : "' +
              data.rows[i][x] +
              '",';
          }
          // res.send(data);
          // res.send(arr0);
          response.push(JSON.parse("{" + arr0.replace(/,\s*$/, "") + "}"));
          res.send(response);
        }

        // res.send(response);
        return;
      } else {
        res.send("Something went wrong... Nothing was returned!!");
      }

      // res.send(data);
      // localStorage.setItem("codescs", data);
      // console.log(res)

      // localStorage.getItem("codescs");
      // console.log(data.rows)
    } catch (err) {
      res.send(err);
    }
  }
  getDates();
});

app.post("/api/getBatchTrans", (req, res) => {
  const batchNumber = req.body.batchNumber;

  async function getBatchTrans() {
    let con;
    try {
      con = await oracledb.getConnection({
        user: DB_USER,
        password: DB_PASSWORD,
        connectString: DB_CONNECTION_STRING,
        timeout: DB_CONNECTION_TIMEOUT,
      });

      if (con) {
        console.log("i dey inside");
      }

      const data = await con.execute(
        `SELECT ACCT_LINK,ACCOUNT_DESCRP,TRANSACTION_DETAILS,nvl(DOCUMENT_REF,' ') as DOCUMENT_REF,get_curriso(CURRENCY_CODE) as CURRENCY_CODE,NVL(CAST(LOCAL_EQUIVALENT_DB AS VARCHAR(10)), ' ') AS debit,NVL(CAST(LOCAL_EQUIVALENT_CR AS VARCHAR(10)), ' ') AS credit,APPROVED_BY FROM vw_batch_trans WHERE BATCH_NO = '${batchNumber}'`
      );

      let response = [];
      let arr0 = "";
      if (data) {
        for (let i = 0; i < data.rows.length; i++) {
          for (let x = 0; x < data.metaData.length; x++) {
            arr0 +=
              '"' +
              [data.metaData[x].name.toLowerCase()] +
              '" : "' +
              data.rows[i][x] +
              '",';
          }

          response.push(JSON.parse("{" + arr0.replace(/,\s*$/, "") + "}"));
        }

        res.send(response);
      } else {
        res.send("Something went wrong... Nothing was returned!!");
      }
    } catch (err) {
      res.send(err);
    }
  }
  getBatchTrans();
});

app.post("/api/getReturnedCheques", (req, res) => {
  const accountNumber = req.body.accountNumber;
  const startDate = req.body.startDate;
  const endDate = req.body.endDate;
  // const returnDate = req.body.returnDate;
  console.log(req.body.accountNumber, "accountNumber");

  async function getBalanceEnquiry() {
    let con;
    try {
      con = await oracledb.getConnection({
        user: DB_USER,
        password: DB_PASSWORD,
        connectString: DB_CONNECTION_STRING,
        timeout: DB_CONNECTION_TIMEOUT,
      });

      const data = await con.execute(
        `SELECT CHEQUE_NUMBER,to_char(RETURN_DATE,'YYYY-MON-DD') as return_date,REASON,AMOUNT 
        FROM vw_returned_cheque
        WHERE ACCT_LINK = '${accountNumber}' 
        AND TRUNC(RETURN_DATE)
        BETWEEN '${startDate}'
        AND '${endDate}'
       `
      );
      // AND RETURN_DATE = '${returnDate}'
      let response = [];
      let arr0 = "";

      if (data) {
        for (let i = 0; i < data.rows.length; i++) {
          for (let x = 0; x < data.metaData.length; x++) {
            arr0 +=
              '"' +
              [data.metaData[x].name.toLowerCase()] +
              '" : "' +
              data.rows[i][x] +
              '",';
          }

          response.push(JSON.parse("{" + arr0.replace(/,\s*$/, "") + "}"));
        }

        console.log(response);
        res.send(response);
        console.log(response);
      } else {
        res.send("Something went wrong... Nothing was returned!!");
      }
    } catch (err) {
      res.send(err);
    }
  }
  getBalanceEnquiry();
});

app.post("/api/getStatistics", (req, res) => {
  const accountNumber = req.body.accountNumber;
  const startDate = req.body.startDate;
  const endDate = req.body.endDate;
  // const returnDate = req.body.returnDate;
  console.log(req.body.accountNumber, "accountNumber");

  async function getStatistics() {
    let con;
    try {
      con = await oracledb.getConnection({
        user: DB_USER,
        password: DB_PASSWORD,
        connectString: DB_CONNECTION_STRING,
        timeout: DB_CONNECTION_TIMEOUT,
      });

      const data = await con.execute(
        `  SELECT to_char(MONTH_DATE,'YYYY-MON-DD') AS MONTH_DATE,nvl(HIGHEST_BALANCE,'') as HIGHEST_BALANCE,nvl(LOWEST_BALANCE,'') as LOWEST_BALANCE,nvl(AVERAGE_BALANCE,'') as AVERAGE_BALANCE,nvl(DEBIT_TURNOVER,'') as DEBIT_TURNOVER,nvl(CREDIT_TURNOVER,'') as CREDIT_TURNOVER,nvl(COT,'') as COT,nvl(COMMISSION,'') as COMMISSION,nvl(CAST(INTEREST AS VARCHAR(10)),'') as INTEREST 
         FROM STATISTICS_MONTH
        WHERE ACCT_LINK = '${accountNumber}' 
        AND TRUNC(MONTH_DATE)
        BETWEEN '${startDate}'
        AND '${endDate}'
       `
      );
      // AND RETURN_DATE = '${returnDate}'
      let response = [];
      let arr0 = "";

      if (data) {
        for (let i = 0; i < data.rows.length; i++) {
          for (let x = 0; x < data.metaData.length; x++) {
            arr0 +=
              '"' +
              [data.metaData[x].name.toLowerCase()] +
              '" : "' +
              data.rows[i][x] +
              '",';
          }

          response.push(JSON.parse("{" + arr0.replace(/,\s*$/, "") + "}"));
        }

        console.log(response);
        res.send(response);
        console.log(response);
      } else {
        res.send("Something went wrong... Nothing was returned!!");
      }
    } catch (err) {
      res.send(err);
    }
  }
  getStatistics();
});

app.post("/api/getServices", (req, res) => {
  const accountNumber = req.body.accountNumber;
  // const returnDate = req.body.returnDate;
  console.log(req.body.accountNumber, "accountNumber");

  async function getServices() {
    let con;
    try {
      con = await oracledb.getConnection({
        user: DB_USER,
        password: DB_PASSWORD,
        connectString: DB_CONNECTION_STRING,
        timeout: DB_CONNECTION_TIMEOUT,
      });

      const data = await con.execute(
        `  SELECT nvl(DESCRIPTION,'') as DESCRIPTION,nvl(NO,'') as NO,ACCT_LINK,ACCOUNT_DESCRP
        FROM vw_customer_status
        WHERE ACCT_LINK = '${accountNumber}' 
       `
      );
      // AND RETURN_DATE = '${returnDate}'
      let response = [];
      let arr0 = "";

      if (data) {
        for (let i = 0; i < data.rows.length; i++) {
          for (let x = 0; x < data.metaData.length; x++) {
            arr0 +=
              '"' +
              [data.metaData[x].name.toLowerCase()] +
              '" : "' +
              data.rows[i][x] +
              '",';
          }

          response.push(JSON.parse("{" + arr0.replace(/,\s*$/, "") + "}"));
        }

        console.log(response);
        res.send(response);
        console.log(response);
      } else {
        res.send("Something went wrong... Nothing was returned!!");
      }
    } catch (err) {
      res.send(err);
    }
  }
  getServices();
});

app.post("/api/getOpenBal", (req, res) => {
  const accountNumber = req.body.accountNumber;
  const startDate = req.body.startDate;

  async function getOpenBal() {
    let con;
    try {
      con = await oracledb.getConnection({
        user: DB_USER,
        password: DB_PASSWORD,
        connectString: DB_CONNECTION_STRING,
        timeout: DB_CONNECTION_TIMEOUT,
      });

      if (con) {
        console.log("i dey inside");
      }

      const data = await con.execute(
        `SELECT pkg_custAcctEnq_rt.fn_acctopenbal_rt(ACCOUNT_NUMBER,POSTING_DATE) as open_balance FROM vw_actrans_all WHERE ACCOUNT_NUMBER ='${accountNumber}' AND POSTING_DATE='${startDate}'`
      );

      // let response = [];
      // let arr0 = "";
      // if (data) {
      //   for (let i = 0; i < data.rows.length; i++) {
      //     for (let x = 0; x < data.metaData.length; x++) {
      //       arr0 +=
      //         '"' +
      //         [data.metaData[x].name.toLowerCase()] +
      //         '" : "' +
      //         data.rows[i][x] +
      //         '",';
      //     }

      //     response.push(JSON.parse("{" + arr0.replace(/,\s*$/, "") + "}"));
      //   }

      //   res.send(response);
      // } else {
      //   res.send("Something went wrong... Nothing was returned!!");
      // }
      res.send(data.rows[0]);
    } catch (err) {
      res.send(err);
    }
  }
  getOpenBal();
});

app.post("/getAccountBalanceDetails", (req, res) => {
  const accountNumber = req.body.accountNumber;
  console.log(req.body.accountNumber, "accountNumber");

  async function getAccountBalanceDetails() {
    let con;
    try {
      con = await oracledb.getConnection({
        user: DB_USER,
        password: DB_PASSWORD,
        connectString: DB_CONNECTION_STRING,
        timeout: DB_CONNECTION_TIMEOUT,
      });

      const data = await con.execute(
        `SELECT nvl(ACCOUNT_NUMBER,'') as ACCOUNT_NUMBER,nvl(ACCT_CLASS,' ') as ACCT_CLASS,nvl(ACCOUNT_NUMBER,' ') as ACCOUNT_NUMBER,nvl(PRODUCT_DESCRP,' ') as PRODUCT_DESCRP,to_char(DATE_OPENED,'DD-MON-YYYY') as date_opened,nvl(STATUS_DESCRP,' ') as STATUS_DESCRP,to_char(LAST_OD_INT_DATE,'DD-MON-YYYY') as last_od_date,nvl(CUSTOMER_NUMBER,' ') as CUSTOMER_NUMBER,to_char(DATE_OF_LAST_ACTIVITY,'DD-MON-YYYY') as date_of_last_activity,nvl(CUSTOMER_NUMBER,' ') as CUSTOMER_NUMBER,to_char(LAST_DEBIT_DATE,'DD-MON-YYYY') as last_debit_date,NO_OF_WITHDRAWALS,to_char(FIRST_DB_DATE,'DD-MON-YYYY') as first_debit_date,nvl(CREDIT_INT_CODE,' ') as CREDIT_INT_CODE,to_char(FIRST_CR_DATE,'DD-MON-YYYY') as first_cr_date,nvl(DEBIT_INT_CODE,' ') as DEBIT_INT_CODE,to_char(DATE_ACCOUNT_CLOSED,'DD-MON-YYYY') as date_account_closed,nvl(PROD_CODE,' ') as PROD_CODE,to_char(DATE_OF_DORMANCY,'DD-MON-YYYY') as date_of_dormancy,nvl(SECTOR,' ') as SECTOR,nvl(SUB_SECTOR,' ') as SUB_SECTOR FROM VW_LEDGER_ENQ WHERE ACCOUNT_NUMBER = '${accountNumber}'`
      );

      let response = [];
      let arr0 = "";

      if (data) {
        for (let i = 0; i < data.rows.length; i++) {
          for (let x = 0; x < data.metaData.length; x++) {
            arr0 +=
              '"' +
              [data.metaData[x].name.toLowerCase()] +
              '" : "' +
              data.rows[i][x] +
              '",';
          }

          response.push(JSON.parse("{" + arr0.replace(/,\s*$/, "") + "}"));
        }

        res.send(response);
        console.log(response);
      } else {
        res.send("Something went wrong... Nothing was returned!!");
      }
    } catch (err) {
      res.send(err);
    }
  }
  getAccountBalanceDetails();
});

app.get("/api/get-dates", (req, res) => {
  // res.send("ghghg");

  async function getDates() {
    let con;
    try {
      con = await oracledb.getConnection({
        user: DB_USER,
        password: DB_PASSWORD,
        connectString: DB_CONNECTION_STRING,
        timeout: DB_CONNECTION_TIMEOUT,
      });

      const data = await con.execute(
        `SELECT to_char(add_months(last_day(posting_date),-1)+1,'YYYY-MM-DD') as start_date,to_char(posting_date,'YYYY-MM-DD') as end_date
             FROM parameters
             `
      );

      // res.send(data);
      let response = [];
      let arr0 = "";

      if (data) {
        for (let i = 0; i < data.rows.length; i++) {
          for (let x = 0; x < data.metaData.length; x++) {
            arr0 +=
              '"' +
              [data.metaData[x].name.toLowerCase()] +
              '" : "' +
              data.rows[i][x] +
              '",';
          }
          // res.send(data);
          // res.send(arr0);
          response.push(JSON.parse("{" + arr0.replace(/,\s*$/, "") + "}"));
          res.send(response);
        }

        // res.send(response);
        return;
      } else {
        res.send("Something went wrong... Nothing was returned!!");
      }

      // res.send(data);
      // localStorage.setItem("codescs", data);
      // console.log(res)

      // localStorage.getItem("codescs");
      // console.log(data.rows)
    } catch (err) {
      res.send(err);
    }
  }
  getDates();
});

app.post("/api/getTransactionDetails", (req, res) => {
  const transNo = req.body.transNo;
  const key = req.body.key;
  const username = req.body.username;
  // console.log(req.body, "accountNumber");
  async function getTransactionDetails() {
    let con;
    try {
      con = await oracledb.getConnection({
        user: DB_USER,
        password: DB_PASSWORD,
        connectString: DB_CONNECTION_STRING,
        timeout: DB_CONNECTION_TIMEOUT,
      });
      if (key === "0") {
        // console.log("ghana")
        const data = await con.execute(
          `SELECT
          BATCH_NO,
          ACCT_LINK,
          GET_ACCTDESC(ACCT_LINK),
          FORM_CODE,
          AMOUNT,
          TRUNC(POSTING_SYS_DATE) || '-' || POSTING_SYS_TIME AS TIMESTAMP ,  
          APPROVED_BY 
        FROM
          VW_ACTRANS_ALL
        WHERE
          TRUNC(POSTING_SYS_DATE) = TRUNC(SYSDATE) and USER_NAME = '${username}' ORDER BY TIMESTAMP DESC    
        `
        );

        let response = [];
        let arr0 = "";

        if (data) {
          // for (let i = 0; i < data.rows.length; i++) {
          //   for (let x = 0; x < data.metaData.length; x++) {
          //     arr0 +=
          //       '"' +
          //       [data.metaData[x].name.toLowerCase()] +
          //       '" : "' +
          //       data.rows[i][x] +
          //       '",';
          //   }

          //   response.push(JSON.parse("{" + arr0.replace(/,\s*$/, "") + "}"));
          // }

          return res.send(data.rows);
        }
      }
      const data = await con.execute(
        `SELECT TRANS_NO,EXCHANGE_RATE,VOUCHER_NUMBER,TERMINAL_ID,TRANSACTION_TYPE,CONTRA_ACCOUNT,BRANCH_CODE,to_char(POSTING_SYS_DATE,'DD-MON-YYYY') AS POSTING_SYSTEM_DATE,to_char(POSTING_DATE,'DD-MON-YYYY') AS POSTING_DATE,POSTING_SYS_TIME,CHANNEL,to_char(APPROVAL_SYS_DATE,'DD-MON-YYYY') AS APPROVAL_SYSTEM_DATE,APPROVED_BY,APPROVAL_SYS_TIME
         FROM VW_ACTRANS_ALL 
         WHERE TRANS_NO = '${transNo}'
        `
      );

      let response = [];
      let arr0 = "";

      if (data) {
        for (let i = 0; i < data.rows.length; i++) {
          for (let x = 0; x < data.metaData.length; x++) {
            arr0 +=
              '"' +
              [data.metaData[x].name.toLowerCase()] +
              '" : "' +
              data.rows[i][x] +
              '",';
          }

          response.push(JSON.parse("{" + arr0.replace(/,\s*$/, "") + "}"));
        }

        res.send(response);
      } else {
        res.send("Something went wrong... Nothing was returned!!");
      }

      // res.send(data);
      // console.log(data.rows, "data");
    } catch (err) {
      res.send(err);
    }
  }
  getTransactionDetails();
});

app.post("/api/getLinkedCustomerNumbers", (req, res) => {
  const relationNumber = req.body.relationNumber;
  // const returnDate = req.body.returnDate;
  console.log(req.body.accountNumber, "accountNumber");

  async function getLinkedCustomerNumbers() {
    let con;
    try {
      con = await oracledb.getConnection({
        user: DB_USER,
        password: DB_PASSWORD,
        connectString: DB_CONNECTION_STRING,
        timeout: DB_CONNECTION_TIMEOUT,
      });

      const data = await con.execute(
        `SELECT RELATION_NO,CUSTOMER_NUMBER,nvl(POSTED_BY,' ') as POSTED_BY
        FROM TB_CUSTRELATION_LINK
        WHERE RELATION_NO = '${relationNumber}' 
       `
      );
      // AND RETURN_DATE = '${returnDate}'
      let response = [];
      let arr0 = "";

      if (data) {
        for (let i = 0; i < data.rows.length; i++) {
          for (let x = 0; x < data.metaData.length; x++) {
            arr0 +=
              '"' +
              [data.metaData[x].name.toLowerCase()] +
              '" : "' +
              data.rows[i][x] +
              '",';
          }

          response.push(JSON.parse("{" + arr0.replace(/,\s*$/, "") + "}"));
        }

        console.log(response);
        res.send(response);
        console.log(response);
      } else {
        res.send("Something went wrong... Nothing was returned!!");
      }
    } catch (err) {
      res.send(err);
    }
  }
  getLinkedCustomerNumbers();
});

app.post("/api/getBalanceBroughtForward", (req, res) => {
  const accountNumber = req.body.accountNumber;
  const startDate = req.body.startDate;
  console.log(req.body.accountNumber, "accountNumber");

  async function getBalanceBroughtForward() {
    let con;
    try {
      con = await oracledb.getConnection({
        user: DB_USER,
        password: DB_PASSWORD,
        connectString: DB_CONNECTION_STRING,
        timeout: DB_CONNECTION_TIMEOUT,
      });

      const data = await con.execute(
        `SELECT nvl(sum(nvl(local_equivalent_cr,0)-nvl(local_equivalent_db,0)),0) AS BAL_FORWARD
  		   FROM VW_ACTRANS_ALL 
  		   WHERE acct_link='${accountNumber}'
  		   AND posting_date < '${startDate}'`
      );
      // AND RETURN_DATE = '${returnDate}'
      let response = [];
      let arr0 = "";

      if (data) {
        for (let i = 0; i < data.rows.length; i++) {
          for (let x = 0; x < data.metaData.length; x++) {
            arr0 +=
              '"' +
              [data.metaData[x].name.toLowerCase()] +
              '" : "' +
              data.rows[i][x] +
              '",';
          }

          response.push(JSON.parse("{" + arr0.replace(/,\s*$/, "") + "}"));
        }

        console.log(response);
        res.send(response);
        console.log(response);
      } else {
        res.send("Something went wrong... Nothing was returned!!");
      }
    } catch (err) {
      res.send(err);
    }
  }
  getBalanceBroughtForward();
});

// three LOAN-STATEMENTS
//get loan repayments
app.post("/api/loan-penal-statements", (req, res) => {
  const { principal_account, start_date, end_date } = req.body;
  let getLoanRepayments = async () => {
    try {
      const db = await oracledb.getConnection({
        user: DB_USER,
        password: DB_PASSWORD,
        connectString: DB_CONNECTION_STRING,
        timeout: DB_CONNECTION_TIMEOUT,
      });

      const response = [];
      let arr0 = "";

      // node native promisify
      const execute = util.promisify(db.execute).bind(db);

      const data = await execute(
        `SELECT PRINCIPAL_ACCOUNT, TYPE_OF_ACCT, PRINC_IN_ARR, INT_IN_ARR, P_DAYS, PENAL_GRACE_DAYS, PENAL_ON, 
        PENALTY_RATE, INT_DAYS, PEN_CHARGE, PREV_PEN_DATE, POSTING_DATE 
        FROM VW_penal_STATE
        WHERE PRINCIPAL_ACCOUNT =:principal_account
        and posting_date between NVL(:SD,'1-JAN-1900') AND NVL(:ED,'31-DEC-9999')`,
        {
          principal_account,
          start_date,
          end_date,
        }
      );

      if (data) {
        for (let i = 0; i < data.rows.length; i++) {
          for (let x = 0; x < data.metaData.length; x++) {
            arr0 +=
              '"' +
              [data.metaData[x].name.toLowerCase()] +
              '" : "' +
              data.rows[i][x] +
              '",';
          }

          response.push(
            JSON.parse(
              "{" +
                arr0.replace(/(\r\n|\n|\r)/gm, "").replace(/,\s*$/, "") +
                "}"
            )
          );
        }

        res.send(response);
      } else {
        res.send("Something went wrong... Nothing was returned!!");
      }
    } finally {
      // conn.end();
    }
  };

  getLoanRepayments();
});

//get loan statements
app.post("/api/loan-print-statements", (req, res) => {
  const { account_number, user_id } = req.body;
  let getLoanRepayments = async () => {
    try {
      const db = await oracledb.getConnection({
        user: DB_USER,
        password: DB_PASSWORD,
        connectString: DB_CONNECTION_STRING,
        timeout: DB_CONNECTION_TIMEOUT,
      });

      const response = [];
      let arr0 = "";

      // node native promisify
      const execute = util.promisify(db.execute).bind(db);

      const data = await execute(
        `select
        voucher_date,VALUE_DATE,UPPER(TRANSACTION_DETAILS) TRANSACTION_DETAILS, 
        DOCUMENT_REF,LOCAL_EQUIVALENT_DB,
        LOCAL_EQUIVALENT_CR,
        BALANCE
        from STATEMENTS_NEW
        where ACCT_LINK = :account_number
        and REP_IDENTIFIER = :user_id
        ORDER BY VOUCHER_DATE,TRANS_NO`,
        {
          account_number,
          user_id,
        }
      );

      if (data) {
        for (let i = 0; i < data.rows.length; i++) {
          for (let x = 0; x < data.metaData.length; x++) {
            arr0 +=
              '"' +
              [data.metaData[x].name.toLowerCase()] +
              '" : "' +
              data.rows[i][x] +
              '",';
          }

          response.push(
            JSON.parse(
              "{" +
                arr0.replace(/(\r\n|\n|\r)/gm, "").replace(/,\s*$/, "") +
                "}"
            )
          );
        }

        res.send(response);
      } else {
        res.send("Something went wrong... Nothing was returned!!");
      }
    } finally {
      // conn.end();
    }
  };

  getLoanRepayments();
});

// get loan interest statements
app.post("/api/loan-print-interest-statement", (req, res) => {
  const { account_number, start_date, end_date } = req.body;
  let getLoanRepayments = async () => {
    try {
      const db = await oracledb.getConnection({
        user: DB_USER,
        password: DB_PASSWORD,
        connectString: DB_CONNECTION_STRING,
        timeout: DB_CONNECTION_TIMEOUT,
      });

      const response = [];
      let arr0 = "";

      // node native promisify
      const execute = util.promisify(db.execute).bind(db);

      const data = await execute(
        `select ACCT_LINK,INT_BAL,ACR_AMT_TDAY,RATE,POSTING_DATE,PREV_INT_DATE
        from vw_interestrep
        where acct_link like '%'||:ac||'%'
        and posting_date between NVL(:SD,'1-JAN-1900') AND NVL(:ED,'31-DEC-9999')`,
        {
          account_number,
          start_date,
          end_date,
        }
      );

      if (data) {
        for (let i = 0; i < data.rows.length; i++) {
          for (let x = 0; x < data.metaData.length; x++) {
            arr0 +=
              '"' +
              [data.metaData[x].name.toLowerCase()] +
              '" : "' +
              data.rows[i][x] +
              '",';
          }

          response.push(
            JSON.parse(
              "{" +
                arr0.replace(/(\r\n|\n|\r)/gm, "").replace(/,\s*$/, "") +
                "}"
            )
          );
        }

        res.send(response);
      } else {
        res.send("Something went wrong... Nothing was returned!!");
      }
    } finally {
      // conn.end();
    }
  };

  getLoanRepayments();
});

app.post("/getDebitLimit", (req, res) => {
  const accountNumber = req.body.accountNumber;
  console.log(req.body, "accountNumber");
  async function getDebitLimit() {
    let con;
    try {
      con = await oracledb.getConnection({
        user: DB_USER,
        password: DB_PASSWORD,
        connectString: DB_CONNECTION_STRING,
        timeout: DB_CONNECTION_TIMEOUT,
      });

      const data = await con.execute(
        `SELECT DESCRIPTION,UTILIZED_AMOUNT,FACILITY_AMOUNT,INTEREST_RATE,to_char(EFFECTIVE_DATE,'DD-MON-YYYY') as effective_date,to_char(EXPIRY_DATE,'DD-MON-YYYY') as expiry_date,to_char(UTILIZATION_EXPIRY,'DD-MON-YYYY') as ultilization_expiry,PENALTY_RATE,POSTED_BY 
        FROM vw_od_summary_list_enq 
        WHERE PRINCIPAL_ACCOUNT = '${accountNumber}'`
      );

      let response = [];
      let arr0 = "";

      if (data) {
        for (let i = 0; i < data.rows.length; i++) {
          for (let x = 0; x < data.metaData.length; x++) {
            arr0 +=
              '"' +
              [data.metaData[x].name.toLowerCase()] +
              '" : "' +
              data.rows[i][x] +
              '",';
          }

          response.push(JSON.parse("{" + arr0.replace(/,\s*$/, "") + "}"));
        }

        res.send(response);
      } else {
        res.send("Something went wrong... Nothing was returned!!");
      }

      // res.send(data);
      // console.log(data.rows, "data");
    } catch (err) {
      res.send(err);
    }
  }
  getDebitLimit();
});

app.post("/getCreditLimit", (req, res) => {
  const accountNumber = req.body.accountNumber;
  console.log(req.body, "accountNumber");
  async function getCreditLimit() {
    let con;
    try {
      con = await oracledb.getConnection({
        user: DB_USER,
        password: DB_PASSWORD,
        connectString: DB_CONNECTION_STRING,
        timeout: DB_CONNECTION_TIMEOUT,
      });

      const data = await con.execute(
        `SELECT LIEN_NUMBER,LIEN_AMOUNT,to_char(EXPIRY_DATE,'DD-MON-YYYY') as expiry_date,to_char(EFFECTIVE_DATE,'DD-MON-YYYY') as effective_date,BRANCH_CODE,POSTING_TERMINAL,COMMENTS
         FROM vw_lien_enq
        WHERE ACCT_LINK = '${accountNumber}'`
      );

      let response = [];
      let arr0 = "";

      if (data) {
        for (let i = 0; i < data.rows.length; i++) {
          for (let x = 0; x < data.metaData.length; x++) {
            arr0 +=
              '"' +
              [data.metaData[x].name.toLowerCase()] +
              '" : "' +
              data.rows[i][x] +
              '",';
          }

          response.push(JSON.parse("{" + arr0.replace(/,\s*$/, "") + "}"));
        }

        res.send(response);
      } else {
        res.send("Something went wrong... Nothing was returned!!");
      }

      // res.send(data);
      // console.log(data.rows, "data");
    } catch (err) {
      res.send(err);
    }
  }
  getCreditLimit();
});

app.post("/getUnclearedBalances", (req, res) => {
  const accountNumber = req.body.accountNumber;
  console.log(req.body, "accountNumber");
  async function getUnclearedBalances() {
    let con;
    try {
      con = await oracledb.getConnection({
        user: DB_USER,
        password: DB_PASSWORD,
        connectString: DB_CONNECTION_STRING,
        timeout: DB_CONNECTION_TIMEOUT,
      });

      const data = await con.execute(
        `SELECT to_char(VALUE_DATE,'DD-MON-YYYY') as value_date,TRANSACTION_DETAILS,NVL(CAST(LOCAL_EQUIVALENT_CR AS VARCHAR(10)), ' ') as LOCAL_EQUIVALENT_CR,NVL(CAST(LOCAL_EQUIVALENT_DB AS VARCHAR(10)), ' ') as LOCAL_EQUIVALENT_DB,BATCH_NO,BRANCH_CODE,CHANNEL 
        FROM transaction_query 
        WHERE ACCT_LINK = '${accountNumber}'`
      );

      let response = [];
      let arr0 = "";

      if (data) {
        for (let i = 0; i < data.rows.length; i++) {
          for (let x = 0; x < data.metaData.length; x++) {
            arr0 +=
              '"' +
              [data.metaData[x].name.toLowerCase()] +
              '" : "' +
              data.rows[i][x] +
              '",';
          }

          response.push(JSON.parse("{" + arr0.replace(/,\s*$/, "") + "}"));
        }

        res.send(response);
      } else {
        res.send("Something went wrong... Nothing was returned!!");
      }

      // res.send(data);
      // console.log(data.rows, "data");
    } catch (err) {
      res.send(err);
    }
  }
  getUnclearedBalances();
});

app.post("/getBlockedAmount", (req, res) => {
  const accountNumber = req.body.accountNumber;
  let sourceBranch = "";
  let finalArray = [];

  console.log(req.body, "accountNumber");
  async function getBlockedAmount() {
    let con;
    try {
      con = await oracledb.getConnection({
        user: DB_USER,
        password: DB_PASSWORD,
        connectString: DB_CONNECTION_STRING,
        timeout: DB_CONNECTION_TIMEOUT,
      });

      const data = await con.execute(
        `SELECT POSTED_BY,get_branchdesc(BRANCH_CODE) as branch,NARRATION,DB_AMT
        FROM unapp_trans 
        WHERE ACCT_LINK = '${accountNumber}'`
      );

      let response = [];
      let arr0 = "";

      if (data) {
        for (let i = 0; i < data.rows.length; i++) {
          for (let x = 0; x < data.metaData.length; x++) {
            arr0 +=
              '"' +
              [data.metaData[x].name.toLowerCase()] +
              '" : "' +
              data.rows[i][x] +
              '",';
          }

          response.push(JSON.parse("{" + arr0.replace(/,\s*$/, "") + "}"));
        }

        res.send(response);
      } else {
        res.send("Something went wrong... Nothing was returned!!");
      }

      // res.send(data);
      // console.log(data.rows, "data");
    } catch (err) {
      res.send(err);
    }
  }
  getBlockedAmount();
});

app.post("/getNoOfHolders", (req, res) => {
  const customerNumber = req.body.customerNumber;

  async function getNoOfHolders() {
    let con;
    try {
      con = await oracledb.getConnection({
        user: DB_USER,
        password: DB_PASSWORD,
        connectString: DB_CONNECTION_STRING,
        timeout: DB_CONNECTION_TIMEOUT,
      });

      const data = await con.execute(
        `SELECT NVL(RELATION_NO,' ') as RELATION_NO,NVL(CUSTOMER_NAME,' ') as CUSTOMER_NAME,DATE_ESTABLISHED,NVL(PHONE1,' ') as PHONE1,NVL(GENDER,' ') as GENDER,NVL(EMAIL_ADDRESS,' ') as EMAIL_ADDRESS 
         FROM VW_RELATION_DET
         WHERE CUSTOMER_NUMBER = '${customerNumber}'`
      );

      let response = [];
      let arr0 = "";

      if (data) {
        for (let i = 0; i < data.rows.length; i++) {
          for (let x = 0; x < data.metaData.length; x++) {
            arr0 +=
              '"' +
              [data.metaData[x].name.toLowerCase()] +
              '" : "' +
              data.rows[i][x] +
              '",';
          }

          response.push(JSON.parse("{" + arr0.replace(/,\s*$/, "") + "}"));
        }

        res.send(response);
      } else {
        res.send("Something went wrong... Nothing was returned!!");
      }

      // res.send(data);
      // console.log(data.rows, "data");
    } catch (err) {
      res.send(err);
    }
  }
  getNoOfHolders();
});

app.post("/getAccountStatus", (req, res) => {
  const accountNumber = req.body.accountNumber;
  console.log(req.body, "accountNumber");
  async function getAccountStatus() {
    let con;
    try {
      con = await oracledb.getConnection({
        user: DB_USER,
        password: DB_PASSWORD,
        connectString: DB_CONNECTION_STRING,
        timeout: DB_CONNECTION_TIMEOUT,
      });

      const data = await con.execute(
        `SELECT REASON,to_char(DATE_ALTERED,'DD-MON-YYYY') as date_altered,STATUS_DESC,BRANCH_DESC 
        FROM VW_BLOCKTEMPENQ
        WHERE ACCT_LINK = '${accountNumber}'`
      );

      let response = [];
      let arr0 = "";

      if (data) {
        for (let i = 0; i < data.rows.length; i++) {
          for (let x = 0; x < data.metaData.length; x++) {
            arr0 +=
              '"' +
              [data.metaData[x].name.toLowerCase()] +
              '" : "' +
              data.rows[i][x] +
              '",';
          }

          response.push(JSON.parse("{" + arr0.replace(/,\s*$/, "") + "}"));
        }

        res.send(response);
      } else {
        res.send("Something went wrong... Nothing was returned!!");
      }

      // res.send(data);
      // console.log(data.rows, "data");
    } catch (err) {
      res.send(err);
    }
  }
  getAccountStatus();
});

app.post("/api/getS", (req, res) => {
  const accountNumber = req.body.accountNumber;

  // console.log(req.body, "accountNumber");
  async function getS() {
    let con;
    try {
      con = await oracledb.getConnection({
        user: DB_USER,
        password: DB_PASSWORD,
        connectString: DB_CONNECTION_STRING,
        timeout: DB_CONNECTION_TIMEOUT,
      });

      const data = await con.execute(
        `SELECT pkg_custAcctEnq_rt.fn_openphoto_rt('${accountNumber}') as photo 
         FROM dual`
      );

      res.send(data.rows[0][0]);

      // let response = [];
      // let arr0 = "";

      // if (data) {
      //   for (let i = 0; i < data.rows.length; i++) {
      //     for (let x = 0; x < data.metaData.length; x++) {
      //       arr0 +=
      //         '"' +
      //         [data.metaData[x].name.toLowerCase()] +
      //         '" : "' +
      //         data.rows[i][x] +
      //         '",';
      //     }

      //     response.push(JSON.parse("{" + arr0.replace(/,\s*$/, "") + "}"));
      //   }

      //   res.send(response);
      // } else {
      //   res.send("Something went wrong... Nothing was returned!!");
      // }

      // res.send(data);
      // console.log(data.rows, "data");
    } catch (err) {
      res.send(err);
    }
  }
  getS();
});

app.post("/api/getSignVerification", async (req, res) => {
  async function blobToBase64(blob) {
    return new Promise((resolve, reject) => {
      const chunks = [];
      blob.on("data", (chunk) => {
        chunks.push(chunk instanceof Buffer ? chunk : Buffer.from(chunk));
      });
      blob.on("end", () => {
        const buffer = Buffer.concat(chunks);
        const base64 = buffer.toString("base64");
        resolve(base64);
      });
      blob.on("error", (err) => {
        reject(err);
      });
    });
  }

  try {
    const accno = req.body.accno;

    // Create a connection pool
    const connection = await oracledb.getConnection({
      user: DB_USER,
      password: DB_PASSWORD,
      connectString: DB_CONNECTION_STRING,
    });

    // Query the database for the blobs
    const result = await connection.execute(
      `SELECT ACCSIGN, PHOTO FROM IMAGE.TBLSIG_DETAILS WHERE ACCNO = '${accno}'`
    );

    if (result.rows.length === 0) {
      return res
        .status(404)
        .send("No signature found for the specified account number");
    }

    // Get the buffers from the result
    const photoBuffer = result.rows[0][1];
    const accsignBuffer = result.rows[0][0];

    // Convert the buffers to base64 strings
    const photoBase64 = await blobToBase64(photoBuffer);
    const accsignBase64 = await blobToBase64(accsignBuffer);

    // Send the base64 strings as the response
    res.json({
      photo: `data:image/jpeg;base64,${photoBase64}`,
      accsign: `data:image/jpeg;base64,${accsignBase64}`,
    });
  } catch (err) {
    console.log(err);
    res.status(500).send("Error getting sign verification");
  }
});

//GENERAL ACCOUNT DETAILS
app.post("/api/getGeneralAccountDetails", (req, res) => {
  const customerNumber = req.body.customerNumber;

  console.log(req.body, "customer Number");

  async function getGeneralAccountDetails() {
    let con;
    try {
      con = await oracledb.getConnection({
        user: DB_USER,
        password: DB_PASSWORD,
        connectString: DB_CONNECTION_STRING,
        timeout: DB_CONNECTION_TIMEOUT,
      });

      if (con) {
        // console.log("i say i dey insidee");
      }

      const data = await con.execute(
        `SELECT CUSTOMER_NAME as customer_name,ACCT_LINK as account_number FROM VW_CUSTOMER_SEARCH
        WHERE CUSTOMER_NO = '${customerNumber}'`
      );
      // let response = [];
      // let arr0 = "";
      // if (data) {
      //   for (let i = 0; i < data.rows.length; i++) {
      //     for (let x = 0; x < data.metaData.length; x++) {
      //       arr0 +=
      //         '"' +
      //         [data.metaData[x].name.toLowerCase()] +
      //         '" : "' +
      //         data.rows[i][x] +
      //         '",';
      //     }
      //     response.push(JSON.parse("{" + arr0.replace(/,\s*$/, "") + "}"));
      //     res.send(response);
      //     console.log(response);
      //   }
      //   return;
      // } else {
      //   res.send("Something went wrong... Nothing was returned!!");
      //   console.log("Something was Wrong")
      // }

      let response = [];
      let arr0 = "";
      if (data) {
        for (let i = 0; i < data.rows.length; i++) {
          for (let x = 0; x < data.metaData.length; x++) {
            arr0 +=
              '"' +
              [data.metaData[x].name.toLowerCase()] +
              '" : "' +
              data.rows[i][x] +
              '",';
          }

          response.push(JSON.parse("{" + arr0.replace(/,\s*$/, "") + "}"));
        }

        res.send(response);
      } else {
        res.send("Something went wrong... Nothing was returned!!");
      }

      // console.log(data , "data")
      // res.send(data.rows);
    } catch (err) {
      res.send(err);
    }
  }
  getGeneralAccountDetails();
});

app.post("/api/getMemberRelationDetails", (req, res) => {
  const customerID = req.body.customerID;

  async function getMemberRelationDetails() {
    let con;
    try {
      con = await oracledb.getConnection({
        user: DB_USER,
        password: DB_PASSWORD,
        connectString: DB_CONNECTION_STRING,
        timeout: DB_CONNECTION_TIMEOUT,
      });

      if (con) {
        console.log("i dey inside");
      }

      const data = await con.execute(
        `SELECT * FROM TB_RELATION
        WHERE CUSTOMER_NUMBER = '${customerID}'`
      );

      const dataTwo = await con.execute(
        `SELECT to_char(DATE_OF_BIRTH,'YYYY-MM-DD') as date_of_birth,to_char(ID_ISSUE_DATE,'YYYY-MM-DD') as id_issue_date,to_char(ID_EXPIRY_DATE,'YYYY-MM-DD') as id_expiry_date  FROM TB_RELATION
        WHERE CUSTOMER_NUMBER = '${customerID}'`
      );

      if (data) {
        const response = data.rows.map((row) => {
          const rowData = {};
          for (let x = 0; x < data.metaData.length; x++) {
            const columnName = data.metaData[x].name.toLowerCase();
            const columnValue = row[x] || ""; // Replace null/undefined with empty string
            rowData[columnName] = columnValue;
          }
          return rowData;
        });

        res.send({ response, dataTwo });
      } else {
        res.send("Something went wrong... Nothing was returned!!");
      }
    } catch (err) {
      res.send(err);
    }
  }
  getMemberRelationDetails();
});

app.post("/api/getMemberAddressInfo", (req, res) => {
  const customerNumber = req.body.customerNumber;

  async function getMemberAddressInfo() {
    let con;
    try {
      con = await oracledb.getConnection({
        user: DB_USER,
        password: DB_PASSWORD,
        connectString: DB_CONNECTION_STRING,
        timeout: DB_CONNECTION_TIMEOUT,
      });

      if (con) {
        console.log("i dey inside");
      }

      const data = await con.execute(
        `SELECT NVL(E_MAIL,' ') AS EMAIL,NVL(PHONE1,' ') AS PHONE1,NVL(PHONE2,' ') AS PHONE2,NVL(HOUSE_TYPE,' ') AS HOUSE_TYPE,NVL(PH_ADDRESS2,' ') AS FLAT,NVL(NATURE_OF_OWNERSHIP,' ') AS NATURE_OF_OWNERSHIP,NVL(CAST(COST_OF_ACCOM AS VARCHAR(10)), ' ') AS COST_OF_ACCOM,STYED_SINCE,NVL(PH_ADDRESS3,' ') AS STREET_NAME,NVL(CAST(CURRENT_VALUE AS VARCHAR(10)),' ') AS CURRENT_VALUE,NVL(LOCATION,' ') AS LOCATION,NVL(PH_CITY,' ') AS PH_CITY,NVL(CAST(BALANCE_MORTGUAGE AS VARCHAR(10)),' ') AS BALANCE_MORTGUAGE,NVL(CAST(FAX_NO AS VARCHAR(10)), ' ') AS FAX_NO,NVL(PH_NEAREST_LAND_MARK,' ') AS PH_NEAREST_LAND_MARK,NVL(PH_ATTENTION_PARTY,' ') AS PH_ATTENTION_PARTY,NVL(PO_ADDRESS2,' ') AS PO_ADDRESS2,NVL(PO_ADDRESS1,' ') AS PO_ADDRESS1,NVL(POSTAL_ZIP_CODE,' ') as POSTAL_ZIP_CODE,NVL(COUNTRY_CODE,' ') AS COUNTRY_CODE,NVL(PO_CITY,' ') AS PO_CITY,NVL(PO_NEAREST_LAND_MARK,' ') AS PO_NEAREST_LAND_MARK,NVL(PO_ATTENTION_PARTY,' ') AS PO_ATTENTION_PARTY
        FROM vw_address_enq  
        WHERE CUSTOMER_NUMBER = '${customerNumber}'`
      );
      let response = [];
      let arr0 = "";
      if (data) {
        for (let i = 0; i < data.rows.length; i++) {
          for (let x = 0; x < data.metaData.length; x++) {
            arr0 +=
              '"' +
              [data.metaData[x].name.toLowerCase()] +
              '" : "' +
              data.rows[i][x] +
              '",';
          }

          response.push(JSON.parse("{" + arr0.replace(/,\s*$/, "") + "}"));
        }

        // res.send(response);
      } else {
        res.send("Something went wrong... Nothing was returned!!");
      }

      let houseType = response[0].house_type;
      let phCity = response[0].ph_city;
      let poCity = response[0].po_city;
      let countryCode = response[0].country_code;

      const dataTwo = await con.execute(
        `SELECT ACTUAL_CODE , DESCRIPTION
         FROM code_desc
         WHERE ACTUAL_CODE = '${houseType}' AND code_type = 'SAL'
         UNION ALL
         SELECT ACTUAL_CODE, DESCRIPTION
         FROM code_desc
         WHERE ACTUAL_CODE = '${phCity}' AND code_type = 'CTY'
         UNION ALL
         SELECT ACTUAL_CODE, DESCRIPTION
         FROM code_desc
         WHERE ACTUAL_CODE = '${poCity}' AND code_type = 'CTY'
         UNION ALL
         SELECT ACTUAL_CODE, DESCRIPTION
         FROM code_desc
         WHERE ACTUAL_CODE = '${countryCode}' AND code_type = 'CON'`
      );

      let response2 = [];
      let arr1 = "";
      if (dataTwo) {
        for (let i = 0; i < dataTwo.rows.length; i++) {
          for (let x = 0; x < dataTwo.metaData.length; x++) {
            arr1 +=
              '"' +
              [dataTwo.metaData[x].name.toLowerCase()] +
              '" : "' +
              dataTwo.rows[i][x] +
              '",';
          }

          response2.push(JSON.parse("{" + arr1.replace(/,\s*$/, "") + "}"));
        }
      } else {
        res.send("Something went wrong... Nothing was returned!!");
      }
      res.send({ response, response2 });
    } catch (err) {
      res.send(err);
    }
  }
  getMemberAddressInfo();
});

//TRANSACTION ANALYZER
app.post("/api/getGeneralTransactionDetails", (req, res) => {
  const customerName = req.body.customerName;
  const accountNumber = req.body.accountNumber;
  const branch = req.body.branch;
  const currency = req.body.currency;
  const transactionType = req.body.transactionType;
  const batchNumber = req.body.batchNumber;
  const transactionChannel = req.body.accountName;
  const documentRef = req.body.documentRef;
  const postedBy = req.body.postedBy;
  const voucher = req.body.voucher;
  const approvedBy = req.body.approvedBy;
  const postingDate = req.body.postingDate;
  const amountFrom = req.body.amountFrom;
  const typeOfAccount = req.body.typeOfAccount;

  console.log(req.body, "resss");

  async function getGeneralTransactionDetails() {
    let con;
    try {
      con = await oracledb.getConnection({
        user: DB_USER,
        password: DB_PASSWORD,
        connectString: DB_CONNECTION_STRING,
        timeout: DB_CONNECTION_TIMEOUT,
      });

      if (con) {
        // console.log("i say i dey insidee");
      }

      let determinant = "";

      if (customerName) {
        if (determinant) {
          determinant += `AND CUSTOMER_NAME LIKE '%${customerName}%' `;
        } else {
          determinant += `AND CUSTOMER_NAME LIKE '%${customerName}%'`;
        }
      }
      if (accountNumber) {
        if (determinant) {
          determinant += `AND ACCT_LINK = '${accountNumber}'`;
        } else {
          determinant += `AND ACCT_LINK = '${accountNumber}'`;
        }
      }
      if (branch) {
        if (determinant) {
          determinant += `AND BRANCH_CODE = '${branch}'`;
        } else {
          determinant += `AND BRANCH_CODE = '${branch}'`;
        }
      }
      if (currency) {
        if (determinant) {
          determinant += `AND CURRENCY_CODE = '${currency}'`;
        } else {
          determinant += `AND CURRENCY_CODE = '${currency}'`;
        }
      }
      if (transactionType) {
        if (determinant) {
          determinant += `AND TRANSACTION_DETAILS = '${transactionType}'`;
        } else {
          determinant += `AND TRANSACTION_DETAILS = '${transactionType}'`;
        }
      }
      if (batchNumber) {
        if (determinant) {
          determinant += `AND BATCH_NO = '${batchNumber}'`;
        } else {
          determinant += `AND BATCH_NO = '${batchNumber}'`;
        }
      }
      if (transactionChannel) {
        if (determinant) {
          determinant += `AND CHANNEL_DESC = '${transactionChannel}'`;
        } else {
          determinant += `AND CHANNEL_DESC = '${transactionChannel}'`;
        }
      }
      if (documentRef) {
        if (determinant) {
          determinant += `AND DOCUMENT_REF = '${documentRef}'`;
        } else {
          determinant += `AND DOCUMENT_REF = '${documentRef}'`;
        }
      }
      if (postedBy) {
        if (determinant) {
          determinant += `AND USER_NAME = '${postedBy}'`;
        } else {
          determinant += `AND USER_NAME = '${postedBy}'`;
        }
      }
      if (voucher) {
        if (determinant) {
          determinant += `AND VOUCHER_NUMBER = '${voucher}'`;
        } else {
          determinant += `AND VOUCHER_NUMBER = '${voucher}'`;
        }
      }
      if (approvedBy) {
        if (determinant) {
          determinant += `AND USER_NAME = '${approvedBy}'`;
        } else {
          determinant += `AND USER_NAME = '${approvedBy}'`;
        }
      }
      if (amountFrom) {
        if (determinant) {
          determinant += `AND AMOUNT = '${amountFrom}'`;
        } else {
          determinant += `AND AMOUNT = '${amountFrom}'`;
        }
      }
      if (typeOfAccount) {
        if (determinant) {
          determinant += `AND TYPE_OF_ACCT_DESC = '${typeOfAccount}'`;
        } else {
          determinant += `AND TYPE_OF_ACCT_DESC = '${typeOfAccount}'`;
        }
      }

      const data = await con.execute(
        `SELECT 
         ACCT_LINK,CUSTOMER_NAME,get_curriso(CURRENCY_CODE) as CURRENCY_CODE,nvl(TRANSACTION_DETAILS,' ') as TRANSACTION_DETAILS,DOCUMENT_REF,TRANS_AMOUNT,CHANNEL_DESC,BATCH_NO,nvl(GET_BRANCHDESC(branch_code),' ') as branch_code,nvl(USER_NAME,' ') as USER_NAME,to_char(POSTING_DATE,'DD-MON-YYYY') as POSTING_DATE,VOUCHER_NUMBER,TRANS_NO
         FROM VW_ACTRANX WHERE POSTING_DATE = '${postingDate}' ${determinant} ORDER BY TRANS_NO,ACCOUNT_NUMBER `
      );

      let response = [];
      let arr0 = "";
      // return res.send(data)

      if (data.rows) {
        const response = [];
        for (let i = 0; i < data.rows.length; i++) {
          const rowData = {}; // Create an object for each row

          for (let x = 0; x < data.metaData.length; x++) {
            const columnName = data.metaData[x].name.toLowerCase();
            const columnValue = data.rows[i][x];
            rowData[columnName] = columnValue; // Assign each column to the object
          }

          response.push(rowData); // Push the object to the response array
        }
        return res.status(200).send(response);
      } else {
        return res
          .status(500)
          .send("Something went wrong... Nothing was returned!!");
      }

      // if (data) {
      //   for (let i = 0; i < data.rows.length; i++) {
      //     for (let x = 0; x < data.metaData.length; x++) {
      //       arr0 +=
      //         '"' +
      //         [data.metaData[x].name.toLowerCase()] +
      //         '" : "' +
      //         data.rows[i][x] +
      //         '",';
      //     }

      //     response.push(JSON.parse("{" + arr0.replace(/,\s*$/, "") + "}"));
      //   }

      //   res.send(response);
      // } else {
      //   res.send("Something went wrong... Nothing was returned!!");
      // }
    } catch (err) {
      console.log(err);
    }
  }
  getGeneralTransactionDetails();
});

app.post("/api/getGeneralTransactionDetailsFromYesterday", (req, res) => {
  const customerName = req.body.customerName;
  const accountNumber = req.body.accountNumber;
  const branch = req.body.branch;
  const currency = req.body.currency;
  const transactionType = req.body.transactionType;
  const batchNumber = req.body.batchNumber;
  const transactionChannel = req.body.accountName;
  const documentRef = req.body.documentRef;
  const postedBy = req.body.postedBy;
  const voucher = req.body.voucher;
  const approvedBy = req.body.approvedBy;
  const amountFrom = req.body.amountFrom;
  const typeOfAccount = req.body.typeOfAccount;

  console.log(req.body, "resss");

  async function getGeneralTransactionDetailsFromYesterday() {
    let con;
    try {
      con = await oracledb.getConnection({
        user: DB_USER,
        password: DB_PASSWORD,
        connectString: DB_CONNECTION_STRING,
        timeout: DB_CONNECTION_TIMEOUT,
      });

      if (con) {
        // console.log("i say i dey insidee");
      }

      let determinant = "";

      if (customerName) {
        if (determinant) {
          determinant += `AND CUSTOMER_NAME LIKE '%${customerName}%' `;
        } else {
          determinant += `AND CUSTOMER_NAME LIKE '%${customerName}%'`;
        }
      }
      if (accountNumber) {
        if (determinant) {
          determinant += `AND ACCT_LINK = '${accountNumber}'`;
        } else {
          determinant += `AND ACCT_LINK = '${accountNumber}'`;
        }
      }
      if (branch) {
        if (determinant) {
          determinant += `AND BRANCH_CODE = '${branch}'`;
        } else {
          determinant += `AND BRANCH_CODE = '${branch}'`;
        }
      }
      if (currency) {
        if (determinant) {
          determinant += `AND CURRENCY_CODE = '${currency}'`;
        } else {
          determinant += `AND CURRENCY_CODE = '${currency}'`;
        }
      }
      if (transactionType) {
        if (determinant) {
          determinant += `AND TRANSACTION_DETAILS = '${transactionType}'`;
        } else {
          determinant += `AND TRANSACTION_DETAILS = '${transactionType}'`;
        }
      }
      if (batchNumber) {
        if (determinant) {
          determinant += `AND BATCH_NO = '${batchNumber}'`;
        } else {
          determinant += `AND BATCH_NO = '${batchNumber}'`;
        }
      }
      if (transactionChannel) {
        if (determinant) {
          determinant += `AND CHANNEL_DESC = '${transactionChannel}'`;
        } else {
          determinant += `AND CHANNEL_DESC = '${transactionChannel}'`;
        }
      }
      if (documentRef) {
        if (determinant) {
          determinant += `AND DOCUMENT_REF = '${documentRef}'`;
        } else {
          determinant += `AND DOCUMENT_REF = '${documentRef}'`;
        }
      }
      if (documentRef) {
        if (determinant) {
          determinant += `AND DOCUMENT_REF = '${documentRef}'`;
        } else {
          determinant += `AND DOCUMENT_REF = '${documentRef}'`;
        }
      }
      if (postedBy) {
        if (determinant) {
          determinant += `AND USER_NAME = '${postedBy}'`;
        } else {
          determinant += `AND USER_NAME = '${postedBy}'`;
        }
      }
      if (voucher) {
        if (determinant) {
          determinant += `AND VOUCHER_NUMBER = '${voucher}'`;
        } else {
          determinant += `AND VOUCHER_NUMBER = '${voucher}'`;
        }
      }
      if (approvedBy) {
        if (determinant) {
          determinant += `AND USER_NAME = '${approvedBy}'`;
        } else {
          determinant += `AND USER_NAME = '${approvedBy}'`;
        }
      }
      if (amountFrom) {
        if (determinant) {
          determinant += `AND AMOUNT = '${amountFrom}'`;
        } else {
          determinant += `AND AMOUNT = '${amountFrom}'`;
        }
      }
      if (typeOfAccount) {
        if (determinant) {
          determinant += `AND TYPE_OF_ACCT_DESC = '${typeOfAccount}'`;
        } else {
          determinant += `AND TYPE_OF_ACCT_DESC = '${typeOfAccount}'`;
        }
      }

      const data = await con.execute(
        `SELECT 
         ACCT_LINK,get_curriso(CURRENCY_CODE) as CURRENCY_CODE,nvl(TRANSACTION_DETAILS,' ') as TRANSACTION_DETAILS,DOCUMENT_REF,AMOUNT,BATCH_NO,BRANCH_CODE,USER_NAME,to_char(POSTING_DATE,'DD-MON-YYYY') as POSTING_DATE,VOUCHER_NUMBER,TRANS_NO
         FROM tb_actrans_prev WHERE POSTING_DATE = GET_UPDATETOKEN() ${determinant} ORDER BY TRANS_NO,ACCOUNT_NUMBER `
      );

      let response = [];
      let arr0 = "";
      if (data) {
        for (let i = 0; i < data.rows.length; i++) {
          for (let x = 0; x < data.metaData.length; x++) {
            arr0 +=
              '"' +
              [data.metaData[x].name.toLowerCase()] +
              '" : "' +
              data.rows[i][x] +
              '",';
          }

          response.push(JSON.parse("{" + arr0.replace(/,\s*$/, "") + "}"));
        }

        res.send(response);
      } else {
        res.send("Something went wrong... Nothing was returned!!");
      }

      res.send(response);
    } catch (err) {
      console.log(err);
    }
  }
  getGeneralTransactionDetailsFromYesterday();
});

app.post("/api/getGeneralTransactionDetailsFromHistory", (req, res) => {
  const customerName = req.body.customerName;
  const accountNumber = req.body.accountNumber;
  const branch = req.body.branch;
  const currency = req.body.currency;
  const transactionType = req.body.transactionType;
  const batchNumber = req.body.batchNumber;
  const transactionChannel = req.body.accountName;
  const documentRef = req.body.documentRef;
  const postedBy = req.body.postedBy;
  const voucher = req.body.voucher;
  const approvedBy = req.body.approvedBy;
  const amountFrom = req.body.amountFrom;
  const typeOfAccount = req.body.typeOfAccount;
  const startDate = req.body.startDate;
  const endDate = req.body.endDate;

  console.log(req.body, "resss");

  async function getGeneralTransactionDetailsFromHistory() {
    let con;
    try {
      con = await oracledb.getConnection({
        user: DB_USER,
        password: DB_PASSWORD,
        connectString: DB_CONNECTION_STRING,
        timeout: DB_CONNECTION_TIMEOUT,
      });

      if (con) {
        // console.log("i say i dey insidee");
      }

      let determinant = "";

      if (customerName) {
        if (determinant) {
          determinant += `AND CUSTOMER_NAME LIKE '%${customerName}%' `;
        } else {
          determinant += `AND CUSTOMER_NAME LIKE '%${customerName}%'`;
        }
      }
      if (accountNumber) {
        if (determinant) {
          determinant += `AND ACCT_LINK = '${accountNumber}'`;
        } else {
          determinant += `AND ACCT_LINK = '${accountNumber}'`;
        }
      }
      if (branch) {
        if (determinant) {
          determinant += `AND BRANCH_CODE = '${branch}'`;
        } else {
          determinant += `AND BRANCH_CODE = '${branch}'`;
        }
      }
      if (currency) {
        if (determinant) {
          determinant += `AND CURRENCY_CODE = '${currency}'`;
        } else {
          determinant += `AND CURRENCY_CODE = '${currency}'`;
        }
      }
      if (transactionType) {
        if (determinant) {
          determinant += `AND TRANSACTION_DETAILS = '${transactionType}'`;
        } else {
          determinant += `AND TRANSACTION_DETAILS = '${transactionType}'`;
        }
      }
      if (batchNumber) {
        if (determinant) {
          determinant += `AND BATCH_NO = '${batchNumber}'`;
        } else {
          determinant += `AND BATCH_NO = '${batchNumber}'`;
        }
      }
      if (transactionChannel) {
        if (determinant) {
          determinant += `AND CHANNEL_DESC = '${transactionChannel}'`;
        } else {
          determinant += `AND CHANNEL_DESC = '${transactionChannel}'`;
        }
      }
      if (documentRef) {
        if (determinant) {
          determinant += `AND DOCUMENT_REF = '${documentRef}'`;
        } else {
          determinant += `AND DOCUMENT_REF = '${documentRef}'`;
        }
      }
      if (postedBy) {
        if (determinant) {
          determinant += `AND USER_NAME = '${postedBy}'`;
        } else {
          determinant += `AND USER_NAME = '${postedBy}'`;
        }
      }
      if (voucher) {
        if (determinant) {
          determinant += `AND VOUCHER_NUMBER = '${voucher}'`;
        } else {
          determinant += `AND VOUCHER_NUMBER = '${voucher}'`;
        }
      }
      if (approvedBy) {
        if (determinant) {
          determinant += `AND USER_NAME = '${approvedBy}'`;
        } else {
          determinant += `AND USER_NAME = '${approvedBy}'`;
        }
      }
      if (amountFrom) {
        if (determinant) {
          determinant += `AND AMOUNT = '${amountFrom}'`;
        } else {
          determinant += `AND AMOUNT = '${amountFrom}'`;
        }
      }
      if (typeOfAccount) {
        if (determinant) {
          determinant += `AND TYPE_OF_ACCT_DESC = '${typeOfAccount}'`;
        } else {
          determinant += `AND TYPE_OF_ACCT_DESC = '${typeOfAccount}'`;
        }
      }

      const data = await con.execute(
        `SELECT 
         ACCT_LINK,GET_ACCTDESC(ACCT_LINK) as CUSTOMER_NAME,get_curriso(CURRENCY_CODE) as CURRENCY_CODE,nvl(TRANSACTION_DETAILS,' ') as TRANSACTION_DETAILS,DOCUMENT_REF,AMOUNT as TRANS_AMOUNT,BATCH_NO,BRANCH_CODE,USER_NAME,to_char(POSTING_DATE,'DD-MON-YYYY') as POSTING_DATE,VOUCHER_NUMBER,TRANS_NO
         FROM tb_actrans_hist WHERE POSTING_DATE BETWEEN '${startDate}' AND '${endDate}' ${determinant} ORDER BY TRANS_NO,ACCOUNT_NUMBER `
      );

      if (data.rows) {
        const response = [];
        for (let i = 0; i < data.rows.length; i++) {
          const rowData = {}; // Create an object for each row

          for (let x = 0; x < data.metaData.length; x++) {
            const columnName = data.metaData[x].name.toLowerCase();
            const columnValue = data.rows[i][x];
            rowData[columnName] = columnValue; // Assign each column to the object
          }

          response.push(rowData); // Push the object to the response array
        }
        return res.status(200).send(response);
      } else {
        return res
          .status(500)
          .send("Something went wrong... Nothing was returned!!");
      }
      // res.send(response);
    } catch (err) {
      console.log(err);
    }
  }
  getGeneralTransactionDetailsFromHistory();
});

app.post("/api/getRiskMonitoring", (req, res) => {
  const startingDate = req.body.startingDate;
  const endDate = req.body.endDate;
  const thresholdAmount = req.body.thresholdAmount;

  console.log(req.body, "resss");

  async function getRiskMonitoring() {
    let con;
    try {
      con = await oracledb.getConnection({
        user: DB_USER,
        password: DB_PASSWORD,
        connectString: DB_CONNECTION_STRING,
        timeout: DB_CONNECTION_TIMEOUT,
      });

      if (con) {
        console.log("i say i dey insidee");
      }

      const data = await con.execute(
        ` SELECT ACCT_LINK,ACCOUNT_DESCRP as account_description,ISO_CODE,nvl(TRANS_DETAILS,' ') as TRANS_DETAILS,DOCUMENT_REF,AMOUNT,BATCH_NO,BRANCH_CODE,USER_NAME,APPROVED_BY,to_char(POSTING_DATE,'DD-MON-YYYY') as POSTING_DATE,TRANS_NO
        FROM vw_highvalue_transaction_ct
         WHERE POSTING_DATE BETWEEN '${startingDate}' AND '${endDate}'
         AND THRESH_AMT = '${thresholdAmount}'
      `
      );

      let response = [];
      let arr0 = "";
      if (data) {
        for (let i = 0; i < data.rows.length; i++) {
          for (let x = 0; x < data.metaData.length; x++) {
            arr0 +=
              '"' +
              [data.metaData[x].name.toLowerCase()] +
              '" : "' +
              data.rows[i][x] +
              '",';
          }

          response.push(JSON.parse("{" + arr0.replace(/,\s*$/, "") + "}"));
        }

        // res.send(response);
      } else {
        res.send("Something went wrong... Nothing was returned!!");
      }

      res.send(response);
    } catch (err) {
      console.log(err);
    }
  }
  getRiskMonitoring();
});

app.get("/api/getThresholdAmount", (req, res) => {
  console.log(req.body, "customer Number");

  async function getThresholdAmount() {
    let con;
    try {
      con = await oracledb.getConnection({
        user: DB_USER,
        password: DB_PASSWORD,
        connectString: DB_CONNECTION_STRING,
        timeout: DB_CONNECTION_TIMEOUT,
      });

      if (con) {
        // console.log("i say i dey insidee");
      }

      const data = await con.execute(
        `SELECT DISTINCT CURRENCY_CODE, GET_CURRISO (CURRENCY_CODE) AS CURR_DESC,AMOUNT 
        FROM BANKOWNER.TB_CUSTTYPE_THRESHOLD
        `
      );

      let response = [];
      let arr0 = "";
      if (data) {
        for (let i = 0; i < data.rows.length; i++) {
          for (let x = 0; x < data.metaData.length; x++) {
            arr0 +=
              '"' +
              [data.metaData[x].name.toLowerCase()] +
              '" : "' +
              data.rows[i][x] +
              '",';
          }

          response.push(JSON.parse("{" + arr0.replace(/,\s*$/, "") + "}"));
        }

        res.send(response);
      } else {
        res.send("Something went wrong... Nothing was returned!!");
      }

      // console.log(data , "data")
      // res.send(data.rows);
    } catch (err) {
      res.send(err);
    }
  }
  getThresholdAmount();
});

app.post("/api/getAmlDeviationSummary", (req, res) => {
  const startingDate = req.body.startingDate;
  const endDate = req.body.endDate;
  const suspiciousType = req.body.suspiciousType;

  console.log(req.body, "resss");

  async function getAmlDeviationSummary() {
    let con;
    try {
      con = await oracledb.getConnection({
        user: DB_USER,
        password: DB_PASSWORD,
        connectString: DB_CONNECTION_STRING,
        timeout: DB_CONNECTION_TIMEOUT,
      });

      if (con) {
        console.log("i say i dey insidee");
      }

      const data = await con.execute(
        `SELECT NAMEOFCUSTOMER,ACCOUNTNO,REASONFORSUSPICION,ACTUAL_COMPUTED,ACTUAL_CUSTOMER,TRANSBRANCH as BRANCH_CODE,ACCOUNTTYPE,to_char(ASATDATE,'DD-MON-YYYY') as posting_date
         FROM VR_SUSPICIOUSTRANSACTIONS_MAIN
         WHERE ASATDATE BETWEEN '${startingDate}' AND '${endDate}' 
         AND TRANS_TYPE_FLAG = '${suspiciousType}' 
        `
      );

      let response = [];
      let arr0 = "";
      if (data) {
        for (let i = 0; i < data.rows.length; i++) {
          for (let x = 0; x < data.metaData.length; x++) {
            arr0 +=
              '"' +
              [data.metaData[x].name.toLowerCase()] +
              '" : "' +
              data.rows[i][x] +
              '",';
          }

          response.push(JSON.parse("{" + arr0.replace(/,\s*$/, "") + "}"));
        }

        // res.send(response);
      } else {
        res.send("Something went wrong... Nothing was returned!!");
      }

      res.send(response);
    } catch (err) {
      console.log(err);
    }
  }
  getAmlDeviationSummary();
});

app.post("/api/getHighRiskCustomerTrans", (req, res) => {
  const startingDate = req.body.startingDate;
  const endDate = req.body.endDate;

  console.log(req.body, "resss");

  async function getHighRiskCustomerTrans() {
    let con;
    try {
      con = await oracledb.getConnection({
        user: DB_USER,
        password: DB_PASSWORD,
        connectString: DB_CONNECTION_STRING,
        timeout: DB_CONNECTION_TIMEOUT,
      });

      if (con) {
        console.log("i say i dey insidee");
      }

      const data = await con.execute(
        `SELECT ACCT_LINK,ACCOUNT_DESCRP as account_description,ISO_CODE,nvl(TRANSACTION_DETAILS,' ') as TRANSACTION_DETAILS,RISK_LEVEL,AMT AS AMOUNT,BATCH_NO,BRANCH_CODE,POSTED_BY,APPROVED_BY,to_char(POSTING_DATE,'DD-MON-YYYY') as POSTING_DATE,TRANS_NO
         FROM VW_HIGHRISK_TRANS
         WHERE POSTING_DATE BETWEEN '${startingDate}' AND '${endDate}' AND rownum <= 60`
      );

      let response = [];
      let arr0 = "";
      if (data) {
        for (let i = 0; i < data.rows.length; i++) {
          for (let x = 0; x < data.metaData.length; x++) {
            arr0 +=
              '"' +
              [data.metaData[x].name.toLowerCase()] +
              '" : "' +
              data.rows[i][x] +
              '",';
          }

          response.push(JSON.parse("{" + arr0.replace(/,\s*$/, "") + "}"));
        }

        // res.send(response);
      } else {
        res.send("Something went wrong... Nothing was returned!!");
      }

      res.send(response);
    } catch (err) {
      console.log(err);
    }
  }
  getHighRiskCustomerTrans();
});

app.post("/api/getGlToCustomerTrans", (req, res) => {
  const startingDate = req.body.startingDate;
  const endDate = req.body.endDate;

  console.log(req.body, "resss");

  async function getGlToCustomerTrans() {
    let con;
    try {
      con = await oracledb.getConnection({
        user: DB_USER,
        password: DB_PASSWORD,
        connectString: DB_CONNECTION_STRING,
        timeout: DB_CONNECTION_TIMEOUT,
      });

      if (con) {
        console.log("i say i dey insidee");
      }

      const data = await con.execute(
        `SELECT ACCT_LINK,ACCT_DESC as account_description,CURRENCY_CODE,nvl(TRANSACTION_DETAILS,' ') as TRANS_DETAILS,DOCUMENT_REF,LOCAL_EQUIVALENT_DB AS AMOUNT,BATCH_NO,INTER_BRANCH,USER_NAME,APPROVED_BY,to_char(POSTING_DATE,'DD-MON-YYYY') as POSTING_DATE
        FROM VW_DEBITED_GL
         WHERE POSTING_DATE BETWEEN '${startingDate}' AND '${endDate}' AND rownum <= 60`
      );

      let response = [];
      let arr0 = "";
      if (data) {
        for (let i = 0; i < data.rows.length; i++) {
          for (let x = 0; x < data.metaData.length; x++) {
            arr0 +=
              '"' +
              [data.metaData[x].name.toLowerCase()] +
              '" : "' +
              data.rows[i][x] +
              '",';
          }

          response.push(JSON.parse("{" + arr0.replace(/,\s*$/, "") + "}"));
        }

        // res.send(response);
      } else {
        res.send("Something went wrong... Nothing was returned!!");
      }

      res.send(response);
    } catch (err) {
      console.log(err);
    }
  }
  getGlToCustomerTrans();
});

app.post("/api/getDepositInDormantAccountTrans", (req, res) => {
  const startingDate = req.body.startingDate;
  const endDate = req.body.endDate;

  console.log(req.body, "resss");

  async function getDepositInDormantAccountTrans() {
    let con;
    try {
      con = await oracledb.getConnection({
        user: DB_USER,
        password: DB_PASSWORD,
        connectString: DB_CONNECTION_STRING,
        timeout: DB_CONNECTION_TIMEOUT,
      });

      if (con) {
        console.log("i say i dey insidee");
      }

      const data = await con.execute(
        `SELECT ACCT_LINK,ACCOUNT_DESCRP as account_description,CURRENCY_CODE,nvl(TRANSACTION_DETAILS,' ') as TRANS_DETAILS,DOCUMENT_REF,TRANS_AMOUNT AS AMOUNT,BATCH_NO,INTER_BRANCH,USER_NAME,APPROVED_BY,to_char(POSTING_DATE,'DD-MON-YYYY') as POSTING_DATE
         FROM VW_DORMANT_CR
         WHERE POSTING_DATE BETWEEN '${startingDate}' AND '${endDate}' AND rownum <= 60`
      );

      let response = [];
      let arr0 = "";
      if (data) {
        for (let i = 0; i < data.rows.length; i++) {
          for (let x = 0; x < data.metaData.length; x++) {
            arr0 +=
              '"' +
              [data.metaData[x].name.toLowerCase()] +
              '" : "' +
              data.rows[i][x] +
              '",';
          }

          response.push(JSON.parse("{" + arr0.replace(/,\s*$/, "") + "}"));
        }

        // res.send(response);
      } else {
        res.send("Something went wrong... Nothing was returned!!");
      }

      res.send(response);
    } catch (err) {
      console.log(err);
    }
  }
  getDepositInDormantAccountTrans();
});

app.post("/api/getMultiBranchCustomerTrans", (req, res) => {
  const startingDate = req.body.startingDate;
  const endDate = req.body.endDate;

  console.log(req.body, "resss");

  async function getMultiBranchCustomerTrans() {
    let con;
    try {
      con = await oracledb.getConnection({
        user: DB_USER,
        password: DB_PASSWORD,
        connectString: DB_CONNECTION_STRING,
        timeout: DB_CONNECTION_TIMEOUT,
      });

      if (con) {
        console.log("i say i dey insidee");
      }

      const data = await con.execute(
        `SELECT ACCT_LINK,ACCT_DESC as account_description,CURRENCY_CODE,nvl(NARRATION,' ') as TRANS_DETAILS,AMOUNT,to_char(POSTING_DATE,'DD-MON-YYYY') as POSTING_DATE
         FROM vw_multi_bra_cust_trans_summ
         WHERE POSTING_DATE BETWEEN '${startingDate}' AND '${endDate}' AND rownum <= 60`
      );

      let response = [];
      let arr0 = "";
      if (data) {
        for (let i = 0; i < data.rows.length; i++) {
          for (let x = 0; x < data.metaData.length; x++) {
            arr0 +=
              '"' +
              [data.metaData[x].name.toLowerCase()] +
              '" : "' +
              data.rows[i][x] +
              '",';
          }

          response.push(JSON.parse("{" + arr0.replace(/,\s*$/, "") + "}"));
        }

        // res.send(response);
      } else {
        res.send("Something went wrong... Nothing was returned!!");
      }

      res.send(response);
    } catch (err) {
      console.log(err);
    }
  }
  getMultiBranchCustomerTrans();
});

app.get("/api/getTransactionType", (req, res) => {
  console.log(req.body, "customer Number");

  async function getTransactionType() {
    let con;
    try {
      con = await oracledb.getConnection({
        user: DB_USER,
        password: DB_PASSWORD,
        connectString: DB_CONNECTION_STRING,
        timeout: DB_CONNECTION_TIMEOUT,
      });

      if (con) {
        // console.log("i say i dey insidee");
      }

      const data = await con.execute(
        `select nvl(ACTUAL_CODE,' ') as ACTUAL_CODE, DESCRIPTION
        from code_desc
       where code_type = 'TR'
       AND STATUS = 'Y'
       union
       SELECT nvl(NULL,' ') AS ACTUAL_CODE, 'ALL TRANSACTIONS' AS DESCRIPTION
       FROM dual
       ORDER BY DESCRIPTION DESC   `
      );

      let response = [];
      let arr0 = "";
      if (data) {
        for (let i = 0; i < data.rows.length; i++) {
          for (let x = 0; x < data.metaData.length; x++) {
            arr0 +=
              '"' +
              [data.metaData[x].name.toLowerCase()] +
              '" : "' +
              data.rows[i][x] +
              '",';
          }

          response.push(JSON.parse("{" + arr0.replace(/,\s*$/, "") + "}"));
        }

        res.send(response);
      } else {
        res.send("Something went wrong... Nothing was returned!!");
      }

      // console.log(data , "data")
      // res.send(data.rows);
    } catch (err) {
      res.send(err);
    }
  }
  getTransactionType();
});

//END OF TRANSACTION ANALYZER////

app.get("/api/getTransactionChannel", (req, res) => {
  async function getTransactionChannel() {
    let con;
    try {
      con = await oracledb.getConnection({
        user: DB_USER,
        password: DB_PASSWORD,
        connectString: DB_CONNECTION_STRING,
        timeout: DB_CONNECTION_TIMEOUT,
      });

      if (con) {
        // console.log("i say i dey insidee");
      }

      const data = await con.execute(
        `select ACTUAL_CODE, DESCRIPTION
        from code_desc
       where code_type = 'CHN'
       AND STATUS = 'Y'
       `
      );

      let response = [];
      let arr0 = "";
      if (data) {
        for (let i = 0; i < data.rows.length; i++) {
          for (let x = 0; x < data.metaData.length; x++) {
            arr0 +=
              '"' +
              [data.metaData[x].name.toLowerCase()] +
              '" : "' +
              data.rows[i][x] +
              '",';
          }

          response.push(JSON.parse("{" + arr0.replace(/,\s*$/, "") + "}"));
        }

        res.send(response);
      } else {
        res.send("Something went wrong... Nothing was returned!!");
      }

      // console.log(data , "data")
      // res.send(data.rows);
    } catch (err) {
      res.send(err);
    }
  }
  getTransactionChannel();
});

app.get("/api/getTransactionRef", (req, res) => {
  async function getTransactionRef() {
    let con;
    try {
      con = await oracledb.getConnection({
        user: DB_USER,
        password: DB_PASSWORD,
        connectString: DB_CONNECTION_STRING,
        timeout: DB_CONNECTION_TIMEOUT,
      });

      if (con) {
        // console.log("i say i dey insidee");
      }

      const data = await con.execute(
        `select ACTUAL_CODE, DESCRIPTION
        from code_desc
        where code_type = 'TFE'
        AND STATUS = 'Y' 
       `
      );

      let response = [];
      let arr0 = "";
      if (data) {
        for (let i = 0; i < data.rows.length; i++) {
          for (let x = 0; x < data.metaData.length; x++) {
            arr0 +=
              '"' +
              [data.metaData[x].name.toLowerCase()] +
              '" : "' +
              data.rows[i][x] +
              '",';
          }

          response.push(JSON.parse("{" + arr0.replace(/,\s*$/, "") + "}"));
        }

        res.send(response);
      } else {
        res.send("Something went wrong... Nothing was returned!!");
      }

      // console.log(data , "data")
      // res.send(data.rows);
    } catch (err) {
      res.send(err);
    }
  }
  getTransactionRef();
});

app.get("/api/getPostingBy", (req, res) => {
  async function getPostedBy() {
    let con;
    try {
      con = await oracledb.getConnection({
        user: DB_USER,
        password: DB_PASSWORD,
        connectString: DB_CONNECTION_STRING,
        timeout: DB_CONNECTION_TIMEOUT,
      });

      if (con) {
        // console.log("i say i dey insidee");
      }

      const data = await con.execute(
        `select user_name from menu_users order by user_name`
      );

      let response = [];
      let arr0 = "";
      if (data) {
        for (let i = 0; i < data.rows.length; i++) {
          for (let x = 0; x < data.metaData.length; x++) {
            arr0 +=
              '"' +
              [data.metaData[x].name.toLowerCase()] +
              '" : "' +
              data.rows[i][x] +
              '",';
          }

          response.push(JSON.parse("{" + arr0.replace(/,\s*$/, "") + "}"));
        }

        res.send(response);
      } else {
        res.send("Something went wrong... Nothing was returned!!");
      }

      // console.log(data , "data")
      // res.send(data.rows);
    } catch (err) {
      res.send(err);
    }
  }
  getPostedBy();
});

app.get("/api/getVouchers", (req, res) => {
  async function getVouchers() {
    let con;
    try {
      con = await oracledb.getConnection({
        user: DB_USER,
        password: DB_PASSWORD,
        connectString: DB_CONNECTION_STRING,
        timeout: DB_CONNECTION_TIMEOUT,
      });

      if (con) {
        // console.log("i say i dey insidee");
      }

      const data = await con.execute(
        `SELECT CHN_CODE, DESCRIPTION, PARENT_ID
        FROM TB_CHANNELS
        WHERE CHN_LEVEL = 'SCHN'`
      );

      let response = [];
      let arr0 = "";
      if (data) {
        for (let i = 0; i < data.rows.length; i++) {
          for (let x = 0; x < data.metaData.length; x++) {
            arr0 +=
              '"' +
              [data.metaData[x].name.toLowerCase()] +
              '" : "' +
              data.rows[i][x] +
              '",';
          }

          response.push(JSON.parse("{" + arr0.replace(/,\s*$/, "") + "}"));
        }

        res.send(response);
      } else {
        res.send("Something went wrong... Nothing was returned!!");
      }

      // console.log(data , "data")
      // res.send(data.rows);
    } catch (err) {
      res.send(err);
    }
  }
  getVouchers();
});

app.get("/api/getApprovalBy", (req, res) => {
  async function getApprovalBy() {
    let con;
    try {
      con = await oracledb.getConnection({
        user: DB_USER,
        password: DB_PASSWORD,
        connectString: DB_CONNECTION_STRING,
        timeout: DB_CONNECTION_TIMEOUT,
      });

      if (con) {
        // console.log("i say i dey insidee");
      }

      const data = await con.execute(
        `select user_name 
        from menu_users
         order by user_name`
      );

      let response = [];
      let arr0 = "";
      if (data) {
        for (let i = 0; i < data.rows.length; i++) {
          for (let x = 0; x < data.metaData.length; x++) {
            arr0 +=
              '"' +
              [data.metaData[x].name.toLowerCase()] +
              '" : "' +
              data.rows[i][x] +
              '",';
          }

          response.push(JSON.parse("{" + arr0.replace(/,\s*$/, "") + "}"));
        }

        res.send(response);
      } else {
        res.send("Something went wrong... Nothing was returned!!");
      }

      // console.log(data , "data")
      // res.send(data.rows);
    } catch (err) {
      res.send(err);
    }
  }
  getApprovalBy();
});

app.get("/api/get-effective-date", async (req, res) => {
  async function getEffectiveDate() {
    let con;
    try {
      const con = await oracledb.getConnection({
        user: DB_USER,
        password: DB_PASSWORD,
        connectString: DB_CONNECTION_STRING,
        timeout: DB_CONNECTION_TIMEOUT,
      });

      if (con) {
        // console.log("i say i dey insidee");
      }

      const result = await con.execute(
        "SELECT to_char(get_postingdate,'YYYY-MM-DD') FROM dual"
      );

      const data = result.rows.map((row) => ({
        effective_date: row[0],
      }));

      res.json(data);
    } catch (error) {
      console.log(error);
      res.status(500).send("Internal server error");
    }
  }
  getEffectiveDate();
});

app.get("/api/get-update-token-date", async (req, res) => {
  async function getUpdateTokenDate() {
    let con;
    try {
      const con = await oracledb.getConnection({
        user: DB_USER,
        password: DB_PASSWORD,
        connectString: DB_CONNECTION_STRING,
        timeout: DB_CONNECTION_TIMEOUT,
      });

      if (con) {
        // console.log("i say i dey insidee");
      }

      const result = await con.execute(
        "SELECT to_char(get_updatetoken,'YYYY-MM-DD') FROM dual"
      );

      const data = result.rows.map((row) => ({
        effective_date: row[0],
      }));

      res.json(data);
    } catch (error) {
      console.log(error);
      res.status(500).send("Internal server error");
    }
  }
  getUpdateTokenDate();
});

app.get("/api/get-product-group", (req, res) => {
  async function getProductGroup() {
    let con;

    try {
      con = await oracledb.getConnection({
        user: DB_USER,
        password: DB_PASSWORD,
        connectString: DB_CONNECTION_STRING,
        timeout: DB_CONNECTION_TIMEOUT,
      });

      const data = await con.execute(
        `SELECT DISTINCT ACTUAL_CODE, DESCRIPTION
        FROM CODE_DESC  where code_type='ACT' and Actual_code in ('1','2') ORDER BY ACTUAL_CODE`
      );

      // res.send("get started")

      if (data.rows) {
        const arr = [];

        for (let i = 0; i < data.rows.length; i++) {
          const label = data.rows[i][1];
          const value = data.rows[i][0];

          arr.push({
            label: `${value} - ${label}`,
            value: `${value}  `,
          });
        }

        res.send(arr);
      } else {
        res.send(err);
        console.log(err);
      }
    } catch (err) {
      res.send(err);
    }
  }

  getProductGroup();
});

app.post("/api/getProductTransactionAnalyzer", (req, res) => {
  const currency = req.body.currency;

  async function getProductTransactionAnalyzer() {
    let con;
    try {
      con = await oracledb.getConnection({
        user: DB_USER,
        password: DB_PASSWORD,
        connectString: DB_CONNECTION_STRING,
        timeout: DB_CONNECTION_TIMEOUT,
      });

      if (con) {
        console.log("i dey inside");
      }

      let determinant = "";

      if (currency) {
        determinant = `WHERE CURRENCY_CODE = '${currency}'`;
      }

      const data = await con.execute(
        `SELECT get_productdesc(PRODUCT) as PRODUCT,PRODUCT AS PRODUCT_CODE,get_currdesc(CURRENCY_CODE) as CURRENCY,CURRENCY_CODE,DB_CNT,CR_CNT,TOTAL_TRANS,DB_AMT,CR_AMT,MAX_DB_AMT,MAX_CR_AMT,LAST_TRANSTIME 
        FROM VW_PRODTRANS_COUNT WHERE POSTING_DATE = GET_POSTINGDATE() AND CURRENCY_CODE LIKE '%${currency}%'`
      );

      let response = [];
      let arr0 = "";
      if (data) {
        for (let i = 0; i < data.rows.length; i++) {
          for (let x = 0; x < data.metaData.length; x++) {
            arr0 +=
              '"' +
              [data.metaData[x].name.toLowerCase()] +
              '" : "' +
              data.rows[i][x] +
              '",';
          }

          response.push(JSON.parse("{" + arr0.replace(/,\s*$/, "") + "}"));
        }
        res.send(response);
      } else {
        res.send("Something went wrong... Nothing was returned!!");
      }
    } catch (err) {
      res.send(err);
    }
  }
  getProductTransactionAnalyzer();
});

app.post("/api/getProductBatchTransactions", (req, res) => {
  const currency = req.body.currency;
  const product = req.body.product;

  async function getProductBatchTransactions() {
    let con;
    try {
      con = await oracledb.getConnection({
        user: DB_USER,
        password: DB_PASSWORD,
        connectString: DB_CONNECTION_STRING,
        timeout: DB_CONNECTION_TIMEOUT,
      });

      if (con) {
        console.log("i dey inside");
      }

      const data = await con.execute(
        `SELECT 
        ACCOUNT_NUMBER,ACCOUNT_DESCRP,CURRENCY_CODE,TRANSACTION_DETAILS,TRANS_AMOUNT,BATCH_NO,BR_CODE,USER_NAME,APPROVED_BY,to_char(POSTING_DATE,'DD-MON-YYYY') as POSTING_DATE 
        FROM vw_actanx_details
        WHERE CURRENCY_CODE = '${currency}' AND PROD_CODE ='${product}'`
      );

      let response = [];
      let arr0 = "";
      if (data) {
        for (let i = 0; i < data.rows.length; i++) {
          for (let x = 0; x < data.metaData.length; x++) {
            arr0 +=
              '"' +
              [data.metaData[x].name.toLowerCase()] +
              '" : "' +
              data.rows[i][x] +
              '",';
          }

          response.push(JSON.parse("{" + arr0.replace(/,\s*$/, "") + "}"));
        }
        res.send(response);
      } else {
        res.send("Something went wrong... Nothing was returned!!");
      }
    } catch (err) {
      res.send(err);
    }
  }
  getProductBatchTransactions();
});

app.post("/api/getBranchTransactionAnalyzer", (req, res) => {
  const postingDate = req.body.postingDate;
  const currency = req.body.currency;

  async function getBranchTransactionAnalyzer() {
    let con;
    try {
      con = await oracledb.getConnection({
        user: DB_USER,
        password: DB_PASSWORD,
        connectString: DB_CONNECTION_STRING,
        timeout: DB_CONNECTION_TIMEOUT,
      });

      if (con) {
        console.log("i dey inside");
      }

      const data = await con.execute(
        `SELECT get_Branchdesc(BRANCH_CODE) AS BRANCH,BRANCH_CODE,get_currdesc(CURRENCY_CODE) as CURRENCY,CURRENCY_CODE,DB_CNT,CR_CNT,TOTAL_TRANS,DB_AMT,CR_AMT,MAX_DB_AMT,MAX_CR_AMT,LAST_TRANSTIME 
        FROM VW_BRANCHTRANS_COUNT WHERE POSTING_DATE = GET_POSTINGDATE() AND CURRENCY_CODE LIKE '%${currency}%'`
      );

      let response = [];
      let arr0 = "";
      if (data) {
        for (let i = 0; i < data.rows.length; i++) {
          for (let x = 0; x < data.metaData.length; x++) {
            arr0 +=
              '"' +
              [data.metaData[x].name.toLowerCase()] +
              '" : "' +
              data.rows[i][x] +
              '",';
          }

          response.push(JSON.parse("{" + arr0.replace(/,\s*$/, "") + "}"));
        }
        res.send(response);
      } else {
        res.send("Something went wrong... Nothing was returned!!");
      }
    } catch (err) {
      res.send(err);
    }
  }
  getBranchTransactionAnalyzer();
});

app.post("/api/getBranchBatchTransactions", (req, res) => {
  const currency = req.body.currency;
  const branch = req.body.branch;

  async function getBranchBatchTransactions() {
    let con;
    try {
      con = await oracledb.getConnection({
        user: DB_USER,
        password: DB_PASSWORD,
        connectString: DB_CONNECTION_STRING,
        timeout: DB_CONNECTION_TIMEOUT,
      });

      if (con) {
        console.log("i dey inside");
      }

      const data = await con.execute(
        `SELECT 
        ACCOUNT_NUMBER,ACCOUNT_DESCRP,CURRENCY_CODE,TRANSACTION_DETAILS,TRANS_AMOUNT,BATCH_NO,BR_CODE,USER_NAME,APPROVED_BY,to_char(POSTING_DATE,'DD-MON-YYYY') as POSTING_DATE 
        FROM vw_actanx_details
        WHERE CURRENCY_CODE = '${currency}' AND BR_CODE ='${branch}'`
      );

      let response = [];
      let arr0 = "";
      if (data) {
        for (let i = 0; i < data.rows.length; i++) {
          for (let x = 0; x < data.metaData.length; x++) {
            arr0 +=
              '"' +
              [data.metaData[x].name.toLowerCase()] +
              '" : "' +
              data.rows[i][x] +
              '",';
          }

          response.push(JSON.parse("{" + arr0.replace(/,\s*$/, "") + "}"));
        }
        res.send(response);
      } else {
        res.send("Something went wrong... Nothing was returned!!");
      }
    } catch (err) {
      res.send(err);
    }
  }
  getBranchBatchTransactions();
});

app.post("/api/getUsersTransactionAnalyzer", (req, res) => {
  const currency = req.body.currency;

  async function getUsersTransactionAnalyzer() {
    let con;
    try {
      con = await oracledb.getConnection({
        user: DB_USER,
        password: DB_PASSWORD,
        connectString: DB_CONNECTION_STRING,
        timeout: DB_CONNECTION_TIMEOUT,
      });

      if (con) {
        console.log("i dey inside");
      }

      const data = await con.execute(
        `SELECT FULLNAME,CHANNEL,get_currdesc(CURRENCY_CODE) as CURRENCY_CODE,DB_CNT,CR_CNT,TOTAL_TRANS,DB_AMT,CR_AMT,MAX_DB_AMT,MAX_CR_AMT,LAST_TRANSTIME,USER_NAME
        FROM vw_usertrans_count WHERE POSTING_DATE = GET_POSTINGDATE() AND CURRENCY_CODE LIKE '%${currency}%'
        `
      );

      let response = [];
      let arr0 = "";
      if (data) {
        for (let i = 0; i < data.rows.length; i++) {
          for (let x = 0; x < data.metaData.length; x++) {
            arr0 +=
              '"' +
              [data.metaData[x].name.toLowerCase()] +
              '" : "' +
              data.rows[i][x] +
              '",';
          }

          response.push(JSON.parse("{" + arr0.replace(/,\s*$/, "") + "}"));
        }
        res.send(response);
      } else {
        res.send("Something went wrong... Nothing was returned!!");
      }
    } catch (err) {
      res.send(err);
    }
  }
  getUsersTransactionAnalyzer();
});

app.post("/api/getUsersBatchTransactions", (req, res) => {
  const currency = req.body.currency;
  const username = req.body.username;

  async function getUsersBatchTransactions() {
    let con;
    try {
      con = await oracledb.getConnection({
        user: DB_USER,
        password: DB_PASSWORD,
        connectString: DB_CONNECTION_STRING,
        timeout: DB_CONNECTION_TIMEOUT,
      });

      if (con) {
        console.log("i dey inside");
      }

      const data = await con.execute(
        `SELECT 
        ACCOUNT_NUMBER,ACCOUNT_DESCRP,CURRENCY_CODE,TRANSACTION_DETAILS,TRANS_AMOUNT,BATCH_NO,BR_CODE,USER_NAME,APPROVED_BY,to_char(POSTING_DATE,'DD-MON-YYYY') as POSTING_DATE 
        FROM vw_actanx_details
        WHERE CURRENCY_CODE = '${currency}' AND USER_NAME = '${username}'`
      );

      let response = [];
      let arr0 = "";
      if (data) {
        for (let i = 0; i < data.rows.length; i++) {
          for (let x = 0; x < data.metaData.length; x++) {
            arr0 +=
              '"' +
              [data.metaData[x].name.toLowerCase()] +
              '" : "' +
              data.rows[i][x] +
              '",';
          }

          response.push(JSON.parse("{" + arr0.replace(/,\s*$/, "") + "}"));
        }
        res.send(response);
      } else {
        res.send("Something went wrong... Nothing was returned!!");
      }
    } catch (err) {
      res.send(err);
    }
  }
  getUsersBatchTransactions();
});

// Select Product Group
app.post("/api/get-product-sub-group", (req, res) => {
  const productGroup = req.body.productGroup;

  async function getProductSubGroup() {
    let con;

    try {
      con = await oracledb.getConnection({
        user: DB_USER,
        password: DB_PASSWORD,
        connectString: DB_CONNECTION_STRING,
        timeout: DB_CONNECTION_TIMEOUT,
      });

      const data = await con.execute(
        `SELECT PROD_CODE, DESCRIPTION
          FROM VW_PRODUCT_ACCTOPEN
          WHERE Prod_group= '${productGroup}' 
          AND PROD_CUST_TYPE IN ('B', 'I')
          ORDER BY PROD_CODE `
      );

      // res.send("get started")

      if (data.rows) {
        const arr = [];

        for (let i = 0; i < data.rows.length; i++) {
          const label = data.rows[i][1];
          const value = data.rows[i][0];

          arr.push({
            label: `${value} - ${label}`,
            value: value,
          });
        }

        res.send(arr);
      } else {
        res.send(err);
        console.log(err);
      }
    } catch (err) {
      res.send(err);
    }
  }

  getProductSubGroup();
});

// Select Sectors
app.get("/api/get-sector", (req, res) => {
  async function getSector() {
    let con;

    try {
      con = await oracledb.getConnection({
        user: DB_USER,
        password: DB_PASSWORD,
        connectString: DB_CONNECTION_STRING,
        timeout: DB_CONNECTION_TIMEOUT,
      });

      const data = await con.execute(
        `select actual_code, description, class_code from code_desc where code_type = 'MAS'`
      );

      // res.send("get started")

      if (data.rows) {
        const arr = [];

        for (let i = 0; i < data.rows.length; i++) {
          const description = data.rows[i][1];
          const actual_code = data.rows[i][0];
          const class_code = data.rows[i][2];

          arr.push({
            description: `${actual_code} - ${description}`,
            actual_code: actual_code,
            class_code: `${actual_code}`,
          });
        }

        res.send(arr);
      } else {
        res.send(err);
        console.log(err);
      }
    } catch (err) {
      res.send(err);
    }
  }

  getSector();
});

app.post("/api/get-sub-sector", (req, res) => {
  const sectorClassCode = req.body.sectorClassCode;

  async function getSubSector() {
    let con;

    try {
      con = await oracledb.getConnection({
        user: DB_USER,
        password: DB_PASSWORD,
        connectString: DB_CONNECTION_STRING,
        timeout: DB_CONNECTION_TIMEOUT,
      });

      const data = await con.execute(
        `select DESCRIPTION as label, ACTUAL_CODE as value from code_desc
      where
      code_type = '${sectorClassCode}'`
      );

      // res.send("get started")

      if (data.rows) {
        const arr = [];

        for (let i = 0; i < data.rows.length; i++) {
          const description = data.rows[i][1];
          const actual_code = data.rows[i][0];
          const short_descrp = data.rows[i][2];

          arr.push({
            description: description,
            actual_code: actual_code,
            short_descrp: short_descrp,
          });
        }

        res.send(arr);
      } else {
        res.send(err);
        console.log(err);
      }
    } catch (err) {
      res.send(err);
    }
  }

  getSubSector();
});

// customer-segment-quick
app.get("/api/get-customer-segment-individual", (req, res) => {
  const segmentCode = req.body.segmentCode;

  async function customerSegmentIndividual() {
    let con;

    try {
      con = await oracledb.getConnection({
        user: DB_USER,
        password: DB_PASSWORD,
        connectString: DB_CONNECTION_STRING,
        timeout: DB_CONNECTION_TIMEOUT,
      });

      const data = await con.execute(
        `Select SEG_CODE ACTUAL_CODE, SEG_DESCRIPTION DESCRIPTION
        from VW_SEGRM_LIST
        where SEG_LEVEL =  '2' and cs_type in ('B', NVL('I','I'))
        ORDER BY SEG_CODE`
      );

      if (data.rows) {
        const arr = [];

        for (let i = 0; i < data.rows.length; i++) {
          const description = data.rows[i][1];
          const actual_code = data.rows[i][0];
          const class_code = data.rows[i][2];

          arr.push({
            description: `${actual_code} - ${description}`,
            actual_code: `${actual_code}`,
            class_code: class_code,
          });
        }

        res.send(arr);
      } else {
        res.send(err);
        console.log(err);
      }
    } catch (err) {
      res.send(err);
    }
  }

  customerSegmentIndividual();
});

//////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////

// API endpoint to fetch customer data
// app.get("/api/customers", async (req, res) => {
//   try {
//     // Connect to Oracle DB
//     const con = await oracledb.getConnection({
//       user: DB_USER,
//       password: DB_PASSWORD,
//       connectString: DB_CONNECTION_STRING,
//       timeout: DB_CONNECTION_TIMEOUT,
//     });

//     // Execute the query to fetch the first 100 rows
//     const query = "SELECT * FROM (SELECT * FROM CUSTOMER WHERE ROWNUM <= 100) WHERE ROWNUM <= 100";
//     const result = await con.execute(query);

//     // Release the connection
//     await con.close();

//     // Send the query results as the API response
//     res.json(result.rows);
//   } catch (error) {
//     console.log("Error executing query:", error);
//     if (con) {
//       // Release the connection if an error occurred
//       await con.close();
//     }
//     res.status(500).json({ error: "Failed to fetch customer data" });
//   }
// });

app.get("/api/customers", async (req, res) => {
  try {
    // Connect to Oracle DB
    const con = await oracledb.getConnection({
      user: DB_USER,
      password: DB_PASSWORD,
      connectString: DB_CONNECTION_STRING,
      timeout: DB_CONNECTION_TIMEOUT,
    });

    // const query = `SELECT * FROM CUSTOMER WHERE UPPER(customer_number) LIKE UPPER('%'||''||'%') OR UPPER(customer_name) LIKE UPPER('%'||''||'%') AND ROWNUM <= 300;`;

    // Execute the query to fetch the first 100 rows
    // "SELECT * FROM (SELECT * FROM CUSTOMER WHERE ROWNUM <= 100) WHERE ROWNUM <= 100";
    const query = `SELECT * FROM CUSTOMER WHERE ROWNUM <=300`;
    const data = await con.execute(query);

    // Release the connection
    await con.close();
    const response = [];

    if (data.rows) {
      for (let i = 0; i < data.rows.length; i++) {
        const rowData = {}; // Create an object for each row

        for (let x = 0; x < data.metaData.length; x++) {
          const columnName = data.metaData[x].name.toLowerCase();
          const columnValue = data.rows[i][x];
          rowData[columnName] = columnValue; // Assign each column to the object
        }

        response.push(rowData); // Push the object to the response array
      }
      return res.send(response);
    }
  } catch (error) {
    console.log("Error executing query:", error);

    return res.status(500).json({ error: "Failed to fetch customer data" });
  }
});

// MEMBER DATA AMENDMENT APIS
app.post("/api/member-amendment", async (req, res) => {
  // console.log(req.body, "lovvvvv");
  const {
    cust_type,
    sub_segment_code,
    code_type,
    sector_code,
    customer_number,
    account_number,
    expectation_volume,
    source_of_wealth,
    code,
    amendment_approval,
    customer_id,
    account_name,
    posted_by,
    contact,
    new_mandate,
    terminal,
    key,
    subKey,
    lov,
    formData,
    username,
    get_all_relations,
  } = req.body;
  let memberAmendment = async () => {
    try {
      const db = await oracledb.getConnection({
        user: DB_USER,
        password: DB_PASSWORD,
        connectString: DB_CONNECTION_STRING,
        timeout: DB_CONNECTION_TIMEOUT,
      });
      const execute = util.promisify(db.execute).bind(db);

      if (key === "accounts") {
        if (subKey === "get-accounts" && customer_number) {
          console.log("richie");

          const data = await execute(
            `select ACCT_LINK, ACCOUNT_DESCRP from acdet_vw where CUSTOMER_NUMBER = '${customer_number}' and TYPE_OF_ACCT in ('1','2') and STATUS_INDICATOR != 'CLOS'`
          );

          if (data.rows) {
            const arr = [];

            for (let i = 0; i < data.rows.length; i++) {
              const label = data.rows[i][1];
              const value = data.rows[i][0];

              arr.push({
                label: `${value ? `${value} - ` : ""}${label}`,
                value: value ? `${value}` : "",
              });
            }

            return res.send(arr);
          } else {
            return res.send("Something went wrong... Nothing was returned!!");
          }
        }

        if (subKey == "get-accountDetails") {
          console.log("hereeee");
          const data = await execute(
            `select 
            ACCOUNT_DESCRP as account_name, ADDRESS_1, OVERDRAWN_LIMIT, LIEN_AMOUNT, 
            SHADOW_BALANCE_TODAY, SHADOW_UNCLEARED,(nvl(SHADOW_BALANCE_TODAY,0) + nvl(SHADOW_UNCLEARED,0)), CURRENCY_CODE || ' - ' || GET_CURRDESC(CURRENCY_CODE) AS CURRENCY, CUSTOMER_NUMBER, 
            TRANS_COUNT, MEMO1, MEMO2, MEMO3,  
             DATE_OPENED, LIEN_EXPIRING_DATE, DATE_OF_LAST_ACTIVITY, 
            INTEREST_ACCOUNT_NO as Credit_Interest_Ac, ISIC_1 as ISIC, CUMULATIVE_INTEREST, OD_INT_RATE as debit_rate, 
            CR_INT_RATE as credit_rate, OD_INTEREST_AMOUNT, OD_EXPIRING_DATE, STATUS_INDICATOR || '-' || GET_STATUSDESC('${account_number}') AS STATUS, 
            ARM_1, INSTITUTE_CLASS, SHORT_NAME ,LEGAL_FORM,OD_ACCOUNT_NO as Debit_Interest_Ac,credit_int_code as Credit_Interest_Prod_Code,debit_int_code as Debit_Interest_Prod_Code,STATE_FREQ_DATE as Next_frequency_date ,
            LAST_STAT_DATE as Last_Statement_Date,INT_NEXT_STATE_DATE as interest_Next_Statement_frequency,
            STATE_FREQ_DAYS as Statement_frequency,INT_STATE_FREQ as interest_statement_frequency,NUMBER_STAT_REQD as number_of_statement_required,DELIVERY_METHOD,TYPE_OF_ACCT,PROD_CODE || ' - ' || GET_PRODUCTDESC(PROD_CODE) as PRODUCT ,BRANCH_CODE  || ' - ' || GET_BRANCHDESC(BRANCH_CODE) AS BRANCH ,STATEMENT_CNT,sector,sub_sector,
            cash_flag as form,chq_flag as cheque_allowed,VIEW_FLAG
            from VW_ACDET_TEMP--acdet_VW
            where acct_link ='${account_number}' AND CUSTOMER_NUMBER = '${customer_number}' and TYPE_OF_ACCT in ('1','2') and STATUS_INDICATOR !=  'CLOS' AND KYC_FLAG IS NULL
            `
          );

          if (data) {
            let arr = [];

            for (let i = 0; i < data.rows.length; i++) {
              let obj = {};

              for (let x = 0; x < data.metaData.length; x++) {
                obj[data.metaData[x].name.toLowerCase()] = data.rows[i][x];
              }

              arr.push(obj);
            }

            // console.log(arr);

            return res.send(arr[0]);
          } else {
            return res.send("Something went wrong... Nothing was returned!!");
          }
        }

        if (subKey == "get-lovs") {
          if (lov == "deliveryMethod") {
            const data = await execute(
              `SELECT ACTUAL_CODE,DESCRIPTION FROM CODE_DESC
              WHERE CODE_TYPE='SDM'
              `
            );

            if (data.rows) {
              const arr = [];

              for (let i = 0; i < data.rows.length; i++) {
                const label = data.rows[i][1];
                const value = data.rows[i][0];

                arr.push({
                  label: `${value ? `${value} - ` : ""}${label}`,
                  value: value ? `${value}` : "",
                });
              }

              return res.send(arr);
            } else {
              return res.send("Something went wrong... Nothing was returned!!");
            }
          }
        }

        if (subKey == "save") {
          console.log({ formData });
          const data = await execute(
            ` begin pkg_staticamend_rt.PRC_ACCOUNT_SAVE_RT(
          :p_acct_link       ,
          :p_account_acct_descrp   ,
          :p_account_address_1     ,
          :p_account_overdrawn_limit ,
          :p_account_lien_amount   ,
          :p_account_shadow_balance_today ,
          :p_account_shadow_uncleared ,
          :p_account_currency_code ,
          :p_account_customer_number ,
          :p_account_trans_count   ,
          :p_account_memo1         ,
          :p_account_memo2         ,
          :p_account_memo3         ,
          :p_account_date_opened   ,
          :p_account_lien_expiring_date ,
          :p_account_date_of_last_activity ,
          :p_account_interest_account_no ,
          :p_account_isic_1        ,
          :p_account_cumulative_interest ,
          :p_account_od_int_rate   ,
          :p_account_cr_int_rate   ,
          :p_account_od_interest_amount ,
          :p_account_od_expiring_date ,
          :p_account_status_indicator ,
          :p_account_arm_1         ,
          :p_account_institute_class ,
          :p_account_short_name    ,
          :p_account_legal_form    ,
          :p_account_od_account_no ,
          :p_account_credit_int_code ,
          :p_account_debit_int_code ,
          :p_account_state_freq_date ,
          :p_account_last_stat_date ,
          :p_account_int_next_state_date ,
          :p_account_state_freq_days ,
          :p_account_int_state_freq ,
          :p_account_number_stat_reqd ,
          :p_account_delivery_method ,
          :p_account_type_of_acct  ,
          :p_account_prod_code     ,
          :p_account_branch_code   ,
          :p_global_username       ,
          :p_account_emp_code      ,
          :p_account_statement_cnt ,
          :p_account_sectorm       ,
          :p_account_sector        ,
          :p_account_cash_flag     ,
          :p_account_chq_flag      ,
          :p_account_view_flag     ,
          :p_account_fx_category   ,
          :p_global_bra            ,
          :p_message       
        ); end;
            `,
            {
              p_acct_link: customer_number,
              p_account_acct_descrp: formData?.account_name,
              p_account_address_1: formData?.address_1,
              p_account_overdrawn_limit: formData?.overdrawn_limit,
              p_account_lien_amount: formData?.lien_amount,
              p_account_shadow_balance_today: formData?.shadow_balance_today,
              p_account_shadow_uncleared: formData?.shadow_uncleared,
              p_account_currency_code: formData?.currency_code, // Only the currency code part
              p_account_customer_number: formData?.customer_number,
              p_account_trans_count: formData?.trans_count,
              p_account_memo1: formData?.memo1,
              p_account_memo2: formData?.memo2,
              p_account_memo3: formData?.memo3,
              p_account_date_opened: formData?.date_opened
                ? new Date(formData?.date_opened)
                : null,
              p_account_lien_expiring_date: formData?.lien_expiring_date
                ? new Date(formData?.lien_expiring_date)
                : null,
              p_account_date_of_last_activity: formData?.date_of_last_activity
                ? new Date(formData?.date_of_last_activity)
                : null,
              p_account_interest_account_no: formData?.credit_interest_ac,
              p_account_isic_1: formData?.isic,
              p_account_cumulative_interest: formData?.cumulative_interest,
              p_account_od_int_rate: formData?.debit_rate,
              p_account_cr_int_rate: formData?.credit_rate,
              p_account_od_interest_amount: formData?.od_interest_amount,
              p_account_od_expiring_date: formData?.od_expiring_date
                ? new Date(formData?.od_expiring_date)
                : null,
              p_account_status_indicator: formData?.status_indicator, // Only the status indicator part
              p_account_arm_1: formData?.arm_1,
              p_account_institute_class: formData?.institute_class,
              p_account_short_name: formData?.short_name,
              p_account_legal_form: formData?.legal_form,
              p_account_od_account_no: formData?.debit_interest_ac,
              p_account_credit_int_code: formData?.credit_interest_prod_code,
              p_account_debit_int_code: formData?.debit_interest_prod_code,
              p_account_state_freq_date: formData?.state_freq_date
                ? new Date(formData?.state_freq_date)
                : null,
              p_account_last_stat_date: formData?.last_statement_date
                ? new Date(formData?.last_statement_date)
                : null,
              p_account_int_next_state_date: formData?.next_statement_date
                ? new Date(formData?.next_statement_date)
                : null,
              p_account_state_freq_days: formData?.state_freq_days,
              p_account_int_state_freq: formData?.int_state_freq,
              p_account_number_stat_reqd: formData?.number_stat_reqd,
              p_account_delivery_method: formData?.delivery_method,
              p_account_type_of_acct: formData?.type_of_acct,
              p_account_prod_code: formData?.prod_code, // Only the product code part
              p_account_branch_code: formData?.branch?.slice(0, 3), // Only the branch code part
              p_global_username: username, // Not provided in the query
              p_account_emp_code: "", // Not provided in the query
              p_account_statement_cnt: formData?.statement_cnt,
              p_account_sectorm: formData?.sector,
              p_account_sector: formData?.sub_sector,
              p_account_cash_flag: formData?.cash_flag,
              p_account_chq_flag: formData?.chq_flag,
              p_account_view_flag: formData?.view_flag,
              p_account_fx_category: "", // Not provided in the query
              p_global_bra: "", // Not provided in the query
              p_message: {
                type: oracledb.STRING,
                dir: oracledb.BIND_OUT,
              },
            }
          );

          if (data) {
            console.log({ data });

            return res.send(data?.outBinds?.p_message);
          } else {
            return res.send("Something went wrong... Nothing was returned!!");
          }
        }

        if (subKey == "mandate-lov") {
          const data = await execute(
            `select DESCRIPTION,ACTUAL_CODE from CODE_DESC where code_type='AMD' AND NVL(STATUS, 'Y')='Y'
            AND CLASS_CODE= get_CUST_CTYPE(GET_CUSTOMERNO('004001211000344124'))
            `
          );

          if (data) {
            const arr = [];

            for (let i = 0; i < data.rows.length; i++) {
              const label = data.rows[i][1];
              const value = data.rows[i][0];

              arr.push({
                label: `${value ? `${value} - ` : ""}${label}`,
                value: value ? `${value}` : "",
              });
            }

            return res.send(arr);
          } else {
            return res.send("Something went wrong... Nothing was returned!!");
          }
        }

        if (subKey == "mandate-onChange") {
          const data = await execute(
            `select count(*)
              from BRANCH_IMAGE
              where acct_link = ${account_number} `
          );

          if (data?.rows[0][0] < 1) {
            const errorMessage = await execute(
              `select get_errorcode('01202') from dual`
            );

            return res.send({
              responseCode: "405",
              responseMessage: errorMessage?.rows[0][0],
            });
          } else {
            const data = await execute(
              `SELECT distinct SIGNATORY_NAME,CONTACT_NUMBER, ACCOUNT_MANDATE from BRANCH_IMAGE
             where acct_link =${account_number}`
            );
            return res.send({
              responseCode: "000",
              responseMessage: {
                signatoryName: data?.rows[0][0],
                contactNumber: data?.rows[0][1],
                originalMandate: data?.rows[0][2],
              },
            });
          }
        }

        if (subKey == "save-mandate") {
          const data = await execute(
            `BEGIN PKG_STATICAMEND_RT.PRC_MANDATE_UPDATE_RT( :account_number, :account_name , :contact, :customer_number,
          :posted_by, :terminal, '', '', :new_mandate, '', '' , :msg , :msg_code); end;`,
            {
              account_number,
              account_name,
              posted_by,
              contact,
              new_mandate,
              customer_number,
              terminal,
              msg: {
                type: oracledb.STRING,
                dir: oracledb.BIND_OUT,
              },
              msg_code: {
                type: oracledb.NUMBER,
                dir: oracledb.BIND_OUT,
              },
            }
          );
          return res.send(data?.outBinds);
        }
      }

      // segment
      if (cust_type) {
        const data = await execute(
          `Select SEG_CODE ACTUAL_CODE, SEG_DESCRIPTION DESCRIPTION
        from VW_SEGRM_LIST
        where SEG_LEVEL =  '2' and cs_type in ('B', NVL('${cust_type}','I'))
        ORDER BY SEG_CODE`
        );

        if (data.rows) {
          const arr = [];

          for (let i = 0; i < data.rows.length; i++) {
            const label = data.rows[i][1];
            const value = data.rows[i][0];

            arr.push({
              label: `${value ? `${value} - ` : ""}${label}`,
              value: value ? `${value}` : "",
            });
          }

          return res.send(arr);
          console.log("segment", arr);
        } else {
          return res.send("Something went wrong... Nothing was returned!!");
        }
      }

      // sub segment
      //this is dependent on the cust_type above which fetches the sub segments based on the segment
      if (sub_segment_code) {
        const data = await execute(
          `select SEG_CODE ACTUAL_CODE,SEG_DESCRIPTION DESCRIPTION from VW_SEGRM_LIST where PARENT_ID = '${sub_segment_code}'
           and SEG_LEVEL = '3'`
        );
        if (data.rows) {
          const arr = [];

          for (let i = 0; i < data.rows.length; i++) {
            const label = data.rows[i][1];
            const value = data.rows[i][0];

            arr.push({
              label: `${value ? `${value} - ` : ""}${label}`,
              value: value ? `${value}` : "",
            });
          }

          return res.send(arr);
          console.log("segment", arr);
        } else {
          return res.send("Something went wrong... Nothing was returned!!");
        }
      }

      // sub sector to be fetched from sector
      if (code_type && sector_code) {
        const data = await execute(
          `select ACTUAL_CODE,DESCRIPTION from code_desc where code_type = (select class_code from code_desc
         where code_type = '${code_type}'
         and actual_code = '${sector_code}')
         ORDER BY ACTUAL_CODE`
        );

        if (data.rows) {
          const arr = [];

          for (let i = 0; i < data.rows.length; i++) {
            const label = data.rows[i][1];
            const value = data.rows[i][0];

            arr.push({
              label: `${value ? `${value} - ` : ""}${label}`,
              value: value ? `${value}` : "",
            });
          }

          return res.send(arr);
        } else {
          return res.send("Something went wrong... Nothing was returned!!");
        }
      }

      // fetching source_of_wealth data to amend
      if (customer_number && source_of_wealth === "true") {
        const data = await execute(
          `select  source_code, GET_CODE_DESC(source_code, 'SOW') as description, worth_value from TB_AML_NETWORTH  
           where customer_number ='${customer_number}'`
        );
        if (data.rows) {
          const response = [];
          for (let i = 0; i < data.rows.length; i++) {
            const rowData = {}; // Create an object for each row

            for (let x = 0; x < data.metaData.length; x++) {
              const columnName = data.metaData[x].name.toLowerCase();
              const columnValue = data.rows[i][x];
              rowData[columnName] = columnValue; // Assign each column to the object
            }

            response.push(rowData); // Push the object to the response array
          }
          return res.send(response);
        } else {
          return res.send("Something went wrong... Nothing was returned!!");
        }
      }

      // fetching source of funds
      if (customer_number && code) {
        const data = await execute(
          `select source_code, GET_CODE_DESC(source_code, '${code}') as description, selected
          from  TB_SOURCE_TRANS where customer_number ='${customer_number}' and code_type = '${code}' order by source_code`
        );
        if (data.rows) {
          const response = [];
          for (let i = 0; i < data.rows.length; i++) {
            const rowData = {}; // Create an object for each row

            for (let x = 0; x < data.metaData.length; x++) {
              const columnName = data.metaData[x].name.toLowerCase();
              const columnValue = data.rows[i][x];
              rowData[columnName] = columnValue; // Assign each column to the object
            }

            response.push(rowData); // Push the object to the response array
          }
          return res.send(response);
        } else {
          return res.send("Something went wrong... Nothing was returned!!");
        }
      }

      // getting expectation volumes in anti-money laundering
      if (customer_number && expectation_volume === "true") {
        const data = await execute(
          `select no_withdrawal_month, amt_withdrawal_month,annual_income, no_deposit_month, amt_deposit_month
          from TB_AML where customer_number ='${customer_number}'`
        );
        // 104586
        if (data.rows) {
          const response = [];
          for (let i = 0; i < data.rows.length; i++) {
            const rowData = {}; // Create an object for each row

            for (let x = 0; x < data.metaData.length; x++) {
              const columnName = data.metaData[x].name.toLowerCase();
              const columnValue = data.rows[i][x];
              rowData[columnName] = columnValue; // Assign each column to the object
            }

            response.push(rowData); // Push the object to the response array
          }
          return res.send(response);
        } else {
          return res.send("Something went wrong... Nothing was returned!!");
        }
      }

      // console.log({ customer_number, amendment_approval });
      // checking whether customer number is has already been amending and pending
      if (customer_number && amendment_approval == "true") {
        const data = await execute(
          `select get_custamend('${customer_number}') as message from dual`
        );
        // 104586
        if (data.rows) {
          const response = [];
          for (let i = 0; i < data.rows.length; i++) {
            const rowData = {}; // Create an object for each row

            for (let x = 0; x < data.metaData.length; x++) {
              const columnName = data.metaData[x].name.toLowerCase();
              const columnValue = data.rows[i][x];
              rowData[columnName] = columnValue; // Assign each column to the object
            }

            response.push(rowData); // Push the object to the response array
          }
          return res.send(response);
        } else {
          return res.send("Something went wrong... Nothing was returned!!");
        }
      }

      //  fetching next of kin
      if (customer_number) {
        const data = await execute(
          `select CUSTOMER_NUMBER, NEXT_OF_KIN, NEXT_OF_KIN_ADDRESS, NEXT_OF_KIN_PHONE, NEXT_OF_KIN_ID_TYPE,get_code_desc(NEXT_OF_KIN_ID_TYPE, 'HRD') as description, NEXT_OF_KIN_ID_NO, 
          NEXT_OF_KIN_ID_EXPDATE, NEXT_OF_KIN_RELATIONSHIP, NEXT_OF_KIN_DOB, NEXT_OF_KIN_PERCENTSHARE from tb_next_of_kin where customer_number = '${customer_number}'`
        );
        //  * from tb_next_of_kin
        // 104586
        if (data.rows) {
          const response = [];
          for (let i = 0; i < data.rows.length; i++) {
            const rowData = {}; // Create an object for each row

            for (let x = 0; x < data.metaData.length; x++) {
              const columnName = data.metaData[x].name.toLowerCase();
              const columnValue = data.rows[i][x];
              rowData[columnName] = columnValue; // Assign each column to the object
            }

            response.push(rowData); // Push the object to the response array
          }
          return res.send(response);
        } else {
          return res.send("Something went wrong... Nothing was returned!!");
        }
      }

      // fetching relation data if customer_id exists
      if (customer_id) {
        const data = await execute(
          `SELECT RELATION_NO, FIRST_NAME, SURNAME, GENDER, MOBILE1 
          FROM VW_RELATION_TEMP 
          WHERE CUSTOMER_NUMBER='${customer_id}' AND KYC_FLAG IS NULL`
        );
        if (data.rows) {
          const response = [];
          for (let i = 0; i < data.rows.length; i++) {
            const rowData = {}; // Create an object for each row

            for (let x = 0; x < data.metaData.length; x++) {
              const columnName = data.metaData[x].name.toLowerCase();
              const columnValue = data.rows[i][x];
              rowData[columnName] = columnValue; // Assign each column to the object
            }

            response.push(rowData); // Push the object to the response array
          }
          return res.send(response);
        } else {
          return res.send("Something went wrong... Nothing was returned!!");
        }
      }
    } catch (err) {
      res.send(err?.toString());
      console.log(err);
    }
  };

  await memberAmendment();
});

app.get("/api/referees", async (req, res) => {
  try {
    // Connect to Oracle DB
    const con = await oracledb.getConnection({
      user: DB_USER,
      password: DB_PASSWORD,
      connectString: DB_CONNECTION_STRING,
      timeout: DB_CONNECTION_TIMEOUT,
    });

    // Execute the query to fetch the first 100 rows
    const query = "SELECT * FROM TB_REFEREES";
    const result = await con.execute(query);

    // Release the connection
    await con.close();

    // Send the query results as the API response
    res.json(result.rows);
  } catch (error) {
    console.log("Error executing query:", error);
    if (con) {
      // Release the connection if an error occurred
      await con.close();
    }
    res.status(500).json({ error: "Failed to fetch customer data" });
  }
});

/////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////

app.post("/api/create-account-quick", (req, res) => {
  // return res.send("ghana")
  let quickAccountOpening = require("./controllers/account/quick-account-opening");

  let cust_type = req.body.cust_type;
  let CUSTOMER_cat = req.body.CUSTOMER_cat;
  let title = req.body.title;
  let fname = req.body.fname;
  let lname = req.body.lname;
  let oname = req.body.oname;
  let tin_v = req.body.tin_v;
  let DOB = req.body.dob;
  let sufix_v = req.body.sufix_v;
  let place_ofbirth = req.body.place_ofbirth;
  let country_residence = req.body.country_residence;
  let staff_cat = req.body.staff_cat;
  let risk_code = req.body.risk_code;
  let reason = req.body.reason;
  let company_name = req.body.company_name;
  let contitution_code = req.body.contitution_code;
  let corp_tin = req.body.corp_tin;
  let date_of_corp = req.body.date_of_corp;
  let domiciel_coun = req.body.domiciel_coun;
  let residence_status = req.body.residence_status;
  let prefer_lang = req.body.prefer_lang;
  let approval_panel = req.body.approval_panel;
  let sex_v = req.body.sex_v;
  let nationality = req.body.nationality;
  let homeaddr = req.body.homeaddr;
  let homeaddr1 = req.body.homeaddr1;
  let workaddr = req.body.workaddr;
  let city = req.body.city;
  let subprod = req.body.subprod;
  let username = req.body.username;
  let posted_by_v = req.body.posted_by_v;
  let sub_sector = req.body.sub_sector;
  let sub_segment = req.body.sub_segment;
  let doctype = req.body.doctype;
  let docid = req.body.docid;
  let doc_expirydate = req.body.doc_expirydate;
  let personlphone = req.body.personlphone;
  let mandate = req.body.mandate;
  let email = req.body.email;
  let issueauth = req.body.issueauth;
  let issuedte = req.body.issuedte;
  let sig = req.body.sig;
  let pic = req.body.pic;
  let fing = req.body.fing;
  let NO_DB_TRANS = req.body.NO_DB_TRANS;
  let TOTAL_DB_TRANS = req.body.TOTAL_DB_TRANS;
  let NO_CR_TRANS = req.body.NO_CR_TRANS;
  let TOTAL_CR_TRANS = req.body.TOTAL_CR_TRANS;
  let doc_ref = req.body.doc_ref;
  let PROOF_ADDRESS = req.body.PROOF_ADDRESS;
  let SOURCE_OF_FUNDS = req.body.SOURCE_OF_FUNDS;
  let OCCUPATION = req.body.OCCUPATION;
  let NATURE_OF_BUSINESS = req.body.NATURE_OF_BUSINESS;
  let armcode = req.body.armcode;
  let source_of_worth = req.body.source_of_worth;
  let worth_val = req.body.worth_val;
  let rfid = req.body.rfid;
  let kycdoc = req.body.kycdoc;
  let terminal = req.body.terminal;
  let approval = req.body.approval;
  let para3 = req.body.para3;

  quickAccountOpening
    .quickAccountOpeningFunc(
      cust_type,
      CUSTOMER_cat,
      title,
      fname,
      lname,
      oname,
      tin_v,
      DOB,
      sufix_v,
      place_ofbirth,
      country_residence,
      staff_cat,
      risk_code,
      reason,
      company_name,
      contitution_code,
      corp_tin,
      date_of_corp,
      domiciel_coun,
      residence_status,
      prefer_lang,
      approval_panel,
      sex_v,
      nationality,
      homeaddr,
      homeaddr1,
      workaddr,
      city,
      subprod,
      username,
      posted_by_v,
      sub_sector,
      sub_segment,
      doctype,
      docid,
      doc_expirydate,
      personlphone,
      mandate,
      email,
      issueauth,
      issuedte,
      sig,
      pic,
      fing,
      NO_DB_TRANS,
      TOTAL_DB_TRANS,
      NO_CR_TRANS,
      TOTAL_CR_TRANS,
      doc_ref,
      PROOF_ADDRESS,
      SOURCE_OF_FUNDS,
      OCCUPATION,
      NATURE_OF_BUSINESS,
      armcode,
      source_of_worth,
      worth_val,
      rfid,
      kycdoc,
      terminal,
      approval,
      para3
    )
    .then((result) => {
      // res.send(result);
      if (result) {
        // res.send(result);

        if (
          result.outBinds?.response_code === 000 ||
          result.outBinds?.response_code === "000"
        ) {
          res.send(result.outBinds);
        } else {
          res.send(result.outBinds);

          response = {
            success: false,
            responseMessage: result.outBinds,
          };
        }
      }
    });
});

// customer-sub-segment-quick
// customer-sub-segment-quick
app.post("/api/get-customer-sub-segment-individual", (req, res) => {
  const segmentCode = req.body.segmentCode;

  async function customerSubSegmentIndividual() {
    let con;

    try {
      con = await oracledb.getConnection({
        user: DB_USER,
        password: DB_PASSWORD,
        connectString: DB_CONNECTION_STRING,
        timeout: DB_CONNECTION_TIMEOUT,
      });

      const data = await con.execute(
        `select SEG_CODE ACTUAL_CODE,SEG_DESCRIPTION
      DESCRIPTION, SEG_CODE RO_CODE  from VW_SEGRM_LIST
      where PARENT_ID='${segmentCode}'
      and SEG_LEVEL = '3'`
      );

      // res.send("get started")

      if (data.rows) {
        const arr = [];

        for (let i = 0; i < data.rows.length; i++) {
          const description = data.rows[i][1];
          const actual_code = data.rows[i][0];
          const class_code = data.rows[i][2];

          arr.push({
            description: `${actual_code} - ${description}`,
            actual_code: `${actual_code}`,
            class_code: class_code,
          });
        }

        res.send(arr);
      } else {
        res.send(err);
        console.log(err);
      }
    } catch (err) {
      res.send(err);
    }
  }

  customerSubSegmentIndividual();
});

//relation -manager
app.get("/api/get-relation-manager-id", async (req, res) => {
  try {
    const conn = await oracledb.getConnection({
      user: DB_USER,
      password: DB_PASSWORD,
      connectString: DB_CONNECTION_STRING,
      timeout: DB_CONNECTION_TIMEOUT,
    });

    const result = await conn.execute(
      "SELECT ARM_CODE as value, ARM_NAME as label, FLAG FROM VW_TBLARM_new ORDER BY ARM_CODE"
    );

    const data = result.rows.map((row) => ({
      value: row[0],
      label: `${row[0]} - ${row[1]}`,
      // flag: row[2]
    }));

    res.json(data);
  } catch (error) {
    console.log(error);
    res.status(500).send("Internal server error");
  }
});

// get Currencies
app.post("/api/currencies", (req, res) => {
  const type_of_acct = req.body.type_of_acct;

  async function getCurrenciesFromUserAccount() {
    let con;

    try {
      con = await oracledb.getConnection({
        user: DB_USER,
        password: DB_PASSWORD,
        connectString: DB_CONNECTION_STRING,
        timeout: DB_CONNECTION_TIMEOUT,
      });

      const data = await con.execute(`SELECT CURRENCY_CODE, DESCRIPTION
        FROM tb_currency
        WHERE APP_FLAG = 'Y' AND CURRENCY_CODE IN (
          SELECT DISTINCT currency
          FROM control_totals_acct
          WHERE PROD_CODE = '${type_of_acct}'
        )
      `);

      // res.send("get started")

      if (data.rows) {
        const arr = [];

        for (let i = 0; i < data.rows.length; i++) {
          const description = data.rows[i][1];
          const actual_code = data.rows[i][0];
          const short_descrp = data.rows[i][2];

          arr.push({
            description: `${actual_code} - ${description}`,
            actual_code: `${actual_code}`,
            short_descrp: short_descrp,
          });
        }

        res.send(arr);
      } else {
        res.send(err);
        console.log(err);
      }
    } catch (err) {
      res.send(err);
    }
  }

  getCurrenciesFromUserAccount();
});

// Select Introductory Source
app.get("/api/get-introductory-source", (req, res) => {
  async function getIntroSource() {
    let con;

    try {
      con = await oracledb.getConnection({
        user: DB_USER,
        password: DB_PASSWORD,
        connectString: DB_CONNECTION_STRING,
        timeout: DB_CONNECTION_TIMEOUT,
      });

      const data = await con.execute(
        `SELECT (F_NAME || ' ' || M_NAME || ' ' || S_NAME), ID FROM PERSONAL_INFO`
      );

      // res.send("get started")
      if (data.rows) {
        const arr = [];

        for (let i = 0; i < data.rows.length; i++) {
          const label = data.rows[i][0];
          const value = data.rows[i][1];

          arr.push({
            label: `${value} - ${label}`,
            value: value,
          });
        }

        res.send(arr);
      } else {
        res.send(err);
        console.log(err);
      }
    } catch (err) {
      res.send(err);
    }
  }

  getIntroSource();
});

// app.post("/api/quick-account-opening", (req, res) => {
//   let quickAccountOpening = require("./controllers/account/quick-account-opening");

//   let cust_type = req.body.cust_type;
//   let CUSTOMER_cat = req.body.CUSTOMER_cat;
//   let title = req.body.title;
//   let fname = req.body.fname;
//   let lname = req.body.lname;
//   let oname = req.body.oname;
//   let tin_v = req.body.tin_v;
//   let DOB = req.body.dob;
//   let sufix_v = req.body.sufix_v;
//   let place_ofbirth = req.body.place_ofbirth;
//   let country_residence = req.body.country_residence;
//   let staff_cat = req.body.staff_cat;
//   let risk_code = req.body.risk_code;
//   let reason = req.body.reason;
//   let company_name = req.body.company_name;
//   let contitution_code = req.body.contitution_code;
//   let corp_tin = req.body.corp_tin;
//   let date_of_corp = req.body.date_of_corp;
//   let domiciel_coun = req.body.domiciel_coun;
//   let residence_status = req.body.residence_status;
//   let prefer_lang = req.body.prefer_lang;
//   let approval_panel = req.body.approval_panel;
//   let sex_v = req.body.sex_v;
//   let nationality = req.body.nationality;
//   let homeaddr = req.body.homeaddr;
//   let homeaddr1 = req.body.homeaddr1;
//   let workaddr = req.body.workaddr;
//   let city = req.body.city;
//   let subprod = req.body.subprod;
//   let username = req.body.username;
//   let posted_by_v = req.body.posted_by_v;
//   let sub_sector = req.body.sub_sector;
//   let sub_segment = req.body.sub_segment;
//   let doctype = req.body.doctype;
//   let docid = req.body.docid;
//   let doc_expirydate = req.body.doc_expirydate;
//   let personlphone = req.body.personlphone;
//   let mandate = req.body.mandate;
//   let email = req.body.email;
//   let issueauth = req.body.issueauth;
//   let issuedte = req.body.issuedte;
//   let sig = req.body.sig;
//   let pic = req.body.pic;
//   let fing = req.body.fing;
//   let NO_DB_TRANS = req.body.NO_DB_TRANS;
//   let TOTAL_DB_TRANS = req.body.TOTAL_DB_TRANS;
//   let NO_CR_TRANS = req.body.NO_CR_TRANS;
//   let TOTAL_CR_TRANS = req.body.TOTAL_CR_TRANS;
//   let doc_ref = req.body.doc_ref;
//   let PROOF_ADDRESS = req.body.PROOF_ADDRESS;
//   let SOURCE_OF_FUNDS = req.body.SOURCE_OF_FUNDS;
//   let OCCUPATION = req.body.OCCUPATION;
//   let NATURE_OF_BUSINESS = req.body.NATURE_OF_BUSINESS;
//   let armcode = req.body.armcode;
//   let source_of_worth = req.body.source_of_worth;
//   let worth_val = req.body.worth_val;
//   let rfid = req.body.rfid;
//   let kycdoc = req.body.kycdoc;
//   let terminal = req.body.terminal;
//   let approval = req.body.approval;
//   let para3 = req.body.para3;

//   quickAccountOpening
//     .quickAccountOpeningFunc(
//       cust_type,
//       CUSTOMER_cat,
//       title,
//       fname,
//       lname,
//       oname,
//       tin_v,
//       DOB,
//       sufix_v,
//       label: `${row[1]} - ${row[0]}`,
//       value: row[1],
//       // flag: row[2]
//     }));

//     res.json(data);
//   } catch (error) {
//     console.log(error);
//     res.status(500).send("Internal server error");
//   }
// });

// Location
app.get("/api/get-location", async (req, res) => {
  try {
    const conn = await oracledb.getConnection({
      user: "BANKOWNER",
      password: "pass1234",
      connectString: "192.168.1.60:9534/UNSGP",
    });

    const result =
      await conn.execute(`SELECT UPPER(DESCRIPTION) DESCRIPTION, CLASS_CODE RISK_CODE, ACTUAL_CODE 
    FROM TB_RISK_CALC_SETUP WHERE CODE_TYPE ='BRA'`);

    const data = result.rows.map((row) => ({
      label: `${row[2]} - ${row[0]}`,
      value: row[2],
      // flag: row[2]
    }));

    res.json(data);
  } catch (error) {
    console.log(error);
    res.status(500).send("Internal server error");
  }
});

// Customer Type
app.get("/api/get-customer-type", async (req, res) => {
  try {
    const conn = await oracledb.getConnection({
      user: "BANKOWNER",
      password: "pass1234",
      connectString: "192.168.1.60:9534/UNSGP",
    });

    const result =
      await conn.execute(`SELECT UPPER(DESCRIPTION) DESCRIPTION, CLASS_CODE RISK_CODE, ACTUAL_CODE
    FROM TB_RISK_CALC_SETUP`);

    const data = result.rows.map((row) => ({
      label: `${row[2]} - ${row[0]}`,
      value: row[2],
      // flag: row[2]
    }));

    res.json(data);
  } catch (error) {
    console.log(error);
    res.status(500).send("Internal server error");
  }
});

// Product
app.get("/api/get-product-pep", async (req, res) => {
  try {
    const conn = await oracledb.getConnection({
      user: "BANKOWNER",
      password: "pass1234",
      connectString: "192.168.1.60:9534/UNSGP",
    });
    const result =
      await conn.execute(`SELECT UPPER(DESCRIPTION) DESCRIPTION, CLASS_CODE RISK_CODE, ACTUAL_CODE
    FROM TB_RISK_CALC_SETUP WHERE CODE_TYPE ='PRD'`);
    const data = result.rows.map((row) => ({
      label: `${row[2]} - ${row[0]}`,
      value: row[2],
      // flag: row[2]
    }));

    res.json(data);
  } catch (error) {
    console.log(error);
    res.status(500).send("Internal server error");
  }
});

// Channel
app.get("/api/get-channel-pep", async (req, res) => {
  try {
    const conn = await oracledb.getConnection({
      user: "BANKOWNER",
      password: "pass1234",
      connectString: "192.168.1.60:9534/UNSGP",
    });

    const result =
      await conn.execute(`SELECT UPPER(DESCRIPTION) DESCRIPTION, CLASS_CODE RISK_CODE, ACTUAL_CODE
    FROM TB_RISK_CALC_SETUP WHERE CODE_TYPE ='CHN'`);

    const data = result.rows.map((row) => ({
      label: `${row[2]} - ${row[0]}`,
      value: row[2],
      // flag: row[2]
    }));

    res.json(data);
  } catch (error) {
    console.log(error);
    res.status(500).send("Internal server error");
  }
});

//FINANCE
app.post("/api/create-gl-account", (req, res) => {
  async function createGLaccount() {
    let con;

    try {
      con = await oracledb.getConnection({
        user: DB_USER,
        password: DB_PASSWORD,
        connectString: DB_CONNECTION_STRING,
      });

      const accountDescription = req.body.accountDescription;
      const level = req.body.level;
      const currency = req.body.currency;
      const branch = req.body.branch;
      const bspl = req.body.bspl;
      const bpCode = req.body.bpCode;
      const state = req.body.state;
      const status = req.body.status;
      const accountRestriction = req.body.accountRestriction;
      const viewRestriction = req.body.viewRestriction;
      const financeRepStatus = req.body.financeRepStatus;
      const accountClass = req.body.accountClass;
      const returnCode = req.body.returnCode;
      const itemCode = req.body.itemCode;
      const chkprim = req.body.chkprim;
      const accountCode = req.body.accountCode;
      const chartGroup = req.body.chartGroup;
      const clearToCode = req.body.clearToCode;
      const acMemoP = req.body.acMemoP;
      const acctLink = req.body.acctLink;
      const accountNumber = req.body.accountNumber;
      const postingDate = req.body.postingDate;
      const postingTerminal = os.hostname();
      const postingIP = getIPAddress().address;
      const postedBy = req.body.postedBy;
      const amendingDate = req.body.amendingDate;
      const amendingTerminal = os.hostname();
      const amendingIP = getIPAddress().address;
      const amendedBy = req.body.amendedBy;
      const approvedDate = req.body.approvedDate;
      const approvedTerminal = os.hostname();
      const approvedIP = getIPAddress().address;
      const approvedBy = req.body.approvedBy;
      const flag = req.body.flag;
      const appFlag = req.body.appFlag;
      const appFlagMessage = req.body.appFlagMessage;
      const flagMessage = req.body.flagMessage;
      // const ipAddress = getIPAddress().address;
      // const branchCode = getIPAddress().address;
      // const moduleB = "PKG_fin_bs_creation";
      // const channelB = "BRA";
      // return res.send("hello")

      // return res.send(p2);

      console.log(currency, "currencycurrencycurrency");
      con.execute(
        "BEGIN PKG_fin_gl_TEST.PKG_GL_CREATION(:account_descrp,:level_id_p,:currency,:branch_code,:bspl,:bp_code,:state,:status,:account_restriction,:view_restrict,:finance_rep_status,:account_class,:return_code,:item_code,:chart_code_p,:chkprim,:account_code_P,:clear_to,:ac_memo_p,:posted_by_gl,:posting_date_p,:posting_terminal_p,:posting_ip_p,:amended_by_gl,:amended_date_p,:amended_terminal_p,:amended_ip_p,:approved_by_gl,:approved_date_p,:approved_terminal_p,:approved_ip_p,:flag_p,:app_flag,:app_flag_message,:flag_message_p,:api_status,:api_msg);END;",
        {
          account_descrp: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: accountDescription,
          },
          level_id_p: {
            type: oracledb.STRING,
            dir: oracledb.BIND_INOUT,
            val: level,
          },
          currency: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: currency,
          },
          branch_code: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: branch,
          },
          bspl: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: bspl,
          },
          bp_code: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: bpCode,
          },
          state: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: state,
          },
          status: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: status,
          },
          account_restriction: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: accountRestriction,
          },
          view_restrict: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: viewRestriction,
          },
          finance_rep_status: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: financeRepStatus,
          },
          account_class: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: accountClass,
          },
          return_code: {
            type: oracledb.STRING,
            dir: oracledb.BIND_INOUT,
            val: returnCode,
          },
          item_code: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: itemCode,
          },
          chart_code_p: {
            type: oracledb.STRING,
            dir: oracledb.BIND_INOUT,
            val: chartGroup,
          },
          chkprim: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: chkprim,
          },
          account_code_P: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: accountCode,
          },
          clear_to: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: clearToCode,
          },
          ac_memo_p: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: acMemoP,
          },
          posted_by_gl: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: postedBy,
          },
          posting_date_p: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: postingDate,
          },
          posting_terminal_p: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: postingTerminal,
          },
          posting_ip_p: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: postingIP,
          },
          amended_by_gl: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: amendedBy,
          },
          amended_date_p: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: amendingDate,
          },
          amended_terminal_p: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: amendingTerminal,
          },
          amended_ip_p: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: amendingIP,
          },
          approved_by_gl: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: approvedBy,
          },
          approved_date_p: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: approvedDate,
          },
          approved_terminal_p: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: approvedTerminal,
          },
          approved_ip_p: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: approvedIP,
          },
          flag_p: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: flag,
          },
          app_flag: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: appFlag,
          },
          app_flag_message: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: appFlagMessage,
          },
          flag_message_p: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: flagMessage,
          },
          api_status: {
            type: oracledb.STRING,
            dir: oracledb.BIND_OUT,
          },
          api_msg: {
            type: oracledb.STRING,
            dir: oracledb.BIND_OUT,
          },
        },
        function (err, result) {
          if (err) {
            throw err;
          }
          // return res.send(p)

          if (result) {
            console.log(req.body, "req.body");
            // console.log(accountClass,"accountDescription");
            // console.log(chartGroup,"chartGroup");
            console.log(result.outBinds.api_status);
            console.log(result.outBinds.api_msg);
            if (result.outBinds.api_status === "Y") {
              let message = result.outBinds.api_msg;
              response = {
                success: "Y",
                // credit_postings : p,
                message: message,
                // token_id: tokennumber(50),
              };

              res.send(response);
            } else {
              let message = result.outBinds.api_msg;

              response = {
                success: result.outBinds.api_status,
                message: message,
                // token_id: tokennumber(50),
              };

              res.send(response);
            }
          }
        }
      );
    } catch (err) {
      res.send(err);
    }
  }

  createGLaccount();
});

///// FIXED ASSET /////

app.post("/api/get-asset-capture-approval-data", (req, res) => {
  const assetCategory = req.body.assetCategory;
  const assetID = req.body.assetID;
  const assetDescription = req.body.assetDescription;
  const serialNumber = req.body.serialNumber;
  const physicalLocation = req.body.physicalLocation;
  // const barCode = req.body.barCode;
  const acquisitionDate = req.body.acquisitionDate;

  async function getAssetCaptureApprovalData() {
    let con;

    try {
      con = await oracledb.getConnection({
        user: DB_USER,
        password: DB_PASSWORD,
        connectString: DB_CONNECTION_STRING,
      });

      const data = await con.execute(
        `SELECT ASSET_ID,ASSET_CAT,SERIAL_NO,DESCRIPTION,ACQ_COST,to_char(ACQ_DATE,'DD-MON-YYYY') as acquisition_date,P_LOCATION,POSTED_BY
        FROM ASSET_MASTER
        WHERE flag='N' 
        AND ASSET_CAT LIKE '%'||:assetCategory||'%'
        AND ASSET_ID LIKE '%'||:assetID||'%' 
        AND DESCRIPTION LIKE '%'||:assetDescription||'%'
        AND SERIAL_NO LIKE '%'||:serialNumber||'%' 
        AND P_LOCATION LIKE '%'||:physicalLocation||'%' 
        AND ACQ_DATE LIKE '%'||:acquisitionDate||'%' 
        AND ROWNUM <= 100 
        ORDER BY ASSET_ID`,
        {
          assetCategory,
          assetID,
          assetDescription,
          serialNumber,
          physicalLocation,
          // barCode,
          acquisitionDate,
        }
      );

      if (data) {
        console.log("reggie");

        var arr0 = "";
        var arr = [];

        for (let i = 0; i < data.rows.length; i++) {
          for (let x = 0; x < data.metaData.length; x++) {
            arr0 +=
              '"' +
              [data.metaData[x].name.toLowerCase()] +
              '" : "' +
              data.rows[i][x] +
              '",';
          }

          arr.push(JSON.parse("{" + arr0.replace(/,\s*$/, "") + "}"));
        }

        res.send(arr);
      } else {
        res.send("Something went wrong... Nothing was returned!!");
      }
    } catch (err) {
      res.send(err);

      throw err;
    }
  }

  getAssetCaptureApprovalData();
});

app.post("/api/get-asset-retirement-data", (req, res) => {
  const assetCategory = req.body.assetCategory;
  const assetID = req.body.assetID;
  const assetDescription = req.body.assetDescription;
  const serialNumber = req.body.serialNumber;
  const physicalLocation = req.body.physicalLocation;
  // const barCode = req.body.barCode;
  const acquisitionDate = req.body.acquisitionDate;

  async function getAssetRetirementData() {
    let con;

    try {
      con = await oracledb.getConnection({
        user: DB_USER,
        password: DB_PASSWORD,
        connectString: DB_CONNECTION_STRING,
      });

      const data = await con.execute(
        `SELECT ASSET_ID,ASSET_CAT,SERIAL_NO,DESCRIPTION,ACQ_COST,to_char(ACQ_DATE,'DD-MON-YYYY') as acquisition_date,P_LOCATION,POSTED_BY,DEP_AMOUNT
        FROM ASSET_MASTER
        WHERE flag='Y' 
        AND DISP_APP_FLAG is null 
        AND RETIRED IS NULL 
        AND SUSPENSION_STATUS is null
        AND ASSET_CAT LIKE '%'||:assetCategory||'%'
        AND ASSET_ID LIKE '%'||:assetID||'%' 
        AND DESCRIPTION LIKE '%'||:assetDescription||'%'
        AND SERIAL_NO LIKE '%'||:serialNumber||'%' 
        AND P_LOCATION LIKE '%'||:physicalLocation||'%' 
        AND ACQ_DATE LIKE '%'||:acquisitionDate||'%' 
        AND ROWNUM <= 100 
        ORDER BY ASSET_ID`,
        {
          assetCategory,
          assetID,
          assetDescription,
          serialNumber,
          physicalLocation,
          // barCode,
          acquisitionDate,
        }
      );

      if (data) {
        console.log("reggie");

        var arr0 = "";
        var arr = [];

        for (let i = 0; i < data.rows.length; i++) {
          for (let x = 0; x < data.metaData.length; x++) {
            arr0 +=
              '"' +
              [data.metaData[x].name.toLowerCase()] +
              '" : "' +
              data.rows[i][x] +
              '",';
          }

          arr.push(JSON.parse("{" + arr0.replace(/,\s*$/, "") + "}"));
        }

        res.send(arr);
      } else {
        res.send("Something went wrong... Nothing was returned!!");
      }
    } catch (err) {
      res.send(err);

      throw err;
    }
  }

  getAssetRetirementData();
});

app.post("/api/get-asset-retirement-approval-data", (req, res) => {
  const retiredReason = req.body.retiredReason;
  const assetID = req.body.assetID;
  const retiredType = req.body.retiredType;
  const referenceNumber = req.body.referenceNumber;

  async function getAssetRetirementApprovalData() {
    let con;

    try {
      con = await oracledb.getConnection({
        user: DB_USER,
        password: DB_PASSWORD,
        connectString: DB_CONNECTION_STRING,
      });

      const data = await con.execute(
        `SELECT REFERENCE_NBR,RETIREMENT_TYPE,RETIRED_REASON,ASSET_ID,POSTED_BY,DEP_AMOUNT,RETIREMENT_COST,REMOVAL_COST,RETIRE_SCAN_DOC_ID
          FROM TB_FAFA_RETIREMENT
          WHERE flag='N' 
          AND RETIRED_REASON LIKE '%'||:retiredReason||'%'
          AND ASSET_ID LIKE '%'||:assetID||'%' 
          AND RETIREMENT_TYPE LIKE '%'||:retiredType||'%'
          AND REFERENCE_NBR LIKE '%'||:referenceNumber||'%' 
          AND ROWNUM <= 100 
          ORDER BY REFERENCE_NBR`,
        {
          retiredReason,
          assetID,
          retiredType,
          referenceNumber,
        }
      );

      if (data) {
        console.log("reggie");

        var arr0 = "";
        var arr = [];

        for (let i = 0; i < data.rows.length; i++) {
          for (let x = 0; x < data.metaData.length; x++) {
            arr0 +=
              '"' +
              [data.metaData[x].name.toLowerCase()] +
              '" : "' +
              data.rows[i][x] +
              '",';
          }

          arr.push(JSON.parse("{" + arr0.replace(/,\s*$/, "") + "}"));
        }

        res.send(arr);
      } else {
        res.send("Something went wrong... Nothing was returned!!");
      }
    } catch (err) {
      res.send(err);

      throw err;
    }
  }

  getAssetRetirementApprovalData();
});

app.post("/api/get-asset-suspension-approval-data", (req, res) => {
  const assetID = req.body.assetID;
  const suspensionReason = req.body.retiredReason;

  async function getAssetSuspensionApprovalData() {
    let con;

    try {
      con = await oracledb.getConnection({
        user: DB_USER,
        password: DB_PASSWORD,
        connectString: DB_CONNECTION_STRING,
      });

      const data = await con.execute(
        `select ASSET_ID,SUSPENSION_REASON,POSTED_BY
          from tb_fafa_suspension
          where suspension_flag='N'
          and asset_id like '%'||:assetID ||'%'
          and SUSPENSION_REASON like '%'||:suspensionReason||'%'`,
        {
          assetID,
          suspensionReason,
        }
      );

      if (data) {
        console.log("reggie");

        var arr0 = "";
        var arr = [];

        for (let i = 0; i < data.rows.length; i++) {
          for (let x = 0; x < data.metaData.length; x++) {
            arr0 +=
              '"' +
              [data.metaData[x].name.toLowerCase()] +
              '" : "' +
              data.rows[i][x] +
              '",';
          }

          arr.push(JSON.parse("{" + arr0.replace(/,\s*$/, "") + "}"));
        }

        res.send(arr);
      } else {
        res.send("Something went wrong... Nothing was returned!!");
      }
    } catch (err) {
      res.send(err);

      throw err;
    }
  }

  getAssetSuspensionApprovalData();
});

app.post("/api/get-component-of-main-asset-id", (req, res) => {
  const assetCategory = req.body.assetCategory;

  let getInsuranceCard = async () => {
    try {
      const db = await oracledb.getConnection({
        user: DB_USER,
        password: DB_PASSWORD,
        connectString: DB_CONNECTION_STRING,
        timeout: DB_CONNECTION_TIMEOUT,
      });
      const execute = util.promisify(db.execute).bind(db);

      // return res.send("ghamna");
      // res.send(con);
      const data = await execute(
        `SELECT ASSET_ID,DESCRIPTION 
         FROM asset_master 
         WHERE ASSET_CAT='${assetCategory}'
         AND FLAG = 'Y'
        `
      );
      if (data) {
        // res.send(response);

        var arr0 = "";
        var arr = [];

        for (let i = 0; i < data.rows.length; i++) {
          for (let x = 0; x < data.metaData.length; x++) {
            arr0 +=
              '"' +
              [data.metaData[x].name.toLowerCase()] +
              '" : "' +
              data.rows[i][x] +
              '",';
          }

          arr.push(JSON.parse("{" + arr0.replace(/,\s*$/, "") + "}"));
        }

        return res.send(arr);

        // res.send({
        //   responseCode: "000",
        //   responseMessage : arr
        // });
      } else {
        res.send("Something went wrong... Nothing was returned!!");
      }
    } catch (err) {
      console.log(err);
      res.send(err);
    }
  };
  getInsuranceCard();
});

app.post("/api/physical-location-creation-maintenance", (req, res) => {
  async function physicalLocationCreationMaintenance() {
    let con;

    try {
      con = await oracledb.getConnection({
        user: DB_USER,
        password: DB_PASSWORD,
        connectString: DB_CONNECTION_STRING,
      });

      const locationCode = req.body.locationCode;
      const locationDescription = req.body.locationDescription;
      const locationStatus = req.body.locationStatus;
      const flag = req.body.flag;
      const postedBy = req.body.postedBy;
      const postedDate = req.body.postedDate;
      const postedTerminal = req.body.postedTerminal;
      const postedIP = req.body.postedIP;

      console.log(flag, "flag");

      con.execute(
        "BEGIN PKG_FIXED_ASSET_SETUP_CREATION.PRC_PHYSICAL_LOCATION_CREATION_MAINTENANCE(:LOC_CODE,:LOCATION_DESCRIPTION,:LOCATION_STAT,:FLAG,:POSTED_BY,:POSTED_DATE,:POSTED_TERMINAL,:POSTED_IP,:api_status,:api_msg); END;",
        {
          LOC_CODE: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: locationCode,
          },
          LOCATION_DESCRIPTION: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: locationDescription,
          },
          LOCATION_STAT: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: locationStatus,
          },
          FLAG: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: flag,
          },
          POSTED_BY: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: postedBy,
          },
          POSTED_DATE: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: postedDate,
          },
          POSTED_TERMINAL: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: postedTerminal,
          },
          POSTED_IP: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: postedIP,
          },
          api_status: {
            type: oracledb.STRING,
            dir: oracledb.BIND_OUT,
          },
          api_msg: {
            type: oracledb.STRING,
            dir: oracledb.BIND_OUT,
          },
        },

        function (err, result) {
          if (err) {
            throw err;
          }
          if (result) {
            // console.log(result.outBinds,"jigga");
            // console.log(flag,"currencycurrencycurrency");
            // console.log(result.outBinds.api_status);
            // console.log(result.outBinds.api_msg);
            if (result.outBinds.api_status == "Y") {
              console.log(result.outBinds.api_status, "req.bodyy");
              let message = result.outBinds.api_msg;

              response = {
                success: "Y",
                message: message,
              };

              res.send(response);
            } else {
              // console.log(result.outBinds.api_status, "req.body");
              let message = result.outBinds.api_msg;

              response = {
                success: result.outBinds.api_status,
                message: message,
                // token_id: tokennumber(50),
              };

              res.send(response);
            }
          }
        }
      );
    } catch (err) {
      res.send(err);
    }
  }

  physicalLocationCreationMaintenance();
});

app.post("/api/fixed-asset-creation-maintenance", (req, res) => {
  async function fixedAssetCreationMaintenance() {
    let con;

    try {
      con = await oracledb.getConnection({
        user: DB_USER,
        password: DB_PASSWORD,
        connectString: DB_CONNECTION_STRING,
      });

      const classCode = req.body.classCode;
      const description = req.body.description;
      const status = req.body.status;
      const flag = req.body.flag;
      const codeType = req.body.codeType;
      const postedBy = req.body.postedBy;

      console.log(flag, "flag");

      con.execute(
        "BEGIN PKG_FIXED_ASSET_SETUP_CREATION.PRC_FIXED_ASSET_CLASS_CREATION_MAINTENANCE(:CLASS_CODE,:DESCRIPTION,:STATUS,:FLAG,:CODE_TYPE,:POSTED_BY,:api_status,:api_msg); END;",
        {
          CLASS_CODE: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: classCode,
          },
          DESCRIPTION: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: description,
          },
          STATUS: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: status,
          },
          FLAG: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: flag,
          },
          CODE_TYPE: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: codeType,
          },
          POSTED_BY: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: postedBy,
          },
          api_status: {
            type: oracledb.STRING,
            dir: oracledb.BIND_OUT,
          },
          api_msg: {
            type: oracledb.STRING,
            dir: oracledb.BIND_OUT,
          },
        },

        function (err, result) {
          if (err) {
            throw err;
          }
          if (result) {
            // console.log(result.outBinds,"jigga");
            // console.log(flag,"currencycurrencycurrency");
            // console.log(result.outBinds.api_status);
            // console.log(result.outBinds.api_msg);
            if (result.outBinds.api_status == "Y") {
              console.log(result.outBinds.api_status, "req.bodyy");
              let message = result.outBinds.api_msg;

              response = {
                success: "Y",
                message: message,
              };

              res.send(response);
            } else {
              // console.log(result.outBinds.api_status, "req.body");
              let message = result.outBinds.api_msg;

              response = {
                success: result.outBinds.api_status,
                message: message,
                // token_id: tokennumber(50),
              };

              res.send(response);
            }
          }
        }
      );
    } catch (err) {
      res.send(err);
    }
  }

  fixedAssetCreationMaintenance();
});

app.post("/api/fixed-asset-category-creation", (req, res) => {
  async function fixedAssetCategoryCreation() {
    let con;

    try {
      con = await oracledb.getConnection({
        user: DB_USER,
        password: DB_PASSWORD,
        connectString: DB_CONNECTION_STRING,
      });

      const categoryCode = req.body.categoryCode;
      const classCode = req.body.classCode;
      const currency = req.body.currency;
      const description = req.body.description;
      const usefulLife = req.body.usefulLife;
      const usefulLifeUnit = req.body.usefulLifeUnit;
      const rate = req.body.rate;
      const categoryStatus = req.body.categoryStatus;
      const categoryAmount = req.body.categoryAmount;
      const assetAccount = req.body.assetAccount;
      const creditAccount = req.body.creditAccount;
      const depAccount = req.body.depAccount;
      const accuDepAccount = req.body.accuDepAccount;
      const maintenanceAccount = req.body.maintenanceAccount;
      const dispAccount = req.body.dispAccount;
      const revSurpAcct = req.body.revSurpAcct;
      const revLossAcct = req.body.revLossAcct;
      const workInProg = req.body.workInProg;
      const depreciationCalcMode = req.body.depreciationCalcMode;
      const flag = req.body.flag;
      const postedBy = req.body.postedBy;
      const postedDate = req.body.postedDate;
      const postedIP = getIPAddress().address;
      const postedTerminal = os.hostname();
      const approvedBy = req.body.approvedBy;
      const approvedDate = req.body.approvedDate;
      const approvedTerminal = os.hostname();
      const approvedIP = getIPAddress().address;
      const flagMessage = req.body.flagMessage;

      con.execute(
        "BEGIN PKG_FIXED_ASSET_SETUP_CREATION.PRC_FIXED_ASSET_CATEGORY_CREATION(:CATEGORY_CODE,:CLASS_CODE_CC,:CURRENCY,:DESCRIPTION_DD,:USEFUL_LIFE,:USEFUL_LIFE_UNIT,:RATE,:CATEGORY_STATUS,:CATEGORY_AMOUNT,:acct_link,:credit_acct,:dep_acct,:accu_dep_acct,:maintenance_acct,:dis_acct,:rev_surp_acct,:rev_loss_acct,:work_in_prog,:DEPRECIATION_CALC_MODE,:FLAG,:POSTED_BY,:POSTED_DATE,:POSTED_IP,:POSTED_TERMINAL,:APPROVED_BY_A,:APPROVED_DATE_A,:APPROVED_TERMINAL_A,:APPROVED_IP_A,:FLAG_MESSAGE,:api_status,:api_msg); END;",
        {
          CATEGORY_CODE: {
            type: oracledb.STRING,
            dir: oracledb.BIND_INOUT,
            val: categoryCode,
          },
          CLASS_CODE_CC: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: classCode,
          },
          CURRENCY: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: currency,
          },
          DESCRIPTION_DD: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: description,
          },
          USEFUL_LIFE: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: usefulLife,
          },
          USEFUL_LIFE_UNIT: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: usefulLifeUnit,
          },
          RATE: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: rate,
          },
          CATEGORY_STATUS: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: categoryStatus,
          },
          CATEGORY_AMOUNT: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: categoryAmount,
          },
          acct_link: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: assetAccount,
          },
          credit_acct: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: creditAccount,
          },
          dep_acct: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: depAccount,
          },
          accu_dep_acct: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: accuDepAccount,
          },
          maintenance_acct: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: maintenanceAccount,
          },
          dis_acct: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: dispAccount,
          },
          rev_surp_acct: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: revSurpAcct,
          },
          rev_loss_acct: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: revLossAcct,
          },
          work_in_prog: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: workInProg,
          },
          DEPRECIATION_CALC_MODE: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: depreciationCalcMode,
          },
          FLAG: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: flag,
          },
          POSTED_BY: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: postedBy,
          },
          POSTED_DATE: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: postedDate,
          },
          POSTED_IP: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: postedIP,
          },
          POSTED_TERMINAL: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: postedTerminal,
          },
          APPROVED_BY_A: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: approvedBy,
          },
          APPROVED_DATE_A: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: approvedDate,
          },
          APPROVED_TERMINAL_A: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: approvedTerminal,
          },
          APPROVED_IP_A: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: approvedIP,
          },
          FLAG_MESSAGE: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: flagMessage,
          },
          api_status: {
            type: oracledb.STRING,
            dir: oracledb.BIND_OUT,
          },
          api_msg: {
            type: oracledb.STRING,
            dir: oracledb.BIND_OUT,
          },
        },

        function (err, result) {
          if (err) {
            throw err;
          }
          if (result) {
            // console.log(result.outBinds,"jigga");
            // console.log(flag,"currencycurrencycurrency");
            // console.log(result.outBinds.api_status);
            // console.log(result.outBinds.api_msg);
            if (result.outBinds.api_status == "Y") {
              console.log(result.outBinds.api_status, "req.bodyy");
              let message = result.outBinds.api_msg;

              response = {
                success: "Y",
                message: message,
              };

              res.send(response);
            } else {
              // console.log(result.outBinds.api_status, "req.body");
              let message = result.outBinds.api_msg;

              response = {
                success: result.outBinds.api_status,
                message: message,
                // token_id: tokennumber(50),
              };

              res.send(response);
            }
          }
        }
      );
    } catch (err) {
      res.send(err);
    }
  }

  fixedAssetCategoryCreation();
});

app.post("/api/fixed-asset-retirement", (req, res) => {
  async function fixedAssetRetirement() {
    let con;

    try {
      con = await oracledb.getConnection({
        user: DB_USER,
        password: DB_PASSWORD,
        connectString: DB_CONNECTION_STRING,
      });

      const creditAccount = req.body.creditAccount;
      const assetID = req.body.assetID;
      const retirementType = req.body.retirementType;
      const retirementReason = req.body.retirementReason;
      const netBookValue = req.body.netBookValue;
      const retirementCost = req.body.retirementCost;
      const removalCost = req.body.removalCost;
      const retirementDocID = req.body.retirementDocID;
      const branch = req.body.branch;
      const postedBy = req.body.postedBy;
      const postedDate = req.body.postedDate;
      const postedTerminal = os.hostname();
      const postedIP = getIPAddress().address;
      const approvedBy = req.body.approvedBy;
      const approvedDate = req.body.approvedDate;
      const approvedTerminal = os.hostname();
      const approvedIP = getIPAddress().address;
      const flag = req.body.flag;

      con.execute(
        "BEGIN PKG_FIXED_ASSET_TRANSACTION.PRC_FIXED_ASSET_RETIREMENT(:credit_acct,:RET_ASSET_ID,:RETIREMENT_TYPE,:RETIRED_REASON_R,:NET_BOOK_VALUE,:RETIREMENT_COST,:REMOVAL_COST,:RETIREMENT_DOC_ID,:POSTED_BY,:POSTING_DATE,:POSTED_TERMINAL,:POSTED_IP,:APPROVED_BY,:APPROVED_DATE,:APPROVED_TERMINAL,:APPROVED_IP,:FLAG,:RET_BRANCH,:api_status,:api_msg); END;",
        {
          credit_acct: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: creditAccount,
          },
          RET_ASSET_ID: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: assetID,
          },
          RETIREMENT_TYPE: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: retirementType,
          },
          RETIRED_REASON_R: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: retirementReason,
          },
          NET_BOOK_VALUE: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: netBookValue,
          },
          RETIREMENT_COST: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: retirementCost,
          },
          REMOVAL_COST: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: removalCost,
          },
          RETIREMENT_DOC_ID: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: retirementDocID,
          },
          POSTED_BY: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: postedBy,
          },
          POSTING_DATE: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: postedDate,
          },
          POSTED_TERMINAL: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: postedTerminal,
          },
          POSTED_IP: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: postedIP,
          },
          APPROVED_BY: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: approvedBy,
          },
          APPROVED_DATE: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: approvedDate,
          },
          APPROVED_TERMINAL: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: approvedTerminal,
          },
          APPROVED_IP: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: approvedIP,
          },
          FLAG: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: flag,
          },
          RET_BRANCH: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: branch,
          },
          api_status: {
            type: oracledb.STRING,
            dir: oracledb.BIND_OUT,
          },
          api_msg: {
            type: oracledb.STRING,
            dir: oracledb.BIND_OUT,
          },
        },

        function (err, result) {
          if (err) {
            throw err;
          }
          if (result) {
            console.log(retirementCost, "retirementCost");
            console.log(netBookValue, "netBookValue");
            // console.log(result.outBinds.api_status);
            // console.log(result.outBinds.api_msg);
            if (result.outBinds.api_status == "Y") {
              console.log(result.outBinds.api_status, "req.bodyy");
              let message = result.outBinds.api_msg;

              response = {
                success: "Y",
                message: message,
              };

              res.send(response);
            } else {
              // console.log(result.outBinds.api_status, "req.body");
              let message = result.outBinds.api_msg;

              response = {
                success: result.outBinds.api_status,
                message: message,
                // token_id: tokennumber(50),
              };

              res.send(response);
            }
          }
        }
      );
    } catch (err) {
      res.send(err);
    }
  }

  fixedAssetRetirement();
});

app.post("/api/fixed-asset-disposal", (req, res) => {
  async function fixedAssetDisposal() {
    let con;

    try {
      con = await oracledb.getConnection({
        user: DB_USER,
        password: DB_PASSWORD,
        connectString: DB_CONNECTION_STRING,
      });

      const assetID = req.body.assetID;
      const disposalCost = req.body.disposalCost;
      const disposalReason = req.body.disposalReason;
      const disposalBy = req.body.disposalBy;
      const disposalDate = req.body.disposalDate;
      const disposalTerminal = os.hostname();
      const flag = req.body.flag;

      con.execute(
        "BEGIN PKG_FIXED_ASSET_TRANSACTION.PRC_FIXED_ASSET_DISPOSAL(:DISP_ASSET_ID,:DISPOSAL_COST_D,:DISPOSAL_REASON,:DISPOSAL_BY,:DISPOSAL_DATE,:DISPOSAL_TERMINAL,:FLAG,:api_status,:api_msg); END;",
        {
          DISP_ASSET_ID: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: assetID,
          },
          DISPOSAL_COST_D: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: disposalCost,
          },
          DISPOSAL_REASON: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: disposalReason,
          },
          DISPOSAL_BY: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: disposalBy,
          },
          DISPOSAL_DATE: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: disposalDate,
          },
          DISPOSAL_TERMINAL: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: disposalTerminal,
          },
          FLAG: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: flag,
          },
          api_status: {
            type: oracledb.STRING,
            dir: oracledb.BIND_OUT,
          },
          api_msg: {
            type: oracledb.STRING,
            dir: oracledb.BIND_OUT,
          },
        },

        function (err, result) {
          if (err) {
            throw err;
          }
          if (result) {
            if (result.outBinds.api_status == "Y") {
              console.log(result.outBinds.api_status, "req.bodyy");
              let message = result.outBinds.api_msg;

              response = {
                success: "Y",
                message: message,
              };

              res.send(response);
            } else {
              // console.log(result.outBinds.api_status, "req.body");
              let message = result.outBinds.api_msg;

              response = {
                success: result.outBinds.api_status,
                message: message,
                // token_id: tokennumber(50),
              };

              res.send(response);
            }
          }
        }
      );
    } catch (err) {
      res.send(err);
    }
  }

  fixedAssetDisposal();
});

app.post("/api/get-disposed-assets-data", (req, res) => {
  const assetID = req.body.assetID;
  const assetCategory = req.body.assetCategory;
  const assetDescription = req.body.assetDescription;
  const serialNumber = req.body.serialNumber;

  async function getDisposedAssetsData() {
    let con;

    try {
      con = await oracledb.getConnection({
        user: DB_USER,
        password: DB_PASSWORD,
        connectString: DB_CONNECTION_STRING,
      });

      const data = await con.execute(
        `SELECT ASSET_ID,ASSET_CAT,SERIAL_NO,DESCRIPTION,ASSET_CLASS,ACQ_COST,to_char(ACQ_DATE,'DD-MON-YYYY') as ACQUISITION_DATE,get_fasset_desc(ASSET_CLASS) as asset_class_description,CURRENCY_CODE,get_currdesc(CURRENCY_CODE) as currency,
         MAIN_ASSET_COMPONENT,nvl(MAIN_ASSET_ID,' ') as MAIN_ASSET_ID,DEPRECIABLE_AMOUNT,P_LOCATION,USEFUL_LIFE,USEFUL_LIFE_UNIT,DEPRECIATION_RATE,to_char(DEP_START_DATE,'YYYY-MM-DD') as DEP_START_DATE,
         to_char(DEP_END_DATE,'YYYY-MM-DD') as DEP_END_DATE,PY_DEP,MY_DEP,ACCUM_DEP_COST,POSTED_BY,DEP_METHOD,nvl(SALVAGE_VALUE,'0') as SALVAGE_VALUE
         FROM ASSET_MASTER
         WHERE flag='Y'
         AND DISP_APP_FLAG ='N'
         AND ASSET_ID LIKE '%'||:assetID||'%' 
         AND ASSET_CAT LIKE '%'||:assetCategory||'%'
         AND DESCRIPTION LIKE '%'||:assetDescription||'%'
         AND SERIAL_NO LIKE '%'||:serialNumber||'%' 
         `,
        {
          assetID,
          assetCategory,
          assetDescription,
          serialNumber,
        }
      );

      if (data) {
        console.log("reggie");

        var arr0 = "";
        var arr = [];

        for (let i = 0; i < data.rows.length; i++) {
          for (let x = 0; x < data.metaData.length; x++) {
            arr0 +=
              '"' +
              [data.metaData[x].name.toLowerCase()] +
              '" : "' +
              data.rows[i][x] +
              '",';
          }

          arr.push(JSON.parse("{" + arr0.replace(/,\s*$/, "") + "}"));
        }

        res.send(arr);
      } else {
        res.send("Something went wrong... Nothing was returned!!");
      }
    } catch (err) {
      res.send(err);

      throw err;
    }
  }

  getDisposedAssetsData();
});

app.post("/api/fixed-asset-suspension", (req, res) => {
  async function fixedAssetSuspension() {
    let con;

    try {
      con = await oracledb.getConnection({
        user: DB_USER,
        password: DB_PASSWORD,
        connectString: DB_CONNECTION_STRING,
      });

      const assetID = req.body.assetID;
      const suspensionReason = req.body.suspensionReason;
      const suspensionDate = req.body.suspensionDate;
      const suspendedBy = req.body.suspendedBy;
      const suspendedIP = ip.address();
      const suspendedTerminal = os.hostname();
      const approvalDate = req.body.approvalDate;
      const approvalBy = req.body.approvalBy;
      const approvalIP = ip.address();
      const approvalTerminal = os.hostname();
      const flag = req.body.flag;

      con.execute(
        "BEGIN PKG_FIXED_ASSET_TRANSACTION.PRC_FIXED_ASSET_SUSPENSION(:SUSP_ASSET_ID,:SUSPENSION_REASON,:SUSPENSION_DATE,:SUSPENDED_BY,:SUSPENDED_IP,:SUSPENDED_TERMINAL,:APPROVAL_DATE,:APPROVAL_IP,:APPROVED_BY,:APPROVAL_TERMINAL,:FLAG,:api_status,:api_msg); END;",
        {
          SUSP_ASSET_ID: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: assetID,
          },
          SUSPENSION_REASON: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: suspensionReason,
          },
          SUSPENSION_DATE: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: suspensionDate,
          },
          SUSPENDED_BY: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: suspendedBy,
          },
          SUSPENDED_IP: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: suspendedIP,
          },
          SUSPENDED_TERMINAL: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: suspendedTerminal,
          },
          APPROVAL_DATE: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: approvalDate,
          },
          APPROVAL_IP: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: approvalIP,
          },
          APPROVED_BY: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: approvalBy,
          },
          APPROVAL_TERMINAL: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: approvalTerminal,
          },
          FLAG: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: flag,
          },
          api_status: {
            type: oracledb.STRING,
            dir: oracledb.BIND_OUT,
          },
          api_msg: {
            type: oracledb.STRING,
            dir: oracledb.BIND_OUT,
          },
        },

        function (err, result) {
          if (err) {
            throw err;
          }
          if (result) {
            if (result.outBinds.api_status == "Y") {
              console.log(result.outBinds.api_status, "req.bodyy");
              let message = result.outBinds.api_msg;

              response = {
                success: "Y",
                message: message,
              };

              res.send(response);
            } else {
              // console.log(result.outBinds.api_status, "req.body");
              let message = result.outBinds.api_msg;

              response = {
                success: result.outBinds.api_status,
                message: message,
                // token_id: tokennumber(50),
              };

              res.send(response);
            }
          }
        }
      );
    } catch (err) {
      res.send(err);
    }
  }

  fixedAssetSuspension();
});

app.post("/api/create-fixed-asset-capture", (req, res) => {
  async function createFixedAssetCapture() {
    let con;

    try {
      con = await oracledb.getConnection({
        user: DB_USER,
        password: DB_PASSWORD,
        connectString: DB_CONNECTION_STRING,
      });

      const assetCategory = req.body.assetCategory;
      const assetClass = req.body.assetClass;
      const description = req.body.description;
      const depMethod = req.body.depMethod;
      const depStartDate = req.body.depStartDate;
      const mainAssetComponent = req.body.mainAssetComponent;
      const mainAssetID = req.body.mainAssetID;
      const acqCost = req.body.acqCost;
      const acqDate = req.body.acqDate;
      const assetType = req.body.assetType;
      const depreciableAmount = req.body.depreciableAmount;
      const usefulLife = req.body.usefulLife;
      const usefulLifeUnit = req.body.usefulLifeUnit;
      const depreciationRate = req.body.depreciationRate;
      const depEndDate = req.body.depEndDate;
      const perYearDep = req.body.perYearDep;
      const perMonthDep = req.body.perMonthDep;
      const TotalDepreciationCost = req.body.TotalDepreciationCost;
      const scanDocID = req.body.scanDocID;
      const assetLabel = req.body.assetLabel;
      const assetStatus = req.body.assetStatus;
      const branchCode = req.body.branchCode;
      const custodianID = req.body.custodianID;
      const physicialLocation = req.body.physicialLocation;
      const assetAccount = req.body.assetAccount;
      const depAccount = req.body.depAccount;
      const depCr = req.body.depCr;
      const disAcct = req.body.disAcct;
      const revSurpAcct = req.body.revSurpAcct;
      const revLossAcct = req.body.revLossAcct;
      const maintenanceAcct = req.body.maintenanceAcct;
      const flag = req.body.flag;
      const serialNumber = req.body.serialNumber;
      const shortDescription = req.body.shortDescription;
      const barCode = req.body.barCode;
      const purchaseOrderNumber = req.body.purchaseOrderNumber;
      const voucherNumber = req.body.voucherNumber;
      const vendorNumber = req.body.vendorNumber;
      const department = req.body.department;
      const unit = req.body.unit;
      const currency = req.body.currency;
      const totalDepAmount = req.body.totalDepAmount;
      const creditAccount = req.body.creditAccount;
      const wipAccount = req.body.wipAccount;
      const warrantyExp = req.body.warrantyExp;
      const warrantyRenewal = req.body.warrantyRenewal;
      const maintenanceVendorID = req.body.maintenanceVendorID;
      const nextServiceDate = req.body.nextServiceDate;
      const underMain = req.body.underMain;
      const insurance = req.body.insurance;
      const postedBy = req.body.postedBy;
      const postedDate = req.body.postedDate;
      const postedTerminal = os.hostname();
      const postedIP = getIPAddress().address;
      const assetID = req.body.assetID;
      const postingSysDateApp = req.body.postingSysDateApp;
      const postingSysTimeApp = req.body.postingSysTimeApp;
      const postingTerminalApp = req.body.postingTerminalApp;
      const postingIpApp = req.body.postingIpApp;
      const amendedBy = req.body.amendedBy;
      const amendedDate = req.body.amendedDate;
      const amendedTerminal = req.body.amendedTerminal;
      const amendedIP = req.body.amendedIP;
      const taxCode = req.body.taxCode;
      const salvageValue = req.body.salvageValue;
      const expContractReference = req.body.expContractReference;
      const insuranceCardNo = req.body.insuranceCardNo;
      const depreciationCalcMode = req.body.depreciationCalcMode;

      // const postingTerminal = os.hostname();
      // const postingIP = getIPAddress().address;
      // const amendingTerminal = os.hostname();
      // const amendingIP = getIPAddress().address;
      // const approvedTerminal = os.hostname();
      // const approvedIP = getIPAddress().address;
      // const flagMessage = req.body.flagMessage;
      // const ipAddress = getIPAddress().address;
      // const branchCode = getIPAddress().address;
      // const moduleB = "PKG_fin_bs_creation";
      // const channelB = "BRA";
      // return res.send("hello")

      // return res.send(p2);
      console.log(flag, "flag");

      con.execute(
        "BEGIN PRC_FIXED_ASSET_CAPTURE(:ASSET_CATEGORY,:ASSET_CLASS,:DESCRIPTION,:DEP_METHOD,:DEP_START_DATE,:MAIN_ASSET_COMPONENT,:MAIN_ASSET_ID,:ACQ_COST,:ACQ_date,:ASSET_TYPE,:DEPRECIABLE_AMOUNT,:USEFUL_LIFE,:USEFUL_LIFE_UNIT,:DEPRECIATION_RATE,:DEP_END_DATE,:PER_YEAR_DEP,:PER_MONTH_DEP,:ACCUM_DEP_COST,:SCAN_DOC_ID,:ASSET_LABEL,:ASSET_status,:BRANCH_CODE,:CUSTODIAN_ID,:PHYSICAL_LOCATION,:ACCT_LINK,:DEP_ACCOUNT,:DEP_CR,:dis_acct,:rev_surp_acct,:rev_loss_acct,:MAINTENANCE_ACCT,:FLAG_B,:SERIAL_NUMBER,:SHORT_DESCRP,:BAR_code,:PURCHASE_ORDER_number,:VOUCHER_NUM,:VENDOR_NUM,:DEPARTMENT_B,:UNIT_B,:CURRENCY,:TOTAL_DEP_AMOUNT,:CREDIT_ACCOUNT,:WIP_ACCOUNT,:WARRANTY_EXP,:WARRANTY_RENEWAL,:MAINTENANCE_VEN_ID,:NXT_SERVICE_DATE,:UNDER_MAIN,:INSURANCE,:POSTED_BY,:POSTED_DATE,:POSTED_TERMINAL,:POSTED_IP,:ASSET_id_APP,:POSTING_SYSDATE_APP,:POSTING_SYSTIME_APP,:POSTING_TERMINAL_APP,:POSTING_IP_APP,:AMENDED_BY,:AMENDED_DATE,:AMENDED_TERMINAL,:AMENDED_IP,:TAX_CODE,:SALVAGE_VALUE,:EXP_CONTRACT_REFERENCE,:INSURANCE_CARD_NO,:DEPRECIATION_CALC_MODE,:api_status,:api_msg); END;",
        {
          ASSET_CATEGORY: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: assetCategory,
          },
          ASSET_CLASS: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: assetClass,
          },
          DESCRIPTION: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: description,
          },
          DEP_METHOD: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: depMethod,
          },
          DEP_START_DATE: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: depStartDate,
          },
          MAIN_ASSET_COMPONENT: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: mainAssetComponent,
          },
          MAIN_ASSET_ID: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: mainAssetID,
          },
          ACQ_COST: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: acqCost,
          },
          ACQ_date: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: acqDate,
          },
          ASSET_TYPE: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: assetType,
          },
          DEPRECIABLE_AMOUNT: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: depreciableAmount,
          },
          USEFUL_LIFE: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: usefulLife,
          },
          USEFUL_LIFE_UNIT: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: usefulLifeUnit,
          },
          DEPRECIATION_RATE: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: depreciationRate,
          },
          DEP_END_DATE: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: depEndDate,
          },
          PER_YEAR_DEP: {
            type: oracledb.STRING,
            dir: oracledb.BIND_INOUT,
            val: perYearDep,
          },
          PER_MONTH_DEP: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: perMonthDep,
          },
          ACCUM_DEP_COST: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: TotalDepreciationCost,
          },
          SCAN_DOC_ID: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: scanDocID,
          },
          ASSET_LABEL: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: assetLabel,
          },
          ASSET_status: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: assetStatus,
          },
          BRANCH_CODE: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: branchCode,
          },
          CUSTODIAN_ID: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: custodianID,
          },
          PHYSICAL_LOCATION: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: physicialLocation,
          },
          ACCT_LINK: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: assetAccount,
          },
          DEP_ACCOUNT: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: depAccount,
          },
          DEP_CR: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: depCr,
          },
          dis_acct: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: disAcct,
          },
          rev_surp_acct: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: revSurpAcct,
          },
          rev_loss_acct: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: revLossAcct,
          },
          MAINTENANCE_ACCT: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: maintenanceAcct,
          },
          FLAG_B: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: flag,
          },
          SERIAL_NUMBER: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: serialNumber,
          },
          SHORT_DESCRP: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: shortDescription,
          },
          BAR_code: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: barCode,
          },
          PURCHASE_ORDER_number: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: purchaseOrderNumber,
          },
          VOUCHER_NUM: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: voucherNumber,
          },
          VENDOR_NUM: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: vendorNumber,
          },
          DEPARTMENT_B: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: department,
          },
          UNIT_B: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: unit,
          },
          CURRENCY: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: currency,
          },
          TOTAL_DEP_AMOUNT: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: totalDepAmount,
          },
          CREDIT_ACCOUNT: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: creditAccount,
          },
          WIP_ACCOUNT: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: wipAccount,
          },
          WARRANTY_EXP: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: warrantyExp,
          },
          WARRANTY_RENEWAL: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: warrantyRenewal,
          },
          MAINTENANCE_VEN_ID: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: maintenanceVendorID,
          },
          NXT_SERVICE_DATE: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: nextServiceDate,
          },
          UNDER_MAIN: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: underMain,
          },
          INSURANCE: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: insurance,
          },
          POSTED_BY: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: postedBy,
          },
          POSTED_DATE: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: postedDate,
          },
          POSTED_TERMINAL: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: postedTerminal,
          },
          POSTED_IP: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: postedIP,
          },
          ASSET_id_APP: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: assetID,
          },
          POSTING_SYSDATE_APP: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: postingSysDateApp,
          },
          POSTING_SYSTIME_APP: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: postingSysTimeApp,
          },
          POSTING_TERMINAL_APP: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: postingTerminalApp,
          },
          POSTING_IP_APP: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: postingIpApp,
          },
          AMENDED_BY: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: amendedBy,
          },
          AMENDED_DATE: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: amendedDate,
          },
          AMENDED_TERMINAL: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: amendedTerminal,
          },
          AMENDED_IP: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: amendedIP,
          },
          TAX_CODE: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: taxCode,
          },
          SALVAGE_VALUE: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: salvageValue,
          },
          EXP_CONTRACT_REFERENCE: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: expContractReference,
          },
          INSURANCE_CARD_NO: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: insuranceCardNo,
          },
          DEPRECIATION_CALC_MODE: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: depreciationCalcMode,
          },
          api_status: {
            type: oracledb.STRING,
            dir: oracledb.BIND_OUT,
          },
          api_msg: {
            type: oracledb.STRING,
            dir: oracledb.BIND_OUT,
          },
        },

        function (err, result) {
          if (err) {
            throw err;
          }
          if (result) {
            // console.log(result.outBinds,"jigga");
            // console.log(flag,"currencycurrencycurrency");
            // console.log(result.outBinds.api_status);
            // console.log(result.outBinds.api_msg);
            if (result.outBinds.api_status == "Y") {
              console.log(result.outBinds.api_status, "req.bodyy");
              let message = result.outBinds.api_msg;

              response = {
                success: "Y",
                message: message,
              };

              res.send(response);
            } else {
              // console.log(result.outBinds.api_status, "req.body");
              let message = result.outBinds.api_msg;

              response = {
                success: result.outBinds.api_status,
                message: message,
                // token_id: tokennumber(50),
              };

              res.send(response);
            }
          }
        }
      );
    } catch (err) {
      res.send(err);
    }
  }

  createFixedAssetCapture();
});

app.get("/api/get-asset-category", (req, res) => {
  async function getAssetCategory() {
    let con;

    try {
      con = await oracledb.getConnection({
        user: DB_USER,
        password: DB_PASSWORD,
        connectString: DB_CONNECTION_STRING,
      });

      const data = await con.execute(
        `select CLASS_CODE,cat_code,description,DEPRECIATION_CALC_MODE
       from fasset_cat
       where category_status='A'
      `
      );

      if (data) {
        // res.send(response);

        var arr0 = "";
        var arr = [];

        for (let i = 0; i < data.rows.length; i++) {
          for (let x = 0; x < data.metaData.length; x++) {
            arr0 +=
              '"' +
              [data.metaData[x].name.toLowerCase()] +
              '" : "' +
              data.rows[i][x] +
              '",';
          }

          arr.push(JSON.parse("{" + arr0.replace(/,\s*$/, "") + "}"));
        }

        res.send(arr);
      } else {
        res.send("Something went wrong... Nothing was returned!!");
      }
    } catch (err) {
      res.send(err);

      throw err;
    }
  }

  getAssetCategory();
});

app.get("/api/get-job-code", (req, res) => {
  async function getJobCode() {
    let con;

    try {
      con = await oracledb.getConnection({
        user: DB_USER,
        password: DB_PASSWORD,
        connectString: DB_CONNECTION_STRING,
      });

      const data = await con.execute(
        `SELECT JOB_DESCRP,JOB_ID
        FROM TB_FAFA_JOBS WHERE FLAG='Y'`
      );

      if (data) {
        // res.send(response);

        var arr0 = "";
        var arr = [];

        for (let i = 0; i < data.rows.length; i++) {
          for (let x = 0; x < data.metaData.length; x++) {
            arr0 +=
              '"' +
              [data.metaData[x].name.toLowerCase()] +
              '" : "' +
              data.rows[i][x] +
              '",';
          }

          arr.push(JSON.parse("{" + arr0.replace(/,\s*$/, "") + "}"));
        }

        res.send(arr);
      } else {
        res.send("Something went wrong... Nothing was returned!!");
      }
    } catch (err) {
      res.send(err);

      throw err;
    }
  }

  getJobCode();
});

app.get("/api/get-department", (req, res) => {
  async function getDepartment() {
    let con;

    try {
      con = await oracledb.getConnection({
        user: DB_USER,
        password: DB_PASSWORD,
        connectString: DB_CONNECTION_STRING,
      });

      const data = await con.execute(
        `Select 
       dept_id,dept_name 
       from department
      `
      );

      if (data) {
        // res.send(response);

        var arr0 = "";
        var arr = [];

        for (let i = 0; i < data.rows.length; i++) {
          for (let x = 0; x < data.metaData.length; x++) {
            arr0 +=
              '"' +
              [data.metaData[x].name.toLowerCase()] +
              '" : "' +
              data.rows[i][x] +
              '",';
          }

          arr.push(JSON.parse("{" + arr0.replace(/,\s*$/, "") + "}"));
        }

        res.send(arr);
      } else {
        res.send("Something went wrong... Nothing was returned!!");
      }
    } catch (err) {
      res.send(err);

      throw err;
    }
  }

  getDepartment();
});

app.get("/api/get-unit", (req, res) => {
  async function getUnit() {
    let con;

    try {
      con = await oracledb.getConnection({
        user: DB_USER,
        password: DB_PASSWORD,
        connectString: DB_CONNECTION_STRING,
      });

      const data = await con.execute(
        `select
       UNIT_NAME,UNIT_ID  
       from unit where FLAG_STATUS='Y'
      `
      );

      if (data) {
        // res.send(response);

        var arr0 = "";
        var arr = [];

        for (let i = 0; i < data.rows.length; i++) {
          for (let x = 0; x < data.metaData.length; x++) {
            arr0 +=
              '"' +
              [data.metaData[x].name.toLowerCase()] +
              '" : "' +
              data.rows[i][x] +
              '",';
          }

          arr.push(JSON.parse("{" + arr0.replace(/,\s*$/, "") + "}"));
        }

        res.send(arr);
      } else {
        res.send("Something went wrong... Nothing was returned!!");
      }
    } catch (err) {
      res.send(err);

      throw err;
    }
  }

  getUnit();
});

app.get("/api/get-custodian", (req, res) => {
  async function getCustodian() {
    let con;

    try {
      con = await oracledb.getConnection({
        user: DB_USER,
        password: DB_PASSWORD,
        connectString: DB_CONNECTION_STRING,
      });

      const data = await con.execute(
        `select fullname,id 
       from vw_personnel_profile 
       where FLAG_STATUS='Y'
      `
      );

      // res.send(data);
      if (data.rows) {
        const response = [];
        for (let i = 0; i < data.rows.length; i++) {
          const rowData = {}; // Create an object for each row

          for (let x = 0; x < data.metaData.length; x++) {
            const columnName = data.metaData[x].name.toLowerCase();
            const columnValue = data.rows[i][x];
            rowData[columnName] = columnValue; // Assign each column to the object
          }

          response.push(rowData); // Push the object to the response array
        }
        res.status(200).send(response);
      } else {
        res.status(500).send("Something went wrong... Nothing was returned!!");
      }
    } catch (err) {
      res.send(err);

      throw err;
    }
  }

  getCustodian();
});

app.get("/api/get-physical-location", (req, res) => {
  async function getPhysicalLocation() {
    let con;

    try {
      con = await oracledb.getConnection({
        user: DB_USER,
        password: DB_PASSWORD,
        connectString: DB_CONNECTION_STRING,
      });

      const data = await con.execute(
        `SELECT 
      LOCATION_DESCRIPTION, LOCATION_CODE
      FROM TB_FA_LOCATION
      WHERE LOCATION_STATUS='A'
      `
      );

      if (data) {
        // res.send(response);

        var arr0 = "";
        var arr = [];

        for (let i = 0; i < data.rows.length; i++) {
          for (let x = 0; x < data.metaData.length; x++) {
            arr0 +=
              '"' +
              [data.metaData[x].name.toLowerCase()] +
              '" : "' +
              data.rows[i][x] +
              '",';
          }

          arr.push(JSON.parse("{" + arr0.replace(/,\s*$/, "") + "}"));
        }

        res.send(arr);
      } else {
        res.send("Something went wrong... Nothing was returned!!");
      }
    } catch (err) {
      res.send(err);

      throw err;
    }
  }

  getPhysicalLocation();
});

app.get("/api/get-vendor", (req, res) => {
  // const chartCode = req.body.chartCode;
  let getVendor = async () => {
    try {
      const db = await oracledb.getConnection({
        user: DB_USER,
        password: DB_PASSWORD,
        connectString: DB_CONNECTION_STRING,
        timeout: DB_CONNECTION_TIMEOUT,
      });
      const execute = util.promisify(db.execute).bind(db);

      // return res.send("ghamna");
      // res.send(con);
      const data = await execute(
        ` select vendor_name,vendor_id 
         from tb_vendor
        `
      );
      if (data) {
        // res.send(response);

        var arr0 = "";
        var arr = [];

        for (let i = 0; i < data.rows.length; i++) {
          for (let x = 0; x < data.metaData.length; x++) {
            arr0 +=
              '"' +
              [data.metaData[x].name.toLowerCase()] +
              '" : "' +
              data.rows[i][x] +
              '",';
          }

          arr.push(JSON.parse("{" + arr0.replace(/,\s*$/, "") + "}"));
        }

        return res.send(arr);

        // res.send({
        //   responseCode: "000",
        //   responseMessage : arr
        // });
      } else {
        res.send("Something went wrong... Nothing was returned!!");
      }
    } catch (err) {
      console.log(err);
      res.send(err);
    }
  };
  getVendor();
});

app.get("/api/get-maintenance-vendor", (req, res) => {
  // const chartCode = req.body.chartCode;
  let getMaintenanceVendor = async () => {
    try {
      const db = await oracledb.getConnection({
        user: DB_USER,
        password: DB_PASSWORD,
        connectString: DB_CONNECTION_STRING,
        timeout: DB_CONNECTION_TIMEOUT,
      });
      const execute = util.promisify(db.execute).bind(db);

      // return res.send("ghamna");
      // res.send(con);
      const data = await execute(
        `select VENDOR_NAME,VENDOR_ID 
         from tb_vendor 
         where FLAG='Y' and vendor_status='A'
        `
      );
      if (data) {
        // res.send(response);

        var arr0 = "";
        var arr = [];

        for (let i = 0; i < data.rows.length; i++) {
          for (let x = 0; x < data.metaData.length; x++) {
            arr0 +=
              '"' +
              [data.metaData[x].name.toLowerCase()] +
              '" : "' +
              data.rows[i][x] +
              '",';
          }

          arr.push(JSON.parse("{" + arr0.replace(/,\s*$/, "") + "}"));
        }

        return res.send(arr);

        // res.send({
        //   responseCode: "000",
        //   responseMessage : arr
        // });
      } else {
        res.send("Something went wrong... Nothing was returned!!");
      }
    } catch (err) {
      console.log(err);
      res.send(err);
    }
  };
  getMaintenanceVendor();
});

app.post("/api/get-insurance-card", (req, res) => {
  const assetClass = req.body.assetClass;
  const assetCategory = req.body.assetCategory;
  const location = req.body.location;

  let getInsuranceCard = async () => {
    try {
      const db = await oracledb.getConnection({
        user: DB_USER,
        password: DB_PASSWORD,
        connectString: DB_CONNECTION_STRING,
        timeout: DB_CONNECTION_TIMEOUT,
      });
      const execute = util.promisify(db.execute).bind(db);

      // return res.send("ghamna");
      // res.send(con);
      const data = await execute(
        `SELECT DISTINCT CARD_DESCRP,CARD_NBR,POLICY_NBR
         FROM TB_FAFA_INSURANCE_CARD WHERE FLAG='Y' AND 
         CARD_STATUS='A' AND CLASS_CODE LIKE '%${assetClass}%' 
         AND CATEGORY_CODE LIKE '%${assetCategory}%' AND LOCATION_ID LIKE '%${location}%'
        `
      );
      if (data) {
        // res.send(response);

        var arr0 = "";
        var arr = [];

        for (let i = 0; i < data.rows.length; i++) {
          for (let x = 0; x < data.metaData.length; x++) {
            arr0 +=
              '"' +
              [data.metaData[x].name.toLowerCase()] +
              '" : "' +
              data.rows[i][x] +
              '",';
          }

          arr.push(JSON.parse("{" + arr0.replace(/,\s*$/, "") + "}"));
        }

        return res.send(arr);

        // res.send({
        //   responseCode: "000",
        //   responseMessage : arr
        // });
      } else {
        res.send("Something went wrong... Nothing was returned!!");
      }
    } catch (err) {
      console.log(err);
      res.send(err);
    }
  };
  getInsuranceCard();
});

app.post("/api/get-fixed-asset-category-approval", (req, res) => {
  const classCode = req.body.classCode;
  const categoryCode = req.body.categoryCode;
  const classDescription = req.body.classDescription;
  const categoryStatus = req.body.categoryStatus;

  let getAssetCategoryApproval = async () => {
    try {
      const db = await oracledb.getConnection({
        user: DB_USER,
        password: DB_PASSWORD,
        connectString: DB_CONNECTION_STRING,
        timeout: DB_CONNECTION_TIMEOUT,
      });
      const execute = util.promisify(db.execute).bind(db);

      // return res.send("ghamna");
      // res.send(con);
      const data = await execute(
        `SELECT CLASS_CODE,CURRENCY_CODE,get_currdesc(CURRENCY_CODE) as currency,CAT_CODE,DESCRIPTION,USEFULL_LIFE,USEFUL_LIFE_UNIT,RATE,DEPRECIATION_CALC_MODE,CATEGORY_STATUS,CAP_AMOUNT,ACCT_LINK,GET_ACCTDESC(ACCT_LINK) as ASSET_DESC,CR_ACCT,GET_ACCTDESC(CR_ACCT) AS CR_DESC,DEP_ACCT,GET_ACCTDESC(DEP_ACCT) AS DEP_DESC,DEP_CR_ACCT,GET_ACCTDESC(DEP_CR_ACCT) AS DEP_CR_DESC,MAINTENANCE_ACCT,GET_ACCTDESC(MAINTENANCE_ACCT) AS MAINTENANCE_DESC,DIS_ACCT,GET_ACCTDESC(DIS_ACCT) AS DIS_DESC,REV_SURP_ACCT,GET_ACCTDESC(REV_SURP_ACCT) AS REV_SURP_DESC,REV_LOSS_ACCT,GET_ACCTDESC(REV_LOSS_ACCT) AS REV_LOSS_DESC,WORK_IN_PROG,GET_ACCTDESC(WORK_IN_PROG) AS WORK_DESC,POSTED_BY
         FROM fasset_cat WHERE FLAG='N' 
         AND CLASS_CODE LIKE '%${classCode}%' 
         AND CAT_CODE LIKE '%${categoryCode}%'
         AND DESCRIPTION LIKE '%${classDescription}%'
         AND CATEGORY_STATUS LIKE '%${categoryStatus}%'
        `
      );
      if (data) {
        // res.send(response);

        var arr0 = "";
        var arr = [];

        for (let i = 0; i < data.rows.length; i++) {
          for (let x = 0; x < data.metaData.length; x++) {
            arr0 +=
              '"' +
              [data.metaData[x].name.toLowerCase()] +
              '" : "' +
              data.rows[i][x] +
              '",';
          }

          arr.push(JSON.parse("{" + arr0.replace(/,\s*$/, "") + "}"));
        }

        return res.send(arr);

        // res.send({
        //   responseCode: "000",
        //   responseMessage : arr
        // });
      } else {
        res.send("Something went wrong... Nothing was returned!!");
      }
    } catch (err) {
      console.log(err);
      res.send(err);
    }
  };
  getAssetCategoryApproval();
});

app.get("/api/get-main-asset-component", (req, res) => {
  async function getMainAssetComponent() {
    let con;

    try {
      con = await oracledb.getConnection({
        user: DB_USER,
        password: DB_PASSWORD,
        connectString: DB_CONNECTION_STRING,
      });

      const data = await con.execute(
        `select description,actual_code
       from code_desc 
       where code_type='IIT' and class_code='Y'
      `
      );

      if (data) {
        // res.send(response);

        var arr0 = "";
        var arr = [];

        for (let i = 0; i < data.rows.length; i++) {
          for (let x = 0; x < data.metaData.length; x++) {
            arr0 +=
              '"' +
              [data.metaData[x].name.toLowerCase()] +
              '" : "' +
              data.rows[i][x] +
              '",';
          }

          arr.push(JSON.parse("{" + arr0.replace(/,\s*$/, "") + "}"));
        }

        res.send(arr);
      } else {
        res.send("Something went wrong... Nothing was returned!!");
      }
    } catch (err) {
      res.send(err);

      throw err;
    }
  }

  getMainAssetComponent();
});

app.get("/api/get-retirement-type", (req, res) => {
  async function getRetirementType() {
    let con;

    try {
      con = await oracledb.getConnection({
        user: DB_USER,
        password: DB_PASSWORD,
        connectString: DB_CONNECTION_STRING,
      });

      const data = await con.execute(
        `select description,actual_code
         from code_desc where code_type='FRT'
      `
      );

      if (data) {
        // res.send(response);

        var arr0 = "";
        var arr = [];

        for (let i = 0; i < data.rows.length; i++) {
          for (let x = 0; x < data.metaData.length; x++) {
            arr0 +=
              '"' +
              [data.metaData[x].name.toLowerCase()] +
              '" : "' +
              data.rows[i][x] +
              '",';
          }

          arr.push(JSON.parse("{" + arr0.replace(/,\s*$/, "") + "}"));
        }

        res.send(arr);
      } else {
        res.send("Something went wrong... Nothing was returned!!");
      }
    } catch (err) {
      res.send(err);

      throw err;
    }
  }

  getRetirementType();
});

app.post("/api/get-fAsset", (req, res) => {
  const assetCategory = req.body.assetCategory;

  async function getfAsset() {
    let con;

    try {
      con = await oracledb.getConnection({
        user: DB_USER,
        password: DB_PASSWORD,
        connectString: DB_CONNECTION_STRING,
      });

      const data = await con.execute(
        `SELECT ASSET_CLASS,get_fasset_desc(ASSET_CLASS) as asset_class_description,CURRENCY_CODE,get_currdesc(CURRENCY_CODE) as currency,
      MAIN_ASSET_COMPONENT,nvl(MAIN_ASSET_ID,' ') as MAIN_ASSET_ID,DEPRECIABLE_AMOUNT,ASSET_ID,USEFUL_LIFE,USEFUL_LIFE_UNIT,DEPRECIATION_RATE,to_char(DEP_START_DATE,'YYYY-MM-DD') as DEP_START_DATE,
      to_char(DEP_END_DATE,'YYYY-MM-DD') as DEP_END_DATE,PY_DEP,MY_DEP,ACCUM_DEP_COST,DEP_METHOD,nvl(SALVAGE_VALUE,'0') as SALVAGE_VALUE
      FROM ASSET_MASTER
      WHERE ASSET_CAT = '${assetCategory}'
      `
      );

      if (data) {
        // res.send(response);

        var arr0 = "";
        var arr = [];

        for (let i = 0; i < data.rows.length; i++) {
          for (let x = 0; x < data.metaData.length; x++) {
            arr0 +=
              '"' +
              [data.metaData[x].name.toLowerCase()] +
              '" : "' +
              data.rows[i][x] +
              '",';
          }

          arr.push(JSON.parse("{" + arr0.replace(/,\s*$/, "") + "}"));
        }

        res.send(arr);
      } else {
        res.send("Something went wrong... Nothing was returned!!");
      }
    } catch (err) {
      res.send(err);

      throw err;
    }
  }

  getfAsset();
});

// app.post("/api/get-fixed-asset-data", (req, res) => {
//   const assetID = req.body.assetID;

//   async function getfAsset() {
//     let con;

//     try {
//       con = await oracledb.getConnection({
//         user: DB_USER,
//         password: DB_PASSWORD,
//         connectString: DB_CONNECTION_STRING,
//       });

//       const data = await con.execute
//       (
//       `SELECT ASSET_CAT,ASSET_CLASS,get_fasset_desc(ASSET_CLASS) as asset_class_description,nvl(CURRENCY_CODE,' ') as CURRENCY_CODE,nvl(get_currdesc(CURRENCY_CODE),' ') as currency,nvl(DESCRIPTION,' ') as DESCRIPTION,nvl(SHORT_DESCRIPTION,' ') as SHORT_DESCRIPTION,MAIN_ASSET_COMPONENT,nvl(ASSET_LABEL,' ') as ASSET_LABEL,nvl(MAIN_ASSET_ID,' ') as MAIN_ASSET_ID,ASSET_STATUS,nvl(DEP_METHOD,' ') as DEP_METHOD,ASSET_TYPE,nvl(ACQ_COST,'') as ACQ_COST,nvl(cast(SALVAGE_VALUE as varchar(10)),' ') as SALVAGE_VALUE,nvl(DOCUMENT_ID,' ') as DOCUMENT_ID,to_char(ACQ_DATE,'YYYY-MM-DD') as ACQ_DATE,nvl(DEPRECIABLE_AMOUNT,'') as DEPRECIABLE_AMOUNT,nvl(SERIAL_NO,' ') as SERIAL_NO,nvl(VOUCHER_NUMBER,' ') as VOUCHER_NUMBER,nvl(BAR_CODE,' ') as BAR_CODE,nvl(PURCHASE_ORDER_NUMBER,' ') as PO_NUMBER,USEFUL_LIFE,USEFUL_LIFE_UNIT,DEPRECIATION_RATE,to_char(DEP_START_DATE,'YYYY-MM-DD') as DEP_START_DATE,to_char(DEP_END_DATE,'YYYY-MM-DD') as DEP_END_DATE,PY_DEP,MY_DEP,nvl(cast(ACCUM_DEP_COST as varchar(10)),' ') as ACCUM_DEP_COST,BRANCH,DEPARTMENT,UNIT_ID as unit,STAFF_ID as custodian,P_LOCATION,nvl(VENDOR_NUMBER,' ') as VENDOR_NUMBER,nvl(MAINTENANCE_VENDOR_ID,' ') as MAINTENANCE_VENDOR_ID,to_char(NEXT_SERVICE_DATE,'YYYY-MM-DD') as NEXT_SERVICE_DATE,nvl(UNDER_MAINTENANCE,' ') as UNDER_MAINTENANCE,to_char(WARRANTY,'YYYY-MM-DD') as WARRANTY,nvl(RENEW_WARRANTY,' ') as RENEW_WARRANTY,nvl(INSURED,' ') as INSURED,nvl(INSURANCE_CARD_NO,' ') as INSURANCE_CARD_NO,ASSET_ACCT,CR_ACCT,DEP_ACCT,DEP_CR_ACCT,REV_LOSS_ACCT,DIS_ACCT,REV_SURP_ACCT,MAINTENANCE_ACCT,REV_LOSS_ACCT,WORK_IN_PROG_ACCT
//        FROM ASSET_MASTER
//        WHERE ASSET_ID = '${assetID}'
//       `);

//       if (data) {
//         // res.send(response);

//         var arr0 = "";
//         var arr = [];

//         for (let i = 0; i < data.rows.length; i++) {
//           for (let x = 0; x < data.metaData.length; x++) {
//             arr0 +=
//               '"' +
//               [data.metaData[x].name.toLowerCase()] +
//               '" : "' +
//               data.rows[i][x] +
//               '",';
//           }

//           arr.push(JSON.parse("{" + arr0.replace(/,\s*$/, "") + "}"));
//         }

//         res.send(arr);

//       } else {
//         res.send("Something went wrong... Nothing was returned!!");
//       }
//     } catch (err) {
//       res.send(err);

//       throw err;
//     }
//   }

//   getfAsset();
// });

app.get("/api/get-asset-accounts", (req, res) => {
  async function getAssetAccounts() {
    let con;

    try {
      con = await oracledb.getConnection({
        user: DB_USER,
        password: DB_PASSWORD,
        connectString: DB_CONNECTION_STRING,
      });

      const data = await con.execute(
        `select 
       acct_link,account_descrp,GET_CURRISO(CURRENCY_CODE) as currency
       from g_ledger where type_of_acct='9' and level_identifier='D' 
      `
      );

      if (data) {
        // res.send(response);

        var arr0 = "";
        var arr = [];

        for (let i = 0; i < data.rows.length; i++) {
          for (let x = 0; x < data.metaData.length; x++) {
            arr0 +=
              '"' +
              [data.metaData[x].name.toLowerCase()] +
              '" : "' +
              data.rows[i][x] +
              '",';
          }

          arr.push(JSON.parse("{" + arr0.replace(/,\s*$/, "") + "}"));
        }

        res.send(arr);
      } else {
        res.send("Something went wrong... Nothing was returned!!");
      }
    } catch (err) {
      res.send(err);

      throw err;
    }
  }

  getAssetAccounts();
});
//   async function createFixedAssetCapture() {
//     let con;

//     try {
//       con = await oracledb.getConnection({
//         user: DB_USER,
//         password: DB_PASSWORD,
//         connectString: DB_CONNECTION_STRING,
//       });

//       const assetCategory = req.body.assetCategory;
//       const assetClass = req.body.assetClass;
//       const description = req.body.description;
//       const depMethod = req.body.depMethod;
//       const depStartDate = req.body.depStartDate;
//       const mainAssetComponent = req.body.mainAssetComponent;
//       const mainAssetID = req.body.mainAssetID;
//       const acqCost = req.body.acqCost;
//       const acqDate = req.body.acqDate;
//       const assetType = req.body.assetType;
//       const depreciableAmount = req.body.depreciableAmount;
//       const usefulLife = req.body.usefulLife;
//       const usefulLifeUnit = req.body.usefulLifeUnit;
//       const depreciationRate = req.body.depreciationRate;
//       const depEndDate = req.body.depEndDate;
//       const perYearDep = req.body.perYearDep;
//       const perMonthDep = req.body.perMonthDep;
//       const TotalDepreciationCost = req.body.TotalDepreciationCost;
//       const scanDocID = req.body.scanDocID;
//       const assetLabel = req.body.assetLabel;
//       const assetStatus = req.body.assetStatus;
//       const branchCode = req.body.branchCode;
//       const custodianID = req.body.custodianID;
//       const physicialLocation = req.body.physicialLocation;
//       const assetAccount = req.body.assetAccount;
//       const depAccount = req.body.depAccount;
//       const depCr = req.body.depCr;
//       const disAcct = req.body.disAcct;
//       const revSurpAcct = req.body.revSurpAcct;
//       const revLossAcct = req.body.revLossAcct;
//       const maintenanceAcct = req.body.maintenanceAcct;
//       const flag = req.body.flag;
//       const serialNumber = req.body.serialNumber;
//       const shortDescription = req.body.shortDescription;
//       const barCode = req.body.barCode;
//       const purchaseOrderNumber = req.body.purchaseOrderNumber;
//       const voucherNumber = req.body.voucherNumber;
//       const vendorNumber = req.body.vendorNumber;
//       const department = req.body.department;
//       const unit = req.body.unit;
//       const currency = req.body.currency;
//       const totalDepAmount = req.body.totalDepAmount;
//       const creditAccount = req.body.creditAccount;
//       const wipAccount = req.body.wipAccount;
//       const warrantyExp = req.body.warrantyExp;
//       const warrantyRenewal = req.body.warrantyRenewal;
//       const maintenanceVendorID = req.body.maintenanceVendorID;
//       const nextServiceDate = req.body.nextServiceDate;
//       const underMain = req.body.underMain;
//       const insurance = req.body.insurance;
//       const postedBy = req.body.postedBy;
//       const postedDate = req.body.postedDate;
//       const postedTerminal = os.hostname();
//       const postedIP = getIPAddress().address;
//       const assetID = req.body.assetID;
//       const postingSysDateApp = req.body.postingSysDateApp;
//       const postingSysTimeApp = req.body.postingSysTimeApp;
//       const postingTerminalApp = req.body.postingTerminalApp;
//       const postingIpApp = req.body.postingIpApp;
//       const amendedBy = req.body.amendedBy;
//       const amendedDate = req.body.amendedDate;
//       const amendedTerminal = req.body.amendedTerminal;
//       const amendedIP = req.body.amendedIP;
//       const taxCode = req.body.taxCode;
//       const salvageValue = req.body.salvageValue;
//       const expContractReference = req.body.expContractReference;
//       const insuranceCardNo = req.body.insuranceCardNo;
//       const depreciationCalcMode = req.body.depreciationCalcMode;

//       // const postingTerminal = os.hostname();
//       // const postingIP = getIPAddress().address;
//       // const amendingTerminal = os.hostname();
//       // const amendingIP = getIPAddress().address;
//       // const approvedTerminal = os.hostname();
//       // const approvedIP = getIPAddress().address;
//       // const flagMessage = req.body.flagMessage;
//       // const ipAddress = getIPAddress().address;
//       // const branchCode = getIPAddress().address;
//       // const moduleB = "PKG_fin_bs_creation";
//       // const channelB = "BRA";
//       // return res.send("hello")

//       // return res.send(p2);
// console.log(flag,"flag")

//       con.execute(
//         "BEGIN PRC_FIXED_ASSET_CAPTURE(:ASSET_CATEGORY,:ASSET_CLASS,:ASSET_TYPE,:MAIN_ASSET_COMPONENT,:MAIN_ASSET_ID,:SERIAL_NUMBER,:ASSET_LABEL,:DESCRIPTION,:SHORT_DESCRP,SCAN_DOC_ID,:DEP_METHOD,:DEP_START_DATE,:ACQ_COST,:ACQ_date,:DEPRECIABLE_AMOUNT,:USEFUL_LIFE,:USEFUL_LIFE_UNIT,:DEPRECIATION_RATE,:DEP_END_DATE,:PER_YEAR_DEP,:PER_MONTH_DEP,:ACCUM_DEP_COST,:SCAN_DOC_ID,:BAR_code,:ASSET_status,:BRANCH_CODE,:CUSTODIAN_ID,:PHYSICAL_LOCATION,:ACCT_LINK,:DEP_ACCOUNT,:DEP_CR,:dis_acct,:rev_surp_acct,:rev_loss_acct,:MAINTENANCE_ACCT,:FLAG_B,:PURCHASE_ORDER_number,:VOUCHER_NUM,:VENDOR_NUM,:DEPARTMENT_B,:UNIT_B,:CURRENCY,:TOTAL_DEP_AMOUNT,:CREDIT_ACCOUNT,:WIP_ACCOUNT,:WARRANTY_EXP,:WARRANTY_RENEWAL,:MAINTENANCE_VEN_ID,:NXT_SERVICE_DATE,:UNDER_MAIN,:INSURANCE,:POSTED_BY,:POSTED_DATE,:POSTED_TERMINAL,:POSTED_IP,:ASSET_id,:POSTING_SYSDATE_APP,:POSTING_SYSTIME_APP,:POSTING_TERMINAL_APP,:POSTING_IP_APP,:AMENDED_BY,:AMENDED_DATE,:AMENDED_TERMINAL,:AMENDED_IP,:TAX_CODE,:SALVAGE_VALUE,:EXP_CONTRACT_REFERENCE,:INSURANCE_CARD_NO,:DEPRECIATION_CALC_MODE,:api_status,:api_msg); END;",
//         {
//           ASSET_CATEGORY: {
//             type: oracledb.STRING,
//             dir: oracledb.BIND_IN,
//             val: assetCategory,
//           },
//           ASSET_CLASS: {
//             type: oracledb.STRING,
//             dir: oracledb.BIND_IN,
//             val: assetClass,
//           },
//           ASSET_TYPE: {
//             type: oracledb.STRING,
//             dir: oracledb.BIND_IN,
//             val: assetType,
//           },
//           MAIN_ASSET_COMPONENT: {
//             type: oracledb.STRING,
//             dir: oracledb.BIND_IN,
//             val: mainAssetComponent,
//           },
//           MAIN_ASSET_ID: {
//             type: oracledb.STRING,
//             dir: oracledb.BIND_IN,
//             val: mainAssetID,
//           },
//           SERIAL_NUMBER: {
//             type: oracledb.STRING,
//             dir: oracledb.BIND_IN,
//             val: serialNumber,
//           },
//           ASSET_LABEL: {
//             type: oracledb.STRING,
//             dir: oracledb.BIND_IN,
//             val: assetLabel,
//           },
//           DESCRIPTION: {
//             type: oracledb.STRING,
//             dir: oracledb.BIND_IN,
//             val: description,
//           },
//           SHORT_DESCRP: {
//             type: oracledb.STRING,
//             dir: oracledb.BIND_IN,
//             val: shortDescription,
//           },
//           DEP_METHOD: {
//             type: oracledb.STRING,
//             dir: oracledb.BIND_IN,
//             val: depMethod,
//           },
//           SCAN_DOC_ID: {
//             type: oracledb.STRING,
//             dir: oracledb.BIND_IN,
//             val: scanDocID,
//           },
//           BAR_code: {
//             type: oracledb.STRING,
//             dir: oracledb.BIND_IN,
//             val: barCode,
//           },
//           DEP_START_DATE: {
//             type: oracledb.STRING,
//             dir: oracledb.BIND_IN,
//             val: depStartDate,
//           },
//           ACQ_COST: {
//             type: oracledb.STRING,
//             dir: oracledb.BIND_IN,
//             val: acqCost,
//           },
//           ACQ_date: {
//             type: oracledb.STRING,
//             dir: oracledb.BIND_IN,
//             val: acqDate,
//           },
//          DEPRECIABLE_AMOUNT: {
//             type: oracledb.STRING,
//             dir: oracledb.BIND_IN,
//             val: depreciableAmount,
//           },
//           USEFUL_LIFE: {
//             type: oracledb.STRING,
//             dir: oracledb.BIND_IN,
//             val: usefulLife,
//           },
//           USEFUL_LIFE_UNIT: {
//             type: oracledb.STRING,
//             dir: oracledb.BIND_IN,
//             val: usefulLifeUnit,
//           },
//           DEPRECIATION_RATE: {
//             type: oracledb.STRING,
//             dir: oracledb.BIND_IN,
//             val: depreciationRate,
//           },
//           DEP_END_DATE: {
//             type: oracledb.STRING,
//             dir: oracledb.BIND_IN,
//             val: depEndDate,
//           },
//           PER_YEAR_DEP: {
//             type: oracledb.STRING,
//             dir: oracledb.BIND_INOUT,
//             val: perYearDep,
//           },
//           PER_MONTH_DEP: {
//             type: oracledb.STRING,
//             dir: oracledb.BIND_IN,
//             val: perMonthDep,
//           },
//           ACCUM_DEP_COST: {
//             type: oracledb.STRING,
//             dir: oracledb.BIND_IN,
//             val: TotalDepreciationCost,
//           },
//           ASSET_status: {
//             type: oracledb.STRING,
//             dir: oracledb.BIND_IN,
//             val: assetStatus,
//           },
//           BRANCH_CODE: {
//             type: oracledb.STRING,
//             dir: oracledb.BIND_IN,
//             val: branchCode,
//           },
//           CUSTODIAN_ID: {
//             type: oracledb.STRING,
//             dir: oracledb.BIND_IN,
//             val: custodianID,
//           },
//           PHYSICAL_LOCATION: {
//             type: oracledb.STRING,
//             dir: oracledb.BIND_IN,
//             val: physicialLocation,
//           },
//           ACCT_LINK: {
//             type: oracledb.STRING,
//             dir: oracledb.BIND_IN,
//             val: assetAccount,
//           },
//           DEP_ACCOUNT: {
//             type: oracledb.STRING,
//             dir: oracledb.BIND_IN,
//             val: depAccount,
//           },
//           DEP_CR: {
//             type: oracledb.STRING,
//             dir: oracledb.BIND_IN,
//             val: depCr,
//           },
//           dis_acct: {
//             type: oracledb.STRING,
//             dir: oracledb.BIND_IN,
//             val: disAcct,
//           },
//           rev_surp_acct: {
//             type: oracledb.STRING,
//             dir: oracledb.BIND_IN,
//             val: revSurpAcct,
//           },
//           rev_loss_acct: {
//             type: oracledb.STRING,
//             dir: oracledb.BIND_IN,
//             val: revLossAcct,
//           },
//           MAINTENANCE_ACCT: {
//             type: oracledb.STRING,
//             dir: oracledb.BIND_IN,
//             val: maintenanceAcct,
//           },
//           FLAG_B: {
//             type: oracledb.STRING,
//             dir: oracledb.BIND_IN,
//             val: flag,
//           },
//           PURCHASE_ORDER_number: {
//             type: oracledb.STRING,
//             dir: oracledb.BIND_IN,
//             val: purchaseOrderNumber,
//           },
//           VOUCHER_NUM: {
//             type: oracledb.STRING,
//             dir: oracledb.BIND_IN,
//             val: voucherNumber,
//           },
//           VENDOR_NUM: {
//             type: oracledb.STRING,
//             dir: oracledb.BIND_IN,
//             val: vendorNumber,
//           },
//           DEPARTMENT_B: {
//             type: oracledb.STRING,
//             dir: oracledb.BIND_IN,
//             val: department,
//           },
//           UNIT_B: {
//             type: oracledb.STRING,
//             dir: oracledb.BIND_IN,
//             val: unit,
//           },
//           CURRENCY: {
//             type: oracledb.STRING,
//             dir: oracledb.BIND_IN,
//             val: currency,
//           },
//           TOTAL_DEP_AMOUNT: {
//             type: oracledb.STRING,
//             dir: oracledb.BIND_IN,
//             val: totalDepAmount,
//           },
//           CREDIT_ACCOUNT: {
//             type: oracledb.STRING,
//             dir: oracledb.BIND_IN,
//             val: creditAccount,
//           },
//           WIP_ACCOUNT: {
//             type: oracledb.STRING,
//             dir: oracledb.BIND_IN,
//             val: wipAccount,
//           },
//           WARRANTY_EXP: {
//             type: oracledb.STRING,
//             dir: oracledb.BIND_IN,
//             val: warrantyExp,
//           },
//           WARRANTY_RENEWAL: {
//             type: oracledb.STRING,
//             dir: oracledb.BIND_IN,
//             val: warrantyRenewal,
//           },
//           MAINTENANCE_VEN_ID: {
//             type: oracledb.STRING,
//             dir: oracledb.BIND_IN,
//             val: maintenanceVendorID,
//           },
//           NXT_SERVICE_DATE: {
//             type: oracledb.STRING,
//             dir: oracledb.BIND_IN,
//             val: nextServiceDate,
//           },
//           UNDER_MAIN: {
//             type: oracledb.STRING,
//             dir: oracledb.BIND_IN,
//             val: underMain,
//           },
//           INSURANCE: {
//             type: oracledb.STRING,
//             dir: oracledb.BIND_IN,
//             val: insurance,
//           },
//           POSTED_BY: {
//             type: oracledb.STRING,
//             dir: oracledb.BIND_IN,
//             val: postedBy,
//           },
//           POSTED_DATE: {
//             type: oracledb.STRING,
//             dir: oracledb.BIND_IN,
//             val: postedDate,
//           },
//           POSTED_TERMINAL: {
//             type: oracledb.STRING,
//             dir: oracledb.BIND_IN,
//             val: postedTerminal,
//           },
//           POSTED_IP: {
//             type: oracledb.STRING,
//             dir: oracledb.BIND_IN,
//             val: postedIP,
//           },
//           ASSET_id: {
//             type: oracledb.STRING,
//             dir: oracledb.BIND_IN,
//             val: assetID,
//           },
//           POSTING_SYSDATE_APP: {
//             type: oracledb.STRING,
//             dir: oracledb.BIND_IN,
//             val: postingSysDateApp,
//           },
//           POSTING_SYSTIME_APP: {
//             type: oracledb.STRING,
//             dir: oracledb.BIND_IN,
//             val: postingSysTimeApp,
//           },
//           POSTING_TERMINAL_APP: {
//             type: oracledb.STRING,
//             dir: oracledb.BIND_IN,
//             val: postingTerminalApp,
//           },
//           POSTING_IP_APP: {
//             type: oracledb.STRING,
//             dir: oracledb.BIND_IN,
//             val: postingIpApp,
//           },
//           AMENDED_BY: {
//             type: oracledb.STRING,
//             dir: oracledb.BIND_IN,
//             val: amendedBy,
//           },
//           AMENDED_DATE: {
//             type: oracledb.STRING,
//             dir: oracledb.BIND_IN,
//             val: amendedDate,
//           },
//           AMENDED_TERMINAL: {
//             type: oracledb.STRING,
//             dir: oracledb.BIND_IN,
//             val: amendedTerminal,
//           },
//           AMENDED_IP: {
//             type: oracledb.STRING,
//             dir: oracledb.BIND_IN,
//             val: amendedIP,
//           },
//           TAX_CODE: {
//             type: oracledb.STRING,
//             dir: oracledb.BIND_IN,
//             val: taxCode,
//           },
//           SALVAGE_VALUE: {
//             type: oracledb.STRING,
//             dir: oracledb.BIND_IN,
//             val: salvageValue,
//           },
//           EXP_CONTRACT_REFERENCE: {
//             type: oracledb.STRING,
//             dir: oracledb.BIND_IN,
//             val: expContractReference,
//           },
//           INSURANCE_CARD_NO: {
//             type: oracledb.STRING,
//             dir: oracledb.BIND_IN,
//             val: insuranceCardNo,
//           },
//           DEPRECIATION_CALC_MODE: {
//             type: oracledb.STRING,
//             dir: oracledb.BIND_IN,
//             val: depreciationCalcMode,
//           },
//           api_status: {
//             type: oracledb.STRING,
//             dir: oracledb.BIND_OUT,
//           },
//           api_msg: {
//             type: oracledb.STRING,
//             dir: oracledb.BIND_OUT,
//           },
//         },

//         function (err, result) {
//           if (err) {
//             throw err;
//           }
//           if (result) {
//             // console.log(result.outBinds,"jigga");
//             // console.log(flag,"currencycurrencycurrency");
//             // console.log(result.outBinds.api_status);
//             // console.log(result.outBinds.api_msg);
//             if (result.outBinds.api_status == "Y") {
//               // console.log(result.outBinds.api_status, "req.bodyy");
//               let message = result.outBinds.api_msg;

//               response = {
//                 success: "Y",
//                 message: message
//               };

//               res.send(response);
//             } else {
//               // console.log(api_status, "req.body");
//               let message = result.outBinds.api_msg;

//               response = {
//                 success: result.outBinds.api_status,
//                 message: message,
//                 // token_id: tokennumber(50),
//               };

//               res.send(response);
//             }
//           }
//         }
//       );
//     } catch (err) {
//       res.send(err);
//     }
//   }

//   createFixedAssetCapture();
// });

app.get("/api/gl-branch", async (req, res) => {
  async function getGlBranch() {
    let con;

    try {
      con = await oracledb.getConnection({
        user: DB_USER,
        password: DB_PASSWORD,
        connectString: DB_CONNECTION_STRING,
      });

      // node native promisify
      // const execute = util.promisify(db.execute).bind(db);

      const data = await con.execute(
        `SELECT BR_CODE, BR_DESCRIPTION FROM TB_BRANCH WHERE FLAG_STATUS='A' ORDER BY BR_CODE`
      );

      let response = [];
      let arr0 = "";
      if (data) {
        for (let i = 0; i < data.rows.length; i++) {
          for (let x = 0; x < data.metaData.length; x++) {
            arr0 +=
              '"' +
              [data.metaData[x].name.toLowerCase()] +
              '" : "' +
              data.rows[i][x] +
              '",';
          }

          response.push(JSON.parse("{" + arr0.replace(/,\s*$/, "") + "}"));
        }

        res.send(response);
      } else {
        res.send("Something went wrong... Nothing was returned!!");
      }
    } catch (err) {
      res.send(err);

      throw err;
    }
  }
  getGlBranch();
});

app.post("/api/get-fixed-asset-data", (req, res) => {
  const assetID = req.body.assetID;

  async function getfAsset() {
    let con;

    try {
      con = await oracledb.getConnection({
        user: DB_USER,
        password: DB_PASSWORD,
        connectString: DB_CONNECTION_STRING,
      });

      const data = await con.execute(
        `SELECT 
        AM.ASSET_CAT,AM.ASSET_CLASS,get_fasset_desc(AM.ASSET_CLASS) AS asset_class_description,
        NVL(AM.CURRENCY_CODE, ' ') AS CURRENCY_CODE,NVL(get_currdesc(AM.CURRENCY_CODE), ' ') AS currency,
        NVL(AM.DESCRIPTION, ' ') AS DESCRIPTION,NVL(AM.SHORT_DESCRIPTION, ' ') AS SHORT_DESCRIPTION,
        AM.MAIN_ASSET_COMPONENT,NVL(AM.ASSET_LABEL, ' ') AS ASSET_LABEL,NVL(AM.MAIN_ASSET_ID, ' ') AS MAIN_ASSET_ID,
        AM.ASSET_STATUS,NVL(AM.DEP_METHOD, ' ') AS DEP_METHOD,AM.ASSET_TYPE,NVL(AM.ACQ_COST, '') AS ACQ_COST,
        NVL(CAST(AM.SALVAGE_VALUE AS VARCHAR(10)), ' ') AS SALVAGE_VALUE,NVL(AM.DOCUMENT_ID, ' ') AS DOCUMENT_ID,
        TO_CHAR(AM.ACQ_DATE, 'YYYY-MM-DD') AS ACQ_DATE,NVL(AM.DEPRECIABLE_AMOUNT, '') AS DEPRECIABLE_AMOUNT,
        NVL(AM.SERIAL_NO, ' ') AS SERIAL_NO,NVL(AM.VOUCHER_NUMBER, ' ') AS VOUCHER_NUMBER,
        NVL(AM.BAR_CODE, ' ') AS BAR_CODE,NVL(AM.PURCHASE_ORDER_NUMBER, ' ') AS PO_NUMBER,AM.USEFUL_LIFE,
        AM.USEFUL_LIFE_UNIT,AM.DEPRECIATION_RATE,TO_CHAR(AM.DEP_START_DATE, 'YYYY-MM-DD') AS DEP_START_DATE,
        TO_CHAR(AM.DEP_END_DATE, 'YYYY-MM-DD') AS DEP_END_DATE,AM.PY_DEP,AM.MY_DEP,
        NVL(CAST(AM.ACCUM_DEP_COST AS VARCHAR(10)), ' ') AS ACCUM_DEP_COST,AM.BRANCH,AM.DEPARTMENT,
        AM.UNIT_ID AS unit,AM.STAFF_ID AS custodian,AM.P_LOCATION,NVL(AM.VENDOR_NUMBER, ' ') AS VENDOR_NUMBER,
        NVL(AM.MAINTENANCE_VENDOR_ID, ' ') AS MAINTENANCE_VENDOR_ID,TO_CHAR(AM.NEXT_SERVICE_DATE, 'YYYY-MM-DD') AS NEXT_SERVICE_DATE,
        TO_CHAR(AM.WIP_START_DATE, 'YYYY-MM-DD') AS WIP_START_DATE,TO_CHAR(AM.EST_WIP_END_DATE, 'YYYY-MM-DD') AS EST_WIP_END_DATE,NVL(AM.UNDER_MAINTENANCE, ' ') AS UNDER_MAINTENANCE,TO_CHAR(AM.WARRANTY, 'YYYY-MM-DD') AS WARRANTY,
        NVL(AM.RENEW_WARRANTY, ' ') AS RENEW_WARRANTY,NVL(AM.INSURED, ' ') AS INSURED,NVL(AM.INSURANCE_CARD_NO, ' ') AS INSURANCE_CARD_NO,
        AM.ACCT_LINK AS ASSET_ACCT,AM.CR_ACCT,AM.DEP_ACCT,AM.DEP_CR_ACCT,AM.REV_LOSS_ACCT,AM.DIS_ACCT,
        AM.REV_SURP_ACCT,AM.MAINTENANCE_ACCT,AM.REV_LOSS_ACCT,AM.WORK_IN_PROG_ACCT,AM.DEP_AMOUNT,
        NVL(AM.DISP_REASON, ' ') AS DISP_REASON,AM.DISPOSAL_COST,
        NVL(SUSP.SUSPENSION_REASON, ' ') AS SUSPENSION_REASON,NVL(SUSP.POSTED_BY, ' ') AS POSTED_BY,
        TO_CHAR(SUSP.POSTING_DATE, 'YYYY-MM-DD') AS POSTING_DATE
        FROM 
        ASSET_MASTER AM
        LEFT JOIN 
        TB_FAFA_SUSPENSION SUSP ON AM.ASSET_ID = SUSP.ASSET_ID
        WHERE 
        AM.ASSET_ID = '${assetID}'
      `
      );

      if (data.rows) {
        const response = [];
        for (let i = 0; i < data.rows.length; i++) {
          const rowData = {}; // Create an object for each row

          for (let x = 0; x < data.metaData.length; x++) {
            const columnName = data.metaData[x].name.toLowerCase();
            const columnValue = data.rows[i][x];
            rowData[columnName] = columnValue; // Assign each column to the object
          }

          response.push(rowData); // Push the object to the response array
        }
        return res.status(200).send(response);
      } else {
        return res
          .status(500)
          .send("Something went wrong... Nothing was returned!!");
      }
    } catch (err) {
      res.send(err);

      throw err;
    }
  }

  getfAsset();
});

app.post("/api/get-gl-mapped-accounts", (req, res) => {
  const assetCategory = req.body.assetCategory;

  let getGlMappedAccounts = async () => {
    try {
      const db = await oracledb.getConnection({
        user: DB_USER,
        password: DB_PASSWORD,
        connectString: DB_CONNECTION_STRING,
        timeout: DB_CONNECTION_TIMEOUT,
      });
      const execute = util.promisify(db.execute).bind(db);

      // return res.send("ghamna");
      // res.send(con);
      const data = await execute(
        `SELECT ACCT_LINK,CR_ACCT,DEP_ACCT,DIS_ACCT,DEP_CR_ACCT,REV_SURP_ACCT,REV_LOSS_ACCT,WORK_IN_PROG,MAINTENANCE_ACCT,CLASS_CODE as
        asset_class,get_fasset_desc(CLASS_CODE) as asset_class_description,USEFULL_LIFE as usefulLife,USEFUL_LIFE_UNIT as useful_life_unit,CURRENCY_CODE,get_currdesc(CURRENCY_CODE) as currency,rate
         FROM fasset_cat 
         WHERE cat_code='${assetCategory}'
        `
      );
      if (data) {
        // res.send(response);

        var arr0 = "";
        var arr = [];

        for (let i = 0; i < data.rows.length; i++) {
          for (let x = 0; x < data.metaData.length; x++) {
            arr0 +=
              '"' +
              [data.metaData[x].name.toLowerCase()] +
              '" : "' +
              data.rows[i][x] +
              '",';
          }

          arr.push(JSON.parse("{" + arr0.replace(/,\s*$/, "") + "}"));
        }

        return res.send(arr);
      } else {
        res.send("Something went wrong... Nothing was returned!!");
      }
    } catch (err) {
      console.log(err);
      res.send(err);
    }
  };
  getGlMappedAccounts();
});

app.post("/api/get-depreciation-type", (req, res) => {
  const assetCategory = req.body.assetCategory;

  let getDepreciationType = async () => {
    try {
      const db = await oracledb.getConnection({
        user: DB_USER,
        password: DB_PASSWORD,
        connectString: DB_CONNECTION_STRING,
        timeout: DB_CONNECTION_TIMEOUT,
      });
      const execute = util.promisify(db.execute).bind(db);

      // return res.send("ghamna");
      // res.send(con);
      const data = await execute(
        `SELECT DEPRECIATION_CALC_MODE
         FROM fasset_cat 
         WHERE cat_code='${assetCategory}'
        `
      );
      if (data) {
        // res.send(response);

        var arr0 = "";
        var arr = [];

        for (let i = 0; i < data.rows.length; i++) {
          for (let x = 0; x < data.metaData.length; x++) {
            arr0 +=
              '"' +
              [data.metaData[x].name.toLowerCase()] +
              '" : "' +
              data.rows[i][x] +
              '",';
          }

          arr.push(JSON.parse("{" + arr0.replace(/,\s*$/, "") + "}"));
        }

        return res.send(arr);
      } else {
        res.send("Something went wrong... Nothing was returned!!");
      }
    } catch (err) {
      console.log(err);
      res.send(err);
    }
  };
  getDepreciationType();
});

//9:21
app.post("/api/fixed_asset_capture_procedure", (req, res) => {
  async function fixedAssetCapture() {
    let con;

    try {
      con = await oracledb.getConnection({
        user: DB_USER,
        password: DB_PASSWORD,
        connectString: DB_CONNECTION_STRING,
      });

      const {
        assetCategory,
        assetClass,
        description,
        depMethod,
        depStartDate,
        mainAssetComponent,
        mainAssetID,
        acqCost,
        acqDate,
        assetType,
        depreciableAmount,
        usefulLife,
        usefulLifeUnit,
        depreciationRate,
        depEndDate,
        perYearDep,
        perMonthDep,
        accumDepCost,
        scanDocID,
        assetLabel,
        assetStatus,
        branchCode,
        custodianID,
        physicalLocation,
        acctLink,
        depAccount,
        depCR,
        disAcct,
        revSurpAcct,
        revLossAcct,
        maintenanceAcct,
        flag,
        serialNumber,
        shortDescrp,
        barCode,
        purchaseOrderNum,
        voucherNumber,
        vendorNumber,
        department,
        unit,
        currency,
        totalDepAmount,
        creditAccount,
        wipAccount,
        warrantyExpiry,
        renewWarranty,
        maintenanceVendorID,
        nextServiceDate,
        underMaintenance,
        insurance,
        postedBy,
        postedDate,
        assetID,
        postingsysdate_app,
        postingsystime_app,
        postingTerminal_app,
        postingIP_app,
        amended_by,
        amended_date,
        amended_terminal,
        amended_IP,
        taxCode,
        salvageValue,
        expContractRef,
        insuranceCardNum,
        depreciationCalcMode,
      } = req.body;
      // console.log(flag);
      // console.log(mainAssetID, "mainAssetID");

      con.execute(
        "BEGIN PRC_FIXED_ASSET_CAPTURE(:ASSET_CATEGORY,:ASSET_CLASS,:DESCRIPTION,:DEP_METHOD,:DEP_START_DATE,:MAIN_ASSET_COMPONENT,:MAIN_ASSET_ID_P,:ACQ_COST,:ACQ_date,:ASSET_TYPE,:DEPRECIABLE_AMOUNT,:USEFUL_LIFE,:USEFUL_LIFE_UNIT,:DEPRECIATION_RATE,:DEP_END_DATE,:PER_YEAR_DEP,:PER_MONTH_DEP,:ACCUM_DEP_COST,:SCAN_DOC_ID,:ASSET_LABEL,:ASSET_status,:BRANCH_CODE,:CUSTODIAN_ID,:PHYSICAL_LOCATION,:ACCT_LINK,:DEP_ACCOUNT,:DEP_CR,:dis_acct,:rev_surp_acct,:rev_loss_acct,:MAINTENANCE_ACCT,:FLAG_B,:SERIAL_NUMBER,:SHORT_DESCRP,:BAR_code,:PURCHASE_ORDER_number,:VOUCHER_NUM,:VENDOR_NUM,:DEPARTMENT_B,:UNIT_B,:CURRENCY,:TOTAL_DEP_AMOUNT,:CREDIT_ACCOUNT,:WIP_ACCOUNT,:WARRANTY_EXP,:WARRANTY_RENEWAL,:MAINTENANCE_VEN_ID,:NXT_SERVICE_DATE,:UNDER_MAIN,:INSURANCE,:POSTED_BY,:POSTED_DATE,:POSTED_TERMINAL,:POSTED_IP,:ASSET_id_APP,:POSTING_SYSDATE_APP,:POSTING_SYSTIME_APP,:POSTING_TERMINAL_APP,:POSTING_IP_APP,:AMENDED_BY,:AMENDED_DATE,:AMENDED_TERMINAL,:AMENDED_IP,:TAX_CODE,:SALVAGE_VALUE,:EXP_CONTRACT_REFERENCE,:INSURANCE_CARD_NO,:DEPRECIATION_CALC_MODE, :api_status, :api_msg ); END;",
        {
          ASSET_CATEGORY: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: assetCategory,
          },
          ASSET_CLASS: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: assetClass,
          },
          DESCRIPTION: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: description,
          },
          DEP_METHOD: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: depMethod,
          },
          DEP_START_DATE: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: depStartDate,
          },
          MAIN_ASSET_COMPONENT: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: mainAssetComponent,
          },
          MAIN_ASSET_ID_P: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: mainAssetID,
          },
          ACQ_COST: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: acqCost,
          },
          ACQ_date: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: acqDate,
          },
          ASSET_TYPE: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: assetType,
          },
          DEPRECIABLE_AMOUNT: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: depreciableAmount,
          },
          USEFUL_LIFE: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: usefulLife,
          },
          USEFUL_LIFE_UNIT: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: usefulLifeUnit,
          },
          DEPRECIATION_RATE: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: depreciationRate,
          },
          DEP_END_DATE: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: depEndDate,
          },
          PER_YEAR_DEP: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: perYearDep,
          },
          PER_MONTH_DEP: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: perMonthDep,
          },
          ACCUM_DEP_COST: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: accumDepCost,
          },
          SCAN_DOC_ID: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: scanDocID,
          },
          ASSET_LABEL: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: assetLabel,
          },
          ASSET_status: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: assetStatus,
          },
          BRANCH_CODE: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: branchCode,
          },
          CUSTODIAN_ID: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: custodianID,
          },
          PHYSICAL_LOCATION: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: physicalLocation,
          },
          ACCT_LINK: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: acctLink,
          },
          DEP_ACCOUNT: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: depAccount,
          },
          DEP_CR: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: depCR,
          },
          dis_acct: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: disAcct,
          },
          rev_surp_acct: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: revSurpAcct,
          },
          rev_loss_acct: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: revLossAcct,
          },
          MAINTENANCE_ACCT: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: maintenanceAcct,
          },
          FLAG_B: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: flag,
          },
          SERIAL_NUMBER: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: serialNumber,
          },
          SHORT_DESCRP: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: shortDescrp,
          },
          BAR_code: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: barCode,
          },
          PURCHASE_ORDER_number: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: purchaseOrderNum,
          },
          VOUCHER_NUM: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: voucherNumber,
          },
          VENDOR_NUM: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: vendorNumber,
          },
          DEPARTMENT_B: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: department,
          },
          UNIT_B: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: unit,
          },
          CURRENCY: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: currency,
          },
          TOTAL_DEP_AMOUNT: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: totalDepAmount,
          },
          CREDIT_ACCOUNT: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: creditAccount,
          },
          WIP_ACCOUNT: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: wipAccount,
          },
          WARRANTY_EXP: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: warrantyExpiry,
          },
          WARRANTY_RENEWAL: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: renewWarranty,
          },
          MAINTENANCE_VEN_ID: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: maintenanceVendorID,
          },
          NXT_SERVICE_DATE: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: nextServiceDate,
          },
          UNDER_MAIN: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: underMaintenance,
          },
          INSURANCE: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: insurance,
          },
          POSTED_BY: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: postedBy,
          },
          POSTED_DATE: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: postedDate,
          },
          POSTED_TERMINAL: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: os.hostname(),
          },
          POSTED_IP: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: ip.address(),
          },
          ASSET_id_APP: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: assetID,
          },
          POSTING_SYSDATE_APP: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: postingsysdate_app,
          },
          POSTING_SYSTIME_APP: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: postingsystime_app,
          },
          POSTING_TERMINAL_APP: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: postingTerminal_app,
          },
          POSTING_IP_APP: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: postingIP_app,
          },
          AMENDED_BY: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: amended_by,
          },
          AMENDED_DATE: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: amended_date,
          },
          AMENDED_TERMINAL: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: amended_terminal,
          },
          AMENDED_IP: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: amended_IP,
          },
          TAX_CODE: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: taxCode,
          },
          SALVAGE_VALUE: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: salvageValue,
          },
          EXP_CONTRACT_REFERENCE: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: expContractRef,
          },
          INSURANCE_CARD_NO: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: insuranceCardNum,
          },
          DEPRECIATION_CALC_MODE: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: depreciationCalcMode,
          },
          api_status: {
            type: oracledb.STRING,
            dir: oracledb.BIND_OUT,
          },
          api_msg: {
            type: oracledb.STRING,
            dir: oracledb.BIND_OUT,
          },
        },

        // return res.send("here1");
        function (err, result) {
          if (err) {
            throw err;
          }
          // return res.send(p)

          if (result) {
            console.log(mainAssetID, "mainAssetID");
            if (result.outBinds.api_status === "Y") {
              let message = result.outBinds.api_msg;
              response = {
                success: result.outBinds.api_status,
                message: message,
              };
              console.log(response);

              res.send(response);
            } else {
              let message = result.outBinds.api_msg;

              response = {
                success: result.outBinds.api_status,
                message: message,
              };
              console.log(response);
              console.log(mainAssetID, "mainAssetID");
              res.send(response);
            }
          }
        }
      );
    } catch (err) {
      res.send(err);
    }
  }

  fixedAssetCapture();
});

app.post("/api/wip-creation", (req, res) => {
  async function wipCreation() {
    let con;

    try {
      con = await oracledb.getConnection({
        user: DB_USER,
        password: DB_PASSWORD,
        connectString: DB_CONNECTION_STRING,
      });

      const assetCategory = req.body.assetCategory;
      const assetClass = req.body.assetClass;
      const assetID = req.body.assetID;
      const description = req.body.description;
      const depMethod = req.body.depMethod;
      const startDate = req.body.startDate;
      const mainAssetComponent = req.body.mainAssetComponent;
      const acqCost = req.body.acqCost;
      const acqDate = req.body.acqDate;
      const assetType = req.body.assetType;
      const depreciableAmount = req.body.depreciableAmount;
      const usefulLife = req.body.usefulLife;
      const usefulLifeUnit = req.body.usefulLifeUnit;
      const depreciationRate = req.body.depreciationRate;
      const endDate = req.body.endDate;
      const scanDocID = req.body.scanDocID;
      const assetBranch = req.body.assetBranch;
      const custodianID = req.body.custodianID;
      const physicalLocation = req.body.physicalLocation;
      const acctLink = req.body.acctLink;
      const depAccount = req.body.depAccount;
      const depCR = req.body.depCR;
      const disAcct = req.body.disAcct;
      const revSurpAcct = req.body.revSurpAcct;
      const revLossAcct = req.body.revLossAcct;
      const maintenanceAcct = req.body.maintenanceAcct;
      const serialNumber = req.body.serialNumber;
      const shortDescrp = req.body.shortDescrp;
      const barCode = req.body.barCode;
      const purchaseOrderNum = req.body.purchaseOrderNum;
      const voucherNumber = req.body.voucherNumber;
      const vendorNumber = req.body.vendorNumber;
      const department = req.body.department;
      const unit = req.body.unit;

      const currency = req.body.currency;
      const creditAccount = req.body.creditAccount;
      const wipAccount = req.body.wipAccount;
      const warrantyExpiry = req.body.warrantyExpiry;
      const renewWarranty = req.body.renewWarranty;
      const maintenanceVendorID = req.body.maintenanceVendorID;
      const nextServiceDate = req.body.nextServiceDate;
      const underMaintenance = req.body.underMaintenance;
      const insurance = req.body.insurance;
      const postedBy = req.body.postedBy;
      const postedDate = req.body.postedDate;
      const postedIP = ip.address();
      const postingsysdate_app = req.body.postingsysdate_app;
      const postingsystime_app = req.body.postingsystime_app;
      const postingTerminal_app = req.body.postingTerminal_app;
      const postingIP_app = req.body.postingIP_app;
      const amended_by = req.body.amended_by;
      const amended_date = req.body.amended_date;
      const amended_terminal = req.body.amended_terminal;
      const amended_IP = req.body.amended_IP;
      const taxCode = req.body.taxCode;
      const salvageValue = req.body.salvageValue;
      const expContractRef = req.body.expContractRef;
      const insuranceCardNum = req.body.insuranceCardNum;
      const depreciationCalcMode = req.body.depreciationCalcMode;
      const flag = req.body.flag;
      const approvedBy = req.body.approvedBy;
      const approvedDate = req.body.approvedDate;

      con.execute(
        "BEGIN PKG_WIP.PRC_WIP_CREATION(:ASSET_CATEGORY,:ASSET_CLASS,:WIP_ASSET_ID,:DESCRIPTION,:DEP_METHOD,:START_DATE,:MAIN_ASSET_COMPONENT,:ACQ_COST,:ACQ_date,:ASSET_TYPE,:DEPRECIABLE_AMOUNT,:USEFUL_LIFE,:USEFUL_LIFE_UNIT,:DEPRECIATION_RATE,:END_DATE,:SCAN_DOC_ID,:BRANCH_CODE,:CUSTODIAN_ID,:PHYSICAL_LOCATION,:ACCT_LINK,:DEP_ACCOUNT,:DEP_CR,:dis_acct,:rev_surp_acct,:rev_loss_acct,:MAINTENANCE_ACCT,:FLAG_B,:SERIAL_NUMBER,:SHORT_DESCRP,:BAR_code,:PURCHASE_ORDER_number,:VOUCHER_NUM,:VENDOR_NUM,:DEPARTMENT_B,:UNIT_B,:CURRENCY,:CREDIT_ACCOUNT,:WIP_ACCOUNT,:WARRANTY_EXP,:WARRANTY_RENEWAL,:MAINTENANCE_VEN_ID,:NXT_SERVICE_DATE,:UNDER_MAIN,:INSURANCE,:POSTED_BY,:POSTED_DATE,:POSTED_TERMINAL,:POSTING_SYSDATE_APP,:POSTED_IP,:POSTING_SYSTIME_APP,:POSTING_TERMINAL_APP,:POSTING_IP_APP,:AMENDED_BY,:AMENDED_DATE,:AMENDED_TERMINAL,:AMENDED_IP,:APPROVED_BY,:APPROVAL_DATE,:APPROVAL_TERMINAL,:APPROVAL_IP,:TAX_CODE,:SALVAGE_VALUE,:EXP_CONTRACT_REFERENCE,:INSURANCE_CARD_NO,:DEPRECIATION_CALC_MODE,:api_status,:api_msg);END;",
        {
          ASSET_CATEGORY: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: assetCategory,
          },
          ASSET_CLASS: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: assetClass,
          },
          WIP_ASSET_ID: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: assetID,
          },
          DESCRIPTION: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: description,
          },
          DEP_METHOD: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: depMethod,
          },
          START_DATE: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: startDate,
          },
          MAIN_ASSET_COMPONENT: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: mainAssetComponent,
          },
          ACQ_COST: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: acqCost,
          },
          ACQ_date: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: acqDate,
          },
          ASSET_TYPE: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: assetType,
          },
          DEPRECIABLE_AMOUNT: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: depreciableAmount,
          },
          USEFUL_LIFE: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: usefulLife,
          },
          USEFUL_LIFE_UNIT: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: usefulLifeUnit,
          },
          DEPRECIATION_RATE: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: depreciationRate,
          },
          END_DATE: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: endDate,
          },
          SCAN_DOC_ID: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: scanDocID,
          },
          BRANCH_CODE: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: assetBranch,
          },
          CUSTODIAN_ID: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: custodianID,
          },
          PHYSICAL_LOCATION: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: physicalLocation,
          },
          ACCT_LINK: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: acctLink,
          },
          DEP_ACCOUNT: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: depAccount,
          },
          DEP_CR: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: depCR,
          },
          dis_acct: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: disAcct,
          },
          rev_surp_acct: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: revSurpAcct,
          },
          rev_loss_acct: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: revLossAcct,
          },
          MAINTENANCE_ACCT: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: maintenanceAcct,
          },
          FLAG_B: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: flag,
          },
          SERIAL_NUMBER: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: serialNumber,
          },
          SHORT_DESCRP: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: shortDescrp,
          },
          BAR_code: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: barCode,
          },
          PURCHASE_ORDER_number: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: purchaseOrderNum,
          },
          VOUCHER_NUM: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: voucherNumber,
          },
          VENDOR_NUM: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: vendorNumber,
          },
          DEPARTMENT_B: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: department,
          },
          UNIT_B: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: unit,
          },
          CURRENCY: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: currency,
          },
          CREDIT_ACCOUNT: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: creditAccount,
          },
          WIP_ACCOUNT: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: wipAccount,
          },
          WARRANTY_EXP: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: warrantyExpiry,
          },
          WARRANTY_RENEWAL: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: renewWarranty,
          },
          MAINTENANCE_VEN_ID: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: maintenanceVendorID,
          },
          NXT_SERVICE_DATE: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: nextServiceDate,
          },
          UNDER_MAIN: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: underMaintenance,
          },
          INSURANCE: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: insurance,
          },
          POSTED_BY: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: postedBy,
          },
          POSTED_DATE: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: postedDate,
          },
          POSTED_TERMINAL: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: os.hostname(),
          },
          POSTED_IP: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: postedIP,
          },
          POSTING_SYSDATE_APP: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: postingsysdate_app,
          },
          POSTING_SYSTIME_APP: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: postingsystime_app,
          },
          POSTING_TERMINAL_APP: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: postingTerminal_app,
          },
          POSTING_IP_APP: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: postingIP_app,
          },
          AMENDED_BY: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: amended_by,
          },
          AMENDED_DATE: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: amended_date,
          },
          AMENDED_TERMINAL: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: amended_terminal,
          },
          AMENDED_IP: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: amended_IP,
          },
          APPROVED_BY: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: approvedBy,
          },
          APPROVAL_DATE: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: approvedDate,
          },
          APPROVAL_TERMINAL: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: os.hostname(),
          },
          APPROVAL_IP: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: ip.address(),
          },
          TAX_CODE: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: taxCode,
          },
          SALVAGE_VALUE: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: salvageValue,
          },
          EXP_CONTRACT_REFERENCE: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: expContractRef,
          },
          INSURANCE_CARD_NO: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: insuranceCardNum,
          },
          DEPRECIATION_CALC_MODE: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: depreciationCalcMode,
          },
          api_status: {
            type: oracledb.STRING,
            dir: oracledb.BIND_OUT,
          },
          api_msg: {
            type: oracledb.STRING,
            dir: oracledb.BIND_OUT,
          },
        },

        // return res.send("here1");
        function (err, result) {
          if (err) {
            throw err;
          }
          // return res.send(p)

          if (result) {
            console.log(serialNumber, "serialNumber");
            if (result.outBinds.api_status === "Y") {
              let message = result.outBinds.api_msg;
              response = {
                success: result.outBinds.api_status,
                message: message,
              };
              console.log(response);

              res.send(response);
            } else {
              let message = result.outBinds.api_msg;

              response = {
                success: result.outBinds.api_status,
                message: message,
              };
              console.log(response);
              // console.log(mainAssetID, "mainAssetID");
              res.send(response);
            }
          }
        }
      );
    } catch (err) {
      res.send(err);
    }
  }

  wipCreation();
});

app.post("/api/wip-package-entry", (req, res) => {
  async function wipCreation() {
    let con;

    try {
      con = await oracledb.getConnection({
        user: DB_USER,
        password: DB_PASSWORD,
        connectString: DB_CONNECTION_STRING,
      });

      const assetCategory = req.body.assetCategory;
      const assetClass = req.body.assetClass;
      const assetID = req.body.assetID;
      const description = req.body.description;
      const depMethod = req.body.depMethod;
      const startDate = req.body.startDate;
      const mainAssetComponent = req.body.mainAssetComponent;
      const acqCost = req.body.acqCost;
      const acqDate = req.body.acqDate;
      const assetType = req.body.assetType;
      const depreciableAmount = req.body.depreciableAmount;
      const usefulLife = req.body.usefulLife;
      const usefulLifeUnit = req.body.usefulLifeUnit;
      const depreciationRate = req.body.depreciationRate;
      const endDate = req.body.endDate;
      const scanDocID = req.body.scanDocID;
      const assetBranch = req.body.assetBranch;
      const custodianID = req.body.custodianID;
      const physicalLocation = req.body.physicalLocation;
      const acctLink = req.body.acctLink;
      const depAccount = req.body.depAccount;
      const depCR = req.body.depCR;
      const disAcct = req.body.disAcct;
      const revSurpAcct = req.body.revSurpAcct;
      const revLossAcct = req.body.revLossAcct;
      const maintenanceAcct = req.body.maintenanceAcct;
      const serialNumber = req.body.serialNumber;
      const shortDescrp = req.body.shortDescrp;
      const barCode = req.body.barCode;
      const purchaseOrderNum = req.body.purchaseOrderNum;
      const voucherNumber = req.body.voucherNumber;
      const vendorNumber = req.body.vendorNumber;
      const department = req.body.department;
      const unit = req.body.unit;
      const jobCode = req.body.jobCode;
      const workAmount = req.body.workAmount;
      const workEntryDocID = req.body.workEntryDocID;
      const workEntryPoNum = req.body.workEntryPoNum;
      const expContractReference = req.body.expContractReference;
      const workEntryVendorNumber = req.body.workEntryVendorNumber;

      const currency = req.body.currency;
      const creditAccount = req.body.creditAccount;
      const wipAccount = req.body.wipAccount;
      const warrantyExpiry = req.body.warrantyExpiry;
      const renewWarranty = req.body.renewWarranty;
      const maintenanceVendorID = req.body.maintenanceVendorID;
      const nextServiceDate = req.body.nextServiceDate;
      const underMaintenance = req.body.underMaintenance;
      const insurance = req.body.insurance;
      const postedBy = req.body.postedBy;
      const postedDate = req.body.postedDate;
      const postingsysdate_app = req.body.postingsysdate_app;
      const postingsystime_app = req.body.postingsystime_app;
      const postingTerminal_app = req.body.postingTerminal_app;
      const postingIP_app = req.body.postingIP_app;
      const amended_by = req.body.amended_by;
      const amended_date = req.body.amended_date;
      const amended_terminal = req.body.amended_terminal;
      const amended_IP = req.body.amended_IP;
      const taxCode = req.body.taxCode;
      const salvageValue = req.body.salvageValue;
      const expContractRef = req.body.expContractRef;
      const insuranceCardNum = req.body.insuranceCardNum;
      const depreciationCalcMode = req.body.depreciationCalcMode;
      const flag = req.body.flag;
      const approvedBy = req.body.approvedBy;
      const approvedDate = req.body.approvedDate;

      con.execute(
        "BEGIN PKG_WIP.PRC_WORK_PACKAGE_ENTRY(:ASSET_CAT,:ASSET_CLASS,:WIP_ASSET_ID,:JOB_CODE,:WORK_AMOUNT,:DESCRIPTION,:DEP_METHOD,:MAIN_ASSET_COMPONENT,:ASSET_TYPE,:DEPRECIABLE_AMOUNT,:ACQ_COST,:ACQ_date,:USEFUL_LIFE,:USEFUL_LIFE_UNIT,:DEPRECIATION_RATE,:END_DATE,:SCAN_DOC_ID,:WORK_ENTRY_DOC_ID,:BRANCH_CODE,:CUSTODIAN_ID,:PHYSICAL_LOCATION,:ACCT_LINK,:DEP_ACCOUNT,:DEP_CR,:dis_acct,:rev_surp_acct,:rev_loss_acct,:MAINTENANCE_ACCT,:FLAG,:SERIAL_NUMBER,:SHORT_DESCRP,:BAR_code,:PURCHASE_ORDER_number,:WORK_ENTRY_PO_NUMBER,:EXP_CONTRACT_REFERENCE,:VOUCHER_NUM,:VENDOR_NUM,:WORK_ENTRY_VENDOR_NUM,:CURRENCY,:CREDIT_ACCOUNT,:WIP_ACCOUNT,:POSTED_BY,:POSTED_DATE,:POSTED_TERMINAL,:POSTED_IP,:POSTING_SYSDATE_APP,:POSTING_SYSTIME_APP,:POSTING_TERMINAL_APP,:POSTING_IP_APP,:APPROVED_BY,:APPROVAL_DATE,:APPROVAL_TERMINAL,:APPROVAL_IP,:DEPRECIATION_CALC_MODE,:api_status,:api_msg);END;",
        {
          ASSET_CAT: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: assetCategory,
          },
          ASSET_CLASS: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: assetClass,
          },
          WIP_ASSET_ID: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: assetID,
          },
          JOB_CODE: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: jobCode,
          },
          WORK_AMOUNT: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: workAmount,
          },
          DESCRIPTION: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: description,
          },
          DEP_METHOD: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: depMethod,
          },
          MAIN_ASSET_COMPONENT: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: mainAssetComponent,
          },
          ASSET_TYPE: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: assetType,
          },
          DEPRECIABLE_AMOUNT: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: depreciableAmount,
          },
          ACQ_COST: {
            type: oracledb.NUMBER,
            dir: oracledb.BIND_IN,
            val: acqCost,
          },
          ACQ_date: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: acqDate,
          },
          USEFUL_LIFE: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: usefulLife,
          },
          USEFUL_LIFE_UNIT: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: usefulLifeUnit,
          },
          DEPRECIATION_RATE: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: depreciationRate,
          },
          END_DATE: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: endDate,
          },
          SCAN_DOC_ID: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: scanDocID,
          },
          WORK_ENTRY_DOC_ID: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: workEntryDocID,
          },
          BRANCH_CODE: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: assetBranch,
          },
          CUSTODIAN_ID: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: custodianID,
          },
          PHYSICAL_LOCATION: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: physicalLocation,
          },
          ACCT_LINK: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: acctLink,
          },
          DEP_ACCOUNT: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: depAccount,
          },
          DEP_CR: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: depCR,
          },
          dis_acct: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: disAcct,
          },
          rev_surp_acct: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: revSurpAcct,
          },
          rev_loss_acct: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: revLossAcct,
          },
          MAINTENANCE_ACCT: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: maintenanceAcct,
          },
          FLAG: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: flag,
          },
          SERIAL_NUMBER: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: serialNumber,
          },
          SHORT_DESCRP: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: shortDescrp,
          },
          BAR_code: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: barCode,
          },
          PURCHASE_ORDER_number: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: purchaseOrderNum,
          },
          WORK_ENTRY_PO_NUMBER: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: workEntryPoNum,
          },
          EXP_CONTRACT_REFERENCE: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: expContractReference,
          },
          VOUCHER_NUM: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: voucherNumber,
          },
          VENDOR_NUM: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: vendorNumber,
          },
          WORK_ENTRY_VENDOR_NUM: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: workEntryVendorNumber,
          },
          CURRENCY: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: currency,
          },
          CREDIT_ACCOUNT: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: creditAccount,
          },
          WIP_ACCOUNT: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: wipAccount,
          },
          POSTED_BY: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: postedBy,
          },
          POSTED_DATE: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: postedDate,
          },
          POSTED_TERMINAL: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: os.hostname(),
          },
          POSTED_IP: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: ip.address(),
          },
          POSTING_SYSDATE_APP: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: postingsysdate_app,
          },
          POSTING_SYSTIME_APP: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: postingsystime_app,
          },
          POSTING_TERMINAL_APP: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: postingTerminal_app,
          },
          POSTING_IP_APP: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: postingIP_app,
          },
          APPROVED_BY: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: approvedBy,
          },
          APPROVAL_DATE: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: approvedDate,
          },
          APPROVAL_TERMINAL: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: os.hostname(),
          },
          APPROVAL_IP: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: ip.address(),
          },
          DEPRECIATION_CALC_MODE: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: depreciationCalcMode,
          },
          api_status: {
            type: oracledb.STRING,
            dir: oracledb.BIND_OUT,
          },
          api_msg: {
            type: oracledb.STRING,
            dir: oracledb.BIND_OUT,
          },
        },

        // return res.send("here1");
        function (err, result) {
          if (err) {
            throw err;
          }
          // return res.send(p)

          if (result) {
            console.log(serialNumber, "serialNumber");
            if (result.outBinds.api_status === "Y") {
              let message = result.outBinds.api_msg;
              response = {
                success: result.outBinds.api_status,
                message: message,
              };
              console.log(response);

              res.send(response);
            } else {
              let message = result.outBinds.api_msg;

              response = {
                success: result.outBinds.api_status,
                message: message,
              };
              console.log(response);
              // console.log(mainAssetID, "mainAssetID");
              res.send(response);
            }
          }
        }
      );
    } catch (err) {
      res.send(err);
    }
  }

  wipCreation();
});

app.post("/api/get-wip-approval-data", (req, res) => {
  const assetCategory = req.body.assetCategory;
  const assetID = req.body.assetID;
  const assetDescription = req.body.assetDescription;
  const serialNumber = req.body.serialNumber;
  const physicalLocation = req.body.physicalLocation;

  async function getWipApprovalData() {
    let con;

    try {
      con = await oracledb.getConnection({
        user: DB_USER,
        password: DB_PASSWORD,
        connectString: DB_CONNECTION_STRING,
      });

      const data = await con.execute(
        `SELECT ASSET_ID,ASSET_CAT,SERIAL_NO,DESCRIPTION,ACQ_COST,to_char(ACQ_DATE,'DD-MON-YYYY') as acquisition_date,P_LOCATION,POSTED_BY
        FROM ASSET_MASTER
        WHERE flag='N' 
        AND WORK_IN_PROG='N'
        AND ASSET_CAT LIKE '%'||:assetCategory||'%'
        AND ASSET_ID LIKE '%'||:assetID||'%' 
        AND DESCRIPTION LIKE '%'||:assetDescription||'%'
        AND SERIAL_NO LIKE '%'||:serialNumber||'%' 
        AND P_LOCATION LIKE '%'||:physicalLocation||'%'  
        AND ROWNUM <= 100 
        ORDER BY ASSET_ID`,
        {
          assetCategory,
          assetID,
          assetDescription,
          serialNumber,
          physicalLocation,
          // barCode,
        }
      );

      if (data) {
        console.log("reggie");

        var arr0 = "";
        var arr = [];

        for (let i = 0; i < data.rows.length; i++) {
          for (let x = 0; x < data.metaData.length; x++) {
            arr0 +=
              '"' +
              [data.metaData[x].name.toLowerCase()] +
              '" : "' +
              data.rows[i][x] +
              '",';
          }

          arr.push(JSON.parse("{" + arr0.replace(/,\s*$/, "") + "}"));
        }

        res.send(arr);
      } else {
        res.send("Something went wrong... Nothing was returned!!");
      }
    } catch (err) {
      res.send(err);

      throw err;
    }
  }

  getWipApprovalData();
});


app.get("/api/get-wip-entry-data", (req, res) => {
  async function getWipEntryData() {
    let con;

    try {
      con = await oracledb.getConnection({
        user: DB_USER,
        password: DB_PASSWORD,
        connectString: DB_CONNECTION_STRING,
      });

      const data = await con.execute(
        `SELECT ASSET_ID,ASSET_CAT,SERIAL_NO,DESCRIPTION,NVL(to_char(wip_start_date,'DD-MON-YYYY'),' ') AS wip_start_date,NVL(to_char(est_wip_end_date,'DD-MON-YYYY'),' ') as est_wip_end_date,p_location,posted_by FROM ASSET_MASTER A
         WHERE A.work_in_prog='Y' AND A.ASSET_ID NOT IN(SELECT distinct ASSET_ID FROM TB_WORKIN_PROGRESS B 
         WHERE B.END_FLAG='N')`
      );

      if (data) {
        console.log("reggie");

        var arr0 = "";
        var arr = [];

        for (let i = 0; i < data.rows.length; i++) {
          for (let x = 0; x < data.metaData.length; x++) {
            arr0 +=
              '"' +
              [data.metaData[x].name.toLowerCase()] +
              '" : "' +
              data.rows[i][x] +
              '",';
          }

          arr.push(JSON.parse("{" + arr0.replace(/,\s*$/, "") + "}"));
        }

        res.send(arr);
      } else {
        res.send("Something went wrong... Nothing was returned!!");
      }
    } catch (err) {
      // res.send(err);

      throw err;
    }
  }

  getWipEntryData();
}); 

app.post("/api/wip-validation", (req, res) => {

  const assetID= req.body.assetID;

  async function getWipValidation() {
    let con;

    try {
      con = await oracledb.getConnection({
        user: DB_USER,
        password: DB_PASSWORD,
        connectString: DB_CONNECTION_STRING,
      });

      const data = await con.execute(
        `SELECT WORK_ENTRY_ID
	       FROM TB_WORKIN_PROGRESS_TEMP where ASSET_ID = '${assetID}' and APP_FLAG='N'`
      );

      if (data) {
        var arr0 = "";
        var arr = [];

        for (let i = 0; i < data.rows.length; i++) {
          for (let x = 0; x < data.metaData.length; x++) {
            arr0 +=
              '"' +
              [data.metaData[x].name.toLowerCase()] +
              '" : "' +
              data.rows[i][x] +
              '",';
          }

          arr.push(JSON.parse("{" + arr0.replace(/,\s*$/, "") + "}"));
        }

        res.send(arr);
      } else {
        res.send("Something went wrong... Nothing was returned!!");
      }
    } catch (err) {
      // res.send(err);

      throw err;
    }
  }

  getWipValidation();
}); 

app.post("/api/wip-capitalization", (req, res) => {
  async function wipCapitalization() {
    let con;

    try {
      con = await oracledb.getConnection({
        user: DB_USER,
        password: DB_PASSWORD,
        connectString: DB_CONNECTION_STRING,
      });

      const assetCategory = req.body.assetCategory;
      const assetClass = req.body.assetClass;
      const assetID = req.body.assetID;
      const acquisitionCost = req.body.acquisitionCost;
      const description = req.body.description;
      const depStartDate = req.body.depStartDate;
      const salvageValue = req.body.salvageValue;
      const depMethod = req.body.depMethod;
      const mainAssetComponent = req.body.mainAssetComponent;
      const assetType = req.body.assetType;
      const usefulLife = req.body.usefulLife;
      const usefulLifeUnit = req.body.usefulLifeUnit;
      const depAmount = req.body.depAmount;
      const perYearDep = req.body.perYearDep;
      const perMonthDep = req.body.perMonthDep;
      const totalDep = req.body.totalDep;
      const totalAmount = req.body.totalAmount;
      const assetBranch = req.body.assetBranch;
      const custodianID = req.body.custodianID;
      const physicalLocation = req.body.physicalLocation;
      const acctLink = req.body.acctLink;
      const depAccount = req.body.depAccount;
      const depCR = req.body.depCR;
      const disAcct = req.body.disAcct;
      const revSurpAcct = req.body.revSurpAcct;
      const revLossAcct = req.body.revLossAcct;
      const workInProgAcct = req.body.workInProgAcct;
      const documentID = req.body.documentID;
      const flag = req.body.flag;
      const postedBy = req.body.postedBy;
      const postedDate = req.body.postedDate;
      const postedTerminal = os.hostname();
      const postedIP = ip.address();
      const postingSysdateApp = req.body.postingSysdateApp;
      const postingSystimeApp = req.body.postingSystimeApp;
      const postingTerminalApp = req.body.postingTerminalApp;
      const postingIpApp = req.body.postingIpApp;
      const approvedBy = req.body.approvedBy;
      const approvedDate = req.body.approvedDate;
      const approvedTerminal = os.hostname();
      const approvedIP = ip.address();

      con.execute(
        "BEGIN PKG_WIP.PRC_WIP_CAPITALIZATION(:ASSET_CAT,:ASSET_CLASS,:ASSET_ID_D,:DESCRIPTION,:DEP_METHOD,:MAIN_ASSET_COMPONENT,:ASSET_TYPE,:USEFUL_LIFE,:USEFUL_LIFE_UNIT,:DEP_AMOUNT,:PER_YEAR_DEP,:PER_MONTH_DEP,:TOTAL_DEP,:TOTAL_AMOUNT,:ACQUISITION_COST,:SALVAGE_VALUE,:DEPRECIATION_S_DATE,:BRANCH_CODE,:CUSTODIAN_ID,:PHYSICAL_LOCATION,:ACCT_LINK,:DEP_ACCOUNT,:DEP_CR,:dis_acct,:rev_surp_acct,:rev_loss_acct,:WORK_IN_PROG,:FLAG,:DOC_ID,:POSTED_BY,:POSTED_DATE,:POSTED_TERMINAL,:POSTED_IP,:POSTING_SYSDATE_APP,:POSTING_SYSTIME_APP,:POSTING_TERMINAL_APP,:POSTING_IP_APP,:APPROVED_BY_B,:APPROVAL_DATE_B,:APPROVAL_TERMINAL_B,:APPROVAL_IP_B,:api_status,:api_msg);END;",
        {
          ASSET_CAT: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: assetCategory,
          },
          ASSET_CLASS: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: assetClass,
          },
          ASSET_ID_D: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: assetID,
          },
          DESCRIPTION: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: description,
          },
          DEP_METHOD: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: depMethod,
          },
          MAIN_ASSET_COMPONENT: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: mainAssetComponent,
          },
          ASSET_TYPE: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: assetType,
          },
          USEFUL_LIFE: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: usefulLife,
          },
          USEFUL_LIFE_UNIT: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: usefulLifeUnit,
          },
          DEP_AMOUNT: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: depAmount,
          },
          PER_YEAR_DEP: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: perYearDep,
          },
          PER_MONTH_DEP: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: perMonthDep,
          },
          TOTAL_DEP: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: totalDep,
          },
          TOTAL_AMOUNT: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: totalAmount,
          },
          ACQUISITION_COST: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: acquisitionCost,
          },
          SALVAGE_VALUE: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: salvageValue,
          },
          DEPRECIATION_S_DATE: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: depStartDate,
          },
          BRANCH_CODE: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: assetBranch,
          },
          CUSTODIAN_ID: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: custodianID,
          },
          PHYSICAL_LOCATION: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: physicalLocation,
          },
          ACCT_LINK: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: acctLink,
          },
          DEP_ACCOUNT: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: depAccount,
          },
          DEP_CR: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: depCR,
          },
          dis_acct: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: disAcct,
          },
          rev_surp_acct: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: revSurpAcct,
          },
          rev_loss_acct: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: revLossAcct,
          },
          WORK_IN_PROG: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: workInProgAcct,
          },
          FLAG: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: flag,
          },
          DOC_ID: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: documentID,
          },
          POSTED_BY: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: postedBy,
          },
          POSTED_DATE: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: postedDate,
          },
          POSTED_TERMINAL: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: postedTerminal,
          },
          POSTED_IP: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: postedIP,
          },
          POSTING_SYSDATE_APP: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: postingSysdateApp,
          },
          POSTING_SYSTIME_APP: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: postingSystimeApp,
          },
          POSTING_TERMINAL_APP: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: postingTerminalApp,
          },
          POSTING_IP_APP: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: postingIpApp,
          },
          APPROVED_BY_B: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: approvedBy,
          },
          APPROVAL_DATE_B: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: approvedDate,
          },
          APPROVAL_TERMINAL_B: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: approvedTerminal,
          },
          APPROVAL_IP_B: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: approvedIP,
          },
          api_status: {
            type: oracledb.STRING,
            dir: oracledb.BIND_OUT,
          },
          api_msg: {
            type: oracledb.STRING,
            dir: oracledb.BIND_OUT,
          },
        },

        // return res.send("here1");
        function (err, result) {
          if (err) {
            throw err;
          }
          // return res.send(p)

          if (result) {
            // console.log(serialNumber, "serialNumber");
            if (result.outBinds.api_status === "Y") {
              let message = result.outBinds.api_msg;
              response = {
                success: result.outBinds.api_status,
                message: message,
              };
              console.log(response);

              res.send(response);
            } else {
              let message = result.outBinds.api_msg;

              response = {
                success: result.outBinds.api_status,
                message: message,
              };
              console.log(response);
              // console.log(mainAssetID, "mainAssetID");
              res.send(response);
            }
          }
        }
      );
    } catch (err) {
      res.send(err);
    }
  }

  wipCapitalization();
});

// app.post("/api/wip-capitalization", (req, res) => {
//   async function wipCapitalization() {
//     let con;

//     try {
//       con = await oracledb.getConnection({
//         user: DB_USER,
//         password: DB_PASSWORD,
//         connectString: DB_CONNECTION_STRING,
//       });

//       const assetCategory = req.body.assetCategory;
//       const assetClass = req.body.assetClass;
//       const assetID = req.body.assetID;
//       const acquisitionCost = req.body.acquisitionCost;
//       const description = req.body.description;
//       const depMethod = req.body.depMethod;
//       const mainAssetComponent = req.body.mainAssetComponent;
//       const assetType = req.body.assetType;
//       const usefulLife = req.body.usefulLife;
//       const usefulLifeUnit = req.body.usefulLifeUnit;
//       const totalAmount = req.body.totalAmount;
//       const assetBranch = req.body.assetBranch;
//       const custodianID = req.body.custodianID;
//       const physicalLocation = req.body.physicalLocation;
//       const acctLink = req.body.acctLink;
//       const depAccount = req.body.depAccount;
//       const depCR = req.body.depCR;
//       const disAcct = req.body.disAcct;
//       const revSurpAcct = req.body.revSurpAcct;
//       const revLossAcct = req.body.revLossAcct;
//       const workInProgAcct = req.body.workInProgAcct;
//       const documentID = req.body.documentID;
//       const flag = req.body.flag;
//       const postedBy = req.body.postedBy;
//       const postedDate = req.body.postedDate;
//       const postedTerminal = req.body.postedTerminal;
//       const postedIP = req.body.postedIP;
//       const postingSysdateApp = req.body.postingSysdateApp;
//       const postingSystimeApp = req.body.postingSystimeApp;
//       const postingTerminalApp = req.body.postingTerminalApp;
//       const postingIpApp = req.body.postingIpApp;
//       const approvedBy = req.body.approvedBy;
//       const approvedDate = req.body.approvedDate;
//       const approvedTerminal = req.body.approvedTerminal;
//       const approvedIP = req.body.approvedIP;

//       con.execute(
//         "BEGIN PKG_WIP.PRC_WIP_CAPITALIZATION(:ASSET_CAT,:ASSET_CLASS,:ASSET_ID_D,:DESCRIPTION,:DEP_METHOD,:MAIN_ASSET_COMPONENT,:ASSET_TYPE,:USEFUL_LIFE,:USEFUL_LIFE_UNIT,:TOTAL_AMOUNT,:ACQUISITION_COST,:BRANCH_CODE,:CUSTODIAN_ID,:PHYSICAL_LOCATION,:ACCT_LINK,:DEP_ACCOUNT,:DEP_CR,:dis_acct,:rev_surp_acct,:rev_loss_acct,:WORK_IN_PROG,:FLAG,:DOCUMENT_ID,:POSTED_BY,:POSTED_DATE,:POSTED_TERMINAL,:POSTED_IP,:POSTING_SYSDATE_APP,:POSTING_SYSTIME_APP,:POSTING_TERMINAL_APP,:POSTING_IP_APP,:APPROVED_BY,:APPROVAL_DATE,:APPROVAL_TERMINAL,:APPROVAL_IP,:api_status,:api_msg);END;",
//         {
//           ASSET_CAT: {
//             type: oracledb.STRING,
//             dir: oracledb.BIND_IN,
//             val: assetCategory,
//           },
//           ASSET_CLASS: {
//             type: oracledb.STRING,
//             dir: oracledb.BIND_IN,
//             val: assetClass,
//           },
//           ASSET_ID_D: {
//             type: oracledb.STRING,
//             dir: oracledb.BIND_IN,
//             val: assetID,
//           },
//           DESCRIPTION: {
//             type: oracledb.STRING,
//             dir: oracledb.BIND_IN,
//             val: description,
//           },
//           DEP_METHOD: {
//             type: oracledb.STRING,
//             dir: oracledb.BIND_IN,
//             val: depMethod,
//           },
//           MAIN_ASSET_COMPONENT: {
//             type: oracledb.STRING,
//             dir: oracledb.BIND_IN,
//             val: mainAssetComponent,
//           },
//           ASSET_TYPE: {
//             type: oracledb.STRING,
//             dir: oracledb.BIND_IN,
//             val: assetType,
//           },
//           USEFUL_LIFE: {
//             type: oracledb.STRING,
//             dir: oracledb.BIND_IN,
//             val: usefulLife,
//           },
//           USEFUL_LIFE_UNIT: {
//             type: oracledb.STRING,
//             dir: oracledb.BIND_IN,
//             val: usefulLifeUnit,
//           },
//           TOTAL_AMOUNT: {
//             type: oracledb.STRING,
//             dir: oracledb.BIND_IN,
//             val: totalAmount,
//           },
//           ACQUISITION_COST: {
//             type: oracledb.STRING,
//             dir: oracledb.BIND_IN,
//             val: acquisitionCost,
//           },
//           BRANCH_CODE: {
//             type: oracledb.STRING,
//             dir: oracledb.BIND_IN,
//             val: assetBranch,
//           },
//           CUSTODIAN_ID: {
//             type: oracledb.STRING,
//             dir: oracledb.BIND_IN,
//             val: custodianID,
//           },
//           PHYSICAL_LOCATION: {
//             type: oracledb.STRING,
//             dir: oracledb.BIND_IN,
//             val: physicalLocation,
//           },
//           ACCT_LINK: {
//             type: oracledb.STRING,
//             dir: oracledb.BIND_IN,
//             val: acctLink,
//           },
//           DEP_ACCOUNT: {
//             type: oracledb.STRING,
//             dir: oracledb.BIND_IN,
//             val: depAccount,
//           },
//           DEP_CR: {
//             type: oracledb.STRING,
//             dir: oracledb.BIND_IN,
//             val: depCR,
//           },
//           dis_acct: {
//             type: oracledb.STRING,
//             dir: oracledb.BIND_IN,
//             val: disAcct,
//           },
//           rev_surp_acct: {
//             type: oracledb.STRING,
//             dir: oracledb.BIND_IN,
//             val: revSurpAcct,
//           },
//           rev_loss_acct: {
//             type: oracledb.STRING,
//             dir: oracledb.BIND_IN,
//             val: revLossAcct,
//           },
//           WORK_IN_PROG: {
//             type: oracledb.STRING,
//             dir: oracledb.BIND_IN,
//             val: workInProgAcct,
//           },
//           FLAG: {
//             type: oracledb.STRING,
//             dir: oracledb.BIND_IN,
//             val: flag,
//           },
//           DOCUMENT_ID: {
//             type: oracledb.STRING,
//             dir: oracledb.BIND_IN,
//             val: documentID,
//           },
//           POSTED_BY: {
//             type: oracledb.STRING,
//             dir: oracledb.BIND_IN,
//             val: postedBy,
//           },
//           POSTED_DATE: {
//             type: oracledb.STRING,
//             dir: oracledb.BIND_IN,
//             val: postedDate,
//           },
//           POSTED_TERMINAL: {
//             type: oracledb.STRING,
//             dir: oracledb.BIND_IN,
//             val: postedTerminal,
//           },
//           POSTED_IP: {
//             type: oracledb.STRING,
//             dir: oracledb.BIND_IN,
//             val: postedIP,
//           },
//           POSTING_SYSDATE_APP: {
//             type: oracledb.STRING,
//             dir: oracledb.BIND_IN,
//             val: postingSysdateApp,
//           },
//           POSTING_SYSTIME_APP: {
//             type: oracledb.STRING,
//             dir: oracledb.BIND_IN,
//             val: postingSystimeApp,
//           },
//           POSTING_TERMINAL_APP: {
//             type: oracledb.STRING,
//             dir: oracledb.BIND_IN,
//             val: postingTerminalApp,
//           },
//           POSTING_IP_APP: {
//             type: oracledb.STRING,
//             dir: oracledb.BIND_IN,
//             val: postingIpApp,
//           },
//           APPROVED_BY: {
//             type: oracledb.STRING,
//             dir: oracledb.BIND_IN,
//             val: approvedBy,
//           },
//           APPROVAL_DATE: {
//             type: oracledb.STRING,
//             dir: oracledb.BIND_IN,
//             val: approvedDate,
//           },
//           APPROVAL_TERMINAL: {
//             type: oracledb.STRING,
//             dir: oracledb.BIND_IN,
//             val: approvedTerminal,
//           },
//           APPROVAL_IP: {
//             type: oracledb.STRING,
//             dir: oracledb.BIND_IN,
//             val: approvedIP,
//           },
//           api_status: {
//             type: oracledb.STRING,
//             dir: oracledb.BIND_OUT,
//           },
//           api_msg: {
//             type: oracledb.STRING,
//             dir: oracledb.BIND_OUT,
//           },
//         },

//         // return res.send("here1");
//         function (err, result) {
//           if (err) {
//             throw err;
//           }
//           // return res.send(p)

//           if (result) {
//             // console.log(serialNumber, "serialNumber");
//             if (result.outBinds.api_status === "Y") {
//               let message = result.outBinds.api_msg;
//               response = {
//                 success: result.outBinds.api_status,
//                 message: message,
//               };
//               console.log(response);

//               res.send(response);
//             } else {
//               let message = result.outBinds.api_msg;

//               response = {
//                 success: result.outBinds.api_status,
//                 message: message,
//               };
//               console.log(response);
//               // console.log(mainAssetID, "mainAssetID");
//               res.send(response);
//             }
//           }
//         }
//       );
//     } catch (err) {
//       res.send(err);
//     }
//   }

//   wipCapitalizationApproval();
// });

app.get("/api/get-asset-capitalization-data", (req, res) => {
  async function getAssetCapitalizationData() {
    let con;

    try {
      con = await oracledb.getConnection({
        user: DB_USER,
        password: DB_PASSWORD,
        connectString: DB_CONNECTION_STRING,
      });

      const data = await con.execute(
        `SELECT ASSET_ID,ASSET_CAT,SERIAL_NO,DESCRIPTION,nvl(to_char(wip_start_date,'DD-MON-YYYY'),' ') AS wip_start_date,nvl(to_char(est_wip_end_date,'DD-MON-YYYY'),' ') as est_wip_end_date,p_location,posted_by FROM ASSET_MASTER A
         WHERE A.FLAG = 'Y' AND A.work_in_prog = 'Y' AND EXISTS (SELECT 1 FROM TB_WORKIN_PROGRESS C WHERE C.ASSET_ID=A.ASSET_ID AND C.APP_FLAG='Y' AND C.END_FLAG IS NULL)`
      );

      if (data) {
        console.log("reggie");

        var arr0 = "";
        var arr = [];

        for (let i = 0; i < data.rows.length; i++) {
          for (let x = 0; x < data.metaData.length; x++) {
            arr0 +=
              '"' +
              [data.metaData[x].name.toLowerCase()] +
              '" : "' +
              data.rows[i][x] +
              '",';
          }

          arr.push(JSON.parse("{" + arr0.replace(/,\s*$/, "") + "}"));
        }

        res.send(arr);
      } else {
        res.send("Something went wrong... Nothing was returned!!");
      }
    } catch (err) {
      // res.send(err);

      throw err;
    }
  }

  getAssetCapitalizationData();
});

app.post("/api/get-capitalization-pending-app", (req, res) => {
  const assetID = req.body.assetID;
  const assetCategory = req.body.assetCategory;
  const description = req.body.description;
  const serialNumber = req.body.serialNumber;
  const physicalLocation = req.body.physicalLocation;

  async function getCapitalizationPendingApp() {
    let con;

    try {
      con = await oracledb.getConnection({
        user: DB_USER,
        password: DB_PASSWORD,
        connectString: DB_CONNECTION_STRING,
      });

      const data = await con.execute(
        `SELECT ASSET_ID,ASSET_CAT,SERIAL_NO,DESCRIPTION,to_char(wip_start_date,'DD-MON-YYYY') AS wip_start_date,to_char(est_wip_end_date,'DD-MON-YYYY') as est_wip_end_date,p_location,posted_by FROM ASSET_MASTER A
         WHERE A.flag='Y'  and A.asset_id like '%'||'${assetID}'||'%' and A.WORK_IN_PROG='Y'
        and exists (select b.asset_id from TB_WORKIN_PROGRESS_END b where app_flag='N' and b.asset_id = a.asset_id)
        and asset_cat like '%'||'${assetCategory}'||'%' and description like '%'||'${description}'||'%' and p_Location like '%'||'${physicalLocation}'||'%'
        and serial_no like '%'||'${serialNumber}'||'%'`
      );

      if (data.rows) {
        const response = [];
        for (let i = 0; i < data.rows.length; i++) {
          const rowData = {}; // Create an object for each row

          for (let x = 0; x < data.metaData.length; x++) {
            const columnName = data.metaData[x].name.toLowerCase();
            const columnValue = data.rows[i][x];
            rowData[columnName] = columnValue; // Assign each column to the object
          }

          response.push(rowData); // Push the object to the response array
        }
        return res.status(200).send(response);
      } else {
        return res
          .status(500)
          .send("Something went wrong... Nothing was returned!!");
      }
    } catch (err) {
      // res.send(err);

      throw err;
    }
  }

  getCapitalizationPendingApp();
});

app.post("/api/get-wip-entry-approval-data", (req, res) => {
  const assetID = req.body.assetID;
  const assetCategory = req.body.assetCategory;
  const description = req.body.description;
  const location = req.body.location;
  const serialNumber = req.body.serialNumber;

  async function getWipEntryApprovalData() {
    let con;

    try {
      con = await oracledb.getConnection({
        user: DB_USER,
        password: DB_PASSWORD,
        connectString: DB_CONNECTION_STRING,
      });

      const data = await con.execute(
        `SELECT ASSET_ID,ASSET_CAT,SERIAL_NO,DESCRIPTION,nvl(to_char(wip_start_date,'DD-MON-YYYY'),' ') AS wip_start_date,nvl(to_char(est_wip_end_date,'DD-MON-YYYY'),' ') as est_wip_end_date,p_location,posted_by FROM ASSET_MASTER A
          WHERE flag='Y' and DISP_APP_FLAG is NULL AND RETIRED IS NULL and work_in_prog='Y' 
          and asset_id like '%'||:assetID ||'%'
          and asset_cat like '%'||:assetCategory||'%' 
          and description like '%'||:description||'%' 
          and p_Location like '%'||:location||'%'
          and serial_no like '%'||:serialNumber||'%' 
          AND EXISTS (SELECT 1 FROM TB_WORKIN_PROGRESS_TEMP B WHERE B.ASSET_ID=A.ASSET_ID AND B.APP_FLAG='N')`,
        { assetID, assetCategory, description, location, serialNumber }
      );

      if (data) {
        console.log("reggie");

        var arr0 = "";
        var arr = [];

        for (let i = 0; i < data.rows.length; i++) {
          for (let x = 0; x < data.metaData.length; x++) {
            arr0 +=
              '"' +
              [data.metaData[x].name.toLowerCase()] +
              '" : "' +
              data.rows[i][x] +
              '",';
          }

          arr.push(JSON.parse("{" + arr0.replace(/,\s*$/, "") + "}"));
        }

        res.send(arr);
      } else {
        res.send("Something went wrong... Nothing was returned!!");
      }
    } catch (err) {
      // res.send(err);

      throw err;
    }
  }

  getWipEntryApprovalData();
});

app.post("/api/get-work-entry-listings", (req, res) => {
  const assetID = req.body.assetID;

  async function getWorkEntriesListings() {
    let con;

    try {
      con = await oracledb.getConnection({
        user: DB_USER,
        password: DB_PASSWORD,
        connectString: DB_CONNECTION_STRING,
      });

      const data = await con.execute(
        `SELECT work_entry_id,nvl(job_code,' ') as job_code,document_id,nvl(exp_contract_reference,' ') as exp_contract_reference,nvl(vendor_id,' ') as vendor_id,acq_amount,nvl(po_number,' ') as po_number,nvl(voucher_no,' ') as voucher_no
         FROM TB_WORKIN_PROGRESS
         WHERE ASSET_ID = '${assetID}'
         AND APP_FLAG = 'Y'
        `
      );

      if (data) {
        console.log("reggie");

        var arr0 = "";
        var arr = [];

        for (let i = 0; i < data.rows.length; i++) {
          for (let x = 0; x < data.metaData.length; x++) {
            arr0 +=
              '"' +
              [data.metaData[x].name.toLowerCase()] +
              '" : "' +
              data.rows[i][x] +
              '",';
          }

          arr.push(JSON.parse("{" + arr0.replace(/,\s*$/, "") + "}"));
        }

        res.send(arr);
      } else {
        res.send("Something went wrong... Nothing was returned!!");
      }
    } catch (err) {
      // res.send(err);

      throw err;
    }
  }

  getWorkEntriesListings();
});

app.post("/api/get-wip-package-entry-details", (req, res) => {
  const assetID = req.body.assetID;

  async function getWipPackageEntryDetails() {
    let con;

    try {
      con = await oracledb.getConnection({
        user: DB_USER,
        password: DB_PASSWORD,
        connectString: DB_CONNECTION_STRING,
      });

      const data = await con.execute(
        `SELECT acq_amount,to_char(posting_date,'YYYY-MM-DD') as posting_date,document_id,work_entry_id,nvl(voucher_no,' ') as voucher_no,nvl(po_number,' ') as po_number,nvl(exp_contract_reference,' ') as exp_contract_reference,JOB_CODE,VENDOR_ID FROM TB_WORKIN_PROGRESS_TEMP
         WHERE ASSET_ID = '${assetID}' AND APP_FLAG ='N'`
      );

      if (data) {
        console.log("reggie");

        var arr0 = "";
        var arr = [];

        for (let i = 0; i < data.rows.length; i++) {
          for (let x = 0; x < data.metaData.length; x++) {
            arr0 +=
              '"' +
              [data.metaData[x].name.toLowerCase()] +
              '" : "' +
              data.rows[i][x] +
              '",';
          }

          arr.push(JSON.parse("{" + arr0.replace(/,\s*$/, "") + "}"));
        }

        res.send(arr);
      } else {
        res.send("Something went wrong... Nothing was returned!!");
      }
    } catch (err) {
      // res.send(err);

      throw err;
    }
  }

  getWipPackageEntryDetails();
});

app.get("/api/get-product-group", (req, res) => {
  async function getProductGroup() {
    let con;

    try {
      con = await oracledb.getConnection({
        user: DB_USER,
        password: DB_PASSWORD,
        connectString: DB_CONNECTION_STRING,
        timeout: DB_CONNECTION_TIMEOUT,
      });

      const data = await con.execute(
        `SELECT DISTINCT ACTUAL_CODE, DESCRIPTION
        FROM CODE_DESC  where code_type='ACT' and Actual_code in ('1','2') ORDER BY ACTUAL_CODE`
      );

      // res.send("get started")

      if (data.rows) {
        const arr = [];

        for (let i = 0; i < data.rows.length; i++) {
          const label = data.rows[i][1];
          const value = data.rows[i][0];

          arr.push({
            label: `${value} - ${label}`,
            value: `${value}  `,
          });
        }

        res.send(arr);
      } else {
        res.send(err);
        console.log(err);
      }
    } catch (err) {
      res.send(err);
    }
  }

  getProductGroup();
});

//frequency lov API
app.get("/api/get-frequency", (req, res) => {
  async function getFrequencyDetails() {
    let con;

    try {
      con = await oracledb.getConnection({
        user: DB_USER,
        password: DB_PASSWORD,
        connectString: DB_CONNECTION_STRING,
      });

      const response = [];
      const headLevel = [];
      const arr = [];
      let arr0 = "";

      // node native promisify
      // const execute = util.promisify(db.execute).bind(db);

      const data = await con.execute(`
      select TERMS_ID, TERMS_DESCRP from PAYMENT_TERMS_INSTALL ORDER BY TERMS_ID
      `);

      if (data.rows) {
        for (let i = 0; i < data.rows.length; i++) {
          const description = data.rows[i][1];
          const actual_code = data.rows[i][0];
          const short_descrp = data.rows[i][2];

          response.push({
            label: actual_code + " - " + description,
            value: actual_code,
            // short_descrp: short_descrp,
          });
        }

        res.send(response);
      } else {
        res.send(err);
        console.log("error");
      }
    } catch (err) {
      res.send(err);

      throw err;
    }
  }

  getFrequencyDetails();
});

app.get("/api/get-fixed-asset-class-maintenance-data", (req, res) => {
  let getFixedAssetClassMaintenanceData = async () => {
    try {
      const db = await oracledb.getConnection({
        user: DB_USER,
        password: DB_PASSWORD,
        connectString: DB_CONNECTION_STRING,
        timeout: DB_CONNECTION_TIMEOUT,
      });
      const execute = util.promisify(db.execute).bind(db);

      // return res.send("ghamna");
      // res.send(con);
      const data = await execute(
        `SELECT CODE_TYPE,ACTUAL_CODE,DESCRIPTION,STATUS
         FROM code_desc 
         WHERE CODE_TYPE = 'AST'
        `
      );
      if (data) {
        // res.send(response);

        var arr0 = "";
        var arr = [];

        for (let i = 0; i < data.rows.length; i++) {
          for (let x = 0; x < data.metaData.length; x++) {
            arr0 +=
              '"' +
              [data.metaData[x].name.toLowerCase()] +
              '" : "' +
              data.rows[i][x] +
              '",';
          }

          arr.push(JSON.parse("{" + arr0.replace(/,\s*$/, "") + "}"));
        }

        return res.send(arr);
      } else {
        res.send("Something went wrong... Nothing was returned!!");
      }
    } catch (err) {
      console.log(err);
      res.send(err);
    }
  };
  getFixedAssetClassMaintenanceData();
});

app.get("/api/get-fixed-asset-physical-locations", (req, res) => {
  let getFixedAssetPhysicalLocations = async () => {
    try {
      const db = await oracledb.getConnection({
        user: DB_USER,
        password: DB_PASSWORD,
        connectString: DB_CONNECTION_STRING,
        timeout: DB_CONNECTION_TIMEOUT,
      });
      const execute = util.promisify(db.execute).bind(db);

      // return res.send("ghamna");
      // res.send(con);
      const data = await execute(
        `SELECT LOCATION_CODE,LOCATION_DESCRIPTION,LOCATION_STATUS
         FROM tb_fa_location 
        `
      );
      if (data) {
        // res.send(response);

        var arr0 = "";
        var arr = [];

        for (let i = 0; i < data.rows.length; i++) {
          for (let x = 0; x < data.metaData.length; x++) {
            arr0 +=
              '"' +
              [data.metaData[x].name.toLowerCase()] +
              '" : "' +
              data.rows[i][x] +
              '",';
          }

          arr.push(JSON.parse("{" + arr0.replace(/,\s*$/, "") + "}"));
        }

        return res.send(arr);
      } else {
        res.send("Something went wrong... Nothing was returned!!");
      }
    } catch (err) {
      console.log(err);
      res.send(err);
    }
  };
  getFixedAssetPhysicalLocations();
});

app.get("/api/get-vouchers-enquiry-posted-by", (req, res) => {
  async function getFrequencyDetails() {
    let con;

    try {
      con = await oracledb.getConnection({
        user: DB_USER,
        password: DB_PASSWORD,
        connectString: DB_CONNECTION_STRING,
      });

      // node native promisify
      // const execute = util.promisify(db.execute).bind(db);

      const data = await con.execute(`
      SELECT DISTINCT USER_NAME FROM VW_GL_ENQ
      `);

      var arr0 = "";
      var arr = [];

      for (let i = 0; i < data.rows.length; i++) {
        for (let x = 0; x < data.metaData.length; x++) {
          arr0 +=
            '"' +
            [data.metaData[x].name.toLowerCase()] +
            '" : "' +
            data.rows[i][x] +
            '",';
        }

        arr.push(JSON.parse("{" + arr0.replace(/,\s*$/, "") + "}"));
      }

      return res.send(arr);
    } catch (err) {
      res.send(err);

      throw err;
    }
  }

  getFrequencyDetails();
});

// app.get("/api/get-balance-sheet-details", (req, res) => {
//   async function getBalanceSheetDetails() {
//     let con;

//     try {
//       con = await oracledb.getConnection({
//         user: DB_USER,
//         password: DB_PASSWORD,
//         connectString: DB_CONNECTION_STRING,
//       });

//       const response = [];
//       const headLevel = [];
//       const resp = [];
//       let arr0 = "";

//       // node native promisify
//       // const execute = util.promisify(db.execute).bind(db);

//       const data = await con.execute(`
//       SELECT BS_CODE,BS_DESC,LEVEL_INDICATOR,LINE_CATEGORY, get_Branchdesc(BRANCH_CODE) AS BRANCH, ORDERING from BALANCE_SHEET ORDER BY ORDER_OF_PRINT ASC
//       `);
//       // WHERE LEVEL_INDICATOR='H' and BS_DESC <>'.'

//       // PYMT;
//       if (data) {
//         console.log("data");
//       } else {
//         console.log("no data");
//       }
//       //  POSTING_DATEBATCH_DESC;

//       // console.log(data);

//       if (data) {
//         for (let i = 0; i < data.rows.length; i++) {
//           for (let x = 0; x < data.metaData.length; x++) {
//             arr0 +=
//               '"' +
//               [data.metaData[x].name.toLowerCase()] +
//               '" : "' +
//               data.rows[i][x] +
//               '",';
//           }

//           response.push(
//             JSON.parse(
//               "{" +
//                 arr0.replace(/(\r\n|\n|\r)/gm, "").replace(/,\s*$/, "") +
//                 "}"
//             )
//           );
//         }

//         res.send(response);
//       } else {
//         res.send(err);
//         console.log("error");
//       }
//     } catch (err) {
//       res.send(err);

//       throw err;
//     }
//   }

//   getBalanceSheetDetails();
// });

app.get("/api/get-chart-group", (req, res) => {
  let getChartGroup = async () => {
    try {
      const db = await oracledb.getConnection({
        user: DB_USER,
        password: DB_PASSWORD,
        connectString: DB_CONNECTION_STRING,
        timeout: DB_CONNECTION_TIMEOUT,
      });
      const execute = util.promisify(db.execute).bind(db);

      // return res.send("ghamna");
      // res.send(con);
      const data = await execute(
        `select actual_code,description 
        from code_desc 
        where code_type = 'CAC' 
        order by actual_code`
      );
      if (data) {
        // res.send(response);

        var arr0 = "";
        var arr = [];

        for (let i = 0; i < data.rows.length; i++) {
          for (let x = 0; x < data.metaData.length; x++) {
            arr0 +=
              '"' +
              [data.metaData[x].name.toLowerCase()] +
              '" : "' +
              data.rows[i][x] +
              '",';
          }

          arr.push(JSON.parse("{" + arr0.replace(/,\s*$/, "") + "}"));
        }

        return res.send(arr);

        // res.send({
        //   responseCode: "000",
        //   responseMessage : arr
        // });
      } else {
        res.send("Something went wrong... Nothing was returned!!");
      }
    } catch (err) {
      console.log(err);
      res.send("err");
    }
  };
  getChartGroup();
});

app.post("/api/get-clear-to-code", (req, res) => {
  const chartCode = req.body.chartCode;
  let getChartGroup = async () => {
    try {
      const db = await oracledb.getConnection({
        user: DB_USER,
        password: DB_PASSWORD,
        connectString: DB_CONNECTION_STRING,
        timeout: DB_CONNECTION_TIMEOUT,
      });
      const execute = util.promisify(db.execute).bind(db);

      // return res.send("ghamna");
      // res.send(con);
      const data = await execute(
        `select account_code,account_descrp 
        from chart_of_acct 
        where level_id = 'T' and  
        chart_code = '${chartCode}'
        order by account_code
        `
      );
      if (data) {
        // res.send(response);

        var arr0 = "";
        var arr = [];

        for (let i = 0; i < data.rows.length; i++) {
          for (let x = 0; x < data.metaData.length; x++) {
            arr0 +=
              '"' +
              [data.metaData[x].name.toLowerCase()] +
              '" : "' +
              data.rows[i][x] +
              '",';
          }

          arr.push(JSON.parse("{" + arr0.replace(/,\s*$/, "") + "}"));
        }

        return res.send(arr);

        // res.send({
        //   responseCode: "000",
        //   responseMessage : arr
        // });
      } else {
        res.send("Something went wrong... Nothing was returned!!");
      }
    } catch (err) {
      console.log(err);
      res.send("err");
    }
  };
  getChartGroup();
});

app.post("/api/vouchers-enquiry", (req, res) => {
  const postedBy = req.body.postedBy;
  const status = req.body.status;
  const voucherType = req.body.voucherType;
  const amount = req.body.amount;
  const valueDateFrom = req.body.valueDateFrom;
  const valueDateTo = req.body.valueDateTo;
  const narration = req.body.narration;

  let getChartGroup = async () => {
    try {
      const db = await oracledb.getConnection({
        user: DB_USER,
        password: DB_PASSWORD,
        connectString: DB_CONNECTION_STRING,
        timeout: DB_CONNECTION_TIMEOUT,
      });
      const execute = util.promisify(db.execute).bind(db);

      let determinant = "";

      if (postedBy) {
        if (determinant) {
          determinant += `AND USER_NAME = '${postedBy}'`;
        } else {
          determinant += `WHERE USER_NAME = '${postedBy}'`;
        }
      }
      if (status) {
        if (determinant) {
          determinant += `AND STATUS = '${status}'`;
        } else {
          determinant += `WHERE STATUS = '${status}'`;
        }
      }
      if (voucherType) {
        if (determinant) {
          determinant += `AND VOUCHER_NUMBER = '${voucherType}'`;
        } else {
          determinant += `WHERE VOUCHER_NUMBER = '${voucherType}'`;
        }
      }
      if (amount) {
        if (determinant) {
          determinant += `AND AMT = '${amount}'`;
        } else {
          determinant += `WHERE AMT = '${amount}'`;
        }
      }
      if (valueDateFrom) {
        if (determinant) {
          determinant += `AND VALUE_DATE BETWEEN '${valueDateFrom}' AND '${valueDateTo}'`;
        } else {
          determinant += `WHERE VALUE_DATE BETWEEN '${valueDateFrom}' AND '${valueDateTo}'`;
        }
      }
      if (narration) {
        if (determinant) {
          determinant += `AND NARRATION like '%${narration}%'`;
        } else {
          determinant += `WHERE NARRATION like '%${narration}%'`;
        }
      }

      // return res.send("ghamna");
      // res.send(con);
      const data = await execute(
        `SELECT VOUCHER_NUMBER,BATCH_NO,to_char(VALUE_DATE,'DD-MON-YYYY') as VALUE_DATE,to_char(POSTING_DATE,'DD-MON-YYYY') as POSTING_DATE,USER_NAME,cast(AMT AS VARCHAR(10)) as AMT,NARRATION,STATUS,cast(TRANS_COUNT AS VARCHAR(10)) as TRANS_COUNT FROM VW_GL_ENQ ${determinant} ORDER BY BATCH_NO`
      );

      res.send(data.rows);

      // let response = [];
      // let arr0 = " ";
      // if (data) {
      //   for (let i = 0; i < data.rows.length; i++) {
      //     for (let x = 0; x < data.metaData.length; x++) {
      //       arr0 +=
      //         '"' +
      //         [data.metaData[x].name.toLowerCase()] +
      //         '" : "' +
      //         data.rows[i][x] +
      //         '",';
      //     }

      //     response.push(JSON.parse("{" + arr0.replace(/,\s*$/, " ") + "}"));
      //   }

      // res.send(response);
      //  } else {
      //   res.send("Something went wrong... Nothing was returned!!");
      // }
    } catch (err) {
      console.log(err);
      // res.send(err);
    }
  };
  getChartGroup();
});

app.post("/api/get-gl-enquiry", (req, res) => {
  const batchNumber = req.body.batchNumber;
  let getGlEnquiry = async () => {
    try {
      const db = await oracledb.getConnection({
        user: DB_USER,
        password: DB_PASSWORD,
        connectString: DB_CONNECTION_STRING,
        timeout: DB_CONNECTION_TIMEOUT,
      });
      const execute = util.promisify(db.execute).bind(db);

      // return res.send("ghamna");
      // res.send(con);
      const data = await execute(
        `SELECT ACCT_LINK,get_acctdesc(ACCT_LINK) as ACCT_DESC,TRANSACTION_DETAILS,LC_EQUIV_AMT as amount,get_branchdesc(INTER_BRANCH) AS BRANCH,STATUS,get_currdesc(CURRENCY_CODE) as currency
         FROM vw_GL_TRANS
         WHERE BATCH_NO = '${batchNumber}'
        `
      );
      if (data) {
        // res.send(response);

        var arr0 = "";
        var arr = [];

        for (let i = 0; i < data.rows.length; i++) {
          for (let x = 0; x < data.metaData.length; x++) {
            arr0 +=
              '"' +
              [data.metaData[x].name.toLowerCase()] +
              '" : "' +
              data.rows[i][x] +
              '",';
          }

          arr.push(JSON.parse("{" + arr0.replace(/,\s*$/, "") + "}"));
        }

        return res.send(arr);

        // res.send({
        //   responseCode: "000",
        //   responseMessage : arr
        // });
      } else {
        res.send("Something went wrong... Nothing was returned!!");
      }
    } catch (err) {
      console.log(err);
      res.send(err);
    }
  };
  getGlEnquiry();
});

app.post("/api/get-chart-of-account", (req, res) => {
  const clearToCode = req.body.clearToCode;
  let getChartOfAccount = async () => {
    try {
      const db = await oracledb.getConnection({
        user: DB_USER,
        password: DB_PASSWORD,
        connectString: DB_CONNECTION_STRING,
        timeout: DB_CONNECTION_TIMEOUT,
      });
      const execute = util.promisify(db.execute).bind(db);

      // return res.send("ghamna");
      // res.send(con);
      const data = await execute(
        `SELECT ACCOUNT_DESCRP,LEVEL_ID,GET_CURRENCY_ISO(CURRENCY) AS CURRENCY,GET_BRANCHDESC(BRANCH_CODE) AS BRANCH,BSPL AS REPORT_LINE,NVL(BP_CODE,' ') AS LINE_CODE,CUST_NO,ACCOUNT_CODE AS GL_CODE,TACCT,get_close_bal_coa(TACCT,'') as balance
         FROM CHART_OF_ACCT  
         WHERE CLEAR_TO_CODE = '${clearToCode}'
         ORDER BY ACCOUNT_CODE
        `
      );
      if (data) {
        // res.send(response);

        var arr0 = "";
        var arr = [];

        for (let i = 0; i < data.rows.length; i++) {
          for (let x = 0; x < data.metaData.length; x++) {
            arr0 +=
              '"' +
              [data.metaData[x].name.toLowerCase()] +
              '" : "' +
              data.rows[i][x] +
              '",';
          }

          arr.push(JSON.parse("{" + arr0.replace(/,\s*$/, "") + "}"));
        }

        return res.send(arr);

        // res.send({
        //   responseCode: "000",
        //   responseMessage : arr
        // });
      } else {
        res.send("Something went wrong... Nothing was returned!!");
      }
    } catch (err) {
      console.log(err);
      res.send(err);
    }
  };
  getChartOfAccount();
});

app.get("/api/get-level-ID", (req, res) => {
  // const chartCode = req.body.chartCode;
  let getLevelID = async () => {
    try {
      const db = await oracledb.getConnection({
        user: DB_USER,
        password: DB_PASSWORD,
        connectString: DB_CONNECTION_STRING,
        timeout: DB_CONNECTION_TIMEOUT,
      });
      const execute = util.promisify(db.execute).bind(db);

      // return res.send("ghamna");
      // res.send(con);
      const data = await execute(
        `Select actual_code level_id ,description level_description
        from code_desc 
        where code_type= 'LID'
        `
      );
      if (data) {
        // res.send(response);

        var arr0 = "";
        var arr = [];

        for (let i = 0; i < data.rows.length; i++) {
          for (let x = 0; x < data.metaData.length; x++) {
            arr0 +=
              '"' +
              [data.metaData[x].name.toLowerCase()] +
              '" : "' +
              data.rows[i][x] +
              '",';
          }

          arr.push(JSON.parse("{" + arr0.replace(/,\s*$/, "") + "}"));
        }

        return res.send(arr);

        // res.send({
        //   responseCode: "000",
        //   responseMessage : arr
        // });
      } else {
        res.send("Something went wrong... Nothing was returned!!");
      }
    } catch (err) {
      console.log(err);
      res.send("err");
    }
  };
  getLevelID();
});

app.get("/api/get-finance-currency", (req, res) => {
  // const chartCode = req.body.chartCode;
  let getFinanceCurrency = async () => {
    try {
      const db = await oracledb.getConnection({
        user: DB_USER,
        password: DB_PASSWORD,
        connectString: DB_CONNECTION_STRING,
        timeout: DB_CONNECTION_TIMEOUT,
      });
      const execute = util.promisify(db.execute).bind(db);

      // return res.send("ghamna");
      // res.send(con);
      const data = await execute(
        `select  actual_code,description from code_desc where code_type = 'CUR'
        `
      );
      if (data) {
        // res.send(response);

        var arr0 = "";
        var arr = [];

        for (let i = 0; i < data.rows.length; i++) {
          for (let x = 0; x < data.metaData.length; x++) {
            arr0 +=
              '"' +
              [data.metaData[x].name.toLowerCase()] +
              '" : "' +
              data.rows[i][x] +
              '",';
          }

          arr.push(JSON.parse("{" + arr0.replace(/,\s*$/, "") + "}"));
        }

        return res.send(arr);

        // res.send({
        //   responseCode: "000",
        //   responseMessage : arr
        // });
      } else {
        res.send("Something went wrong... Nothing was returned!!");
      }
    } catch (err) {
      console.log(err);
      res.send("err");
    }
  };
  getFinanceCurrency();
});

app.get("/api/get-finance-status", (req, res) => {
  // const chartCode = req.body.chartCode;
  let getFinanceStatus = async () => {
    try {
      const db = await oracledb.getConnection({
        user: DB_USER,
        password: DB_PASSWORD,
        connectString: DB_CONNECTION_STRING,
        timeout: DB_CONNECTION_TIMEOUT,
      });
      const execute = util.promisify(db.execute).bind(db);

      // return res.send("ghamna");
      // res.send(con);
      const data = await execute(
        `SELECT ACTUAL_CODE,DESCRIPTION
        FROM CODE_DESC WHERE CODE_TYPE ='AMB' and Actual_code  IN ('N','DR','CR','BO')
       ORDER BY SHORT_DESCRP
        `
      );
      if (data) {
        // res.send(response);

        var arr0 = "";
        var arr = [];

        for (let i = 0; i < data.rows.length; i++) {
          for (let x = 0; x < data.metaData.length; x++) {
            arr0 +=
              '"' +
              [data.metaData[x].name.toLowerCase()] +
              '" : "' +
              data.rows[i][x] +
              '",';
          }

          arr.push(JSON.parse("{" + arr0.replace(/,\s*$/, "") + "}"));
        }

        return res.send(arr);

        // res.send({
        //   responseCode: "000",
        //   responseMessage : arr
        // });
      } else {
        res.send("Something went wrong... Nothing was returned!!");
      }
    } catch (err) {
      console.log(err);
      res.send("err");
    }
  };
  getFinanceStatus();
});

app.post("/api/get-account-class", (req, res) => {
  const chartGroup = req.body.chartGroup;
  let getAccountClass = async () => {
    try {
      const db = await oracledb.getConnection({
        user: DB_USER,
        password: DB_PASSWORD,
        connectString: DB_CONNECTION_STRING,
        timeout: DB_CONNECTION_TIMEOUT,
      });
      const execute = util.promisify(db.execute).bind(db);

      // return res.send("ghamna");
      // res.send(con);
      const data = await execute(
        `SELECT  distinct ACTUAL_CODE,DESCRIPTION
        FROM code_desc 
        WHERE CODE_TYPE = 'IFC' 
        AND CLASS_CODE = case when '${chartGroup}' <> 00000 then
        TO_NUMBER(REPLACE(TO_CHAR('${chartGroup}'),'0','')) else 0 end 
         ORDER BY DESCRIPTION
         `
      );
      if (data) {
        // res.send(response);

        var arr0 = "";
        var arr = [];

        for (let i = 0; i < data.rows.length; i++) {
          for (let x = 0; x < data.metaData.length; x++) {
            arr0 +=
              '"' +
              [data.metaData[x].name.toLowerCase()] +
              '" : "' +
              data.rows[i][x] +
              '",';
          }

          arr.push(JSON.parse("{" + arr0.replace(/,\s*$/, "") + "}"));
        }
        // res.send(req.body);
        return res.send(arr);

        // res.send({
        //   responseCode: "000",
        //   responseMessage : arr
        // });
      } else {
        res.send("Something went wrong... Nothing was returned!!");
      }
    } catch (err) {
      // console.log(err);
      res.send(err);
    }
  };
  getAccountClass();
});

app.get("/api/get-profit-and-loss-parent-line", (req, res) => {
  // const chartCode = req.body.chartCode;
  let getPandLParentLine = async () => {
    try {
      const db = await oracledb.getConnection({
        user: DB_USER,
        password: DB_PASSWORD,
        connectString: DB_CONNECTION_STRING,
        timeout: DB_CONNECTION_TIMEOUT,
      });
      const execute = util.promisify(db.execute).bind(db);

      // return res.send("ghamna");
      // res.send(con);
      const data = await execute(
        `select pl_desc Description,pl_code Code 
        from profit_and_loss
        where level_indicator='T' and flag='Y'`
      );
      if (data) {
        // res.send(response);

        var arr0 = "";
        var arr = [];

        for (let i = 0; i < data.rows.length; i++) {
          for (let x = 0; x < data.metaData.length; x++) {
            arr0 +=
              '"' +
              [data.metaData[x].name.toLowerCase()] +
              '" : "' +
              data.rows[i][x] +
              '",';
          }

          arr.push(JSON.parse("{" + arr0.replace(/,\s*$/, "") + "}"));
        }

        return res.send(arr);

        // res.send({
        //   responseCode: "000",
        //   responseMessage : arr
        // });
      } else {
        res.send("Something went wrong... Nothing was returned!!");
      }
    } catch (err) {
      console.log(err);
      res.send("err");
    }
  };
  getPandLParentLine();
});

app.post("/api/get-profit-and-loss-data", (req, res) => {
  const parentLine = req.body.parentLine;
  let getProfitAndLossData = async () => {
    try {
      const db = await oracledb.getConnection({
        user: DB_USER,
        password: DB_PASSWORD,
        connectString: DB_CONNECTION_STRING,
        timeout: DB_CONNECTION_TIMEOUT,
      });
      const execute = util.promisify(db.execute).bind(db);

      // return res.send("ghamna");
      // res.send(con);
      const data = await execute(
        `select PL_CODE,PL_DESC,LEVEL_INDICATOR,CLEAR_TO_CODE,GET_BRANCHDESC(BRANCH_CODE) AS BRANCH_CODE,ORDERING,LINE_CATEGORY,REPORT_CLASS
        from PROFIT_AND_LOSS
        WHERE NVL(CLEAR_TO_CODE,'0') LIKE '%${parentLine}%'
        ORDER BY ORDERING `
      );
      if (data) {
        // res.send(response);

        var arr0 = "";
        var arr = [];

        for (let i = 0; i < data.rows.length; i++) {
          for (let x = 0; x < data.metaData.length; x++) {
            arr0 +=
              '"' +
              [data.metaData[x].name.toLowerCase()] +
              '" : "' +
              data.rows[i][x] +
              '",';
          }

          arr.push(JSON.parse("{" + arr0.replace(/,\s*$/, "") + "}"));
        }

        return res.send(arr);

        // res.send({
        //   responseCode: "000",
        //   responseMessage : arr
        // });
      } else {
        res.send("Something went wrong... Nothing was returned!!");
      }
    } catch (err) {
      res.send(err);
    }
  };
  getProfitAndLossData();
});

app.post("/api/get-approve-profit-and-loss-data", (req, res) => {
  const parentLine = req.body.parentLine;
  let getAmendProfitAndLossData = async () => {
    try {
      const db = await oracledb.getConnection({
        user: DB_USER,
        password: DB_PASSWORD,
        connectString: DB_CONNECTION_STRING,
        timeout: DB_CONNECTION_TIMEOUT,
      });
      const execute = util.promisify(db.execute).bind(db);

      // return res.send("ghamna");
      // res.send(con);
      const data = await execute(
        `SELECT PL_CODE,PL_DESC,LEVEL_INDICATOR,CLEAR_TO_CODE,GET_BRANCHDESC(BRANCH_CODE) AS BRANCH_CODE,nvl(cast(ORDERING as varchar(10)),' ') as ORDERING,LINE_CATEGORY,REPORT_CLASS,get_acct_pnl_desc(CLEAR_TO_CODE) as parent_line_description,nvl(FLAG_MESSAGE,' ') as FLAG_MESSAGE,nvl(POSTED_BY,' ') as POSTED_BY
        FROM profit_and_loss_temp
        WHERE FLAG = 'A' AND NVL(CLEAR_TO_CODE,'0') LIKE '%${parentLine}%'
        UNION
        SELECT PL_CODE,PL_DESC,LEVEL_INDICATOR,CLEAR_TO_CODE,GET_BRANCHDESC(BRANCH_CODE) AS BRANCH_CODE,nvl(cast(ORDERING as varchar(10)),' ') as ORDERING,LINE_CATEGORY,REPORT_CLASS,get_acct_pnl_desc(CLEAR_TO_CODE) as parent_line_description,nvl(FLAG_MESSAGE,' ') as FLAG_MESSAGE,nvl(POSTED_BY,' ') as POSTED_BY
        FROM PROFIT_AND_LOSS
        WHERE FLAG = 'N' AND NVL(CLEAR_TO_CODE,'0')  LIKE '%${parentLine}%'
        ORDER BY
        ORDERING`
      );
      if (data) {
        // res.send(response);

        var arr0 = "";
        var arr = [];

        for (let i = 0; i < data.rows.length; i++) {
          for (let x = 0; x < data.metaData.length; x++) {
            arr0 +=
              '"' +
              [data.metaData[x].name.toLowerCase()] +
              '" : "' +
              data.rows[i][x] +
              '",';
          }

          arr.push(JSON.parse("{" + arr0.replace(/,\s*$/, "") + "}"));
        }

        return res.send(arr);

        // res.send({
        //   responseCode: "000",
        //   responseMessage : arr
        // });
      } else {
        res.send("Something went wrong... Nothing was returned!!");
      }
    } catch (err) {
      res.send(err);
    }
  };
  getAmendProfitAndLossData();
});

app.get("/api/get-account-code", (req, res) => {
  // const chartCode = req.body.chartCode;
  let getAccountCode = async () => {
    try {
      const db = await oracledb.getConnection({
        user: DB_USER,
        password: DB_PASSWORD,
        connectString: DB_CONNECTION_STRING,
        timeout: DB_CONNECTION_TIMEOUT,
      });
      const execute = util.promisify(db.execute).bind(db);

      // return res.send("ghamna");
      // res.send(con);
      const data = await execute(
        `select account_descrp, account_code
        from chart_of_acct where level_id='T' and flag='Y' and account_code not in (select account_code from branch_acct)
        `
      );
      if (data) {
        // res.send(response);

        var arr0 = "";
        var arr = [];

        for (let i = 0; i < data.rows.length; i++) {
          for (let x = 0; x < data.metaData.length; x++) {
            arr0 +=
              '"' +
              [data.metaData[x].name.toLowerCase()] +
              '" : "' +
              data.rows[i][x] +
              '",';
          }

          arr.push(JSON.parse("{" + arr0.replace(/,\s*$/, "") + "}"));
        }

        return res.send(arr);

        // res.send({
        //   responseCode: "000",
        //   responseMessage : arr
        // });
      } else {
        res.send("Something went wrong... Nothing was returned!!");
      }
    } catch (err) {
      console.log(err);
      res.send("err");
    }
  };
  getAccountCode();
});

app.get("/api/get-branch-specific-accounts", (req, res) => {
  // const chartCode = req.body.chartCode;
  let getBranchSpecificAccounts = async () => {
    try {
      const db = await oracledb.getConnection({
        user: DB_USER,
        password: DB_PASSWORD,
        connectString: DB_CONNECTION_STRING,
        timeout: DB_CONNECTION_TIMEOUT,
      });
      const execute = util.promisify(db.execute).bind(db);

      // return res.send("ghamna");
      // res.send(con);
      const data = await execute(
        `SELECT ACCOUNT_CODE,DESCRIPTION,CHART_CODE,CLEAR_TO_CODE,CUST_NO,NVL(get_currdesc(CURRENCY),' ') as CURRENCY,SUB_REF,ACCOUNT_CLASS,APPROVED_BY 
         FROM BRANCH_ACCT
         WHERE FLAG ='Y'
         ORDER BY posting_sysdate 
        `
      );
      if (data) {
        // res.send(response);

        var arr0 = "";
        var arr = [];

        for (let i = 0; i < data.rows.length; i++) {
          for (let x = 0; x < data.metaData.length; x++) {
            arr0 +=
              '"' +
              [data.metaData[x].name.toLowerCase()] +
              '" : "' +
              data.rows[i][x] +
              '",';
          }

          arr.push(JSON.parse("{" + arr0.replace(/,\s*$/, "") + "}"));
        }

        return res.send(arr);

        // res.send({
        //   responseCode: "000",
        //   responseMessage : arr
        // });
      } else {
        res.send("Something went wrong... Nothing was returned!!");
      }
    } catch (err) {
      console.log(err);
      res.send("err");
    }
  };
  getBranchSpecificAccounts();
});

app.get("/api/get-payables-enquiry-vendor", (req, res) => {
  // const chartCode = req.body.chartCode;
  let getVendor = async () => {
    try {
      const db = await oracledb.getConnection({
        user: DB_USER,
        password: DB_PASSWORD,
        connectString: DB_CONNECTION_STRING,
        timeout: DB_CONNECTION_TIMEOUT,
      });
      const execute = util.promisify(db.execute).bind(db);

      // return res.send("ghamna");
      // res.send(con);
      const data = await execute(
        ` SELECT 
         FULLNAME,USER_NAME 
         FROM vw_personnel_profile
        `
      );
      if (data) {
        // res.send(response);

        var arr0 = "";
        var arr = [];

        for (let i = 0; i < data.rows.length; i++) {
          for (let x = 0; x < data.metaData.length; x++) {
            arr0 +=
              '"' +
              [data.metaData[x].name.toLowerCase()] +
              '" : "' +
              data.rows[i][x] +
              '",';
          }

          arr.push(JSON.parse("{" + arr0.replace(/,\s*$/, "") + "}"));
        }

        return res.send(arr);

        // res.send({
        //   responseCode: "000",
        //   responseMessage : arr
        // });
      } else {
        res.send("Something went wrong... Nothing was returned!!");
      }
    } catch (err) {
      console.log(err);
      res.send(err);
    }
  };
  getVendor();
});

app.post("/api/bs-code-enquiry", (req, res) => {
  const lineCode = req.body.lineCode;
  const levelIndicator = req.body.levelIndicator;
  const parentLine = req.body.parentLine;
  const postedBy = req.body.postedBy;
  const lineDescription = req.body.lineDescription;
  const approvedStatus = req.body.approvedStatus;

  let bsCodeEnquiry = async () => {
    try {
      const db = await oracledb.getConnection({
        user: DB_USER,
        password: DB_PASSWORD,
        connectString: DB_CONNECTION_STRING,
        timeout: DB_CONNECTION_TIMEOUT,
      });
      const execute = util.promisify(db.execute).bind(db);

      // return res.send("ghamna");
      // res.send(con);
      const data = await execute(
        `select BS_CODE,BS_DESC,LEVEL_INDICATOR,CLEAR_TO_CODE,ORDERING,POSTED_BY,FLAG_MESSAGE,GET_BRANCHDESC(BRANCH_CODE) as BRANCH,to_char(BS_DATE,'DD-MON-YYYY') as balancedate
        from ENQ_BS_VW
        WHERE POSTED_BY LIKE '%'||:postedBy|| '%'
        AND BS_CODE LIKE '%'||:lineCode||'%'  
        AND BS_DESC LIKE '%'||:lineDescription|| '%'
        AND LEVEL_INDICATOR LIKE '%'||:levelIndicator||'%' 
        AND nvl(CLEAR_TO_CODE,' ') LIKE '%'||:parentLine|| '%' 
        AND FLAG_MESSAGE LIKE '%'||:approvedStatus|| '%'   
        ORDER BY ORDERING    
        `,
        {
          postedBy,
          lineCode,
          lineDescription,
          levelIndicator,
          parentLine,
          approvedStatus,
        }
      );
      if (data) {
        // res.send(response);

        var arr0 = "";
        var arr = [];

        for (let i = 0; i < data.rows.length; i++) {
          for (let x = 0; x < data.metaData.length; x++) {
            arr0 +=
              '"' +
              [data.metaData[x].name.toLowerCase()] +
              '" : "' +
              data.rows[i][x] +
              '",';
          }

          arr.push(JSON.parse("{" + arr0.replace(/,\s*$/, "") + "}"));
        }

        return res.send(arr);

        // res.send({
        //   responseCode: "000",
        //   responseMessage : arr
        // });
      } else {
        res.send("Something went wrong... Nothing was returned!!");
      }
    } catch (err) {
      res.send(err);
    }
  };
  bsCodeEnquiry();
});

app.post("/api/bs-code-subModal", (req, res) => {
  const bsCode = req.body.bsCode;

  let bsCodeEnquiry = async () => {
    try {
      const db = await oracledb.getConnection({
        user: DB_USER,
        password: DB_PASSWORD,
        connectString: DB_CONNECTION_STRING,
        timeout: DB_CONNECTION_TIMEOUT,
      });
      const execute = util.promisify(db.execute).bind(db);

      // return res.send("ghamna");
      // res.send(con);
      const data = await execute(
        `SELECT 
         BP_CODE,BALANCE_DATE,BRANCH_CODE,ACCT_LINK,ACCOUNT_DESCRP,LEVEL_IDENTIFIER,OPENING_BALANCE_TODAY,DEBIT,CREDIT,CLOSING_BALANCE_TODAY
         FROM VW_CONBPDET_BAL
         WHERE BP_CODE = '${bsCode}'
         `
      );
      if (data) {
        // res.send(response);

        var arr0 = "";
        var arr = [];

        for (let i = 0; i < data.rows.length; i++) {
          for (let x = 0; x < data.metaData.length; x++) {
            arr0 +=
              '"' +
              [data.metaData[x].name.toLowerCase()] +
              '" : "' +
              data.rows[i][x] +
              '",';
          }

          arr.push(JSON.parse("{" + arr0.replace(/,\s*$/, "") + "}"));
        }

        return res.send(arr);

        // res.send({
        //   responseCode: "000",
        //   responseMessage : arr
        // });
      } else {
        res.send("Something went wrong... Nothing was returned!!");
      }
    } catch (err) {
      res.send(err);
    }
  };
  bsCodeEnquiry();
});

app.post("/api/pnl-code-enquiry", (req, res) => {
  const lineCode = req.body.lineCode;
  const levelIndicator = req.body.levelIndicator;
  const parentLine = req.body.parentLine;
  const postedBy = req.body.postedBy;
  const lineDescription = req.body.lineDescription;
  const approvedStatus = req.body.approvedStatus;

  let PnLCodeEnquiry = async () => {
    try {
      const db = await oracledb.getConnection({
        user: DB_USER,
        password: DB_PASSWORD,
        connectString: DB_CONNECTION_STRING,
        timeout: DB_CONNECTION_TIMEOUT,
      });
      const execute = util.promisify(db.execute).bind(db);

      // return res.send("ghamna");
      // res.send(con);
      const data = await execute(
        `select PL_CODE,PL_DESC,LEVEL_INDICATOR,CLEAR_TO_CODE,ORDERING,POSTED_BY,FLAG_MESSAGE 
        FROM ENQ_PNL_VW
        WHERE POSTED_BY LIKE '%'||:postedBy|| '%'
        AND PL_CODE LIKE '%'||:lineCode||'%'  
        AND PL_DESC LIKE '%'||:lineDescription|| '%'
        AND LEVEL_INDICATOR LIKE '%'||:levelIndicator||'%' 
        AND nvl(CLEAR_TO_CODE,' ') LIKE '%'||:parentLine|| '%' 
        AND FLAG_MESSAGE LIKE '%'||:approvedStatus|| '%'   
        ORDER BY ORDERING    
        `,
        {
          postedBy,
          lineCode,
          lineDescription,
          levelIndicator,
          parentLine,
          approvedStatus,
        }
      );
      if (data) {
        // res.send(response);

        var arr0 = "";
        var arr = [];

        for (let i = 0; i < data.rows.length; i++) {
          for (let x = 0; x < data.metaData.length; x++) {
            arr0 +=
              '"' +
              [data.metaData[x].name.toLowerCase()] +
              '" : "' +
              data.rows[i][x] +
              '",';
          }

          arr.push(JSON.parse("{" + arr0.replace(/,\s*$/, "") + "}"));
        }

        return res.send(arr);

        // res.send({
        //   responseCode: "000",
        //   responseMessage : arr
        // });
      } else {
        res.send("Something went wrong... Nothing was returned!!");
      }
    } catch (err) {
      res.send(err);
    }
  };
  PnLCodeEnquiry();
});

app.post("/api/account-payable-enquiry", (req, res) => {
  const vendor = req.body.vendor;
  const frequency = req.body.frequency;
  const postedBy = req.body.postedBy;
  const invoiceNumber = req.body.invoiceNumber;
  const batchNumber = req.body.batchNumber;
  const documentDescription = req.body.documentDescription;
  const paymentMode = req.body.paymentMode;

  let accountPayableEnquiry = async () => {
    try {
      const db = await oracledb.getConnection({
        user: DB_USER,
        password: DB_PASSWORD,
        connectString: DB_CONNECTION_STRING,
        timeout: DB_CONNECTION_TIMEOUT,
      });
      const execute = util.promisify(db.execute).bind(db);

      // return res.send("ghamna");
      // res.send(con);
      const data = await execute(
        `SELECT 
        nvl(EXPENSE_BATCH_NO,''),BENEFICIARY_ACCT,get_freq_desc(FREQUENCY) as frequency,to_char(AUTHORIZED_DATE,'DD-MON-YYYY') as AUTHORIZED_DATE,to_char(EXPENSE_DATE,'DD-MON-YYYY') as EXPENSE_DATE,TOTAL_EXP_AMOUNT,NARRATION,AUTHORIZED_BY 
        FROM VW_acct_payable_sum
        WHERE PAYMENT_TYPE LIKE '%'||:paymentMode||'%' 
        AND BENEFICIARY_ID LIKE '%'||:vendor||'%' 
        AND frequency LIKE '%'||:frequency||'%'
        AND EXPENSE_ORIGINATOR LIKE '%'||:postedBy||'%' 
        AND invoice_number LIKE '%'||:invoiceNumber||'%' 
        AND narration LIKE '%'||:documentDescription||'%'
        `,
        {
          paymentMode,
          vendor,
          frequency,
          postedBy,
          invoiceNumber,
          documentDescription,
        }
      );
      if (data) {
        // res.send(response);

        var arr0 = "";
        var arr = [];

        for (let i = 0; i < data.rows.length; i++) {
          for (let x = 0; x < data.metaData.length; x++) {
            arr0 +=
              '"' +
              [data.metaData[x].name.toLowerCase()] +
              '" : "' +
              data.rows[i][x] +
              '",';
          }

          arr.push(JSON.parse("{" + arr0.replace(/,\s*$/, "") + "}"));
        }

        return res.send(arr);

        // res.send({
        //   responseCode: "000",
        //   responseMessage : arr
        // });
      } else {
        res.send("Something went wrong... Nothing was returned!!");
      }
    } catch (err) {
      res.send(err);
    }
  };
  accountPayableEnquiry();
});

app.post("/api/gl-account-enq", (req, res) => {
  const accountNumber = req.body.accountNumber;
  const branch = req.body.branch;
  const valueDateFrom = req.body.valueDateFrom;
  const valueDateTo = req.body.valueDateTo;

  let glAccountEnq = async () => {
    try {
      const db = await oracledb.getConnection({
        user: DB_USER,
        password: DB_PASSWORD,
        connectString: DB_CONNECTION_STRING,
        timeout: DB_CONNECTION_TIMEOUT,
      });
      const execute = util.promisify(db.execute).bind(db);

      // return res.send("ghamna");
      // res.send(con);
      const data = await execute(
        `select to_char(value_date,'DD-MON-YYYY') as value_date,to_char(posting_date,'DD-MON-YYYY') as posting_date,transaction_details,nvl(cast(local_equivalent_db as varchar(10)),' ') as local_equivalent_db,nvl(cast(local_equivalent_cr as varchar(10)),' ') as local_equivalent_cr,inter_branch as inter_branch_code,GET_BRANCHDESC(inter_branch) as inter_branch,user_name,batch_no,get_close_bal(ACCT_LINK) as balance 
         FROM vw_ac_trans_new
         WHERE ACCT_LINK = '${accountNumber}' 
         AND INTER_BRANCH = '${branch}'
         AND VALUE_DATE BETWEEN '${valueDateFrom}'
         AND '${valueDateTo}'
         ORDER BY batch_no
         `
      );
      if (data) {
        // res.send(response);

        var arr0 = "";
        var arr = [];

        for (let i = 0; i < data.rows.length; i++) {
          for (let x = 0; x < data.metaData.length; x++) {
            arr0 +=
              '"' +
              [data.metaData[x].name.toLowerCase()] +
              '" : "' +
              data.rows[i][x] +
              '",';
          }

          arr.push(JSON.parse("{" + arr0.replace(/,\s*$/, "") + "}"));
        }

        return res.send(arr);

        // res.send({
        //   responseCode: "000",
        //   responseMessage : arr
        // });
      } else {
        res.send("Something went wrong... Nothing was returned!!");
      }
    } catch (err) {
      res.send(err);
    }
  };
  glAccountEnq();
});

app.post("/api/gl-batch-trans", (req, res) => {
  const batchNumber = req.body.batchNumber;
  const branch = req.body.branch;

  let glAccountEnq = async () => {
    try {
      const db = await oracledb.getConnection({
        user: DB_USER,
        password: DB_PASSWORD,
        connectString: DB_CONNECTION_STRING,
        timeout: DB_CONNECTION_TIMEOUT,
      });
      const execute = util.promisify(db.execute).bind(db);

      // return res.send("ghamna");
      // res.send(con);
      const data = await execute(
        `SELECT BATCH_NO,ACCOUNT_DESCRP,TRANSACTION_DETAILS,DOCUMENT_REF,get_currdesc(CURRENCY_CODE) as CURRENCY_CODE,NVL(CAST(LOCAL_EQUIVALENT_DB AS VARCHAR(10)),' ') as LOCAL_EQUIVALENT_DB,NVL(CAST(LOCAL_EQUIVALENT_CR AS VARCHAR(10)),' ') as LOCAL_EQUIVALENT_CR 
         FROM VW_BATCH_TRANS
         WHERE BATCH_NO = '${batchNumber}'
         AND INTER_BRANCH = '${branch}'
         `
      );
      if (data) {
        // res.send(response);

        var arr0 = "";
        var arr = [];

        for (let i = 0; i < data.rows.length; i++) {
          for (let x = 0; x < data.metaData.length; x++) {
            arr0 +=
              '"' +
              [data.metaData[x].name.toLowerCase()] +
              '" : "' +
              data.rows[i][x] +
              '",';
          }

          arr.push(JSON.parse("{" + arr0.replace(/,\s*$/, "") + "}"));
        }

        return res.send(arr);

        // res.send({
        //   responseCode: "000",
        //   responseMessage : arr
        // });
      } else {
        res.send("Something went wrong... Nothing was returned!!");
      }
    } catch (err) {
      res.send(err);
    }
  };
  glAccountEnq();
});

app.get("/api/gl-branch", async (req, res) => {
  async function getGlBranch() {
    let con;

    try {
      con = await oracledb.getConnection({
        user: DB_USER,
        password: DB_PASSWORD,
        connectString: DB_CONNECTION_STRING,
      });

      // node native promisify
      // const execute = util.promisify(db.execute).bind(db);

      const data = await con.execute(
        `SELECT BR_CODE, BR_DESCRIPTION FROM TB_BRANCH WHERE FLAG_STATUS='A' ORDER BY BR_CODE`
      );

      let response = [];
      let arr0 = "";
      if (data) {
        for (let i = 0; i < data.rows.length; i++) {
          for (let x = 0; x < data.metaData.length; x++) {
            arr0 +=
              '"' +
              [data.metaData[x].name.toLowerCase()] +
              '" : "' +
              data.rows[i][x] +
              '",';
          }

          response.push(JSON.parse("{" + arr0.replace(/,\s*$/, "") + "}"));
        }

        res.send(response);
      } else {
        res.send("Something went wrong... Nothing was returned!!");
      }
    } catch (err) {
      res.send(err);

      throw err;
    }
  }
  getGlBranch();
});

// app.post("/api/balance-sheet-enquiry", (req, res) => {

//   const clearToCode = req.body.clearToCode;
//   // const reportBalance = req.body.reportBalance;
//   // const balanceDate = req.body.balanceDate;
//   // const branch = req.body.branch;
//   // const currency = req.body.currency;
//   // const reportType = req.body.reportType;

//   let BalanceSheetEnquiry = async () => {
//     try {
//       const db = await oracledb.getConnection({
//         user: DB_USER,
//         password: DB_PASSWORD,
//         connectString: DB_CONNECTION_STRING,
//         timeout: DB_CONNECTION_TIMEOUT,
//       });
//       const execute = util.promisify(db.execute).bind(db);

//       // return res.send("ghamna");
//       // res.send(con);
//       const data = await execute(
//         `SELECT
//          BS_CODE,BS_DESC,LEVEL_INDICATOR,CLEAR_TO_CODE,PREVIOUS_BALANCE,CURRENT_BALANCE,DIFFERENCE
//          FROM vw_balance_sheet_enq
//          WHERE CLEAR_TO_CODE = '${clearToCode}'`
//       );
//       if (data) {
//         // res.send(response);

//         var arr0 = "";
//         var arr = [];

//         for (let i = 0; i < data.rows.length; i++) {
//           for (let x = 0; x < data.metaData.length; x++) {
//             arr0 +=
//               '"' +
//               [data.metaData[x].name.toLowerCase()] +
//               '" : "' +
//               data.rows[i][x] +
//               '",';
//           }

//           arr.push(JSON.parse("{" + arr0.replace(/,\s*$/, "") + "}"));
//         }

//         return res.send(arr);

//         // res.send({
//         //   responseCode: "000",
//         //   responseMessage : arr
//         // });
//       } else {
//         res.send("Something went wrong... Nothing was returned!!");
//       }
//     } catch (err) {
//       res.send(err);
//     }
//   };
//   BalanceSheetEnquiry();
// });

// app.post("/api/bs-enquiry", (req, res) => {
//   const codeToClear = req.body.codeToClear;
//   let getProfitAndLossData = async () => {
//     try {
//       const db = await oracledb.getConnection({
//         user: DB_USER,
//         password: DB_PASSWORD,
//         connectString: DB_CONNECTION_STRING,
//         timeout: DB_CONNECTION_TIMEOUT,
//       });
//       const execute = util.promisify(db.execute).bind(db);

//       // return res.send("ghamna");
//       // res.send(con);
//       const data = await execute(
//         `select PL_CODE,PL_DESC,LEVEL_INDICATOR,CLEAR_TO_CODE,GET_BRANCHDESC(BRANCH_CODE) AS BRANCH_CODE,ORDERING,LINE_CATEGORY,REPORT_CLASS
//         from PROFIT_AND_LOSS
//         WHERE NVL(CLEAR_TO_CODE,'0') LIKE '%${parentLine}%'
//         ORDER BY ORDERING `
//       );
//       if (data) {
//         // res.send(response);

//         var arr0 = "";
//         var arr = [];

//         for (let i = 0; i < data.rows.length; i++) {
//           for (let x = 0; x < data.metaData.length; x++) {
//             arr0 +=
//               '"' +
//               [data.metaData[x].name.toLowerCase()] +
//               '" : "' +
//               data.rows[i][x] +
//               '",';
//           }

//           arr.push(JSON.parse("{" + arr0.replace(/,\s*$/, "") + "}"));
//         }

//         return res.send(arr);

//         // res.send({
//         //   responseCode: "000",
//         //   responseMessage : arr
//         // });
//       } else {
//         res.send("Something went wrong... Nothing was returned!!");
//       }
//     } catch (err) {
//       res.send(err);
//     }
//   };
//   getProfitAndLossData();
// });

// get payment details
app.post("/api/get-year-on-year-PnL-workings-translated", (req, res) => {
  const currencyCode = req.body.currencyCode;
  const balanceAsAt = req.body.balanceAsAt;

  async function getPnLWorkingsTranslated() {
    let con;

    try {
      con = await oracledb.getConnection({
        user: DB_USER,
        password: DB_PASSWORD,
        connectString: DB_CONNECTION_STRING,
      });

      const data = await con.execute(
        `SELECT ACCT_LINK,CURRENCY_CODE,BP_CODE,BP,CHART_CODE,ACCOUNT_DESCRP,DOCUMENT_ID,CURRENCY_ISO, BP_DESC,ORDERING,
       CASE WHEN '${currencyCode}'= GET_LOCALCURRENCY THEN SUM(NVL(PREVIOUS_MONTH_BAL,0))  ELSE 
       CASE WHEN GET_RATE_FORM(GET_LOCALCURRENCY, '${currencyCode}', 'FX')='M' 
       THEN SUM(NVL(PREVIOUS_MONTH_BAL,0))*GET_AQUI(GET_LOCALCURRENCY, '${currencyCode}', 'FX',GET_MAX_ACM_MDATE('${balanceAsAt}') )
        ELSE SUM(NVL(PREVIOUS_MONTH_BAL,0))/GET_AQUI(GET_LOCALCURRENCY, '${currencyCode}', 'FX', GET_MAX_ACM_MDATE('${balanceAsAt}') ) END  END PREVIOUS_YEAR_BALANCE,
      
       CASE WHEN'${currencyCode}' =GET_LOCALCURRENCY THEN SUM(NVL(CURRENT_MONTH_BAL,0))  ELSE 
       CASE WHEN GET_RATE_FORM(GET_LOCALCURRENCY, '${currencyCode}', 'FX')='M' 
       THEN SUM(NVL(CURRENT_MONTH_BAL,0))*GET_AQUI(GET_LOCALCURRENCY, '${currencyCode}', 'FX','${balanceAsAt}' )
      ELSE SUM(NVL(CURRENT_MONTH_BAL,0))/GET_AQUI(GET_LOCALCURRENCY, '${currencyCode}', 'FX', '${balanceAsAt}' ) END  END CURRENT_YEAR_BALANCE ,
        
      (CASE WHEN'${currencyCode}'=GET_LOCALCURRENCY THEN SUM(NVL(CURRENT_MONTH_BAL,0))  ELSE 
       CASE WHEN GET_RATE_FORM(GET_LOCALCURRENCY, '${currencyCode}', 'FX')='M' 
       THEN SUM(NVL(CURRENT_MONTH_BAL,0))*GET_AQUI(GET_LOCALCURRENCY, '${currencyCode}', 'FX','${balanceAsAt}' )
        ELSE SUM(NVL(CURRENT_MONTH_BAL,0))/GET_AQUI(GET_LOCALCURRENCY, '${currencyCode}', 'FX', '${balanceAsAt}' ) END  END -  CASE WHEN'${currencyCode}'=GET_LOCALCURRENCY THEN SUM(NVL(PREVIOUS_MONTH_BAL,0))  ELSE 
       CASE WHEN GET_RATE_FORM(GET_LOCALCURRENCY, '${currencyCode}', 'FX')='M' 
       THEN SUM(NVL(PREVIOUS_MONTH_BAL,0))*GET_AQUI(GET_LOCALCURRENCY, '${currencyCode}', 'FX',GET_MAX_ACM_MDATE('${balanceAsAt}') )
        ELSE SUM(NVL(PREVIOUS_MONTH_BAL,0))/GET_AQUI(GET_LOCALCURRENCY, '${currencyCode}', 'FX', GET_MAX_ACM_MDATE('${balanceAsAt}') ) END  END) VARIANCE_AMOUNT,
       
      GET_VARIANCE_PER_FORMULA(
      CASE WHEN'${currencyCode}'=GET_LOCALCURRENCY THEN SUM(NVL(PREVIOUS_MONTH_BAL,0))  ELSE 
      CASE WHEN GET_RATE_FORM(GET_LOCALCURRENCY, '${currencyCode}', 'FX')='M' 
      THEN SUM(NVL(PREVIOUS_MONTH_BAL,0))*GET_AQUI(GET_LOCALCURRENCY, '${currencyCode}', 'FX',GET_MAX_ACM_MDATE('${balanceAsAt}') )
      ELSE SUM(NVL(PREVIOUS_MONTH_BAL,0))/GET_AQUI(GET_LOCALCURRENCY, '${currencyCode}', 'FX', GET_MAX_ACM_MDATE('${balanceAsAt}') ) END  END , 
        
      CASE WHEN'${currencyCode}'=GET_LOCALCURRENCY THEN SUM(NVL(CURRENT_MONTH_BAL,0))  ELSE 
      CASE WHEN GET_RATE_FORM(GET_LOCALCURRENCY, '${currencyCode}', 'FX')='M' 
      THEN SUM(NVL(CURRENT_MONTH_BAL,0))*GET_AQUI(GET_LOCALCURRENCY, '${currencyCode}', 'FX','${balanceAsAt}' )
      ELSE SUM(NVL(CURRENT_MONTH_BAL,0))/GET_AQUI(GET_LOCALCURRENCY, '${currencyCode}', 'FX', '${balanceAsAt}' ) END  END
      ) VARIANCE_PER
      
      FROM (SELECT 
      NULL PREVIOUS_MONTH_BAL,SUM(NVL(A.CLOSING_BALANCE_TODAY_FRGN,0))CURRENT_MONTH_BAL, A.ACCT_LINK,
         A.CURRENCY_CODE,A.BP, A.BP_CODE, A.CHART_CODE, A.ACCOUNT_DESCRP, A.DOCUMENT_ID,A.ISO CURRENCY_ISO, A.BP_DESC, A.ORDERING   
         FROM VW_TB_SUM_HIST_REP A WHERE BALANCE_DATE='${balanceAsAt}' AND BP='PL'
         
      GROUP BY  A.ACCT_LINK, A.BP,CURRENCY_CODE, BP_CODE, A.CHART_CODE, A.ACCOUNT_DESCRP, A.DOCUMENT_ID,A.ISO, A.BP_DESC, A.ORDERING 
         
      UNION ALL
      
      SELECT 
      SUM(NVL(A.CLOSING_BALANCE_TODAY_FRGN,0)) PREVIOUS_MONTH_BAL, NULL CURRENT_MONTH_BAL, A.ACCT_LINK, 
         A.CURRENCY_CODE,A.BP, A.BP_CODE, A.CHART_CODE, A.ACCOUNT_DESCRP, A.DOCUMENT_ID,A.ISO CURRENCY_ISO, A.BP_DESC, A.ORDERING    
         FROM VW_TB_SUM_HIST_REP A
         WHERE BALANCE_DATE=GET_MAX_ACM_DATE('${balanceAsAt}') AND BP='PL'
         GROUP BY A.ACCT_LINK,A.CURRENCY_CODE,A.BP, A.BP_CODE, A.CHART_CODE, A.ACCOUNT_DESCRP, A.DOCUMENT_ID,A.ISO, A.BP_DESC, A.ORDERING) 
      
         GROUP BY ACCT_LINK,CURRENCY_CODE,BP,BP_CODE,BP, CHART_CODE,ACCOUNT_DESCRP,DOCUMENT_ID,CURRENCY_ISO,BP_DESC,ORDERING 
      
         ORDER BY ORDERING,CHART_CODE,DOCUMENT_ID`
      );

      let response = [];
      let arr0 = "";

      if (data) {
        for (let i = 0; i < data.rows.length; i++) {
          for (let x = 0; x < data.metaData.length; x++) {
            arr0 +=
              '"' +
              [data.metaData[x].name.toLowerCase()] +
              '" : "' +
              data.rows[i][x] +
              '",';
          }

          response.push(
            JSON.parse(
              "{" +
                arr0.replace(/(\r\n|\n|\r)/gm, "").replace(/,\s*$/, "") +
                "}"
            )
          );
          // console.log(response,"resssss")
        }

        const groupedData = {};

        response.forEach((entry) => {
          const itemDescrp = entry.bp_code + "  -  " + entry.bp_desc;
          if (groupedData[itemDescrp]) {
            groupedData[itemDescrp].push(entry);
          } else {
            groupedData[itemDescrp] = [entry];
          }
        });

        const groupedResponse = Object.keys(groupedData).map((key) => ({
          item_descrp: key,
          data: groupedData[key],
        }));

        res.send(groupedResponse);
      } else {
        res.send(err);
        console.log(err);
      }
    } catch (err) {
      res.send(err);

      throw err;
    }
  }
  getPnLWorkingsTranslated();
});

app.post("/api/get-year-on-year-BS-breakdown-translated", (req, res) => {
  const currencyCode = req.body.currencyCode;
  const balanceAsAt = req.body.balanceAsAt;
  const bsCode = req.body.bsCode;

  async function getBSbreakdownTranslated() {
    let con;

    try {
      con = await oracledb.getConnection({
        user: DB_USER,
        password: DB_PASSWORD,
        connectString: DB_CONNECTION_STRING,
      });

      const data = await con.execute(
        `SELECT to_char(BP_DATE,'DD-MON-YYYY') as BP_DATE,ORDERING,BP_CODE,BP_DESC,LEVEL_INDICATOR,GROUP_ID,CLEAR_TO_CODE,GET_BSCODE_DESC(CLEAR_TO_CODE) AS CLEAR_TO_CODE_DESC,ORDER_OF_PRINT,REPORT_CLASS,
      VARIANCE_PER,
      
       CASE WHEN'${currencyCode}'=GET_LOCALCURRENCY THEN  CURRENT_BALANCE_TODAY ELSE 
       CASE WHEN GET_RATE_FORM(GET_LOCALCURRENCY, '${currencyCode}', 'FX')='M' THEN CURRENT_BALANCE_TODAY*GET_AQUI(GET_LOCALCURRENCY, '${currencyCode}', 'FX', '${balanceAsAt}' ) 
          ELSE CURRENT_BALANCE_TODAY/GET_AQUI(GET_LOCALCURRENCY, '${currencyCode}', 'FX', '${balanceAsAt}' ) END  END CURRENT_BALANCE_TODAY, 
          
        CASE WHEN'${currencyCode}'=GET_LOCALCURRENCY THEN  PREVIOUS_YEAR_BALANCE ELSE 
       CASE WHEN GET_RATE_FORM(GET_LOCALCURRENCY, '${currencyCode}', 'FX')='M' THEN PREVIOUS_YEAR_BALANCE*GET_AQUI(GET_LOCALCURRENCY, '${currencyCode}', 'FX', '${balanceAsAt}' ) 
         ELSE PREVIOUS_YEAR_BALANCE/GET_AQUI(GET_LOCALCURRENCY, '${currencyCode}', 'FX', '${balanceAsAt}') END  END PREVIOUS_YEAR_BALANCE,
          
       CASE WHEN'${currencyCode}'=GET_LOCALCURRENCY THEN  VARIANCE_AMOUNT ELSE 
       CASE WHEN GET_RATE_FORM(GET_LOCALCURRENCY, '${currencyCode}', 'FX')='M' THEN VARIANCE_AMOUNT*GET_AQUI(GET_LOCALCURRENCY, '${currencyCode}', 'FX', '${balanceAsAt}' )
         ELSE VARIANCE_AMOUNT/GET_AQUI(GET_LOCALCURRENCY, '${currencyCode}', 'FX', '${balanceAsAt}' ) END  END VARIANCE_AMOUNT
      FROM (
      
      SELECT 
          A.BP_DATE, A.ORDERING, A.BP_CODE, 
         A.BP_DESC, A.LEVEL_INDICATOR, A.GROUP_ID, 
         A.CLEAR_TO_CODE,  A.ORDER_OF_PRINT, 
      A.REPORT_CLASS, 
         SUM(NVL(A.CURRENT_BALANCE_TODAY,0))CURRENT_BALANCE_TODAY,SUM(NVL(PREVIOUS_YEAR_BALANCE,0)) PREVIOUS_YEAR_BALANCE,
         
          (SUM(NVL(A.CURRENT_BALANCE_TODAY,0))-SUM(NVL(PREVIOUS_YEAR_BALANCE,0))) VARIANCE_AMOUNT,
          
          CASE WHEN  SUM(NVL(A.CURRENT_BALANCE_TODAY,0))=0 THEN 100 WHEN SUM(NVL(A.PREVIOUS_YEAR_BALANCE,0))=0 THEN 100 
          WHEN SUM(NVL(PREVIOUS_YEAR_BALANCE,0))!=0 THEN
          ((SUM(NVL(A.CURRENT_BALANCE_TODAY,0))-SUM(NVL(PREVIOUS_YEAR_BALANCE,0)))/SUM(NVL(PREVIOUS_YEAR_BALANCE,0)))*100 END VARIANCE_PER
         
      FROM VW_BSH_BRK A 
      
      WHERE A.BP_DATE='${balanceAsAt}'
      AND CLEAR_TO_CODE LIKE '%${bsCode}%'
      GROUP BY     A.BP_DATE, A.ORDERING, A.BP_CODE, 
         A.BP_DESC, A.LEVEL_INDICATOR, A.GROUP_ID, 
         A.CLEAR_TO_CODE,  A.ORDER_OF_PRINT, 
      A.REPORT_CLASS
      order by a.ordering,a.BP_CODE,a.clear_to_code,a.group_id)`
      );

      let response = [];
      let arr0 = "";

      if (data) {
        for (let i = 0; i < data.rows.length; i++) {
          for (let x = 0; x < data.metaData.length; x++) {
            arr0 +=
              '"' +
              [data.metaData[x].name.toLowerCase()] +
              '" : "' +
              data.rows[i][x] +
              '",';
          }

          response.push(
            JSON.parse(
              "{" +
                arr0.replace(/(\r\n|\n|\r)/gm, "").replace(/,\s*$/, "") +
                "}"
            )
          );
          // console.log(response,"resssss")
        }
        // return response;

        res.send(response);
      } else {
        res.send(err);
        console.log(err);
      }
    } catch (err) {
      res.send(err);

      throw err;
    }
  }
  getBSbreakdownTranslated();
});

// get profit and loss breakdown
app.get("/api/get-profit-and-loss-breakdown", (req, res) => {
  async function getProfitAndLossBreakdown() {
    let con;

    try {
      con = await oracledb.getConnection({
        user: DB_USER,
        password: DB_PASSWORD,
        connectString: DB_CONNECTION_STRING,
      });

      const currency = "'" + "010" + "'";
      const reportDate = "'" + "4-MAY-2023" + "'";
      const response = [];
      const resp = [];
      let arr0 = "";

      const data = await con.execute(`
      SELECT PL_DATE,ORDERING,PL_CODE,PL_DESC,LEVEL_INDICATOR,GROUP_ID,CLEAR_TO_CODE,ORDER_OF_PRINT,REPORT_CLASS,VARIANCE_PER,

 CASE WHEN ${currency}=GET_LOCALCURRENCY THEN  CURRENT_BALANCE_TODAY ELSE 
 CASE WHEN GET_RATE_FORM(GET_LOCALCURRENCY, ${currency}, 'FX')='M' THEN CURRENT_BALANCE_TODAY*GET_AQUI(GET_LOCALCURRENCY, ${currency}, 'FX', ${reportDate} ) 
    ELSE CURRENT_BALANCE_TODAY/GET_AQUI(GET_LOCALCURRENCY, ${currency}, 'FX', ${reportDate} ) END  END CURRENT_BALANCE_TODAY, 
    
  CASE WHEN${currency}=GET_LOCALCURRENCY THEN  PREVIOUS_YEAR_BALANCE ELSE 
 CASE WHEN GET_RATE_FORM(GET_LOCALCURRENCY, ${currency}, 'FX')='M' THEN PREVIOUS_YEAR_BALANCE*GET_AQUI(GET_LOCALCURRENCY, ${currency}, 'FX', ${reportDate} ) 
   ELSE PREVIOUS_YEAR_BALANCE/GET_AQUI(GET_LOCALCURRENCY, ${currency}, 'FX', ${reportDate}) END  END PREVIOUS_YEAR_BALANCE,
    
 CASE WHEN${currency}=GET_LOCALCURRENCY THEN  VARIANCE_AMOUNT ELSE 
 CASE WHEN GET_RATE_FORM(GET_LOCALCURRENCY, ${currency}, 'FX')='M' THEN VARIANCE_AMOUNT*GET_AQUI(GET_LOCALCURRENCY, ${currency}, 'FX', ${reportDate} )
   ELSE VARIANCE_AMOUNT/GET_AQUI(GET_LOCALCURRENCY, ${currency}, 'FX', ${reportDate} ) END  END VARIANCE_AMOUNT
   
FROM (

SELECT 
    A.PL_DATE, A.ORDERING, A.PL_CODE, 
   A.PL_DESC, A.LEVEL_INDICATOR, A.GROUP_ID, 
   A.CLEAR_TO_CODE,  A.ORDER_OF_PRINT, 
A.REPORT_CLASS, 
   SUM(NVL(A.CURRENT_BALANCE_TODAY,0))CURRENT_BALANCE_TODAY,SUM(NVL(PREVIOUS_YEAR_BALANCE,0)) PREVIOUS_YEAR_BALANCE,
   
    (SUM(NVL(A.CURRENT_BALANCE_TODAY,0))-SUM(NVL(PREVIOUS_YEAR_BALANCE,0))) VARIANCE_AMOUNT,
    
    CASE WHEN  SUM(NVL(A.CURRENT_BALANCE_TODAY,0))=0 THEN 100 WHEN SUM(NVL(A.PREVIOUS_YEAR_BALANCE,0))=0 THEN 100 
    WHEN SUM(NVL(PREVIOUS_YEAR_BALANCE,0))!=0 THEN
    ((SUM(NVL(A.CURRENT_BALANCE_TODAY,0))-SUM(NVL(PREVIOUS_YEAR_BALANCE,0)))/SUM(NVL(PREVIOUS_YEAR_BALANCE,0)))*100 END VARIANCE_PER
   
FROM VW_PNLH_BRK A 

WHERE A.PL_DATE=${reportDate} 
GROUP BY     A.PL_DATE, A.ORDERING, A.PL_CODE, 
   A.PL_DESC, A.LEVEL_INDICATOR, A.GROUP_ID, 
   A.CLEAR_TO_CODE,  A.ORDER_OF_PRINT, 
A.REPORT_CLASS
order by a.ordering,a.PL_code,a.clear_to_code,a.group_id )
  `);
      // --and CURRENT_BALANCE_TODAY!=0

      if (data) {
        for (let i = 0; i < data.rows.length; i++) {
          for (let x = 0; x < data.metaData.length; x++) {
            arr0 +=
              '"' +
              [data.metaData[x].name.toLowerCase()] +
              '" : "' +
              data.rows[i][x] +
              '",';
          }

          response.push(
            JSON.parse(
              "{" +
                arr0.replace(/(\r\n|\n|\r)/gm, "").replace(/,\s*$/, "") +
                "}"
            )
          );
          // console.log(response,"resssss")
        }
        res.send(response);
      } else {
        res.send(err);
      }
    } catch (err) {
      res.send(err);

      throw err;
    }
  }

  getProfitAndLossBreakdown();
});

// get balance sheet workings
app.post("/api/get-balance-sheet-workings", (req, res) => {
  async function getBalanceSheetWorkings() {
    let con;

    try {
      con = await oracledb.getConnection({
        user: DB_USER,
        password: DB_PASSWORD,
        connectString: DB_CONNECTION_STRING,
      });

      const currency = "'" + req.body.currency + "'";
      const reportDate = "'" + req.body.reportDate + "'";
      const response = [];
      const resp = [];
      let arr0 = "";

      const data = await con.execute(`
      SELECT ACCT_LINK,
CURRENCY_CODE,BP_CODE,BP,CHART_CODE,ACCOUNT_DESCRP,DOCUMENT_ID,CURRENCY_ISO, BP_DESC,ORDERING ,

 CASE WHEN${currency}=GET_LOCALCURRENCY THEN SUM(NVL(PREVIOUS_MONTH_BAL,0))  ELSE 
 CASE WHEN GET_RATE_FORM(GET_LOCALCURRENCY, ${currency}, 'FX')='M' 
 THEN SUM(NVL(PREVIOUS_MONTH_BAL,0))*GET_AQUI(GET_LOCALCURRENCY, ${currency}, 'FX',GET_MAX_ACM_MDATE(${reportDate}) )
  ELSE SUM(NVL(PREVIOUS_MONTH_BAL,0))/GET_AQUI(GET_LOCALCURRENCY, ${currency}, 'FX', GET_MAX_ACM_MDATE(${reportDate}) ) END  END PREVIOUS_YEAR_BALANCE,

 CASE WHEN${currency}=GET_LOCALCURRENCY THEN SUM(NVL(CURRENT_MONTH_BAL,0))  ELSE 
 CASE WHEN GET_RATE_FORM(GET_LOCALCURRENCY, ${currency}, 'FX')='M' 
 THEN SUM(NVL(CURRENT_MONTH_BAL,0))*GET_AQUI(GET_LOCALCURRENCY, ${currency}, 'FX',${reportDate} )
  ELSE SUM(NVL(CURRENT_MONTH_BAL,0))/GET_AQUI(GET_LOCALCURRENCY, ${currency}, 'FX', ${reportDate} ) END  END CURRENT_YEAR_BALANCE,
  
 ( CASE WHEN${currency}=GET_LOCALCURRENCY THEN SUM(NVL(CURRENT_MONTH_BAL,0))  ELSE 
 CASE WHEN GET_RATE_FORM(GET_LOCALCURRENCY, ${currency}, 'FX')='M' 
 THEN SUM(NVL(CURRENT_MONTH_BAL,0))*GET_AQUI(GET_LOCALCURRENCY, ${currency}, 'FX',${reportDate} )
  ELSE SUM(NVL(CURRENT_MONTH_BAL,0))/GET_AQUI(GET_LOCALCURRENCY, ${currency}, 'FX', ${reportDate} ) END  END -  CASE WHEN${currency}=GET_LOCALCURRENCY THEN SUM(NVL(PREVIOUS_MONTH_BAL,0))  ELSE 
 CASE WHEN GET_RATE_FORM(GET_LOCALCURRENCY, ${currency}, 'FX')='M' 
 THEN SUM(NVL(PREVIOUS_MONTH_BAL,0))*GET_AQUI(GET_LOCALCURRENCY, ${currency}, 'FX',GET_MAX_ACM_MDATE(${reportDate}) )
  ELSE SUM(NVL(PREVIOUS_MONTH_BAL,0))/GET_AQUI(GET_LOCALCURRENCY, ${currency}, 'FX', GET_MAX_ACM_MDATE(${reportDate}) ) END  END) VARIANCE_AMOUNT,
  
  GET_VARIANCE_PER_FORMULA( CASE WHEN${currency}=GET_LOCALCURRENCY THEN SUM(NVL(PREVIOUS_MONTH_BAL,0))  ELSE 
 CASE WHEN GET_RATE_FORM(GET_LOCALCURRENCY, ${currency}, 'FX')='M' 
 THEN SUM(NVL(PREVIOUS_MONTH_BAL,0))*GET_AQUI(GET_LOCALCURRENCY, ${currency}, 'FX',GET_MAX_ACM_MDATE(${reportDate}) )
  ELSE SUM(NVL(PREVIOUS_MONTH_BAL,0))/GET_AQUI(GET_LOCALCURRENCY, ${currency}, 'FX', GET_MAX_ACM_MDATE(${reportDate}) ) END  END ,
   CASE WHEN${currency}=GET_LOCALCURRENCY THEN SUM(NVL(CURRENT_MONTH_BAL,0))  ELSE 
 CASE WHEN GET_RATE_FORM(GET_LOCALCURRENCY, ${currency}, 'FX')='M' 
 THEN SUM(NVL(CURRENT_MONTH_BAL,0))*GET_AQUI(GET_LOCALCURRENCY, ${currency}, 'FX',${reportDate} )
  ELSE SUM(NVL(CURRENT_MONTH_BAL,0))/GET_AQUI(GET_LOCALCURRENCY, ${currency}, 'FX', ${reportDate} ) END  END ) VARIANCE_PER

 FROM (SELECT 
NULL PREVIOUS_MONTH_BAL,SUM(NVL(A.CLOSING_BALANCE_TODAY_FRGN,0))CURRENT_MONTH_BAL, A.ACCT_LINK,
   A.CURRENCY_CODE,A.BP, A.BP_CODE, A.CHART_CODE, A.ACCOUNT_DESCRP, A.DOCUMENT_ID,A.ISO CURRENCY_ISO, A.BP_DESC, A.ORDERING   
   FROM VW_TB_SUM_HIST_REP A WHERE BALANCE_DATE=${reportDate} AND BP='BS'
   
   GROUP BY  A.ACCT_LINK, A.BP,
   CURRENCY_CODE, BP_CODE, A.CHART_CODE, A.ACCOUNT_DESCRP, A.DOCUMENT_ID,A.ISO, A.BP_DESC, A.ORDERING 
   
UNION ALL

SELECT 
SUM(NVL(A.CLOSING_BALANCE_TODAY_FRGN,0)) PREVIOUS_MONTH_BAL, NULL CURRENT_MONTH_BAL, A.ACCT_LINK, 
   A.CURRENCY_CODE,A.BP, A.BP_CODE, A.CHART_CODE, A.ACCOUNT_DESCRP, A.DOCUMENT_ID,A.ISO CURRENCY_ISO, A.BP_DESC, A.ORDERING    
   FROM VW_TB_SUM_HIST_REP A
   WHERE BALANCE_DATE=GET_MAX_ACM_DATE(${reportDate}) AND BP='BS'
   GROUP BY A.ACCT_LINK,A.CURRENCY_CODE,A.BP, A.BP_CODE, A.CHART_CODE, A.ACCOUNT_DESCRP, A.DOCUMENT_ID,A.ISO, A.BP_DESC, A.ORDERING) 


 GROUP BY ACCT_LINK,CURRENCY_CODE,BP,BP_CODE,BP, CHART_CODE,ACCOUNT_DESCRP,DOCUMENT_ID,CURRENCY_ISO,BP_DESC,ORDERING 

ORDER BY ORDERING,CHART_CODE,DOCUMENT_ID
      `);

      if (data) {
        for (let i = 0; i < data.rows.length; i++) {
          for (let x = 0; x < data.metaData.length; x++) {
            arr0 +=
              '"' +
              [data.metaData[x].name.toLowerCase()] +
              '" : "' +
              data.rows[i][x] +
              '",';
          }

          response.push(
            JSON.parse(
              "{" +
                arr0.replace(/(\r\n|\n|\r)/gm, "").replace(/,\s*$/, "") +
                "}"
            )
          );
          // console.log(response,"resssss")
        }

        const groupedData = {};

        response.forEach((entry) => {
          const itemDescrp = entry.bp_code + " - " + entry.bp_desc;
          if (groupedData[itemDescrp]) {
            groupedData[itemDescrp].push(entry);
          } else {
            groupedData[itemDescrp] = [entry];
          }
        });

        const groupedResponse = Object.keys(groupedData).map((key) => ({
          item_descrp: key,
          data: groupedData[key],
        }));
        res.send(groupedResponse);
      } else {
        res.send(err);
      }
    } catch (err) {
      res.send(err);

      throw err;
    }
  }

  getBalanceSheetWorkings();
});

// get trial balance translated
app.post("/api/get-trial-balance-translated", (req, res) => {
  async function getTrialBalanceTranslated() {
    let con;

    try {
      con = await oracledb.getConnection({
        user: DB_USER,
        password: DB_PASSWORD,
        connectString: DB_CONNECTION_STRING,
      });

      const currency = "'" + req.body.currency + "'";
      const reportDate = "'" + req.body.reportDate + "'";
      const response = [];
      const resp = [];
      let arr0 = "";

      const data = await con.execute(`
SELECT 'Assets' as asset,bp,DOCUMENT_ID,torder tacct,acct_link,ACCOUNT_DESCRP, 
ISO, CUR_DESC,FCY_BALANCE,(CLOSING_BALANCE_TODAY_FRGN)LCY_BALANCE,
CASE WHEN GET_GL_REVAL(acct_link)='Y' THEN GET_AQUI(GET_LOCALCURRENCY, CURRENCY_CODE, 'FX', ${reportDate})
ELSE  (CLOSING_BALANCE_TODAY_FRGN/FCY_BALANCE) END EXCHANGE_RATE,
 
 CASE WHEN${currency}=GET_LOCALCURRENCY THEN  CR_FRGN  ELSE 
 CASE WHEN GET_RATE_FORM(GET_LOCALCURRENCY, ${currency}, 'FX')='M' THEN CR_FRGN*GET_AQUI(GET_LOCALCURRENCY, ${currency}, 'FX', ${reportDate} ) ELSE CR_FRGN/GET_AQUI(GET_LOCALCURRENCY, ${currency}, 'FX', ${reportDate} ) END  END CR, 
  
  CASE WHEN${currency}=GET_LOCALCURRENCY THEN  DB_FRGN  ELSE 
 CASE WHEN GET_RATE_FORM(GET_LOCALCURRENCY, ${currency}, 'FX')='M' THEN DB_FRGN*GET_AQUI(GET_LOCALCURRENCY, ${currency}, 'FX', ${reportDate} ) ELSE DB_FRGN/GET_AQUI(GET_LOCALCURRENCY, ${currency}, 'FX', ${reportDate} ) END  END DB
 
FROM VW_TB_BRK_HIST_REP A,BALANCE_SHEET B
where
balance_date = ${reportDate} AND  B.LINE_CATEGORY='A' AND A.BP_CODE=B.BS_CODE AND 
A.CHART_CODE NOT IN ('00000','60000','70000','80000','90000')

UNION ALL

SELECT 'Liabilities',bp,DOCUMENT_ID,torder tacct,acct_link,ACCOUNT_DESCRP, 
ISO, CUR_DESC,FCY_BALANCE,(CLOSING_BALANCE_TODAY_FRGN)LCY_BALANCE,
CASE WHEN GET_GL_REVAL(acct_link)='Y' THEN GET_AQUI(GET_LOCALCURRENCY, CURRENCY_CODE, 'FX', ${reportDate})
ELSE  (CLOSING_BALANCE_TODAY_FRGN/FCY_BALANCE) END EXCHANGE_RATE,
 
 CASE WHEN${currency}=GET_LOCALCURRENCY THEN  CR_FRGN  ELSE 
 CASE WHEN GET_RATE_FORM(GET_LOCALCURRENCY, ${currency}, 'FX')='M' THEN CR_FRGN*GET_AQUI(GET_LOCALCURRENCY, ${currency}, 'FX', ${reportDate} ) ELSE CR_FRGN/GET_AQUI(GET_LOCALCURRENCY, ${currency}, 'FX', ${reportDate} ) END  END CR, 
  
  CASE WHEN${currency}=GET_LOCALCURRENCY THEN  DB_FRGN  ELSE 
 CASE WHEN GET_RATE_FORM(GET_LOCALCURRENCY, ${currency}, 'FX')='M' THEN DB_FRGN*GET_AQUI(GET_LOCALCURRENCY, ${currency}, 'FX', ${reportDate} ) ELSE DB_FRGN/GET_AQUI(GET_LOCALCURRENCY, ${currency}, 'FX', ${reportDate} ) END  END DB
 
FROM VW_TB_BRK_HIST_REP A,BALANCE_SHEET B
where
balance_date = ${reportDate} AND  B.LINE_CATEGORY='L' AND A.BP_CODE=B.BS_CODE AND 
A.CHART_CODE NOT IN ('00000','60000','70000','80000','90000')


UNION ALL


SELECT 'Income',bp,DOCUMENT_ID,torder tacct,acct_link,ACCOUNT_DESCRP, 
ISO, CUR_DESC,FCY_BALANCE,(CLOSING_BALANCE_TODAY_FRGN)LCY_BALANCE,
CASE WHEN GET_GL_REVAL(acct_link)='Y' THEN GET_AQUI(GET_LOCALCURRENCY, CURRENCY_CODE, 'FX', ${reportDate})
ELSE  (CLOSING_BALANCE_TODAY_FRGN/FCY_BALANCE) END EXCHANGE_RATE,
 
 CASE WHEN${currency}=GET_LOCALCURRENCY THEN  CR_FRGN  ELSE 
 CASE WHEN GET_RATE_FORM(GET_LOCALCURRENCY, ${currency}, 'FX')='M' THEN CR_FRGN*GET_AQUI(GET_LOCALCURRENCY, ${currency}, 'FX', ${reportDate} ) ELSE CR_FRGN/GET_AQUI(GET_LOCALCURRENCY, ${currency}, 'FX', ${reportDate} ) END  END CR, 
  
  CASE WHEN${currency}=GET_LOCALCURRENCY THEN  DB_FRGN  ELSE 
 CASE WHEN GET_RATE_FORM(GET_LOCALCURRENCY, ${currency}, 'FX')='M' THEN DB_FRGN*GET_AQUI(GET_LOCALCURRENCY, ${currency}, 'FX', ${reportDate} ) ELSE DB_FRGN/GET_AQUI(GET_LOCALCURRENCY, ${currency}, 'FX', ${reportDate} ) END  END DB
 
FROM VW_TB_BRK_HIST_REP A,PROFIT_AND_LOSS B
where
balance_date = ${reportDate} AND  B.LINE_CATEGORY='I' AND A.BP_CODE=B.PL_CODE


UNION ALL

SELECT 'Expense',bp,DOCUMENT_ID,torder tacct,acct_link,ACCOUNT_DESCRP, 
ISO, CUR_DESC,FCY_BALANCE,(CLOSING_BALANCE_TODAY_FRGN)LCY_BALANCE,
CASE WHEN GET_GL_REVAL(acct_link)='Y' THEN GET_AQUI(GET_LOCALCURRENCY, CURRENCY_CODE, 'FX', ${reportDate})
ELSE  (CLOSING_BALANCE_TODAY_FRGN/FCY_BALANCE) END EXCHANGE_RATE,
 
 CASE WHEN${currency}=GET_LOCALCURRENCY THEN  CR_FRGN  ELSE 
 CASE WHEN GET_RATE_FORM(GET_LOCALCURRENCY, ${currency}, 'FX')='M' THEN CR_FRGN*GET_AQUI(GET_LOCALCURRENCY, ${currency}, 'FX', ${reportDate} ) ELSE CR_FRGN/GET_AQUI(GET_LOCALCURRENCY, ${currency}, 'FX', ${reportDate} ) END  END CR, 
  
  CASE WHEN${currency}=GET_LOCALCURRENCY THEN  DB_FRGN  ELSE 
 CASE WHEN GET_RATE_FORM(GET_LOCALCURRENCY, ${currency}, 'FX')='M' THEN DB_FRGN*GET_AQUI(GET_LOCALCURRENCY, ${currency}, 'FX', ${reportDate} ) ELSE DB_FRGN/GET_AQUI(GET_LOCALCURRENCY, ${currency}, 'FX', ${reportDate} ) END  END DB
 
FROM VW_TB_BRK_HIST_REP A,PROFIT_AND_LOSS B
where
balance_date = ${reportDate} AND  B.LINE_CATEGORY='E' AND A.BP_CODE=B.PL_CODE


UNION ALL

SELECT 'Equity',bp,DOCUMENT_ID,torder tacct,acct_link,ACCOUNT_DESCRP, 
ISO, CUR_DESC,FCY_BALANCE,(CLOSING_BALANCE_TODAY_FRGN)LCY_BALANCE,
CASE WHEN GET_GL_REVAL(acct_link)='Y' THEN GET_AQUI(GET_LOCALCURRENCY, CURRENCY_CODE, 'FX', ${reportDate})
ELSE  (CLOSING_BALANCE_TODAY_FRGN/FCY_BALANCE) END EXCHANGE_RATE,
 
 CASE WHEN${currency}=GET_LOCALCURRENCY THEN  CR_FRGN  ELSE 
 CASE WHEN GET_RATE_FORM(GET_LOCALCURRENCY, ${currency}, 'FX')='M' THEN CR_FRGN*GET_AQUI(GET_LOCALCURRENCY, ${currency}, 'FX', ${reportDate} ) ELSE CR_FRGN/GET_AQUI(GET_LOCALCURRENCY, ${currency}, 'FX', ${reportDate} ) END  END CR, 
  
  CASE WHEN${currency}=GET_LOCALCURRENCY THEN  DB_FRGN  ELSE 
 CASE WHEN GET_RATE_FORM(GET_LOCALCURRENCY, ${currency}, 'FX')='M' THEN DB_FRGN*GET_AQUI(GET_LOCALCURRENCY, ${currency}, 'FX', ${reportDate} ) ELSE DB_FRGN/GET_AQUI(GET_LOCALCURRENCY, ${currency}, 'FX', ${reportDate} ) END  END DB
 
FROM VW_TB_BRK_HIST_REP A,BALANCE_SHEET B
where
balance_date = ${reportDate} AND  B.LINE_CATEGORY='E' AND A.BP_CODE=B.BS_CODE AND 
A.CHART_CODE NOT IN ('00000','60000','70000','80000','90000')


UNION ALL


SELECT 'Contingent Assets',bp,DOCUMENT_ID,torder tacct,acct_link,ACCOUNT_DESCRP, 
ISO, CUR_DESC,FCY_BALANCE, (CLOSING_BALANCE_TODAY_FRGN)LCY_BALANCE,
CASE WHEN GET_GL_REVAL(acct_link)='Y' THEN GET_AQUI(GET_LOCALCURRENCY, CURRENCY_CODE, 'FX', ${reportDate})
ELSE  (CLOSING_BALANCE_TODAY_FRGN/FCY_BALANCE) END EXCHANGE_RATE,
 
 CASE WHEN${currency}=GET_LOCALCURRENCY THEN  CR_FRGN  ELSE 
 CASE WHEN GET_RATE_FORM(GET_LOCALCURRENCY, ${currency}, 'FX')='M' THEN CR_FRGN*GET_AQUI(GET_LOCALCURRENCY, ${currency}, 'FX', ${reportDate} ) ELSE CR_FRGN/GET_AQUI(GET_LOCALCURRENCY, ${currency}, 'FX', ${reportDate} ) END  END CR, 
  
  CASE WHEN${currency}=GET_LOCALCURRENCY THEN  DB_FRGN  ELSE 
 CASE WHEN GET_RATE_FORM(GET_LOCALCURRENCY, ${currency}, 'FX')='M' THEN CR_FRGN*GET_AQUI(GET_LOCALCURRENCY, ${currency}, 'FX', ${reportDate} ) ELSE DB_FRGN/GET_AQUI(GET_LOCALCURRENCY, ${currency}, 'FX', ${reportDate} ) END  END DB
 
FROM VW_TB_BRK_HIST_REP A,BALANCE_SHEET B
where
balance_date = ${reportDate} AND  B.LINE_CATEGORY='A' AND A.BP_CODE=B.BS_CODE AND 
A.CHART_CODE  IN ('60000')

UNION ALL

SELECT 'Contingent Liability',bp,DOCUMENT_ID,torder tacct,acct_link,ACCOUNT_DESCRP, 
ISO, CUR_DESC,FCY_BALANCE, (CLOSING_BALANCE_TODAY_FRGN)LCY_BALANCE,
CASE WHEN GET_GL_REVAL(acct_link)='Y' THEN GET_AQUI(GET_LOCALCURRENCY, CURRENCY_CODE, 'FX', ${reportDate})
ELSE  (CLOSING_BALANCE_TODAY_FRGN/FCY_BALANCE) END EXCHANGE_RATE,
 
 CASE WHEN${currency}=GET_LOCALCURRENCY THEN  CR_FRGN  ELSE 
 CASE WHEN GET_RATE_FORM(GET_LOCALCURRENCY, ${currency}, 'FX')='M' THEN CR_FRGN*GET_AQUI(GET_LOCALCURRENCY, ${currency}, 'FX', ${reportDate} ) ELSE CR_FRGN/GET_AQUI(GET_LOCALCURRENCY, ${currency}, 'FX', ${reportDate} ) END  END CR, 
  
  CASE WHEN${currency}=GET_LOCALCURRENCY THEN  DB_FRGN  ELSE 
 CASE WHEN GET_RATE_FORM(GET_LOCALCURRENCY, ${currency}, 'FX')='M' THEN CR_FRGN*GET_AQUI(GET_LOCALCURRENCY, ${currency}, 'FX', ${reportDate} ) ELSE DB_FRGN/GET_AQUI(GET_LOCALCURRENCY, ${currency}, 'FX', ${reportDate} ) END  END DB
 
FROM VW_TB_BRK_HIST_REP A,BALANCE_SHEET B
where
balance_date = ${reportDate} AND  B.LINE_CATEGORY='A' AND A.BP_CODE=B.BS_CODE AND 
A.CHART_CODE  IN ('70000')

UNION ALL

SELECT 'Position',bp,DOCUMENT_ID,torder tacct,acct_link,ACCOUNT_DESCRP, 
ISO, CUR_DESC,FCY_BALANCE, (CLOSING_BALANCE_TODAY_FRGN)LCY_BALANCE,
CASE WHEN GET_GL_REVAL(acct_link)='Y' THEN GET_AQUI(GET_LOCALCURRENCY, CURRENCY_CODE, 'FX', ${reportDate})
ELSE  (CLOSING_BALANCE_TODAY_FRGN/FCY_BALANCE) END EXCHANGE_RATE,
 
 CASE WHEN${currency}=GET_LOCALCURRENCY THEN  CR_FRGN  ELSE 
 CASE WHEN GET_RATE_FORM(GET_LOCALCURRENCY, ${currency}, 'FX')='M' THEN CR_FRGN*GET_AQUI(GET_LOCALCURRENCY, ${currency}, 'FX', ${reportDate} ) ELSE CR_FRGN/GET_AQUI(GET_LOCALCURRENCY, ${currency}, 'FX', ${reportDate} ) END  END CR, 
  
  CASE WHEN${currency}=GET_LOCALCURRENCY THEN  DB_FRGN  ELSE 
 CASE WHEN GET_RATE_FORM(GET_LOCALCURRENCY, ${currency}, 'FX')='M' THEN CR_FRGN*GET_AQUI(GET_LOCALCURRENCY, ${currency}, 'FX', ${reportDate} ) ELSE DB_FRGN/GET_AQUI(GET_LOCALCURRENCY, ${currency}, 'FX', ${reportDate} ) END  END DB
 
FROM VW_TB_BRK_HIST_REP A,BALANCE_SHEET B
where
balance_date = ${reportDate} AND  B.LINE_CATEGORY='L' AND A.BP_CODE=B.BS_CODE AND 
A.CHART_CODE  IN ('80000')

UNION ALL

SELECT 'Position Contra',bp,DOCUMENT_ID,torder tacct,acct_link,ACCOUNT_DESCRP, 
ISO, CUR_DESC,FCY_BALANCE, (CLOSING_BALANCE_TODAY_FRGN)LCY_BALANCE,
CASE WHEN GET_GL_REVAL(acct_link)='Y' THEN GET_AQUI(GET_LOCALCURRENCY, CURRENCY_CODE, 'FX', ${reportDate})
ELSE  (CLOSING_BALANCE_TODAY_FRGN/FCY_BALANCE) END EXCHANGE_RATE,
 
 CASE WHEN${currency}=GET_LOCALCURRENCY THEN  CR_FRGN  ELSE 
 CASE WHEN GET_RATE_FORM(GET_LOCALCURRENCY, ${currency}, 'FX')='M' THEN CR_FRGN*GET_AQUI(GET_LOCALCURRENCY, ${currency}, 'FX', ${reportDate} ) ELSE CR_FRGN/GET_AQUI(GET_LOCALCURRENCY, ${currency}, 'FX', ${reportDate} ) END  END CR, 
  
  CASE WHEN${currency}=GET_LOCALCURRENCY THEN  DB_FRGN  ELSE 
 CASE WHEN GET_RATE_FORM(GET_LOCALCURRENCY, ${currency}, 'FX')='M' THEN CR_FRGN*GET_AQUI(GET_LOCALCURRENCY, ${currency}, 'FX', ${reportDate} ) ELSE DB_FRGN/GET_AQUI(GET_LOCALCURRENCY, ${currency}, 'FX', ${reportDate} ) END  END DB
 
FROM VW_TB_BRK_HIST_REP A,BALANCE_SHEET B
where
balance_date = ${reportDate} AND  B.LINE_CATEGORY='A' AND A.BP_CODE=B.BS_CODE AND 
A.CHART_CODE  IN ('90000')

UNION ALL

SELECT 'Memo Accounts',bp,DOCUMENT_ID,torder tacct,acct_link,ACCOUNT_DESCRP, 
ISO, CUR_DESC,FCY_BALANCE, (CLOSING_BALANCE_TODAY_FRGN)LCY_BALANCE,
CASE WHEN GET_GL_REVAL(acct_link)='Y' THEN GET_AQUI(GET_LOCALCURRENCY, CURRENCY_CODE, 'FX', ${reportDate})
ELSE  (CLOSING_BALANCE_TODAY_FRGN/FCY_BALANCE) END EXCHANGE_RATE,
 CASE WHEN${currency}=GET_LOCALCURRENCY THEN  CR_FRGN  ELSE 
 CASE WHEN GET_RATE_FORM(GET_LOCALCURRENCY, ${currency}, 'FX')='M' THEN CR_FRGN*GET_AQUI(GET_LOCALCURRENCY, ${currency}, 'FX', ${reportDate} ) ELSE CR_FRGN/GET_AQUI(GET_LOCALCURRENCY, ${currency}, 'FX', ${reportDate} ) END  END CR, 
  
  CASE WHEN${currency}=GET_LOCALCURRENCY THEN  DB_FRGN  ELSE 
 CASE WHEN GET_RATE_FORM(GET_LOCALCURRENCY, ${currency}, 'FX')='M' THEN CR_FRGN*GET_AQUI(GET_LOCALCURRENCY, ${currency}, 'FX', ${reportDate} ) ELSE DB_FRGN/GET_AQUI(GET_LOCALCURRENCY, ${currency}, 'FX', ${reportDate} ) END  END DB
 
FROM VW_TB_BRK_HIST_REP A,BALANCE_SHEET B
where
balance_date = ${reportDate} AND  B.LINE_CATEGORY='A' AND A.BP_CODE=B.BS_CODE AND 
A.CHART_CODE  IN ('00000')

order by bp,TACCT,DOCUMENT_ID,acct_link,ISO,account_descrp
      `);

      // return data;

      if (data) {
        for (let i = 0; i < data.rows.length; i++) {
          for (let x = 0; x < data.metaData.length; x++) {
            arr0 +=
              '"' +
              [data.metaData[x].name.toLowerCase()] +
              '" : "' +
              data.rows[i][x] +
              '",';
          }

          response.push(
            JSON.parse(
              "{" +
                arr0.replace(/(\r\n|\n|\r)/gm, "").replace(/,\s*$/, "") +
                "}"
            )
          );
          // console.log(response,"resssss")
        }

        const groupedData = {};

        response.forEach((entry) => {
          const itemDescrp = entry.asset;
          if (groupedData[itemDescrp]) {
            groupedData[itemDescrp].push(entry);
          } else {
            groupedData[itemDescrp] = [entry];
          }
        });

        const groupedResponse = Object.keys(groupedData).map((key) => ({
          item_descrp: key,
          data: groupedData[key],
        }));

        res.send(groupedResponse);
      } else {
        res.send(err);
        // console.log("error");
      }
    } catch (err) {
      res.send(err);

      throw err;
    }
  }

  getTrialBalanceTranslated();
});

// get OVERDRAWN ACCOUNTS
app.post("/api/get-overdrawn-accounts", (req, res) => {
  async function getOverdrawnAccounts() {
    let con;

    try {
      con = await oracledb.getConnection({
        user: DB_USER,
        password: DB_PASSWORD,
        connectString: DB_CONNECTION_STRING,
      });

      const batchNumber = "'" + req.body.batchNumber + "'";
      // const reportDate = "'" + req.body.reportDate + "'";
      const response = [];
      const resp = [];
      let arr0 = "";

      const data = await con.execute(`
      SELECT ACCT_LINK,BATCH_NO,AMT,BAL,(TO_NUMBER( REPLACE(BAL_AFTER,'NAF',0)) + AMT) BAL_AFTER FROM vw_after_trans WHERE BATCH_NO=${batchNumber} and bal_after < 0
      `);

      if (data) {
        for (let i = 0; i < data.rows.length; i++) {
          for (let x = 0; x < data.metaData.length; x++) {
            arr0 +=
              '"' +
              [data.metaData[x].name.toLowerCase()] +
              '" : "' +
              data.rows[i][x] +
              '",';
          }

          response.push(
            JSON.parse(
              "{" +
                arr0.replace(/(\r\n|\n|\r)/gm, "").replace(/,\s*$/, "") +
                "}"
            )
          );
          // console.log(response,"resssss")
        }

        res.send(response);
      } else {
        res.send(err);
        // console.log("error");
      }
    } catch (err) {
      res.send(err);

      throw err;
    }
  }

  getOverdrawnAccounts();
});

app.post("/api/get-statement-of-financial-position", (req, res) => {
  async function getSasraFinancialPosition() {
    let con;

    try {
      con = await oracledb.getConnection({
        user: DB_USER,
        password: DB_PASSWORD,
        connectString: DB_CONNECTION_STRING,
      });

      const returnCode = "'" + req.body.returnCode + "'";
      const reportDate = "'" + req.body.reportDate + "'";
      const response = [];
      const resp = [];
      let arr0 = "";

      const data = await con.execute(`
      SELECT 
ORDERING,LEVEL_ID,RETURN_CODE,ITEM_CODE,ITEM_DESCRP,GROUP_ID,  
    ITEM_CODE, 
   REPORT_CLASS,
  GET_CURRENCY_ISO(CURRENCY_CODE) CURRENCY_ISO, CURRENT_BALANCE_TODAY CLOSING_BALANCE_TODAY, 
  CURRENT_BALANCE_TODAY_FRGN CLOSING_BALANCE_TODAY_FRGN
FROM VW_CBR_REPORTS
WHERE REPORT_DATE=${reportDate} AND RETURN_CODE=${returnCode}
order by ordering,RETURN_CODE
  `);
      // --and CURRENT_BALANCE_TODAY!=0

      if (data) {
        console.log(data, "data");
      } else {
        console.log("no data");
      }

      // console.log(data);

      if (data) {
        for (let i = 0; i < data.rows.length; i++) {
          for (let x = 0; x < data.metaData.length; x++) {
            arr0 +=
              '"' +
              [data.metaData[x].name.toLowerCase()] +
              '" : "' +
              data.rows[i][x] +
              '",';
          }

          response.push(
            JSON.parse(
              "{" +
                arr0.replace(/(\r\n|\n|\r)/gm, "").replace(/,\s*$/, "") +
                "}"
            )
          );
          // console.log(response,"resssss")
        }
        res.send(response);
      } else {
        res.send(err);
        console.log("error");
      }
    } catch (err) {
      res.send(err);

      throw err;
    }
  }

  getSasraFinancialPosition();
});

app.get("/api/pep-riskdetails", async (req, res) => {
  try {
    const conn = await oracledb.getConnection({
      user: "BANKOWNER",
      password: "pass1234",
      connectString: "192.168.1.60:9534/UNSGP",
    });

    const result = await conn.execute(`select  ACTUAL_CODE, DESCRIPTION, 
    SHORT_DESCRP, CLASS_CODE,'N' from TB_RISK_CALC_SETUP where CODE_TYPE='PEP'`);

    const data = result.rows.map((row) => ({
      customerNumber: row[3],
      actualCode: `${row[0]}`,
      description: `${row[1]} `,
      shortDescp: row[2],
      classCode: row[4],
      flag: row[4],
    }));

    res.json(data);
  } catch (error) {
    console.log(error);
    res.status(500).send("Internal server error");
  }
});

///////////////////////////////////////////////////////////////////

//get-product-type lov
app.get("/get-product-type", (req, res) => {
  let getProductType = async () => {
    try {
      const db = await oracledb.getConnection({
        user: DB_USER,
        password: DB_PASSWORD,
        connectString: DB_CONNECTION_STRING,
      });

      const response = [];
      var arr0 = [];

      // node native promisify
      const execute = util.promisify(db.execute).bind(db);

      const data = await execute(
        `SELECT ALL TB_PRODUCT.PROD_CODE as value, 
TB_PRODUCT.DESCRIPTION as label
FROM TB_PRODUCT WHERE APP_FLAG='Y' AND TB_PRODUCT.PROD_GROUP='3'
ORDER BY TB_PRODUCT.PROD_CODE`
      );

      if (data.rows) {
        for (let i = 0; i < data.rows.length; i++) {
          console.log(data.rows.length);
          for (let x = 0; x < data.metaData.length; x++) {
            arr0 +=
              '"' +
              [data.metaData[x].name.toLowerCase()] +
              '" : "' +
              data.rows[i][x] +
              '",';
          }

          response.push(JSON.parse("{" + arr0.replace(/,\s*$/, "") + "}"));
        }

        res.send(response);
        // res.send(data);
      } else {
        res.send("Something went wrong... Nothing was returned!!");
      }
    } finally {
      // conn.end();
    }
  };

  getProductType();
});

////////////////////////////////////////////////////////////////////////////////////////////////////////
// TOD CREATION

// account numbers tod
app.get("/api/get-acct-numbers-tod", (req, res) => {
  async function getTodAccts() {
    let con;
    try {
      con = await oracledb.getConnection({
        user: DB_USER,
        password: DB_PASSWORD,
        connectString: DB_CONNECTION_STRING,
        timeout: DB_CONNECTION_TIMEOUT,
      });

      const data = await con.execute(
        `select acct_link || ' - ' || legal_form || ' - ' || currency_code || ' - ' || prod_code || ' - ' || customer_number as value ,acct_link || ' - ' || account_descrp as "label"
        from g_ledger b
        where nvl(b.status_indicator,'N') not in ('CLOS','DO','BO','DR')
        and b.prod_code in (select prod_code from tb_product where allow_overdraft='Y')
        and exists(select 1 from charges_accruals a
        where a.type_of_acct = b.type_of_acct
        and a.legal_form = b.legal_form
        and a.currency = b.currency_code)`
      );

      if (data) {
        let arr0 = "";
        let arr = [];

        for (let i = 0; i < data.rows.length; i++) {
          let obj = {};
          for (let x = 0; x < data.metaData.length; x++) {
            obj = {
              ...obj,
              [data.metaData[x].name?.toLowerCase()]: data.rows[i][x],
            };
          }
          arr.push(obj);
        }
        res.send(arr);
      } else {
        res.send("Something went wrong... Nothing was returned!!");
      }
    } catch (err) {
      res.send(err.toString());
    }
  }
  getTodAccts();
});

// get the other stuff
app.post("/api/get-other-tod-details", async (req, res) => {
  const { key, product_code, currency_code } = req.body;

  let response_code;
  let response_message;
  try {
    const db = await oracledb.getConnection({
      user: DB_USER,
      password: DB_PASSWORD,
      connectString: DB_CONNECTION_STRING,
      timeout: DB_CONNECTION_TIMEOUT,
    });

    const execute = util.promisify(db.execute).bind(db);

    // get product description
    if (key === "get-prod-description") {
      const data = await execute(
        `select description from tb_product where allow_overdraft='Y' and prod_code = :product_code`,
        {
          product_code,
        }
      );
      if (data) {
        let arr0 = "";
        let arr = [];

        for (let i = 0; i < data.rows.length; i++) {
          let obj = {};
          for (let x = 0; x < data.metaData.length; x++) {
            obj = {
              ...obj,
              [data.metaData[x].name?.toLowerCase()]: data.rows[i][x],
            };
          }
          arr.push(obj);
        }
        res.send(arr);
      } else {
        res.send("Something went wrong... Nothing was returned!!");
      }
    }

    // get currency description
    if (key === "get-currency-description") {
      const data = await execute(
        `select GET_CURRENCYDESC(currency_code) as currency from tb_currency where currency_code = :currency_code`,
        {
          currency_code,
        }
      );
      if (data) {
        let arr0 = "";
        let arr = [];

        for (let i = 0; i < data.rows.length; i++) {
          let obj = {};
          for (let x = 0; x < data.metaData.length; x++) {
            obj = {
              ...obj,
              [data.metaData[x].name?.toLowerCase()]: data.rows[i][x],
            };
          }
          arr.push(obj);
        }
        res.send(arr);
      } else {
        res.send("Something went wrong... Nothing was returned!!");
      }
    }
  } catch (err) {
    console.log(err);
    res.send({ "An error occurred": err });
  }
});

// get purposes
app.get("/api/get-purposes-tod", (req, res) => {
  async function getTodAccts() {
    let con;
    try {
      con = await oracledb.getConnection({
        user: DB_USER,
        password: DB_PASSWORD,
        connectString: DB_CONNECTION_STRING,
        timeout: DB_CONNECTION_TIMEOUT,
      });

      const data = await con.execute(
        `SELECT ALL  ACTUAL_CODE as value, DESCRIPTION as label
        FROM CODE_DESC WHERE CODE_DESC.CODE_TYPE='PUR'`
      );

      if (data) {
        let arr0 = "";
        let arr = [];

        for (let i = 0; i < data.rows.length; i++) {
          let obj = {};
          for (let x = 0; x < data.metaData.length; x++) {
            obj = {
              ...obj,
              [data.metaData[x].name?.toLowerCase()]: data.rows[i][x],
            };
          }
          arr.push(obj);
        }
        res.send(arr);
      } else {
        res.send("Something went wrong... Nothing was returned!!");
      }
    } catch (err) {
      res.send(err.toString());
    }
  }
  getTodAccts();
});

// get int rate tod creation
app.get("/api/get-int-rate-tod", (req, res) => {
  async function getTodAccts() {
    let con;
    try {
      con = await oracledb.getConnection({
        user: DB_USER,
        password: DB_PASSWORD,
        connectString: DB_CONNECTION_STRING,
        timeout: DB_CONNECTION_TIMEOUT,
      });

      const data = await con.execute(`select get_baserate as rate  from dual`);

      if (data) {
        let arr0 = "";
        let arr = [];

        for (let i = 0; i < data.rows.length; i++) {
          let obj = {};
          for (let x = 0; x < data.metaData.length; x++) {
            obj = {
              ...obj,
              [data.metaData[x].name?.toLowerCase()]: data.rows[i][x],
            };
          }
          arr.push(obj);
        }
        res.send(arr);
      } else {
        res.send("Something went wrong... Nothing was returned!!");
      }
    } catch (err) {
      res.send(err.toString());
    }
  }
  getTodAccts();
});

// next review date
app.post("/api/get-next-review-date-tod", (req, res) => {
  const { expiry_date, start_date } = req.body;
  async function getTodAccts() {
    let con;
    try {
      con = await oracledb.getConnection({
        user: DB_USER,
        password: DB_PASSWORD,
        connectString: DB_CONNECTION_STRING,
        timeout: DB_CONNECTION_TIMEOUT,
      });

      const data = await con.execute(
        `SELECT 
  CASE 
    WHEN TO_DATE(:expiry_date, 'DD-MON-YYYY') - 7 < TO_DATE(:start_date, 'DD-MON-YYYY')
    THEN :expiry_date 
    ELSE TO_CHAR(TO_DATE(:expiry_date, 'DD-MON-YYYY') - 7, 'DD-MON-YYYY') 
  END AS Result
FROM dual
      `,
        {
          expiry_date,
          start_date,
        }
      );

      if (data) {
        let arr0 = "";
        let arr = [];

        for (let i = 0; i < data.rows.length; i++) {
          let obj = {};
          for (let x = 0; x < data.metaData.length; x++) {
            obj = {
              ...obj,
              [data.metaData[x].name?.toLowerCase()]: data.rows[i][x],
            };
          }
          arr.push(obj);
        }
        res.send(arr);
      } else {
        res.send("Something went wrong... Nothing was returned!!");
      }
    } catch (err) {
      res.send(err.toString());
    }
  }
  getTodAccts();
});

// get limit number
app.get("/api/get-limit-no-tod", (req, res) => {
  async function getTodAccts() {
    let con;
    try {
      con = await oracledb.getConnection({
        user: DB_USER,
        password: DB_PASSWORD,
        connectString: DB_CONNECTION_STRING,
        timeout: DB_CONNECTION_TIMEOUT,
      });

      const data = await con.execute(
        `select  upper('ADV'||get_batchno) as limit_no from dual`
      );

      if (data) {
        let arr0 = "";
        let arr = [];

        for (let i = 0; i < data.rows.length; i++) {
          let obj = {};
          for (let x = 0; x < data.metaData.length; x++) {
            obj = {
              ...obj,
              [data.metaData[x].name?.toLowerCase()]: data.rows[i][x],
            };
          }
          arr.push(obj);
        }
        res.send(arr);
      } else {
        res.send("Something went wrong... Nothing was returned!!");
      }
    } catch (err) {
      res.send(err.toString());
    }
  }
  getTodAccts();
});

// get batch number - TORSUD
app.get("/api/get-batch-no-tod", (req, res) => {
  async function getTodAccts() {
    let con;
    try {
      con = await oracledb.getConnection({
        user: DB_USER,
        password: DB_PASSWORD,
        connectString: DB_CONNECTION_STRING,
        timeout: DB_CONNECTION_TIMEOUT,
      });

      const data = await con.execute(
        `SELECT Get_batchno as unique_ref FROM dual`
      );

      if (data) {
        let arr0 = "";
        let arr = [];

        for (let i = 0; i < data.rows.length; i++) {
          let obj = {};
          for (let x = 0; x < data.metaData.length; x++) {
            obj = {
              ...obj,
              [data.metaData[x].name?.toLowerCase()]: data.rows[i][x],
            };
          }
          arr.push(obj);
        }
        res.send(arr);
      } else {
        res.send("Something went wrong... Nothing was returned!!");
      }
    } catch (err) {
      res.send(err.toString());
    }
  }
  getTodAccts();
});

// customer monthly statistics
app.post("/api/get-cust-monthly-statistics-tod", (req, res) => {
  const { acct_link } = req.body;
  async function getTodAccts() {
    let con;
    try {
      con = await oracledb.getConnection({
        user: DB_USER,
        password: DB_PASSWORD,
        connectString: DB_CONNECTION_STRING,
        timeout: DB_CONNECTION_TIMEOUT,
      });

      const data = await con.execute(
        `select * from VW_STATISTICS_MONTH where acct_link = :acct_link and rownum<=6`,
        {
          acct_link,
        }
      );

      if (data) {
        let arr0 = "";
        let arr = [];

        for (let i = 0; i < data.rows.length; i++) {
          let obj = {};
          for (let x = 0; x < data.metaData.length; x++) {
            obj = {
              ...obj,
              [data.metaData[x].name?.toLowerCase()]: data.rows[i][x],
            };
          }
          arr.push(obj);
        }
        res.send(arr);
      } else {
        res.send("Something went wrong... Nothing was returned!!");
      }
    } catch (err) {
      res.send(err.toString());
    }
  }
  getTodAccts();
});

// Existing Facility Details
app.post("/api/get-existing-facility-deets-tod", (req, res) => {
  const { customer_number } = req.body;
  async function getTodAccts() {
    let con;
    try {
      con = await oracledb.getConnection({
        user: DB_USER,
        password: DB_PASSWORD,
        connectString: DB_CONNECTION_STRING,
        timeout: DB_CONNECTION_TIMEOUT,
      });

      const data = await con.execute(
        `select * from vw_facility_summary where customer_number = :customer_number`,
        {
          customer_number,
        }
      );

      if (data) {
        let arr0 = "";
        let arr = [];

        for (let i = 0; i < data.rows.length; i++) {
          let obj = {};
          for (let x = 0; x < data.metaData.length; x++) {
            obj = {
              ...obj,
              [data.metaData[x].name?.toLowerCase()]: data.rows[i][x],
            };
          }
          arr.push(obj);
        }
        res.send(arr);
      } else {
        res.send("Something went wrong... Nothing was returned!!");
      }
    } catch (err) {
      res.send(err.toString());
    }
  }
  getTodAccts();
});

// Proposed Facility
app.post("/api/get-proposed-facility-tod", (req, res) => {
  const { acct_link, limit_no } = req.body;
  async function getTodAccts() {
    let con;
    try {
      con = await oracledb.getConnection({
        user: DB_USER,
        password: DB_PASSWORD,
        connectString: DB_CONNECTION_STRING,
        timeout: DB_CONNECTION_TIMEOUT,
      });

      const data = await con.execute(
        `select * from vw_facility_app_summary1 where customer_number =:acct_link AND LOAN_APP_NO = :limit_no`,
        {
          acct_link,
          limit_no,
        }
      );

      if (data) {
        let arr0 = "";
        let arr = [];

        for (let i = 0; i < data.rows.length; i++) {
          let obj = {};
          for (let x = 0; x < data.metaData.length; x++) {
            obj = {
              ...obj,
              [data.metaData[x].name?.toLowerCase()]: data.rows[i][x],
            };
          }
          arr.push(obj);
        }
        res.send(arr);
      } else {
        res.send("Something went wrong... Nothing was returned!!");
      }
    } catch (err) {
      res.send(err.toString());
    }
  }
  getTodAccts();
});

//////////////////////////////////////////////////////////////////////////////////////////////////////////
///

// LOAN GENERAL ENQUIRY ENDPOINTS - DEC 2023
app.post("/api/get-office", (req, res) => {
  const { loan_app_no } = req.body;

  let viewAllFacilityLoans = async () => {
    try {
      const db = await oracledb.getConnection({
        user: DB_USER,
        password: DB_PASSWORD,
        connectString: DB_CONNECTION_STRING,
        timeout: DB_CONNECTION_TIMEOUT,
      });

      const response = [];
      let arr0 = "";

      // node native promisify
      const execute = util.promisify(db.execute).bind(db);

      const data = await execute(
        `select NVL(GET_ARMNAME(get_relationofficer(:loan_app_no)),'OFFICE') as office from dual`,
        {
          loan_app_no,
        }
      );

      if (data) {
        for (let i = 0; i < data.rows.length; i++) {
          for (let x = 0; x < data.metaData.length; x++) {
            arr0 +=
              '"' +
              [data.metaData[x].name.toLowerCase()] +
              '" : "' +
              data.rows[i][x] +
              '",';
          }

          response.push(
            JSON.parse(
              "{" +
                arr0.replace(/(\r\n|\n|\r)/gm, "").replace(/,\s*$/, "") +
                "}"
            )
          );
        }

        res.send(response);
      } else {
        res.send("Something went wrong... Nothing was returned!!");
      }
    } finally {
      // conn.end();
    }
  };

  viewAllFacilityLoans();
});

//////////////////////////////////////////////////////////////////////////////////////////////////////////

// OVERDRAFT CONTROLS
//DOCUMENT SET
app.get("/api/get-document-set", (req, res) => {
  async function getDocSet() {
    let con;
    try {
      con = await oracledb.getConnection({
        user: DB_USER,
        password: DB_PASSWORD,
        connectString: DB_CONNECTION_STRING,
        timeout: DB_CONNECTION_TIMEOUT,
      });

      const data = await con.execute(
        `SELECT DOC_CODE value,  DOC_CODE || ' - ' || SET_DESCRIPTION label
        FROM  doc_control
        where PROD_CODE is null and  SET_DESCRIPTION is not null
        and process = 'ADV'`
      );

      if (data) {
        let arr0 = "";
        let arr = [];

        for (let i = 0; i < data.rows.length; i++) {
          let obj = {};
          for (let x = 0; x < data.metaData.length; x++) {
            obj = {
              ...obj,
              [data.metaData[x].name?.toLowerCase()]: data.rows[i][x],
            };
          }
          arr.push(obj);
        }
        res.send(arr);
      } else {
        res.send("Something went wrong... Nothing was returned!!");
      }
    } catch (err) {
      res.send(err.toString());
    }
  }
  getDocSet();
});

// GET FEES DESC
app.get("/api/get-fee-description", (req, res) => {
  async function getDocSet() {
    let con;
    try {
      con = await oracledb.getConnection({
        user: DB_USER,
        password: DB_PASSWORD,
        connectString: DB_CONNECTION_STRING,
        timeout: DB_CONNECTION_TIMEOUT,
      });

      const data = await con.execute(
        `SELECT ACTUAL_CODE as value ,DESCRIPTION as label FROM CODE_DESC
        WHERE CODE_TYPE='LFE'
        AND STATUS ='Y'`
      );

      if (data) {
        let arr0 = "";
        let arr = [];

        for (let i = 0; i < data.rows.length; i++) {
          let obj = {};
          for (let x = 0; x < data.metaData.length; x++) {
            obj = {
              ...obj,
              [data.metaData[x].name?.toLowerCase()]: data.rows[i][x],
            };
          }
          arr.push(obj);
        }
        res.send(arr);
      } else {
        res.send("Something went wrong... Nothing was returned!!");
      }
    } catch (err) {
      res.send(err.toString());
    }
  }
  getDocSet();
});

// GET FEES ACCTS
app.post("/api/get-fees-acct", (req, res) => {
  const { currencyCode } = req.body;
  async function getDocSet() {
    let con;
    try {
      con = await oracledb.getConnection({
        user: DB_USER,
        password: DB_PASSWORD,
        connectString: DB_CONNECTION_STRING,
        timeout: DB_CONNECTION_TIMEOUT,
      });

      const data = await con.execute(
        `SELECT A.ACCT_LINK as value,A.ACCOUNT_DESCRP as label FROM G_LEDGER A,PARAMETERS B
        WHERE A.TYPE_OF_ACCT= B.GENERAL_LEDGER_ACCOUNT
        AND A.LEVEL_IDENTIFIER='D'
        AND A.CURRENCY_CODE = :currencyCode
        AND get_coa_chartcode(A.ACCT_LINK) ='30000'`,
        { currencyCode }
      );

      if (data) {
        let arr0 = "";
        let arr = [];

        for (let i = 0; i < data.rows.length; i++) {
          let obj = {};
          for (let x = 0; x < data.metaData.length; x++) {
            obj = {
              ...obj,
              [data.metaData[x].name?.toLowerCase()]: data.rows[i][x],
            };
          }
          arr.push(obj);
        }
        res.send(arr);
      } else {
        res.send("Something went wrong... Nothing was returned!!");
      }
    } catch (err) {
      res.send(err.toString());
    }
  }
  getDocSet();
});

// GET WRITE OFF ACCTS
app.post("/api/get-write-off-acct", (req, res) => {
  const { currencyCode } = req.body;
  async function getDocSet() {
    let con;
    try {
      con = await oracledb.getConnection({
        user: DB_USER,
        password: DB_PASSWORD,
        connectString: DB_CONNECTION_STRING,
        timeout: DB_CONNECTION_TIMEOUT,
      });

      const data = await con.execute(
        `SELECT A.ACCT_LINK as value ,A.ACCOUNT_DESCRP as label FROM G_LEDGER A,PARAMETERS B
        WHERE A.TYPE_OF_ACCT= B.GENERAL_LEDGER_ACCOUNT
        AND A.LEVEL_IDENTIFIER='D'
        AND A.CURRENCY_CODE = :currencyCode
        AND get_coa_chartcode(A.ACCT_LINK)  IN( '30000','20000')`,
        { currencyCode }
      );

      if (data) {
        let arr0 = "";
        let arr = [];

        for (let i = 0; i < data.rows.length; i++) {
          let obj = {};
          for (let x = 0; x < data.metaData.length; x++) {
            obj = {
              ...obj,
              [data.metaData[x].name?.toLowerCase()]: data.rows[i][x],
            };
          }
          arr.push(obj);
        }
        res.send(arr);
      } else {
        res.send("Something went wrong... Nothing was returned!!");
      }
    } catch (err) {
      res.send(err.toString());
    }
  }
  getDocSet();
});

// GET RECOVERY ACCTS
app.post("/api/get-recovery-acct", (req, res) => {
  const { currencyCode } = req.body;
  async function getDocSet() {
    let con;
    try {
      con = await oracledb.getConnection({
        user: DB_USER,
        password: DB_PASSWORD,
        connectString: DB_CONNECTION_STRING,
        timeout: DB_CONNECTION_TIMEOUT,
      });

      const data = await con.execute(
        `SELECT A.ACCT_LINK as value,A.ACCOUNT_DESCRP as label FROM G_LEDGER A,PARAMETERS B
        WHERE A.TYPE_OF_ACCT= B.GENERAL_LEDGER_ACCOUNT
        AND A.LEVEL_IDENTIFIER='D'
        AND A.CURRENCY_CODE = :currencyCode
        AND get_coa_chartcode(A.ACCT_LINK)  IN( '30000','20000')`,
        { currencyCode }
      );

      if (data) {
        let arr0 = "";
        let arr = [];

        for (let i = 0; i < data.rows.length; i++) {
          let obj = {};
          for (let x = 0; x < data.metaData.length; x++) {
            obj = {
              ...obj,
              [data.metaData[x].name?.toLowerCase()]: data.rows[i][x],
            };
          }
          arr.push(obj);
        }
        res.send(arr);
      } else {
        res.send("Something went wrong... Nothing was returned!!");
      }
    } catch (err) {
      res.send(err.toString());
    }
  }
  getDocSet();
});

// GET EXCESS OD
app.post("/api/get-excess-od-accts", (req, res) => {
  const { currencyCode } = req.body;
  async function getDocSet() {
    let con;
    try {
      con = await oracledb.getConnection({
        user: DB_USER,
        password: DB_PASSWORD,
        connectString: DB_CONNECTION_STRING,
        timeout: DB_CONNECTION_TIMEOUT,
      });

      const data = await con.execute(
        `SELECT A.ACCT_LINK as value,A.ACCOUNT_DESCRP as label FROM G_LEDGER A,PARAMETERS B
        WHERE A.TYPE_OF_ACCT= B.GENERAL_LEDGER_ACCOUNT
        AND A.LEVEL_IDENTIFIER='D'
        AND A.CURRENCY_CODE = :currencyCode
        AND get_coa_chartcode(A.ACCT_LINK) ='30000'`,
        { currencyCode }
      );

      if (data) {
        let arr0 = "";
        let arr = [];

        for (let i = 0; i < data.rows.length; i++) {
          let obj = {};
          for (let x = 0; x < data.metaData.length; x++) {
            obj = {
              ...obj,
              [data.metaData[x].name?.toLowerCase()]: data.rows[i][x],
            };
          }
          arr.push(obj);
        }
        res.send(arr);
      } else {
        res.send("Something went wrong... Nothing was returned!!");
      }
    } catch (err) {
      res.send(err.toString());
    }
  }
  getDocSet();
});

// get data 1
app.post("/api/get-overdraft-controls", (req, res) => {
  const { currencyCode } = req.body;
  async function getDocSet() {
    let con;
    try {
      con = await oracledb.getConnection({
        user: DB_USER,
        password: DB_PASSWORD,
        connectString: DB_CONNECTION_STRING,
        timeout: DB_CONNECTION_TIMEOUT,
      });

      const data = await con.execute(
        `select * from overdraft_controls where type_of_facility ='02' AND CURRENCY = :currencyCode`,
        { currencyCode }
      );

      if (data) {
        let arr0 = "";
        let arr = [];

        for (let i = 0; i < data.rows.length; i++) {
          let obj = {};
          for (let x = 0; x < data.metaData.length; x++) {
            obj = {
              ...obj,
              [data.metaData[x].name?.toLowerCase()]: data.rows[i][x],
            };
          }
          arr.push(obj);
        }
        res.send(arr);
      } else {
        res.send("Something went wrong... Nothing was returned!!");
      }
    } catch (err) {
      res.send(err.toString());
    }
  }
  getDocSet();
});

//////////////////////////////////////////////////////////////////////////////////////////////////////////

//get-currency
app.get("/get-deal-currency", (req, res) => {
  let getProductType = async () => {
    try {
      const db = await oracledb.getConnection({
        user: DB_USER,
        password: DB_PASSWORD,
        connectString: DB_CONNECTION_STRING,
      });

      const response = [];

      // node native promisify
      const execute = util.promisify(db.execute).bind(db);

      const data = await execute(
        "SELECT CURRENCY_CODE, DESCRIPTION FROM TB_CURRENCY WHERE currency_code = (select local_curr_code from parameters)"
      );

      if (data.rows) {
        data.rows.map((res) => {
          // response.push(JSON.parse('{' + res.replace(/,\s*$/, "") + '}'));
          response.push(res.join(" - "));
        });
        res.send(response);
      } else {
        res.send("Something went wrong... Nothing was returned!!");
      }
    } finally {
      // conn.end();
    }
  };

  getProductType();
});

//sch-interest-freq
app.get("/get-sch-interest-freq", (req, res) => {
  let getProductType = async () => {
    try {
      const db = await oracledb.getConnection({
        user: DB_USER,
        password: DB_PASSWORD,
        connectString: DB_CONNECTION_STRING,
      });

      const response = [];
      var arr0 = [];

      // node native promisify
      const execute = util.promisify(db.execute).bind(db);

      const data = await execute(
        `SELECT ALL CODE_DESC.ACTUAL_CODE as value, CODE_DESC.DESCRIPTION as label FROM CODE_DESC where code_type = 'PRD' AND NVL(STATUS, 'Y')='Y'`
      );

      if (data.rows) {
        for (let i = 0; i < data.rows.length; i++) {
          console.log(data.rows.length);
          for (let x = 0; x < data.metaData.length; x++) {
            arr0 +=
              '"' +
              [data.metaData[x].name.toLowerCase()] +
              '" : "' +
              data.rows[i][x] +
              '",';
          }

          response.push(JSON.parse("{" + arr0.replace(/,\s*$/, "") + "}"));
        }

        res.send(response);
      } else {
        res.send("Something went wrong... Nothing was returned!!");
      }
    } finally {
      // conn.end();
    }
  };

  getProductType();
});

/**customer number */
app.post("/api/find-by-custno", (req, res) => {
  const customerNumber = req.body.customerNumber;
  // return res.send(accountName);
  async function getCodeDetails() {
    let con;

    try {
      con = await oracledb.getConnection({
        user: DB_USER,
        password: DB_PASSWORD,
        connectString: DB_CONNECTION_STRING,
        timeout: DB_CONNECTION_TIMEOUT,
      });

      const data = await con.execute(
        `select A.customer_number, A.account_descrp, A.acct_link, B.ISO_CODE, a.status_indicator
        from g_ledger A, TB_CURRENCY B
        where type_of_acct in ('1','2') AND CUSTOMER_NUMBER = '${customerNumber}'
        AND A.CURRENCY_CODE = B.CURRENCY_CODE
        AND   (NVL(status_indicator,'N') NOT IN ('DO','DR','BO','CLOS'))
        order by account_descrp  asc`
      );

      var arr0 = [];
      var response = [];

      if (data) {
        for (let i = 0; i < data.rows.length; i++) {
          console.log(data.rows.length);
          for (let x = 0; x < data.metaData.length; x++) {
            arr0 +=
              '"' +
              [data.metaData[x].name.toLowerCase()] +
              '" : "' +
              data.rows[i][x] +
              '",';
          }

          response.push(JSON.parse("{" + arr0.replace(/,\s*$/, "") + "}"));
        }

        res.send(response);
      } else {
        res.send("Something went wrong... Nothing was returned!!");
      }
    } catch (err) {
      console.log(err);
      res.send(err);
    }
  }

  getCodeDetails();
});

/**get-post-bookbal and book bal number */
app.post("/api/bookbals", (req, res) => {
  const customerNumber = req.body.customerNumber;
  // return res.send(accountName);
  async function getCodeDetails() {
    let con;

    try {
      con = await oracledb.getConnection({
        user: DB_USER,
        password: DB_PASSWORD,
        connectString: DB_CONNECTION_STRING,
        timeout: DB_CONNECTION_TIMEOUT,
      });

      const data = await con.execute(
        `select av_bal, bookbal from vw_casa_ledger where acct_link = '${customerNumber}'`
      );
      // res.send("here")

      var arr0 = [];
      var response = [];

      if (data) {
        for (let i = 0; i < data.rows.length; i++) {
          console.log(data.rows.length);
          for (let x = 0; x < data.metaData.length; x++) {
            arr0 +=
              '"' +
              [data.metaData[x].name.toLowerCase()] +
              '" : "' +
              data.rows[i][x] +
              '",';
          }

          response.push(JSON.parse("{" + arr0.replace(/,\s*$/, "") + "}"));
        }

        res.send(response);
      } else {
        res.send("Something went wrong... Nothing was returned!!");
      }
    } catch (err) {
      console.log(err);
      res.send(err);
    }
  }

  getCodeDetails();
});

/**get-quotation-number*/
app.get("/api/get-quotation-number", (req, res) => {
  // return res.send(accountName);
  async function getQuotationNumber() {
    let con;

    try {
      con = await oracledb.getConnection({
        user: DB_USER,
        password: DB_PASSWORD,
        connectString: DB_CONNECTION_STRING,
        timeout: DB_CONNECTION_TIMEOUT,
      });

      const data = await con.execute(`select get_dealno from dual`);
      // res.send("here")

      var arr0 = [];
      var response = [];

      if (data) {
        for (let i = 0; i < data.rows.length; i++) {
          console.log(data.rows.length);
          for (let x = 0; x < data.metaData.length; x++) {
            arr0 +=
              '"' +
              [data.metaData[x].name.toLowerCase()] +
              '" : "' +
              data.rows[i][x] +
              '",';
          }

          response.push(JSON.parse("{" + arr0.replace(/,\s*$/, "") + "}"));
        }

        res.send(response);
      } else {
        res.send("Something went wrong... Nothing was returned!!");
      }
    } catch (err) {
      console.log(err);
      res.send(err);
    }
  }

  getQuotationNumber();
});

/**get-interest rate, interest variance and tolerance*/
app.post("/api/get-interest-rates", (req, res) => {
  // return res.send(accountName);
  const { product_code, deal_amount, iso_code } = req.body;
  async function getQuotationNumber() {
    let con;

    try {
      con = await oracledb.getConnection({
        user: DB_USER,
        password: DB_PASSWORD,
        connectString: DB_CONNECTION_STRING,
      });
      var currency = "";
      const data1 = await con.execute(
        `select currency_code, description from TB_CURRENCY where ISO_CODE = '${iso_code}'`
      );
      currency = data1.rows[0][0];
      const data = await con.execute(
        `select int_RATE,int_RATE, nvl(tolerance,12) 
        FROM INTEREST_TYPE_ACCT
        WHERE PROD_CODE = '${product_code}'
        and currency = '${currency}'
        and nvl('${deal_amount}',10000) between min_bal and max_bal 
        `
      );

      if (data.rows) {
        const result = {
          [data1.metaData[0].name]: data1.rows[0][0],
          [data1.metaData[1].name]: data1.rows[0][1],
          [data.metaData[0].name]: data.rows[0][0],
          INT_RATE_1: data.rows[0][1],
          tolerance: data.rows[0][2],
        };

        res.send(result);
      } else {
        res.send("Something went wrong... Nothing was returned!!");
      }
    } catch (err) {
      console.log(err);
      res.send(err);
    }
  }

  getQuotationNumber();
});

//get-product-type lov & get-currency
app.get("/api/get-product-types", (req, res) => {
  let getProductType = async () => {
    try {
      con = await oracledb.getConnection({
        user: DB_USER,
        password: DB_PASSWORD,
        connectString: DB_CONNECTION_STRING,
      });
      const product = [];
      const dealCurrency = [];

      const data = await con.execute(
        `SELECT ALL TB_PRODUCT.PROD_CODE as value, 
TB_PRODUCT.DESCRIPTION as label
FROM TB_PRODUCT WHERE APP_FLAG='Y' AND TB_PRODUCT.PROD_GROUP='3'
ORDER BY TB_PRODUCT.PROD_CODE`
      );
      // const currency = await con.execute(
      //   "SELECT CURRENCY_CODE, DESCRIPTION FROM TB_CURRENCY WHERE currency_code = (select local_curr_code from parameters)"
      // );
      // if (productType.rows && currency.rows) {
      //   productType.rows.map((res) => {
      //     // response.push(JSON.parse('{' + res.replace(/,\s*$/, "") + '}'));
      //     product.push(res.join(" - "));
      //   });
      //   currency.rows.map((res) => {
      //     // response.push(JSON.parse('{' + res.replace(/,\s*$/, "") + '}'));
      //     dealCurrency.push(res.join(" - "));
      //   });
      //   const response = {
      //     product_type: product,
      //     dealCurrency: dealCurrency,
      //   };

      //   res.send(response);

      var arr0 = [];
      var response = [];

      if (data) {
        for (let i = 0; i < data.rows.length; i++) {
          console.log(data.rows.length);
          for (let x = 0; x < data.metaData.length; x++) {
            arr0 +=
              '"' +
              [data.metaData[x].name.toLowerCase()] +
              '" : "' +
              data.rows[i][x] +
              '",';
          }

          response.push(JSON.parse("{" + arr0.replace(/,\s*$/, "") + "}"));
        }

        res.send(response);
      } else {
        res.send("Something went wrong... Nothing was returned!!");
      }
    } finally {
    }
  };
  getProductType();
});

// Receipt Procedure
app.post("/api/post_prc_receipt_payment_journal_backvalue", (req, res) => {
  async function postReceiptDetails() {
    let con;

    try {
      con = await oracledb.getConnection({
        user: DB_USER,
        password: DB_PASSWORD,
        connectString: DB_CONNECTION_STRING,
      });
      // const ipAddress = getIPAddress().address;

      const receipt_trans_type = req.body.r_trans_type;
      const posting_currency = req.body.currency;
      const posting_user = req.body.p_user;
      const value_date = req.body.valueDate;
      const posting_branch = req.body.branch;
      const posting_destination = req.body.p_destination;
      const module = req.body.module;
      const posting_channel = req.body.post_channel;
      const p_pterm_id = os.hostname();
      const posting_machine_ip = ip.address();
      const batch_num = req.body.batch_number;
      const p_credit_acs = req.body.p_credit_acs;
      const p_debit_acs = req.body.p_debit_acs;
      const p2 = JSON.stringify(p_credit_acs);
      const p = JSON.stringify(p_debit_acs);

      // return res.send(p2);
      con.execute(
        "BEGIN PKG_FIN_ACT_VCRS_RT.prc_fin_act_vcr_rt(:p_trans_type , :p_pcur , :p_postedby, :p_vdate, :p_pbranch , :p_debit_acs  , :p_credit_acs  , :p_pdesti  , :p_module  , :p_channel  , :p_pterm_id , :p_pip  , :batch_no  , :api_status  , :api_msg   ); END;",
        {
          p_trans_type: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: receipt_trans_type,
          },
          p_pcur: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: posting_currency,
          },
          p_postedby: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: posting_user,
          },
          p_vdate: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: value_date,
          },
          p_pbranch: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: posting_branch,
          },
          p_debit_acs: {
            type: oracledb.CLOB,
            dir: oracledb.BIND_IN,
            val: p,
          },
          // console.log(),
          p_credit_acs: {
            type: oracledb.CLOB,
            dir: oracledb.BIND_IN,
            val: p2,
          },
          p_pdesti: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: posting_destination,
          },
          p_module: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: module,
          },
          p_channel: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: posting_channel,
          },
          p_pterm_id: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: p_pterm_id,
          },
          p_pip: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: posting_machine_ip,
          },
          batch_no: {
            type: oracledb.STRING,
            dir: oracledb.BIND_INOUT,
            val: batch_num,
          },
          api_status: {
            type: oracledb.STRING,
            dir: oracledb.BIND_OUT,
          },
          api_msg: {
            type: oracledb.STRING,
            dir: oracledb.BIND_OUT,
          },
          // p_trans_type: {
          //   type: oracledb.STRING, dir: oracledb.BIND_IN, val: receipt_trans_type,
          // },
          // output_param: { type: oracledb.STRING, dir: oracledb.BIND_OUT }
        },

        function (err, result) {
          if (err) {
            throw err;
          }
          // return res.send(p)

          if (result) {
            // console.log(posting_machine_ip,"posting_machine_ip")
            // console.log(p_debit_acs);
            if (result.outBinds.api_status === "Y") {
              let message = result.outBinds.api_msg;
              response = {
                success: result.outBinds.api_status,
                // credit_postings : p,
                message: message,
                // token_id: tokennumber(50),
              };

              res.send(response);
            } else {
              let message = result.outBinds.api_msg;

              response = {
                success: false,
                message: message,
                // token_id: tokennumber(50),
              };

              res.send(response);
            }
          }
        }
      );
    } catch (err) {
      res.send(err);
    }
  }

  postReceiptDetails();
});

// BS CODE SETUP Procedure

app.post("/api/get_post_prc_BSCode_Setup", (req, res) => {
  async function postBSCodeSetup() {
    let con;

    try {
      con = await oracledb.getConnection({
        user: DB_USER,
        password: DB_PASSWORD,
        connectString: DB_CONNECTION_STRING,
      });
      // const ipAddress = getIPAddress().address;
      // const branchCode = getIPAddress().address;
      const bsDate = req.body.bsDate;
      const bsDesc = req.body.bsDesc;
      const bsCode = req.body.bsCode;
      const branchCode = req.body.branchCode;
      const levelIndicator = req.body.levelIndicator;
      // const groupID = req.body.groupID;
      const orderofPrint = req.body.orderofPrint;
      const cleartoCode = req.body.cleartoCode;
      // const branchCode = req.body.branchCode;
      const positiveCleartoCode = req.body.positiveCleartoCode;
      const negativeCleartoCode = req.body.negativeCleartoCode;
      const rCode = req.body.rCode;
      const rComments = req.body.rComments;
      const ordering = req.body.ordering;
      const lineCategory = req.body.lineCategory;
      const reportType = req.body.reportType;
      const postedBy = req.body.postedBy;
      const postingSysDate = req.body.postingSysDate;
      const postingSysTime = req.body.postingSysTime;
      const postingTerminal = os.hostname();
      const postingIP = getIPAddress().address;
      const amendedBy = req.body.amendedBy;
      const amendedDate = req.body.amendedDate;
      const amendedSysDate = req.body.amendedSysDate;
      const amendedSysTime = req.body.amendedSysTime;
      const amendedTerminal = os.hostname();
      const amendedIP = getIPAddress().address;
      const approvedBy = req.body.approvedBy;
      const approvedDate = req.body.approvedDate;
      const approvedSysDate = req.body.approvedSysDate;
      const approvedSysTime = req.body.approvedSysTime;
      const approvedTerminalID = os.hostname();
      const approvedIP = getIPAddress().address;
      const flag = req.body.flag;
      const appFlag = req.body.appFlag;
      const flagMessage = req.body.flagMessage;
      const balanceSheetACType = req.body.balanceSheetACType;
      const reportClass = req.body.reportClass;
      const armCode = req.body.armCode;
      const segmentCode = req.body.segmentCode;
      const typeOfSetup = req.body.typeOfSetup;
      const status = req.body.status;
      const moduleB = "PKG_fin_bs_creation";
      // const moduleB = req.body.moduleB;
      const channelB = "BRA";
      // const channelB = req.body.channelB;

      // return res.send("hello")

      // return res.send(p2);
      con.execute(
        "BEGIN PKG_fin_gl_bs_pnl_creation.PKG_fin_bs_creation(:BS_DATE_B,:BS_CODE_B,:BS_DESC_B,:LEVEL_INDICATOR_B,:GROUP_ID_B,:ORDER_OF_PRINT_B,:CLEAR_TO_CODE_B,:POSITIVE_CLEAR_TO_CODE_B,:NEGATIVE_CLEAR_TO_CODE_B,:BRANCH_CODE_B,:RCODE_B,:RCOMMENTS_B,:ORDERING_B,:LINE_CATEGORY_B,:REPORT_TYPE_B,:POSTED_BY_B,:POSTING_SYSDATE_B,:POSTING_SYSTIME_B,:POSTING_TERMINAL_B,:POSTING_IP_B,:AMENDED_BY_B,:AMENDED_DATE_B,:AMENDED_SYSDATE_B,:AMENDED_SYSTIME_B,:AMENDED_TERMINAL_B,:AMENDED_IP_B,:APPROVED_BY_B,:APPROVED_DATE_B,:APPROVED_SYSDATE_B,:APPROVED_SYSTIME_B,:APPROVED_TERMINAL_b,:APPROVED_IP_B,:FLAG_B,:APP_FLAG_B,:FLAG_MESSAGE_B,:BALANCE_SHEET_AC_TYPE_B,:REPORT_CLASS_B,:ARM_CODE_B,:SEGMENT_CODE_B,:TYPE_OF_SETUP_B,:status_b,:module_b,:channel_b,:api_status,:api_msg); END;",
        {
          BS_DATE_B: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: bsDate,
          },
          BS_CODE_B: {
            type: oracledb.STRING,
            dir: oracledb.BIND_INOUT,
            val: bsCode,
          },
          BS_DESC_B: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: bsDesc,
          },
          LEVEL_INDICATOR_B: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: levelIndicator,
          },
          GROUP_ID_B: {
            type: oracledb.STRING,
            dir: oracledb.BIND_OUT,
          },
          ORDER_OF_PRINT_B: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: orderofPrint,
          },
          // console.log(),
          CLEAR_TO_CODE_B: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: cleartoCode,
          },
          POSITIVE_CLEAR_TO_CODE_B: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: positiveCleartoCode,
          },
          NEGATIVE_CLEAR_TO_CODE_B: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: negativeCleartoCode,
          },
          BRANCH_CODE_B: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: branchCode,
          },
          RCODE_B: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: rCode,
          },
          RCOMMENTS_B: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: rComments,
          },
          ORDERING_B: {
            type: oracledb.STRING,
            dir: oracledb.BIND_INOUT,
            val: ordering,
          },
          LINE_CATEGORY_B: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: lineCategory,
          },
          REPORT_TYPE_B: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: reportType,
          },
          POSTED_BY_B: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: postedBy,
          },
          POSTING_SYSDATE_B: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: postingSysDate,
          },
          POSTING_SYSTIME_B: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: postingSysTime,
          },
          POSTING_TERMINAL_B: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: postingTerminal,
          },
          POSTING_IP_B: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: postingIP,
          },
          AMENDED_BY_B: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: amendedBy,
          },
          // console.log(),
          AMENDED_DATE_B: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: amendedDate,
          },
          AMENDED_SYSDATE_B: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: amendedSysDate,
          },
          AMENDED_SYSTIME_B: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: amendedSysTime,
          },
          AMENDED_TERMINAL_B: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: amendedTerminal,
          },
          AMENDED_IP_B: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: amendedIP,
          },
          APPROVED_BY_B: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: approvedBy,
          },
          APPROVED_DATE_B: {
            type: oracledb.STRING,
            dir: oracledb.BIND_INOUT,
            val: approvedDate,
          },
          APPROVED_SYSDATE_B: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: approvedSysDate,
          },
          // console.log(),
          APPROVED_SYSTIME_B: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: approvedSysTime,
          },
          APPROVED_TERMINAL_b: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: approvedTerminalID,
          },
          APPROVED_IP_B: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: approvedIP,
          },
          FLAG_B: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: flag,
          },
          APP_FLAG_B: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: appFlag,
          },
          FLAG_MESSAGE_B: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: flagMessage,
          },
          BALANCE_SHEET_AC_TYPE_B: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: balanceSheetACType,
          },
          REPORT_CLASS_B: {
            type: oracledb.STRING,
            dir: oracledb.BIND_INOUT,
            val: reportClass,
          },
          ARM_CODE_B: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: armCode,
          },
          SEGMENT_CODE_B: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: segmentCode,
          },
          TYPE_OF_SETUP_B: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: typeOfSetup,
          },
          status_b: {
            type: oracledb.STRING,
            dir: oracledb.BIND_INOUT,
            val: status,
          },
          module_b: {
            type: oracledb.STRING,
            dir: oracledb.BIND_INOUT,
            val: moduleB,
          },
          channel_b: {
            type: oracledb.STRING,
            dir: oracledb.BIND_INOUT,
            val: channelB,
          },
          api_status: {
            type: oracledb.STRING,
            dir: oracledb.BIND_OUT,
          },
          api_msg: {
            type: oracledb.STRING,
            dir: oracledb.BIND_OUT,
          },
        },

        function (err, result) {
          if (err) {
            throw err;
          }
          // return res.send(p)

          if (result) {
            // console.log(posting_machine_ip,"posting_machine_ip")
            // console.log(result.outBinds.api_status);
            if (
              result.outBinds.api_msg.includes("01627") ||
              result.outBinds.api_msg.includes("01492")
            ) {
              let message = result.outBinds.api_msg;
              response = {
                success: "Y",
                // credit_postings : p,
                message: message,
                // token_id: tokennumber(50),
              };

              res.send(response);
            } else {
              let message = result.outBinds.api_msg;

              response = {
                success: result.outBinds.api_status,
                message: message,
                // token_id: tokennumber(50),
              };

              console.log(bsCode, "bsCode");
              res.send(response);
            }
          }
        }
      );
    } catch (err) {
      res.send(err);
    }
  }

  postBSCodeSetup();
});

// pnl CODE SETUP Procedure
app.post("/api/get_post_prc_PNLCode_Setup", (req, res) => {
  async function postPNLCodeSetup() {
    let con;

    try {
      con = await oracledb.getConnection({
        user: DB_USER,
        password: DB_PASSWORD,
        connectString: DB_CONNECTION_STRING,
      });
      // const ipAddress = getIPAddress().address;
      // const branchCode = getIPAddress().address;
      // const groupID = req.body.groupID;
      // const branchCode = req.body.branchCode;
      const pLDate = req.body.pLDate;
      const pLCode = req.body.pLCode;
      const pLDesc = req.body.pLDesc;
      const lineLevel = req.body.lineLevel;
      const orderofPrint = req.body.orderofPrint;
      const cleartoCode = req.body.cleartoCode;
      const branch = req.body.branch;
      const rCode = req.body.rCode;
      const rComments = req.body.rComments;
      const ordering = req.body.ordering;
      const lineCategory = req.body.lineCategory;
      const reportType = req.body.reportType;
      const postedBy = req.body.postedBy;
      const postingSysDate = req.body.postingSysDate;
      const postingSysTime = req.body.postingSysTime;
      const postingTerminal = os.hostname();
      const postingIP = getIPAddress().address;
      const amendedBy = req.body.amendedBy;
      const amendedDate = req.body.amendedDate;
      const amendedTerminal = req.body.amendedTerminal;
      const amendedIP = getIPAddress().address;
      const approvedBy = req.body.approvedBy;
      const approvedDate = req.body.approvedDate;
      const approvedSysDate = req.body.approvedSysDate;
      const approvedSysTime = req.body.approvedSysTime;
      const approvedTerminalID = req.body.approvedTerminalID;
      const approvedIP = getIPAddress().address;
      const flag = req.body.flag;
      const flagMessage = req.body.flagMessage;
      const reportClass = req.body.reportClass;
      const typeOfSetup = req.body.typeOfSetup;
      const status = req.body.status;
      const moduleB = "PKG_fin_PNL_creation";
      const channelB = "BRA";

      console.log(branch, "hkhkhkhkk");
      // const amendedSysDate = req.body.amendedSysDate;
      // const amendedSysTime = req.body.amendedSysTime;
      // const balanceSheetACType = req.body.balanceSheetACType;
      // const armCode = req.body.armCode;
      // const segmentCode = req.body.segmentCode;
      // const moduleB = req.body.moduleB;
      // const channelB = req.body.channelB;

      // return res.send("hello")

      // return res.send(p2);
      con.execute(
        "BEGIN PKG_fin_gl_bs_pnl_creation.PKG_fin_PNL_creation(:PL_DATE_P,:PL_CODE_P,:PL_DESC_P,:LEVEL_INDICATOR_P,:GROUP_ID_P,:ORDER_OF_PRINT_P,:CLEAR_TO_CODE_P,:BRANCH_CODE_P,:RCODE_P,:RCOMMENTS_P,:ORDERING_P,:LINE_CATEGORY_P,:REPORT_TYPE_P,:POSTED_BY_P,:POSTING_SYSDATE_P,:POSTING_SYSTIME_P,:POSTING_TERMINAL_P,:POSTING_IP_P,:AMENDED_BY_P,:AMENDED_DATE_P,:AMENDED_TERMINAL_P,:AMENDED_IP_P,:APPROVED_BY_P,:APPROVED_DATE_P,:APPROVED_SYSDATE_P,:APPROVED_SYSTIME_P,:APPROVED_TERMINAL_P,:APPROVED_IP_P,:FLAG_P,:FLAG_MESSAGE_P,:REPORT_CLASS,:TYPE_OF_SETUP_B,:status_b,:module_b,:channel_b,:api_status,:api_msg);END;",

        {
          PL_DATE_P: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: pLDate,
          },
          PL_CODE_P: {
            type: oracledb.STRING,
            dir: oracledb.BIND_INOUT,
            val: pLCode,
          },
          PL_DESC_P: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: pLDesc,
          },
          LEVEL_INDICATOR_P: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: lineLevel,
          },
          GROUP_ID_P: {
            type: oracledb.STRING,
            dir: oracledb.BIND_OUT,
          },
          ORDER_OF_PRINT_P: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: orderofPrint,
          },
          CLEAR_TO_CODE_P: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: cleartoCode,
          },
          BRANCH_CODE_P: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: branch,
          },
          RCODE_P: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: rCode,
          },
          RCOMMENTS_P: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: rComments,
          },
          ORDERING_P: {
            type: oracledb.NUMBER,
            dir: oracledb.BIND_OUT,
            val: ordering,
          },
          LINE_CATEGORY_P: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: lineCategory,
          },
          REPORT_TYPE_P: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: reportType,
          },
          POSTED_BY_P: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: postedBy,
          },
          POSTING_SYSDATE_P: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: postingSysDate,
          },
          POSTING_SYSTIME_P: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: postingSysTime,
          },
          POSTING_TERMINAL_P: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: postingTerminal,
          },
          POSTING_IP_P: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: postingIP,
          },
          AMENDED_BY_P: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: amendedBy,
          },
          AMENDED_DATE_P: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: amendedDate,
          },
          AMENDED_TERMINAL_P: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: amendedTerminal,
          },
          AMENDED_IP_P: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: amendedIP,
          },
          APPROVED_BY_P: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: approvedBy,
          },
          APPROVED_DATE_P: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: approvedDate,
          },
          APPROVED_SYSDATE_P: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: approvedSysDate,
          },
          APPROVED_SYSTIME_P: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: approvedSysTime,
          },
          APPROVED_TERMINAL_P: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: approvedTerminalID,
          },
          APPROVED_IP_P: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: approvedIP,
          },
          FLAG_P: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: flag,
          },
          FLAG_MESSAGE_P: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: flagMessage,
          },
          REPORT_CLASS: {
            type: oracledb.STRING,
            dir: oracledb.BIND_INOUT,
            val: reportClass,
          },
          TYPE_OF_SETUP_B: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: typeOfSetup,
          },
          status_b: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: status,
          },
          module_b: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: moduleB,
          },
          channel_b: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: channelB,
          },
          api_status: {
            type: oracledb.STRING,
            dir: oracledb.BIND_OUT,
          },
          api_msg: {
            type: oracledb.STRING,
            dir: oracledb.BIND_OUT,
          },
        },

        function (err, result) {
          if (err) {
            throw err;
          }
          // return res.send(p)

          if (result) {
            console.log(branch, "posting_machine_ip");
            console.log(result.outBinds.api_status);
            if (result.outBinds.api_status == "N") {
              let message = result.outBinds.api_msg;
              response = {
                success: false,
                // credit_postings : p,
                message: message,
                // token_id: tokennumber(50),
              };
              console.log(pLDesc, "pLDesc");
              console.log(lineLevel, "lineLevel");
              console.log(cleartoCode, "cleartoCode");
              console.log(lineCategory, "lineCategory");
              console.log(reportClass, "reportClass");
              console.log(postedBy, "amendedBy");
              console.log(branch, "branch");
              console.log(flag, "flag");
              console.log(typeOfSetup, "typeOfSetup");
              console.log(pLCode, "plCode");
              console.log(pLDate, "plDate");

              res.send(response);
            } else {
              let message = result.outBinds.api_msg;

              response = {
                success: result.outBinds.api_status,
                message: message,
                // token_id: tokennumber(50),
              };
              console.log(pLCode, "pLCode");
              res.send(response);
            }
          }
        }
      );
    } catch (err) {
      res.send(err);
    }
  }

  postPNLCodeSetup();
});

app.post("/api/get-balance-sheet", (req, res) => {
  const bsCode = req.body.bsCode;
  let getChartGroup = async () => {
    try {
      const db = await oracledb.getConnection({
        user: DB_USER,
        password: DB_PASSWORD,
        connectString: DB_CONNECTION_STRING,
        timeout: DB_CONNECTION_TIMEOUT,
      });
      const execute = util.promisify(db.execute).bind(db);

      // return res.send("ghamna");
      // res.send(con);
      const data = await execute(
        `select BS_CODE,BS_DESC,LEVEL_INDICATOR,CLEAR_TO_CODE AS PARENT_LINE,get_bscode_desc(CLEAR_TO_CODE) as CLEAR_TO_CODE,GET_BRANCHDESC(BRANCH_CODE) AS BRANCH_CODE,ORDERING,LINE_CATEGORY,BALANCE_SHEET_AC_TYPE,REPORT_CLASS
        from balance_sheet 
        WHERE NVL(CLEAR_TO_CODE,'0') LIKE '%${bsCode}%'
        ORDER BY ORDERING `
      );
      if (data) {
        // res.send(response);

        var arr0 = "";
        var arr = [];

        for (let i = 0; i < data.rows.length; i++) {
          for (let x = 0; x < data.metaData.length; x++) {
            arr0 +=
              '"' +
              [data.metaData[x].name.toLowerCase()] +
              '" : "' +
              data.rows[i][x] +
              '",';
          }

          arr.push(JSON.parse("{" + arr0.replace(/,\s*$/, "") + "}"));
        }

        return res.send(arr);

        // res.send({
        //   responseCode: "000",
        //   responseMessage : arr
        // });
      } else {
        res.send("Something went wrong... Nothing was returned!!");
      }
    } catch (err) {
      res.send(err);
    }
  };
  getChartGroup();
});

app.post("/api/get-balance-sheet-app", (req, res) => {
  const bsCode = req.body.bsCode;
  let approveBalanceSheet = async () => {
    try {
      const db = await oracledb.getConnection({
        user: DB_USER,
        password: DB_PASSWORD,
        connectString: DB_CONNECTION_STRING,
        timeout: DB_CONNECTION_TIMEOUT,
      });
      const execute = util.promisify(db.execute).bind(db);

      // return res.send("ghamna");
      // res.send(con);
      const data = await execute(
        `select BS_CODE,BS_DESC,LEVEL_INDICATOR,CLEAR_TO_CODE,GET_BRANCHDESC(BRANCH_CODE) AS BRANCH_CODE,ORDERING,LINE_CATEGORY,REPORT_CLASS,BALANCE_SHEET_AC_TYPE,FLAG_MESSAGE
        FROM BALANCE_SHEET
        WHERE NVL(CLEAR_TO_CODE,'0') LIKE '%${bsCode}%'
        ORDER BY ORDERING `
      );
      if (data) {
        // res.send(response);

        var arr0 = "";
        var arr = [];

        for (let i = 0; i < data.rows.length; i++) {
          for (let x = 0; x < data.metaData.length; x++) {
            arr0 +=
              '"' +
              [data.metaData[x].name.toLowerCase()] +
              '" : "' +
              data.rows[i][x] +
              '",';
          }

          arr.push(JSON.parse("{" + arr0.replace(/,\s*$/, "") + "}"));
        }

        return res.send(arr);

        // res.send({
        //   responseCode: "000",
        //   responseMessage : arr
        // });
      } else {
        res.send("Something went wrong... Nothing was returned!!");
      }
    } catch (err) {
      res.send(err);
    }
  };
  approveBalanceSheet();
});

app.post("/api/get-balance-sheet-approvals", (req, res) => {
  const bsCode = req.body.bsCode;
  let approveBalanceSheet = async () => {
    try {
      const db = await oracledb.getConnection({
        user: DB_USER,
        password: DB_PASSWORD,
        connectString: DB_CONNECTION_STRING,
        timeout: DB_CONNECTION_TIMEOUT,
      });
      const execute = util.promisify(db.execute).bind(db);

      // return res.send("ghamna");
      // res.send(con);
      const data = await execute(
        `select BS_CODE,get_clearToCodeDesc(CLEAR_TO_CODE) as LINE_DESC,BS_DESC,LEVEL_INDICATOR,CLEAR_TO_CODE,GET_BRANCHDESC(BRANCH_CODE) AS BRANCH_CODE,ORDERING,LINE_CATEGORY,REPORT_CLASS,BALANCE_SHEET_AC_TYPE,FLAG,FLAG_MESSAGE
        FROM vw_balancesheet_app
        WHERE NVL(CLEAR_TO_CODE,'0') LIKE '%${bsCode}%'
        ORDER BY ORDERING `
      );
      if (data) {
        // res.send(response);

        var arr0 = "";
        var arr = [];

        for (let i = 0; i < data.rows.length; i++) {
          for (let x = 0; x < data.metaData.length; x++) {
            arr0 +=
              '"' +
              [data.metaData[x].name.toLowerCase()] +
              '" : "' +
              data.rows[i][x] +
              '",';
          }

          arr.push(JSON.parse("{" + arr0.replace(/,\s*$/, "") + "}"));
        }

        return res.send(arr);

        // res.send({
        //   responseCode: "000",
        //   responseMessage : arr
        // });
      } else {
        res.send("Something went wrong... Nothing was returned!!");
      }
    } catch (err) {
      res.send(err);
    }
  };
  approveBalanceSheet();
});

// Accounting vouchers approval Procedure
app.post("/api/post_prc_receipt_payment_journal_approval", (req, res) => {
  async function financeVoucherApproval() {
    let con;

    try {
      con = await oracledb.getConnection({
        user: DB_USER,
        password: DB_PASSWORD,
        connectString: DB_CONNECTION_STRING,
      });
      // const ipAddress = getIPAddress().address;

      const batch_number = req.body.batch_number;
      const approvedBy = req.body.approvedBy;
      const approvalDate = req.body.approvalDate;
      const transactionType = req.body.transactionType;
      const postingCurrency = req.body.postingCurrency;
      const postingUser = req.body.postingUser;
      const postingBranch = req.body.postingBranch;
      const accountLink = req.body.accountLink;
      const amount = req.body.amount;
      const posting_machine_ip = getIPAddress().address;
      const module = req.body.module;
      const postingChannel = req.body.postingChannel;
      const approvalType = req.body.approvalType;
      const rejectedComment = req.body.rejectedComment;
      // const p2 = JSON.stringify(p_credit_acs);
      // const p = JSON.stringify(p_debit_acs);

      // return res.send(p2);
      con.execute(
        "BEGIN PKG_fin_voucher_app_RT.PKG_fin_voucher_app_RT(:BATCH_NO_V , :APP_BY_V , :APP_DATE_V, :cur_v, :branch_v,:trans_type_v, :debit_amt_v, :app_status_v, :rejected_narration_b, :module_v, :channel_v,  :api_status, :api_msg   ); END;",
        {
          BATCH_NO_V: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: batch_number,
          },
          APP_BY_V: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: approvedBy,
          },
          APP_DATE_V: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: approvalDate,
          },
          cur_v: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: postingCurrency,
          },
          branch_v: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: postingBranch,
          },
          trans_type_v: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: transactionType,
          },
          debit_amt_v: {
            type: oracledb.NUMBER,
            dir: oracledb.BIND_IN,
            val: amount,
          },
          app_status_v: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: approvalType,
          },
          rejected_narration_b: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: rejectedComment,
          },
          module_v: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: module,
          },
          channel_v: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: postingChannel,
          },
          api_status: {
            type: oracledb.STRING,
            dir: oracledb.BIND_OUT,
          },
          api_msg: {
            type: oracledb.STRING,
            dir: oracledb.BIND_OUT,
          },
        },

        function (err, result) {
          if (err) {
            throw err;
          }
          // return res.send(p)

          if (result) {
            if (result.outBinds.api_status === "Y") {
              let message = result.outBinds.api_msg;
              response = {
                success: result.outBinds.api_status,
                message: message,
              };
              // console.log(response);

              res.send(response);
            } else {
              let message = result.outBinds.api_msg;

              response = {
                success: false,
                message: message,
                // token_id: tokennumber(50),
              };
              console.log(response);

              res.send(response);
            }
          }
        }
      );
    } catch (err) {
      res.send(err);
    }
  }

  financeVoucherApproval();
});

//payable schedule procedure
app.post("/api/generate-payable-schedule", (req, res) => {
  async function payableSchedule() {
    let con;
    let response2 = [];

    try {
      con = await oracledb.getConnection({
        user: DB_USER,
        password: DB_PASSWORD,
        connectString: DB_CONNECTION_STRING,
      });
      // const ipAddress = getIPAddress().address;

      const sequence = req.body.sequence;
      const frequency = req.body.frequency;
      const batch_num = req.body.batch_num;
      const scandoc_id = req.body.scandoc_id;
      const reference_num = req.body.reference_num;
      const narration = req.body.narration;
      const details_ref_num = req.body.details_ref_num;
      const cost_branch = req.body.cost_branch;
      const doc_total = req.body.doc_total;
      const tenor = req.body.tenor;
      const posting_date = req.body.posting_date;
      const posting_date_actual = req.body.posting_date_actual;
      const payment_mode = req.body.payment_mode;
      const creditAccount = req.body.creditAccount; // payable account
      const debitAccount = req.body.debitAccount; // expense account
      const repay_frequency = req.body.repay_frequency;
      const prepayment_id = req.body.prepayment_id;
      const invoice_number = req.body.invoice_number;
      const voucher_type = req.body.voucher_type;
      const posted_by = req.body.posted_by;
      const posting_terminal = os.hostname();
      const posting_ip = getIPAddress().address;
      const tax_mode = req.body.tax_mode;

      con.execute(
        "BEGIN PKG_Payable_schedule.PKG_FIN_SCHEDULE(:ext_seq_v , :frequency_v , :batch_no_v, :ref_no_v, :ref_no_det_v, :scan_doc_id_v, :doc_amt_v, :acct_link1_v, :acct_link2_v, :ddate_v, :POSTING_DATE_V, :pmode_v, :doc_desc_v , :bra_v ,:TENOR_v,:invoice_no_v ,:REPAY_FREQUENCY_v ,:EXPENSE_REF_DET_v , :voucher_type_V, :POSTED_BY_V, :POSTING_TERMINAL_V, :POSTING_IP_V, :tax_mode_V,:api_status, :api_msg   ); END;",
        {
          ext_seq_v: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: sequence,
          },
          frequency_v: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: frequency,
          },
          batch_no_v: {
            type: oracledb.STRING,
            dir: oracledb.BIND_INOUT,
            val: batch_num,
          },
          ref_no_v: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: reference_num,
          },
          ref_no_det_v: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: details_ref_num,
          },
          scan_doc_id_v: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: scandoc_id,
          },
          doc_amt_v: {
            type: oracledb.NUMBER,
            dir: oracledb.BIND_IN,
            val: Number(doc_total),
          },
          acct_link1_v: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: creditAccount,
          },
          acct_link2_v: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: debitAccount,
          },
          ddate_v: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: posting_date,
          },
          POSTING_DATE_V: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: posting_date_actual,
          },
          pmode_v: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: payment_mode,
          },
          doc_desc_v: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: narration,
          },
          bra_v: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: cost_branch,
          },
          TENOR_v: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: tenor,
          },
          invoice_no_v: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: invoice_number,
          },
          REPAY_FREQUENCY_v: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: repay_frequency,
          },
          EXPENSE_REF_DET_v: {
            type: oracledb.STRING,
            dir: oracledb.BIND_INOUT,
            val: prepayment_id,
          },
          voucher_type_V: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: voucher_type,
          },
          POSTED_BY_V: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: posted_by,
          },
          POSTING_TERMINAL_V: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: posting_terminal,
          },
          POSTING_IP_V: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: posting_ip,
          },
          tax_mode_V: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: tax_mode,
          },
          api_status: {
            type: oracledb.STRING,
            dir: oracledb.BIND_OUT,
          },
          api_msg: {
            type: oracledb.STRING,
            dir: oracledb.BIND_OUT,
          },
        },

        function (err, result) {
          if (err) {
            throw err;
          }
          // return res.send(p)

          if (result) {
            if (result.outBinds.api_status === "Y") {
              let message = result.outBinds.api_msg;
              let expense_ref = result.outBinds.EXPENSE_REF_DET_v;
              if (expense_ref) {
                async function getSchedule() {
                  const data1 = await con.execute(`
                  SELECT
                (PAYABLE_ACCOUNT||' - '||get_acctdesc(PAYABLE_ACCOUNT)) as PAYABLE_ACCOUNT_desc,  (EXPENSE_AMOUNT ||' - '|| get_acctdesc(EXPENSE_AMOUNT)) EXPENSE_ACCOUNT,
                DUE_AMOUNT,DUE_DATE,FREQUENCY,FREQUENCY_DESC,
                BRANCH_CODE, BRANCH_DESC, NARRATION , PAYMENT_SEQUNCE
                FROM VW_GL_PAYMENT_SCHEDULE
                where EXPENSE_REF_DET= '${expense_ref}' ORDER BY PAYMENT_SEQUNCE
                  `);
                  if (data1) {
                    let response2 = [];
                    let arr0 = "";
                    for (let i = 0; i < data1.rows.length; i++) {
                      for (let x = 0; x < data1.metaData.length; x++) {
                        arr0 +=
                          '"' +
                          [data1.metaData[x].name.toLowerCase()] +
                          '" : "' +
                          data1.rows[i][x] +
                          '",';
                      }

                      response2.push(
                        JSON.parse(
                          "{" +
                            arr0
                              .replace(/(\r\n|\n|\r)/gm, "")
                              .replace(/,\s*$/, "") +
                            "}"
                        )
                      );
                    }
                    for (let i = 0; i < response2.length; i++) {
                      const months = [
                        "JAN",
                        "FEB",
                        "MAR",
                        "APR",
                        "MAY",
                        "JUN",
                        "JUL",
                        "AUG",
                        "SEP",
                        "OCT",
                        "NOV",
                        "DEC",
                      ];
                      const duedate = new Date(response2[i].due_date);
                      response2[i].due_date = `${duedate.getDate()}-${
                        months[duedate.getMonth()]
                      }-${duedate.getFullYear()}`;
                    }
                    let response = {
                      success: result.outBinds.api_status,
                      message: message,
                      batchNumber: expense_ref,
                      schedule: response2,
                    };
                    res.send(response);
                  } else {
                    res.send(err);
                    console.log("error");
                  }
                }
                getSchedule();
              }
            } else {
              let message = result.outBinds.api_msg;

              let response = {
                success: false,
                message: message,
              };

              res.send(response);
            }
          }
        }
      );
    } catch (err) {
      res.send(err);
    }
  }

  payableSchedule();
});

// Payables Posting Procedure
app.post("/api/post_account_payable_procedure", (req, res) => {
  async function postPayable() {
    let con;

    try {
      con = await oracledb.getConnection({
        user: DB_USER,
        password: DB_PASSWORD,
        connectString: DB_CONNECTION_STRING,
      });

      const frequency = req.body.frequency;
      const scandoc_id = req.body.scandoc_id;
      const reference_num = req.body.reference_num;
      const narration = req.body.narration;
      const cost_branch = req.body.cost_branch;
      const doc_total = req.body.doc_total;
      const tenor = req.body.tenor;
      const posting_date_actual = req.body.posting_date_actual;
      const payment_mode = req.body.payment_mode;
      const creditAccount = req.body.creditAccount; // payable account
      const debitAccount = req.body.debitAccount; // expense account
      const invoice_number = req.body.invoice_number;
      const voucher_type = req.body.voucher_type;
      const posted_by = req.body.posted_by;
      const posting_terminal = os.hostname();
      const posting_ip = getIPAddress().address;
      const tax_mode = req.body.tax_mode;
      const expense_currency = req.body.expense_currency;
      const net_invoice_amount = req.body.net_invoice_amount;
      const ap_branch = req.body.ap_branch;
      const expense_branch = req.body.expense_branch;
      const flag = req.body.flag;
      const expense_reference = req.body.expense_reference;
      const invoice_date = req.body.invoice_date;
      const date_received = req.body.date_received;
      const cash_acct = "";
      const payment_method_id = req.body.payment_method_id;
      const tax_payment = req.body.tax_payment;
      const transactionType = req.body.transactionType;
      const tax_accounts = req.body.tax_accounts;
      const paymentDate = req.body.paymentDate;
      const approvedBy = req.body.approvedBy;
      const approvedDate = req.body.approvedDate;
      const approvedTerminal = req.body.approvedTerminal;
      const approvedIP = req.body.approvedIP;
      const taxAccts = JSON.stringify(tax_accounts);
      con.execute(
        "BEGIN PKG_Payable_post.PKG_payable_posting(:AP_ACCT_b , :EXPENSE_DOC_ID_b , :EXPENSE_ACCT_LINK_b, :EXPENSE_CURRENCY_b, :NARRATION_b,:TOTAL_EXP_AMOUNT_b, :USER_NAME_b, :INTER_BRANCH_b, :AP_BRANCH_CODE_b, :EX_BRANCH_CODE_b, :BENEFICIARY_ACCT_b,  :POSTING_DATE_b, :POSTING_TERMINAL_b, :POSTING_IP_b, :FLAG_b,  :EXPENSE_REFERENCE_b,:PAYMENT_MODE_b, :TAX_MODE_b, :TAXABLE_AMOUNT_b,  :USER_REFERENCE_b, :INVOICE_NUMBER_b, :INVOICE_DATE_b, :DATE_RECEIVED_b,  :CASH_ACCT_b, :PAYMENT_METHOD_ID_b, :FREQUENCY_b, :TENOR_b, :VOUCHER_NUMBER_b, :TAX_PAYMENT_b, :TRANSACTION_TYPE_b,:PAYMENT_DATE_B,:APPROVED_BY_B, :APPROVAL_DATE_B,:APPROVAL_TERMINAL_B, :APPROVAL_IP_B, :tax_acs, :api_status, :api_msg   ); END;",
        {
          AP_ACCT_b: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: creditAccount,
          },
          EXPENSE_DOC_ID_b: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: scandoc_id,
          },
          EXPENSE_ACCT_LINK_b: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: debitAccount,
          },
          EXPENSE_CURRENCY_b: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: expense_currency,
          },
          NARRATION_b: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: narration,
          },
          TOTAL_EXP_AMOUNT_b: {
            type: oracledb.NUMBER,
            dir: oracledb.BIND_IN,
            val: net_invoice_amount,
          },
          USER_NAME_b: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: posted_by,
          },
          INTER_BRANCH_b: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: cost_branch,
          },
          AP_BRANCH_CODE_b: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: ap_branch,
          },
          EX_BRANCH_CODE_b: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: expense_branch,
          },
          BENEFICIARY_ACCT_b: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: debitAccount,
          },
          POSTING_DATE_b: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: posting_date_actual,
          },
          POSTING_TERMINAL_b: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: posting_terminal,
          },
          POSTING_IP_b: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: posting_ip,
          },
          FLAG_b: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: flag,
          },
          EXPENSE_REFERENCE_b: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: expense_reference,
          },
          PAYMENT_MODE_b: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: payment_mode,
          },
          TAX_MODE_b: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: tax_mode,
          },
          TAXABLE_AMOUNT_b: {
            type: oracledb.NUMBER,
            dir: oracledb.BIND_IN,
            val: Number(doc_total),
          },
          USER_REFERENCE_b: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: reference_num,
          },
          INVOICE_NUMBER_b: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: invoice_number,
          },
          INVOICE_DATE_b: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: invoice_date,
          },
          DATE_RECEIVED_b: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: date_received,
          },
          CASH_ACCT_b: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: cash_acct,
          },
          PAYMENT_METHOD_ID_b: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: payment_method_id,
          },
          FREQUENCY_b: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: frequency,
          },
          PAYMENT_METHOD_ID_b: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: payment_method_id,
          },
          TENOR_b: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: tenor,
          },
          VOUCHER_NUMBER_b: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: voucher_type,
          },
          TAX_PAYMENT_b: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: tax_payment,
          },
          TRANSACTION_TYPE_b: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: transactionType,
          },
          PAYMENT_DATE_B: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: paymentDate,
          },
          APPROVED_BY_B: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: approvedBy,
          },
          APPROVAL_DATE_B: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: approvedDate,
          },
          APPROVAL_TERMINAL_B: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: approvedTerminal,
          },
          APPROVAL_IP_B: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: approvedIP,
          },
          tax_acs: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: taxAccts,
          },
          api_status: {
            type: oracledb.STRING,
            dir: oracledb.BIND_OUT,
          },
          api_msg: {
            type: oracledb.STRING,
            dir: oracledb.BIND_OUT,
          },
        },

        function (err, result) {
          if (err) {
            throw err;
          }

          if (result) {
            if (result.outBinds.api_status === "Y") {
              let message = result.outBinds.api_msg;
              response = {
                success: result.outBinds.api_status,
                message: message,
              };

              res.send(response);
            } else {
              let message = result.outBinds.api_msg;

              response = {
                success: false,
                message: message,
              };
              console.log(response);

              res.send(response);
            }
          }
        }
      );
    } catch (err) {
      res.send(err);
    }
  }

  postPayable();
});

// prepayment and payable manual Procedure
app.post("/api/post_payable_schedule_manual", (req, res) => {
  async function PostPayableManual() {
    let con;
    let scheduleArray = [];

    try {
      con = await oracledb.getConnection({
        user: DB_USER,
        password: DB_PASSWORD,
        connectString: DB_CONNECTION_STRING,
      });
      // const ipAddress = getIPAddress().address;
      const flag = req.body.flag;
      const action = req.body.action;
      const type = req.body.type;
      const batchNumber = req.body.batchNumber;
      const branchCode = req.body.branchCode;
      const ACCT_LINK1 = req.body.ACCT_LINK1;
      const ACCT_LINK2 = req.body.ACCT_LINK2;
      const dueAmount = req.body.dueAmount;
      const username = req.body.username;
      const paymentID = req.body.paymentID;
      // const approvalTerminal = req.body.approvalTerminal;
      const approvalScanDoc = req.body.approvalScanDoc;
      const narration = req.body.narration;
      const valueDate = req.body.valueDate;
      const scheduleData = req.body.scheduleData;

      if (scheduleData) {
        scheduleData.map((i) => {
          scheduleArray.push({
            ...i,
            p_AMENDED_IP: ip.address(),
            p_AMENDED_TERMINAL: os.hostname(),
          });
        });
      }

      // return res.send(scheduleData);
      con.execute(
        "BEGIN PKG_Payable_Schedule_Manual.PRC_PAYABLE_SCHEDULE(:FLAG_b , :ACTION_P ,:TYPE_P, :BATCH_NO_b, :BRANCH_CODE_P , :ACCT_LINK1_b  , :ACCT_LINK2_b  , :DUE_AMOUNT_b  , :POSTED_BY_b, :VALUEDATE, :DOC_DESCRP_b  , :PAYMENT_ID , :SCHEDULE_DATA_B  , :APPROVALTERMINAL_b  , :APPROVALSCANDOC  ,:api_status, :api_msg   ); END;",
        {
          FLAG_b: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: flag,
          },
          ACTION_P: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: action,
          },
          TYPE_P: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: type,
          },
          BATCH_NO_b: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: batchNumber,
          },
          BRANCH_CODE_P: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: branchCode,
          },
          ACCT_LINK1_b: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: ACCT_LINK1,
          },
          // console.log(),
          ACCT_LINK2_b: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: ACCT_LINK2,
          },
          DUE_AMOUNT_b: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: dueAmount,
          },
          POSTED_BY_b: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: username,
          },
          VALUEDATE: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: valueDate,
          },
          DOC_DESCRP_b: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: narration,
          },
          PAYMENT_ID: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: paymentID,
          },
          SCHEDULE_DATA_B: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: JSON.stringify(scheduleArray),
          },
          APPROVALTERMINAL_b: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: os.hostname(),
          },
          APPROVALSCANDOC: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: approvalScanDoc,
          },
          api_status: {
            type: oracledb.STRING,
            dir: oracledb.BIND_OUT,
          },
          api_msg: {
            type: oracledb.STRING,
            dir: oracledb.BIND_OUT,
          },
        },

        function (err, result) {
          if (err) {
            throw err;
          }
          // return res.send(p)

          if (result) {
            // console.log(posting_machine_ip,"posting_machine_ip")
            if (result.outBinds.api_status === "Y") {
              let message = result.outBinds.api_msg;
              response = {
                success: result.outBinds.api_status,
                // credit_postings : p,
                message: message,
                // token_id: tokennumber(50),
              };

              res.send(response);
            } else {
              let message = result.outBinds.api_msg;

              response = {
                success: result.outBinds.api_status,
                message: message,
                // token_id: tokennumber(50),
              };

              res.send(response);
            }
          }
        }
      );
    } catch (err) {
      res.send(err);
    }
  }

  PostPayableManual();
});

// Get PAYABLE DETAILS MANUAL
app.post("/api/get-payable-details-manual", (req, res) => {
  const beneficiaryAcct = "'" + req.body.beneficiaryAcct + "'";
  const frequency = req.body.frequency;
  const invoiceNumber = req.body.invoiceNumber;
  const narration = req.body.narration;

  async function getPayableScheduleDetailsManual() {
    let con;

    try {
      con = await oracledb.getConnection({
        user: DB_USER,
        password: DB_PASSWORD,
        connectString: DB_CONNECTION_STRING,
      });

      const response = [];
      const resp = [];
      let arr0 = "";

      // node native promisify
      // const execute = util.promisify(db.execute).bind(db);

      const data = await con.execute(`
      SELECT BENEFICIARY_ACCT ||' - ' || GET_ACCTDESC(BENEFICIARY_ACCT) BENEFICIARY_ACCT,POSTING_DATE,INVOICE_NUMBER,
      EXPENSE_REFERENCE,TAXABLE_AMOUNT,GET_FREQ_DESC(FREQUENCY) FREQUENCY,NARRATION FROM VW_TB_ACCT_PAYABLE_POSTING WHERE flag='Y' AND
      AP_ACCT LIKE ('%'||${beneficiaryAcct}||'%') AND FREQUENCY LIKE ('%'||'${frequency}'||'%') AND INVOICE_NUMBER LIKE 
      ('%'||'${invoiceNumber}'||'%') AND NARRATION LIKE ('%'||'${narration}'||'%') ORDER BY EXPENSE_REFERENCE DESC
      `);
      // OR FREQUENCY LIKE ${frequency} OR EXPENSE_REFERENCE LIKE ${payableID} OR INVOICE_NUMBER LIKE ${invoice}
      // ('%'||'${PREPAYMENT_ACCT}'||'%')

      if (data) {
        for (let i = 0; i < data.rows.length; i++) {
          for (let x = 0; x < data.metaData.length; x++) {
            arr0 +=
              '"' +
              [data.metaData[x].name.toLowerCase()] +
              '" : "' +
              data.rows[i][x] +
              '",';
          }

          response.push(
            JSON.parse(
              "{" +
                arr0.replace(/(\r\n|\n|\r)/gm, "").replace(/,\s*$/, "") +
                "}"
            )
          );
          for (let i = 0; i < response.length; i++) {
            const postingDate = new Date(response[i].posting_date);

            response[i].posting_date =
              postingDate.getDate().toString().padStart(2, "0") +
              "-" +
              postingDate
                .toLocaleString("default", { month: "short" })
                .toUpperCase() +
              "-" +
              postingDate.getFullYear().toString();
          }
        }
        res.send(response);
      } else {
        res.send(err);
        console.log("error");
      }
    } catch (err) {
      res.send(err);

      throw err;
    }
  }

  getPayableScheduleDetailsManual();
});

//PAYABLE POSTING APPROVAL DETAILS
app.post("/api/get-payable-approval-details", (req, res) => {
  async function getPayableApprovalDetails() {
    let con;

    try {
      con = await oracledb.getConnection({
        user: DB_USER,
        password: DB_PASSWORD,
        connectString: DB_CONNECTION_STRING,
      });
      const expense_reference = "'" + req.body.expense_reference + "'";

      const response = [];
      const headLevel = [];
      const arr = [];
      let arr0 = "";

      // node native promisify
      // const execute = util.promisify(db.execute).bind(db);

      const data = await con.execute(`
      SELECT (AP_ACCT||' - '||get_acctdesc(AP_ACCT)) AP_ACCT,(FREQUENCY ||' - '||GET_FREQ_DESC(FREQUENCY)) FREQUENCY,EXPENSE_DOC_ID,
      (EXPENSE_ACCT_LINK||' - '||get_acctdesc(EXPENSE_ACCT_LINK)) EXPENSE_ACCT_LINK,NARRATION,TOTAL_EXP_AMOUNT,USER_NAME,
      (BRANCH_CODE ||' - '|| GET_BRANCHDESC(BRANCH_CODE)) BRANCH, BENEFICIARY_ACCT,  DECODE(PAYMENT_MODE,'A','AUTOMATIC','M','MANUAL') PAYMENT_MODE,
       TAX_MODE,TAXABLE_AMOUNT,USER_REFERENCE,INVOICE_NUMBER,INVOICE_DATE,DATE_RECEIVED,TENOR,TAX_PAYMENT,
       (EX_BRANCH ||' - '|| GET_BRANCHDESC(EX_BRANCH)) EX_BRANCH,EXPENSE_REFERENCE,GET_ACCTCURRCODE(AP_ACCT) CURR_CODE FROM VW_PAYABLE_POSTING
      WHERE EXPENSE_REFERENCE=${expense_reference}  
      `);

      if (data) {
        for (let i = 0; i < data.rows.length; i++) {
          for (let x = 0; x < data.metaData.length; x++) {
            arr0 +=
              '"' +
              [data.metaData[x].name.toLowerCase()] +
              '" : "' +
              data.rows[i][x] +
              '",';
          }

          response.push(
            JSON.parse(
              "{" +
                arr0.replace(/(\r\n|\n|\r)/gm, "").replace(/,\s*$/, "") +
                "}"
            )
          );
        }

        for (let i = 0; i < response.length; i++) {
          const months = [
            "JAN",
            "FEB",
            "MAR",
            "APR",
            "MAY",
            "JUN",
            "JUL",
            "AUG",
            "SEP",
            "OCT",
            "NOV",
            "DEC",
          ];
          const invoiceDate = new Date(response[i].invoice_date);
          response[i].invoice_date = `${invoiceDate.getDate()}-${
            months[invoiceDate.getMonth()]
          }-${invoiceDate.getFullYear()}`;

          const dateReceived = new Date(response[i].date_received);
          response[i].date_received = `${dateReceived.getDate()}-${
            months[dateReceived.getMonth()]
          }-${dateReceived.getFullYear()}`;
        }

        res.send(response);
      } else {
        res.send(err);
        console.log("error");
      }
    } catch (err) {
      res.send(err);

      throw err;
    }
  }

  getPayableApprovalDetails();
});

//PAYABLE POSTING APPROVAL SCHEDULEDETAILS
app.post("/api/get-payable-approval-schedule-details", (req, res) => {
  async function getPayableApprovalSchedule() {
    let con;

    try {
      con = await oracledb.getConnection({
        user: DB_USER,
        password: DB_PASSWORD,
        connectString: DB_CONNECTION_STRING,
      });
      const expense_reference = "'" + req.body.expense_reference + "'";

      const response = [];
      const headLevel = [];
      const arr = [];
      let arr0 = "";

      // node native promisify
      // const execute = util.promisify(db.execute).bind(db);

      const data = await con.execute(`
      SELECT
      (PAYABLE_ACCOUNT||' - '||get_acctdesc(PAYABLE_ACCOUNT)) as PAYABLE_ACCOUNT_desc,  (EXPENSE_AMOUNT ||' - '|| get_acctdesc(EXPENSE_AMOUNT)) EXPENSE_ACCOUNT,
      DUE_AMOUNT,DUE_DATE,FREQUENCY,FREQUENCY_DESC,
      BRANCH_CODE, BRANCH_DESC, NARRATION , PAYMENT_SEQUNCE
      FROM VW_GL_PAYMENT_SCHEDULE
      where EXPENSE_REF_DET= ${expense_reference} ORDER BY PAYMENT_SEQUNCE 
      `);

      if (data) {
        for (let i = 0; i < data.rows.length; i++) {
          for (let x = 0; x < data.metaData.length; x++) {
            arr0 +=
              '"' +
              [data.metaData[x].name.toLowerCase()] +
              '" : "' +
              data.rows[i][x] +
              '",';
          }

          response.push(
            JSON.parse(
              "{" +
                arr0.replace(/(\r\n|\n|\r)/gm, "").replace(/,\s*$/, "") +
                "}"
            )
          );
        }

        for (let i = 0; i < response.length; i++) {
          const months = [
            "JAN",
            "FEB",
            "MAR",
            "APR",
            "MAY",
            "JUN",
            "JUL",
            "AUG",
            "SEP",
            "OCT",
            "NOV",
            "DEC",
          ];
          const dueDate = new Date(response[i].due_date);
          response[i].due_date = `${dueDate.getDate()}-${
            months[dueDate.getMonth()]
          }-${dueDate.getFullYear()}`;
        }

        res.send(response);
      } else {
        res.send(err);
        console.log("error");
      }
    } catch (err) {
      res.send(err);

      throw err;
    }
  }

  getPayableApprovalSchedule();
});

// GET PREPAYMENT SCHEDULE APPROVAL DETAILS
app.post("/api/get-prepayment_manual_approval_details", (req, res) => {
  async function getPrepaymentManualScheduleApprovalDetails() {
    let con;

    try {
      con = await oracledb.getConnection({
        user: DB_USER,
        password: DB_PASSWORD,
        connectString: DB_CONNECTION_STRING,
      });

      const paymentID = "'" + req.body.paymentID + "'";
      // const reportDate = "'" + req.body.reportDate + "'";
      const response = [];
      const resp = [];
      let arr0 = "";

      const data = await con.execute(`
      SELECT  BATCH_NO,DECODE(PAYMENT_FLAG,'P','Paid','R','Reversed','C','Cancelled','S','Suspended') PAYMENT_FLAG,
      ACCT_LINK1 ||' - '||GET_ACCTDESC(ACCT_LINK1) ACCT_LINK1 ,ACCT_LINK2||' - '||GET_ACCTDESC(ACCT_LINK2) ACCT_LINK2,GET_FREQ_DESC(FREQUENCY) FREQUENCY,DUE_DATE,DUE_AMOUNT,PAYMENT_ID,SCAN_DOC_ID,DOC_DESCRP,REFERENCE_NBR FROM VW_prepayment_SCHEDULE_AP WHERE PAYMENT_ID=${paymentID}
      `);

      if (data) {
        for (let i = 0; i < data.rows.length; i++) {
          for (let x = 0; x < data.metaData.length; x++) {
            arr0 +=
              '"' +
              [data.metaData[x].name.toLowerCase()] +
              '" : "' +
              data.rows[i][x] +
              '",';
          }

          response.push(
            JSON.parse(
              "{" +
                arr0.replace(/(\r\n|\n|\r)/gm, "").replace(/,\s*$/, "") +
                "}"
            )
          );

          for (let i = 0; i < response.length; i++) {
            const postingDate = new Date(response[i].due_date);

            response[i].due_date =
              postingDate.getDate().toString().padStart(2, "0") +
              "-" +
              postingDate
                .toLocaleString("default", { month: "short" })
                .toUpperCase() +
              "-" +
              postingDate.getFullYear().toString();
          }
          // console.log(response,"resssss")
        }

        res.send(response);
      } else {
        res.send(err);
        // console.log("error");
      }
    } catch (err) {
      res.send(err);

      throw err;
    }
  }

  getPrepaymentManualScheduleApprovalDetails();
});

//PAYABLE POSTING APPROVAL DETAILS  TAX
app.post("/api/get-payable-approval-tax-details", (req, res) => {
  async function getPayableApprovalTaxDetails() {
    let con;

    try {
      con = await oracledb.getConnection({
        user: DB_USER,
        password: DB_PASSWORD,
        connectString: DB_CONNECTION_STRING,
      });
      const expense_reference = "'" + req.body.expense_reference + "'";

      const response = [];
      const headLevel = [];
      const arr = [];
      let arr0 = "";

      // node native promisify
      // const execute = util.promisify(db.execute).bind(db);

      const data = await con.execute(`
      SELECT TAX_CODE,GET_TAXDESC(TAX_CODE) TAX_DESCRIPTION ,(TAX_ACCOUNT||' - '||get_acctdesc(TAX_ACCOUNT)) TAX_ACCOUNT,get_currdesc(CURRENCY) CURRENCY ,DECODE(TYPE_OF_FEE,'P','PERCENT','A','AMOUNT') TYPE_OF_FEE,FEE_RATE,CALC_AMT FROM VW_VENDOR_EXP_TAXES WHERE BATCH_NO = ${expense_reference}
      `);

      if (data) {
        for (let i = 0; i < data.rows.length; i++) {
          for (let x = 0; x < data.metaData.length; x++) {
            arr0 +=
              '"' +
              [data.metaData[x].name.toLowerCase()] +
              '" : "' +
              data.rows[i][x] +
              '",';
          }

          response.push(
            JSON.parse(
              "{" +
                arr0.replace(/(\r\n|\n|\r)/gm, "").replace(/,\s*$/, "") +
                "}"
            )
          );
        }

        res.send(response);
      } else {
        res.send(err);
        console.log("error");
      }
    } catch (err) {
      res.send(err);

      throw err;
    }
  }

  getPayableApprovalTaxDetails();
});

//frequency lov API
app.get("/api/get-frequency", (req, res) => {
  async function getFrequencyDetails() {
    let con;

    try {
      con = await oracledb.getConnection({
        user: DB_USER,
        password: DB_PASSWORD,
        connectString: DB_CONNECTION_STRING,
      });

      const response = [];
      const headLevel = [];
      const arr = [];
      let arr0 = "";

      // node native promisify
      // const execute = util.promisify(db.execute).bind(db);

      const data = await con.execute(`
      select TERMS_ID, TERMS_DESCRP from PAYMENT_TERMS_INSTALL ORDER BY TERMS_ID
      `);

      if (data.rows) {
        for (let i = 0; i < data.rows.length; i++) {
          const description = data.rows[i][1];
          const actual_code = data.rows[i][0];
          const short_descrp = data.rows[i][2];

          response.push({
            label: actual_code + " - " + description,
            value: actual_code,
            // short_descrp: short_descrp,
          });
        }

        res.send(response);
      } else {
        res.send(err);
        console.log("error");
      }
    } catch (err) {
      res.send(err);

      throw err;
    }
  }

  getFrequencyDetails();
});

//ACCOUNTPAYABLE lov API
app.get("/api/get-apaccount", (req, res) => {
  async function getAPAccount() {
    let con;

    try {
      con = await oracledb.getConnection({
        user: DB_USER,
        password: DB_PASSWORD,
        connectString: DB_CONNECTION_STRING,
      });

      const response = [];
      const headLevel = [];
      const arr = [];
      let arr0 = "";

      // node native promisify
      // const execute = util.promisify(db.execute).bind(db);

      const data = await con.execute(`
      select account_descrp,acct_link,currency_code
from g_ledger where acct_link in (select tacct from chart_of_acct where chart_code in ('20000') and level_id='D' and 
account_class = 'ACCPAY')
      `);

      if (data.rows) {
        for (let i = 0; i < data.rows.length; i++) {
          const description = data.rows[i][0];
          const actual_code = data.rows[i][1];
          const currency_code = data.rows[i][2];

          response.push({
            label: actual_code + " - " + description,
            value: actual_code,
            curr_code: currency_code,
            // short_descrp: short_descrp,
          });
        }

        res.send(response);
      } else {
        res.send(err);
        console.log("error");
      }
    } catch (err) {
      res.send(err);

      throw err;
    }
  }

  getAPAccount();
});

app.post("/api/validateAcctNumber", (req, res) => {
  const accountNumber = req.body.accountNumber;
  const startDate = req.body.startDate;
  const endDate = req.body.endDate;
  const translimit = req.body.translimit;

  // console.log(req.body, "accountNumber");

  async function getTrans() {
    let con;
    try {
      con = await oracledb.getConnection({
        user: DB_USER,
        password: DB_PASSWORD,
        connectString: DB_CONNECTION_STRING,
        timeout: DB_CONNECTION_TIMEOUT,
      });
      const { accountNumber } = req.body;

      const data = await con.execute(
        `select count(*) from g_ledger where acct_link = '${accountNumber}'
               `
      );

      if (data?.rows[0][0] <= 0) {
        res.send({
          success: false,
          statusCode: 200,
          data: null,
          message: `Account Number : ${accountNumber} is invalid`,
        });
        return;
      }

      res.send({
        success: true,
        statusCode: 200,
        data: null,
        message: `Account Number : ${accountNumber} is invalid`,
      });
    } catch (err) {
      res.send(err);
    }
  }
  getTrans();
});

// finance voucher upload validation Procedure
app.post("/api/check_fin_voucher_acct_validation", (req, res) => {
  async function validateAccounts() {
    let con;

    try {
      con = await oracledb.getConnection({
        user: DB_USER,
        password: DB_PASSWORD,
        connectString: DB_CONNECTION_STRING,
      });
      // const ipAddress = getIPAddress().address;

      const {
        excel_details,
        transaction_details,
        // currency,
        document_ref,
        scan_doc_id,
      } = req.body;

      const hostname = os.hostname();
      const machine_ip = ip.address();
      con.execute(
        "BEGIN PRC_FIN_VOUCHER_ACCTS_VAL(:VOUCHER_DATA_B ,:transaction_details_p, :document_ref_p, :scan_doc_id_p,  :VOUCHER_DATA_B_ERR , :api_status  , :api_msg   ); END;",
        {
          VOUCHER_DATA_B: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: JSON.stringify(excel_details),
          },
          transaction_details_p: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: transaction_details,
          },
          document_ref_p: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: document_ref,
          },
          scan_doc_id_p: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: scan_doc_id,
          },
          VOUCHER_DATA_B_ERR: {
            type: oracledb.CLOB,
            dir: oracledb.BIND_OUT,
            // maxSize: 32767,
          },
          api_status: {
            type: oracledb.STRING,
            dir: oracledb.BIND_OUT,
          },
          api_msg: {
            type: oracledb.STRING,
            dir: oracledb.BIND_OUT,
          },
        },

        function (err, result) {
          if (err) {
            res.send("Internal Server Error...");
            console.log(err);
          }
          if (result) {
            if (result.outBinds.api_status === "Y") {
              let errArray = "";
              // Check if VOUCHER_DATA_B_ERR is a stream (CLOB)
              if (result.outBinds.VOUCHER_DATA_B_ERR instanceof oracledb.Lob) {
                let clobStream = result.outBinds.VOUCHER_DATA_B_ERR;
                clobStream.setEncoding("utf8"); // Ensure correct encoding

                clobStream.on("data", (chunk) => {
                  errArray += chunk; // Read the CLOB as it streams
                });

                clobStream.on("end", () => {
                  try {
                    // Parse the final CLOB string as JSON
                    let parsedErrArray = JSON.parse(errArray);

                    const response = {
                      success: result.outBinds.api_status,
                      message: result.outBinds.api_msg,
                      err_array: parsedErrArray,
                    };

                    res.send(response);
                  } catch (parseError) {
                    // Handle any JSON parsing errors
                    console.error("Error parsing JSON:", parseError);
                    res.send({
                      success: result.outBinds.api_status,
                      message: result.outBinds.api_msg,
                      err_array: errArray, // Send the raw CLOB string if parsing fails
                    });
                  }
                });
              }
              // let message = result.outBinds.api_msg;
              // response = {
              //   success: result.outBinds.api_status,
              //   message: message,
              //   err_array: result.outBinds.VOUCHER_DATA_B_ERR,
              // };

              // res.send(response);
            } else {
              let message = result.outBinds.api_msg;

              response = {
                success: result.outBinds.api_status,
                message: message,
                err_array: JSON.parse(result.outBinds.VOUCHER_DATA_B_ERR),
              };

              res.send(response);
            }
          }
        }
      );
    } catch (err) {
      res.send(err);
    }
  }

  validateAccounts();
});

// GL Budget Procedure
app.post("/api/post_gl_budget_setup", (req, res) => {
  async function postBudgetSetup() {
    let con;

    try {
      con = await oracledb.getConnection({
        user: DB_USER,
        password: DB_PASSWORD,
        connectString: DB_CONNECTION_STRING,
      });
      // const ipAddress = getIPAddress().address;

      const {
        flag,
        budget_code,
        budget_description,
        budget_title,
        budget_method,
        budget_status,
        budget_year,
        amt_dist_method,
        budget_value,
        rounding_factor,
        budget_type,
        username,
        previous_budget,
      } = req.body;

      const hostname = os.hostname();
      const machine_ip = ip.address();
      con.execute(
        "BEGIN PKG_GL_BUDGET_SETUP.prc_fin_budget_setup(:flag_p , :BUDGET_CODE_p , :BUDGET_DESCRP_p, :BUDGET_TITLE_p, :BUDGET_METHOD_p , :BUDGET_STATUS_p  , :BUDGET_YEAR_p  , :AMT_DIST_METHOD_p  , :BUDGET_VALUE_p  , :ROUNDING_FACTOR_p  , :BUDGET_TYPE_p , :USERNAME_p  , :HOSTNAME_P  , :MACHINE_IP  , :BUDGET_PRV_p  , :api_status  , :api_msg   ); END;",
        {
          flag_p: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: flag,
          },
          BUDGET_CODE_p: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: budget_code,
          },
          BUDGET_DESCRP_p: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: budget_description,
          },
          BUDGET_TITLE_p: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: budget_title,
          },
          BUDGET_METHOD_p: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: budget_method,
          },
          BUDGET_STATUS_p: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: budget_status,
          },
          BUDGET_YEAR_p: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: budget_year,
          },
          AMT_DIST_METHOD_p: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: amt_dist_method,
          },
          BUDGET_VALUE_p: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: budget_value,
          },
          ROUNDING_FACTOR_p: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: rounding_factor,
          },
          BUDGET_TYPE_p: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: budget_type,
          },
          USERNAME_p: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: username,
          },
          HOSTNAME_P: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: hostname,
          },
          MACHINE_IP: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: machine_ip,
          },
          BUDGET_PRV_p: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: previous_budget,
          },
          api_status: {
            type: oracledb.STRING,
            dir: oracledb.BIND_OUT,
          },
          api_msg: {
            type: oracledb.STRING,
            dir: oracledb.BIND_OUT,
          },
        },

        function (err, result) {
          if (err) {
            throw err;
          }
          if (result) {
            if (result.outBinds.api_status === "Y") {
              let message = result.outBinds.api_msg;
              response = {
                success: result.outBinds.api_status,
                message: message,
              };

              res.send(response);
            } else {
              let message = result.outBinds.api_msg;

              response = {
                success: result.outBinds.api_status,
                message: message,
              };

              res.send(response);
            }
          }
        }
      );
    } catch (err) {
      res.send(err);
    }
  }

  postBudgetSetup();
});

//get previous budget lov
app.get("/api/get-previous-budget", (req, res) => {
  async function getPreviousBudget() {
    let con;

    try {
      con = await oracledb.getConnection({
        user: DB_USER,
        password: DB_PASSWORD,
        connectString: DB_CONNECTION_STRING,
      });

      const response = [];
      const headLevel = [];
      const arr = [];
      let arr0 = "";

      // node native promisify
      // const execute = util.promisify(db.execute).bind(db);

      const data = await con.execute(`
        SELECT BUDGET_CODE,BUDGET_DESCRP
FROM TB_BUDGET_REVISIONS
      `);

      if (data.rows) {
        for (let i = 0; i < data.rows.length; i++) {
          const description = data.rows[i][1];
          const actual_code = data.rows[i][0];

          response.push({
            label: actual_code + " - " + description,
            value: actual_code,
          });
        }

        res.send(response);
      } else {
        res.send(err);
        console.log("error");
      }
    } catch (err) {
      res.send(err);

      throw err;
    }
  }

  getPreviousBudget();
});

//get previous budget details
app.post("/api/get-previous-budget-details", (req, res) => {
  const { budget_code } = req.body;
  async function getPreviousBudgetDetails() {
    let con;

    try {
      con = await oracledb.getConnection({
        user: DB_USER,
        password: DB_PASSWORD,
        connectString: DB_CONNECTION_STRING,
      });

      const response = [];
      const headLevel = [];
      const arr = [];
      let arr0 = "";

      // node native promisify
      // const execute = util.promisify(db.execute).bind(db);

      const data = await con.execute(`
        SELECT BUDGET_CODE,BUDGET_DESCRP,BUDGET_TITLE,BUDGET_TYPE,BUDGET_STATUS,BUDGET_YEAR
FROM TB_BUDGET_REVISIONS WHERE BUDGET_CODE= '${budget_code}'
      `);

      if (data.rows) {
        for (let i = 0; i < data.rows.length; i++) {
          for (let x = 0; x < data.metaData.length; x++) {
            arr0 +=
              '"' +
              [data.metaData[x].name.toLowerCase()] +
              '" : "' +
              data.rows[i][x] +
              '",';
          }

          response.push(
            JSON.parse(
              "{" +
                arr0.replace(/(\r\n|\n|\r)/gm, "").replace(/,\s*$/, "") +
                "}"
            )
          );
        }

        res.send(response);
      } else {
        res.send(err);
        console.log("error");
      }
    } catch (err) {
      res.send(err);

      throw err;
    }
  }

  getPreviousBudgetDetails();
});

//get budget details FOR APPROVAL
app.post("/api/get-budget-details-approval", (req, res) => {
  const {
    BUDGET_CODE,
    BUDGET_DESCRP,
    BUDGET_TITLE,
    BUDGET_YEAR,
    BUDGET_STATUS,
    BUDGET_TYPE,
    key,
    postedBy,
    flag,
  } = req.body;

  async function getBudgetApproval() {
    let con;

    try {
      con = await oracledb.getConnection({
        user: DB_USER,
        password: DB_PASSWORD,
        connectString: DB_CONNECTION_STRING,
      });

      const response = [];
      const headLevel = [];
      const arr = [];
      let arr0 = "";

      // node native promisify
      // const execute = util.promisify(db.execute).bind(db);

      const data = await con.execute(
        key === "amend"
          ? `
          SELECT budget_code,BUDGET_DESCRP,BUDGET_TITLE,BUDGET_YEAR,DECODE(BUDGET_STATUS,'O','Open','C','Current','F','Frozen')BUDGET_STATUS,DECODE(BUDGET_TYPE, 'PL','Profit and Loss','BS','Balance Sheet') BUDGET_TYPE,POSTED_BY
           FROM TB_BUDGET_REVISIONS WHERE
           budget_code like '%'||'${BUDGET_CODE}'||'%'
          and UPPER(BUDGET_DESCRP) LIKE '%'||UPPER('${BUDGET_DESCRP}')||'%'
           and UPPER(BUDGET_TITLE) LIKE '%'||UPPER('${BUDGET_TITLE}')||'%' and
            BUDGET_YEAR like '%'||'${BUDGET_YEAR}'||'%'  and BUDGET_STATUS LIKE '%'||'${BUDGET_STATUS}'||'%'
          and BUDGET_TYPE like '%'||'${BUDGET_TYPE}'||'%' ORDER BY budget_code ASC
                `
          : key === "amendApproval"
          ? `
          SELECT budget_code,BUDGET_DESCRP,BUDGET_TITLE,BUDGET_YEAR,DECODE(BUDGET_STATUS,'O','Open','C','Current','F','Frozen')BUDGET_STATUS,DECODE(BUDGET_TYPE, 'PL','Profit and Loss','BS','Balance Sheet') BUDGET_TYPE,POSTED_BY
 FROM TB_BUDGET_REVISIONS_TEMP WHERE FLAG = 'A' and 
 budget_code like '%'||'${BUDGET_CODE}'||'%' 
and UPPER(BUDGET_DESCRP) LIKE '%'||UPPER('${BUDGET_DESCRP}')||'%'
 and UPPER(BUDGET_TITLE) LIKE '%'||UPPER('${BUDGET_TITLE}')||'%' and
  BUDGET_YEAR like '%'||'${BUDGET_YEAR}'||'%'  and BUDGET_STATUS LIKE '%'||'${BUDGET_STATUS}'||'%'
and BUDGET_TYPE like '%'||'${BUDGET_TYPE}'||'%' ORDER BY budget_code ASC
          `
          : key === "enq"
          ? `
          SELECT budget_code,BUDGET_DESCRP,BUDGET_TITLE,BUDGET_YEAR,DECODE(BUDGET_STATUS,'O','Open','C','Current','F','Frozen')BUDGET_STATUS,DECODE(BUDGET_TYPE, 'PL','Profit and Loss','BS','Balance Sheet') BUDGET_TYPE,POSTED_BY,DECODE(FLAG, 'R','Rejected','N','Pending Approval','Y','Approved') FLAG
           FROM TB_BUDGET_REVISIONS WHERE
           budget_code like '%'||'${BUDGET_CODE}'||'%'
          and UPPER(BUDGET_DESCRP) LIKE '%'||UPPER('${BUDGET_DESCRP}')||'%'
           and UPPER(BUDGET_TITLE) LIKE '%'||UPPER('${BUDGET_TITLE}')||'%' and
            BUDGET_YEAR like '%'||'${BUDGET_YEAR}'||'%'  and BUDGET_STATUS LIKE '%'||'${BUDGET_STATUS}'||'%'
          and BUDGET_TYPE like '%'||'${BUDGET_TYPE}'||'%' and FLAG like '%'||'${flag}'||'%' and UPPER(POSTED_BY) like '%'||UPPER('${postedBy}')||'%' ORDER BY budget_code ASC
          `
          : `
SELECT budget_code,BUDGET_DESCRP,BUDGET_TITLE,BUDGET_YEAR,DECODE(BUDGET_STATUS,'O','Open','C','Current','F','Frozen')BUDGET_STATUS,DECODE(BUDGET_TYPE, 'PL','Profit and Loss','BS','Balance Sheet') BUDGET_TYPE,POSTED_BY,PRE_BUDGET_CODE
 FROM TB_BUDGET_REVISIONS WHERE FLAG = 'N' 
and budget_code like '%'||'${BUDGET_CODE}'||'%' 
and UPPER(BUDGET_DESCRP) LIKE '%'||UPPER('${BUDGET_DESCRP}')||'%'
 and UPPER(BUDGET_TITLE) LIKE '%'||UPPER('${BUDGET_TITLE}')||'%' and
  BUDGET_YEAR like '%'||'${BUDGET_YEAR}'||'%'  and BUDGET_STATUS LIKE '%'||'${BUDGET_STATUS}'||'%'
and BUDGET_TYPE like '%'||'${BUDGET_TYPE}'||'%' ORDER BY budget_code ASC
      `
      );

      if (data.rows) {
        for (let i = 0; i < data.rows.length; i++) {
          for (let x = 0; x < data.metaData.length; x++) {
            arr0 +=
              '"' +
              [data.metaData[x].name.toLowerCase()] +
              '" : "' +
              data.rows[i][x] +
              '",';
          }

          response.push(
            JSON.parse(
              "{" +
                arr0.replace(/(\r\n|\n|\r)/gm, "").replace(/,\s*$/, "") +
                "}"
            )
          );
        }

        res.send(response);
      } else {
        res.send(err);
        console.log("error");
      }
    } catch (err) {
      res.send(err);

      throw err;
    }
  }

  getBudgetApproval();
});

//check if budget is already amended
app.post("/api/get-validate-budget-amended", (req, res) => {
  const { budget_code } = req.body;
  async function getCountBudgetAmended() {
    let con;

    try {
      con = await oracledb.getConnection({
        user: DB_USER,
        password: DB_PASSWORD,
        connectString: DB_CONNECTION_STRING,
      });

      const response = [];
      const headLevel = [];
      const arr = [];
      let arr0 = "";

      // node native promisify
      // const execute = util.promisify(db.execute).bind(db);

      const data = await con.execute(`
        select count(flag) count from TB_BUDGET_REVISIONS_TEMP
	where budget_code='${budget_code}' and flag='A'
      `);

      if (data.rows) {
        for (let i = 0; i < data.rows.length; i++) {
          for (let x = 0; x < data.metaData.length; x++) {
            arr0 +=
              '"' +
              [data.metaData[x].name.toLowerCase()] +
              '" : "' +
              data.rows[i][x] +
              '",';
          }

          response.push(
            JSON.parse(
              "{" +
                arr0.replace(/(\r\n|\n|\r)/gm, "").replace(/,\s*$/, "") +
                "}"
            )
          );
        }

        res.send(response);
      } else {
        res.send(err);
        console.log("error");
      }
    } catch (err) {
      res.send(err);

      throw err;
    }
  }

  getCountBudgetAmended();
});

//get budget details FOR APPROVAL
app.post("/api/get-budget-details-approval", (req, res) => {
  const {
    BUDGET_CODE,
    BUDGET_DESCRP,
    BUDGET_TITLE,
    BUDGET_YEAR,
    BUDGET_STATUS,
    BUDGET_TYPE,
    key,
    postedBy,
    flag,
  } = req.body;

  async function getBudgetApproval() {
    let con;

    try {
      con = await oracledb.getConnection({
        user: DB_USER,
        password: DB_PASSWORD,
        connectString: DB_CONNECTION_STRING,
      });

      const response = [];
      const headLevel = [];
      const arr = [];
      let arr0 = "";

      // node native promisify
      // const execute = util.promisify(db.execute).bind(db);

      const data = await con.execute(
        key === "amend"
          ? `
          SELECT budget_code,BUDGET_DESCRP,BUDGET_TITLE,BUDGET_YEAR,DECODE(BUDGET_STATUS,'O','Open','C','Current','F','Frozen')BUDGET_STATUS,DECODE(BUDGET_TYPE, 'PL','Profit and Loss','BS','Balance Sheet') BUDGET_TYPE,POSTED_BY
           FROM TB_BUDGET_REVISIONS WHERE
           budget_code like '%'||'${BUDGET_CODE}'||'%'
          and UPPER(BUDGET_DESCRP) LIKE '%'||UPPER('${BUDGET_DESCRP}')||'%'
           and UPPER(BUDGET_TITLE) LIKE '%'||UPPER('${BUDGET_TITLE}')||'%' and
            BUDGET_YEAR like '%'||'${BUDGET_YEAR}'||'%'  and BUDGET_STATUS LIKE '%'||'${BUDGET_STATUS}'||'%'
          and BUDGET_TYPE like '%'||'${BUDGET_TYPE}'||'%' ORDER BY budget_code ASC
                `
          : key === "amendApproval"
          ? `
          SELECT budget_code,BUDGET_DESCRP,BUDGET_TITLE,BUDGET_YEAR,DECODE(BUDGET_STATUS,'O','Open','C','Current','F','Frozen')BUDGET_STATUS,DECODE(BUDGET_TYPE, 'PL','Profit and Loss','BS','Balance Sheet') BUDGET_TYPE,POSTED_BY
 FROM TB_BUDGET_REVISIONS_TEMP WHERE FLAG = 'A' and 
 budget_code like '%'||'${BUDGET_CODE}'||'%' 
and UPPER(BUDGET_DESCRP) LIKE '%'||UPPER('${BUDGET_DESCRP}')||'%'
 and UPPER(BUDGET_TITLE) LIKE '%'||UPPER('${BUDGET_TITLE}')||'%' and
  BUDGET_YEAR like '%'||'${BUDGET_YEAR}'||'%'  and BUDGET_STATUS LIKE '%'||'${BUDGET_STATUS}'||'%'
and BUDGET_TYPE like '%'||'${BUDGET_TYPE}'||'%' ORDER BY budget_code ASC
          `
          : key === "enq"
          ? `
          SELECT budget_code,BUDGET_DESCRP,BUDGET_TITLE,BUDGET_YEAR,DECODE(BUDGET_STATUS,'O','Open','C','Current','F','Frozen')BUDGET_STATUS,DECODE(BUDGET_TYPE, 'PL','Profit and Loss','BS','Balance Sheet') BUDGET_TYPE,POSTED_BY,DECODE(FLAG, 'R','Rejected','N','Pending Approval','Y','Approved') FLAG
           FROM TB_BUDGET_REVISIONS WHERE
           budget_code like '%'||'${BUDGET_CODE}'||'%'
          and UPPER(BUDGET_DESCRP) LIKE '%'||UPPER('${BUDGET_DESCRP}')||'%'
           and UPPER(BUDGET_TITLE) LIKE '%'||UPPER('${BUDGET_TITLE}')||'%' and
            BUDGET_YEAR like '%'||'${BUDGET_YEAR}'||'%'  and BUDGET_STATUS LIKE '%'||'${BUDGET_STATUS}'||'%'
          and BUDGET_TYPE like '%'||'${BUDGET_TYPE}'||'%' and FLAG like '%'||'${flag}'||'%' and UPPER(POSTED_BY) like '%'||UPPER('${postedBy}')||'%' ORDER BY budget_code ASC
          `
          : `
SELECT budget_code,BUDGET_DESCRP,BUDGET_TITLE,BUDGET_YEAR,DECODE(BUDGET_STATUS,'O','Open','C','Current','F','Frozen')BUDGET_STATUS,DECODE(BUDGET_TYPE, 'PL','Profit and Loss','BS','Balance Sheet') BUDGET_TYPE,POSTED_BY,PRE_BUDGET_CODE
 FROM TB_BUDGET_REVISIONS WHERE FLAG = 'N' 
and budget_code like '%'||'${BUDGET_CODE}'||'%' 
and UPPER(BUDGET_DESCRP) LIKE '%'||UPPER('${BUDGET_DESCRP}')||'%'
 and UPPER(BUDGET_TITLE) LIKE '%'||UPPER('${BUDGET_TITLE}')||'%' and
  BUDGET_YEAR like '%'||'${BUDGET_YEAR}'||'%'  and BUDGET_STATUS LIKE '%'||'${BUDGET_STATUS}'||'%'
and BUDGET_TYPE like '%'||'${BUDGET_TYPE}'||'%' ORDER BY budget_code ASC
      `
      );

      if (data.rows) {
        for (let i = 0; i < data.rows.length; i++) {
          for (let x = 0; x < data.metaData.length; x++) {
            arr0 +=
              '"' +
              [data.metaData[x].name.toLowerCase()] +
              '" : "' +
              data.rows[i][x] +
              '",';
          }

          response.push(
            JSON.parse(
              "{" +
                arr0.replace(/(\r\n|\n|\r)/gm, "").replace(/,\s*$/, "") +
                "}"
            )
          );
        }

        res.send(response);
      } else {
        res.send(err);
        console.log("error");
      }
    } catch (err) {
      res.send(err);

      throw err;
    }
  }

  getBudgetApproval();
});

//get global budget
app.post("/api/get-budget-details-global", (req, res) => {
  const {
    BUDGET_CODE,
    BUDGET_DESCRP,
    BUDGET_TITLE,
    BUDGET_YEAR,
    BUDGET_STATUS,
    BUDGET_TYPE,
    key,
    postedBy,
    flag,
    acct_number,
  } = req.body;

  async function getBudgetDetailsGlobal() {
    let con;

    try {
      con = await oracledb.getConnection({
        user: DB_USER,
        password: DB_PASSWORD,
        connectString: DB_CONNECTION_STRING,
      });

      const response = [];
      const headLevel = [];
      const arr = [];
      let arr0 = "";

      // node native promisify
      // const execute = util.promisify(db.execute).bind(db);

      const data = await con.execute(
        key === "gbenq"
          ? `
        select budget_code,BUDGET_DESCRP,BUDGET_TITLE,BUDGET_YEAR,DECODE(BUDGET_STATUS,'O','Open','C','Current','F','Frozen')BUDGET_STATUS,FLAG_MESSAGE
        from VW_BUDGET_GLOBAL_SUM_ENQ WHERE 
 budget_code like '%'||'${BUDGET_CODE}'||'%' 
and UPPER(BUDGET_DESCRP) LIKE '%'||UPPER('${BUDGET_DESCRP}')||'%'
 and UPPER(BUDGET_TITLE) LIKE '%'||UPPER('${BUDGET_TITLE}')||'%' and
  BUDGET_YEAR like '%'||'${BUDGET_YEAR}'||'%'  and BUDGET_STATUS LIKE '%'||'${BUDGET_STATUS}'||'%' ORDER BY budget_code ASC
        `
          : key === "gbenqDetails"
          ? `  select ACCT_LINK, GET_ACCTDESC(ACCT_LINK) ACCT_DESC, FLAG_MESSAGE, BUDGET_CODE,BUDGET_STATUS,BUDGET_DESCRP,BUDGET_TITLE,BUDGET_TYPE,
  MONTH_1,MONTH_2,MONTH_3,MONTH_4,MONTH_5,MONTH_6,MONTH_7,MONTH_8,MONTH_9,MONTH_10,MONTH_11,MONTH_12,YEAR_TOTAL from VW_BUDGET_GLOBAL where budget_code='${BUDGET_CODE}' AND COMPARISON_BUDGET(MONTH_1, 
   MONTH_2, MONTH_3, MONTH_4, 
   MONTH_5, MONTH_6, MONTH_7, 
   MONTH_8, MONTH_9, MONTH_10, 
   MONTH_11, MONTH_12,'${flag}')='${flag}'`
          : key === "gbenqtrans"
          ? `select budget_code,BUDGET_DESCRP,BUDGET_TITLE,ACCT_LINK,ACCOUNT_DESCRP,DISTRIBUTED_AMOUNT,BUDGET_YEAR,DECODE(BUDGET_STATUS,'O','Open','C','Current','F','Frozen') BUDGET_STATUS FROM VW_BUDGET_GLOBAL_ACCT_ENQ WHERE budget_code like '%'||'${BUDGET_CODE}'||'%'
        and BUDGET_DESCRP LIKE '%'||UPPER('${BUDGET_DESCRP}')||'%'
         and BUDGET_TITLE LIKE '%'||UPPER('${BUDGET_TITLE}')||'%' and BUDGET_YEAR like '%'||'${BUDGET_YEAR}'||'%' and BUDGET_STATUS LIKE '%'||'${BUDGET_STATUS}'||'%' AND
        ACCT_LINK LIKE '%'||'${acct_number}'||'%' order by budget_code DESC`
          : key === "gbenqtransdetails"
          ? `SELECT BATCH_NO, BATCH_DESCRP,DECODE(BUDGET_SOURCE,'P','Entry','U','Upload') BUDGET_SOURCE,MONTH_1, 
   MONTH_2, MONTH_3, MONTH_4,MONTH_5, MONTH_6, MONTH_7, 
   MONTH_8, MONTH_9, MONTH_10, 
   MONTH_11, MONTH_12,NVL(MONTH_1, 0) + NVL(MONTH_2, 0) + NVL(MONTH_3, 0) + NVL(MONTH_4, 0) + 
   NVL(MONTH_5, 0) + NVL(MONTH_6, 0) + NVL(MONTH_7, 0) + NVL(MONTH_8, 0) +
   NVL(MONTH_9, 0) + NVL(MONTH_10, 0) + NVL(MONTH_11, 0) + NVL(MONTH_12, 0)
   AS total_amount FROM TB_BUDGET_TRANS WHERE budget_code='${BUDGET_CODE}'
    AND ACCT_LINK='${acct_number}' AND POSTING_SOURCE NOT IN ('R', 'C')`
          : `
SELECT budget_code,BUDGET_DESCRP,BUDGET_TITLE,BUDGET_YEAR,DECODE(BUDGET_STATUS,'O','Open','C','Current','F','Frozen')BUDGET_STATUS,DECODE(BUDGET_TYPE, 'PL','Profit and Loss','BS','Balance Sheet') BUDGET_TYPE,POSTED_BY,PRE_BUDGET_CODE
 FROM TB_BUDGET_REVISIONS WHERE FLAG = 'Y' 
and budget_code like '%'||'${BUDGET_CODE}'||'%' 
and UPPER(BUDGET_DESCRP) LIKE '%'||UPPER('${BUDGET_DESCRP}')||'%'
 and UPPER(BUDGET_TITLE) LIKE '%'||UPPER('${BUDGET_TITLE}')||'%' and
  BUDGET_YEAR like '%'||'${BUDGET_YEAR}'||'%'  and BUDGET_STATUS LIKE '%'||'${BUDGET_STATUS}'||'%'
and BUDGET_TYPE like '%'||'${BUDGET_TYPE}'||'%' ORDER BY budget_code ASC
      `
      );

      if (data.rows) {
        for (let i = 0; i < data.rows.length; i++) {
          for (let x = 0; x < data.metaData.length; x++) {
            arr0 +=
              '"' +
              [data.metaData[x].name.toLowerCase()] +
              '" : "' +
              data.rows[i][x] +
              '",';
          }

          response.push(
            JSON.parse(
              "{" +
                arr0.replace(/(\r\n|\n|\r)/gm, "").replace(/,\s*$/, "") +
                "}"
            )
          );
        }

        res.send(response);
      } else {
        res.send(err);
        console.log("error");
      }
    } catch (err) {
      res.send(err);

      throw err;
    }
  }

  getBudgetDetailsGlobal();
});

//payable expense account lov API
app.post("/api/get-payable-expense-account", (req, res) => {
  async function getExpensePayableAccount() {
    let con;

    try {
      con = await oracledb.getConnection({
        user: DB_USER,
        password: DB_PASSWORD,
        connectString: DB_CONNECTION_STRING,
      });
      const currency = req.body.currency;

      const response = [];
      const headLevel = [];
      const arr = [];
      let arr0 = "";

      // node native promisify
      // const execute = util.promisify(db.execute).bind(db);

      const data = await con.execute(`
      select exp_type_descrp,exp_type_code,exp_type,TAX_MODE, PAYMENT_MODE,currency_code
      from VW_GEXP_TYPE 
      where currency_code=${currency}
      order by exp_type_code
      `);

      if (data.rows) {
        for (let i = 0; i < data.rows.length; i++) {
          const description = data.rows[i][0];
          const actual_code = data.rows[i][1];
          const expense_account = data.rows[i][2];

          response.push({
            label: actual_code + " - " + description,
            value: expense_account,
            // short_descrp: short_descrp,
          });
        }

        res.send(response);
      } else {
        res.send(err);
        console.log("error");
      }
    } catch (err) {
      res.send(err);

      throw err;
    }
  }

  getExpensePayableAccount();
});

//PAYABLE TAX API
app.get("/api/get-payable-tax", (req, res) => {
  async function getPayableTax() {
    let con;

    try {
      con = await oracledb.getConnection({
        user: DB_USER,
        password: DB_PASSWORD,
        connectString: DB_CONNECTION_STRING,
      });

      const response = [];
      const headLevel = [];
      const resp = [];
      let arr0 = "";

      // node native promisify
      // const execute = util.promisify(db.execute).bind(db);

      const data = await con.execute(`
      select  TAX_CODE , GET_TAXDESC(TAX_CODE) Tax_description, (CONTRA_ACCT||' - '||GET_ACCTDESC(CONTRA_ACCT))  account_description, CONTRA_ACCT, GET_CURRDESC(CURRENCY) currency, DECODE(TYPE_OF_FEE,'P','PERCENT','A','AMOUNT')
       TYPE_OF_FEE, FEE_AMOUNT,TRANS_CODE from VW_TB_VOUCHER_TAX where voucher_type='PAYA'
      `);

      if (data) {
        for (let i = 0; i < data.rows.length; i++) {
          for (let x = 0; x < data.metaData.length; x++) {
            arr0 +=
              '"' +
              [data.metaData[x].name.toLowerCase()] +
              '" : "' +
              data.rows[i][x] +
              '",';
          }

          response.push(
            JSON.parse(
              "{" +
                arr0.replace(/(\r\n|\n|\r)/gm, "").replace(/,\s*$/, "") +
                "}"
            )
          );
        }

        res.send(response);
      } else {
        res.send(err);
        console.log("error");
      }
    } catch (err) {
      res.send(err);

      throw err;
    }
  }

  getPayableTax();
});

//frequency AND REPAYMENT FREQUENCY API
app.post("/api/get-repayment_frequency", (req, res) => {
  async function getRepaymentFrequency() {
    let con;

    try {
      con = await oracledb.getConnection({
        user: DB_USER,
        password: DB_PASSWORD,
        connectString: DB_CONNECTION_STRING,
      });
      const tenor = "'" + req.body.tenor + "'";
      const frequency = "'" + req.body.frequency + "'";

      const response = [];
      const headLevel = [];
      const arr = [];
      let arr0 = "";

      // node native promisify
      // const execute = util.promisify(db.execute).bind(db);

      const data = await con.execute(`
      select GET_PAYFREQ(${frequency},${tenor}) repay_freq from dual
      `);

      if (data) {
        for (let i = 0; i < data.rows.length; i++) {
          for (let x = 0; x < data.metaData.length; x++) {
            arr0 +=
              '"' +
              [data.metaData[x].name.toLowerCase()] +
              '" : "' +
              data.rows[i][x] +
              '",';
          }

          response.push(
            JSON.parse(
              "{" +
                arr0.replace(/(\r\n|\n|\r)/gm, "").replace(/,\s*$/, "") +
                "}"
            )
          );
        }

        res.send(response);
      } else {
        res.send(err);
        console.log("error");
      }
    } catch (err) {
      res.send(err);

      throw err;
    }
  }

  getRepaymentFrequency();
});

// Get PAYABLE SCHEDULE DETAILS MANUAL
app.post("/api/get-payable-schedule-details-manual", (req, res) => {
  const payableID = "'" + req.body.payableID + "'";
  const due = "'" + req.body.due + "'";
  const status = "'" + req.body.status + "'";

  async function getPayableScheduleDetailsManual() {
    let con;

    try {
      con = await oracledb.getConnection({
        user: DB_USER,
        password: DB_PASSWORD,
        connectString: DB_CONNECTION_STRING,
      });

      const response = [];
      const resp = [];
      let arr0 = "";

      // node native promisify
      // const execute = util.promisify(db.execute).bind(db);

      const data = await con.execute(`
      SELECT PAYBLE_ID,ACCT_LINK1 ||' - '||GET_ACCTDESC(ACCT_LINK1) AP_ACCCT,ACCT_LINK2 ||' - '||GET_ACCTDESC(ACCT_LINK2) EXPENSE_ACCT,DUE_AMOUNT,GET_FREQ_DESC(FREQUENCY) FREQUENCY,
DUE_DATE,DOC_DESCRP,PAYMENT_ID,DECODE(PAYMENT_FLAG,'P','Paid','Y','Unpaid','N','Unapproved','R','Rejected','S','Suspend','C','Cancelled') STATUS,CASE WHEN DUE_DATE <= GET_POSTINGDATE THEN 'Y' ELSE 'N' END AS DUE
FROM VW_payable_SCHEDULE_SUM WHERE EXP_TYPE='PAYA' AND PAYBLE_ID=${payableID} AND PAYMENT_FLAG LIKE ('%'||${status}||'%') AND DUE LIKE ('%'||${due}||'%') ORDER BY PAYMENT_ID 
`);

      if (data) {
        for (let i = 0; i < data.rows.length; i++) {
          for (let x = 0; x < data.metaData.length; x++) {
            arr0 +=
              '"' +
              [data.metaData[x].name.toLowerCase()] +
              '" : "' +
              data.rows[i][x] +
              '",';
          }

          response.push(
            JSON.parse(
              "{" +
                arr0.replace(/(\r\n|\n|\r)/gm, "").replace(/,\s*$/, "") +
                "}"
            )
          );
          for (let i = 0; i < response.length; i++) {
            const postingDate = new Date(response[i].due_date);

            response[i].due_date =
              postingDate.getDate().toString().padStart(2, "0") +
              "-" +
              postingDate
                .toLocaleString("default", { month: "short" })
                .toUpperCase() +
              "-" +
              postingDate.getFullYear().toString();
          }
        }
        res.send(response);
      } else {
        res.send(err);
        console.log("error");
      }
    } catch (err) {
      res.send(err);

      throw err;
    }
  }

  getPayableScheduleDetailsManual();
});

// GET PAYABLE SCHEDULE APPROVAL DETAILS
app.post("/api/get-payable_schedule_manual_details", (req, res) => {
  async function getPayableManualApprovalDetails() {
    let con;

    try {
      con = await oracledb.getConnection({
        user: DB_USER,
        password: DB_PASSWORD,
        connectString: DB_CONNECTION_STRING,
      });

      const paymentID = "'" + req.body.paymentID + "'";
      // const reportDate = "'" + req.body.reportDate + "'";
      const response = [];
      const resp = [];
      let arr0 = "";

      const data = await con.execute(`
      SELECT PAYABLE_ID,DECODE(PAYMENT_FLAG,'P','Paid','R','Reversed','C','Cancelled','S','Suspended') PAYMENT_FLAG,ACCT_LINK1 ||' - '||GET_ACCTDESC(ACCT_LINK1) ACCT_LINK1 ,ACCT_LINK2||' - '||GET_ACCTDESC(ACCT_LINK2) ACCT_LINK2,GET_FREQ_DESC(FREQUENCY) FREQUENCY,DUE_DATE,DUE_AMOUNT,PAYMENT_ID,DOC_DESCRP,SCAN_DOC_ID FROM VW_PAYABLE_SCHEDULE_AP WHERE PAYMENT_ID=${paymentID}
      `);

      if (data) {
        for (let i = 0; i < data.rows.length; i++) {
          for (let x = 0; x < data.metaData.length; x++) {
            arr0 +=
              '"' +
              [data.metaData[x].name.toLowerCase()] +
              '" : "' +
              data.rows[i][x] +
              '",';
          }

          response.push(
            JSON.parse(
              "{" +
                arr0.replace(/(\r\n|\n|\r)/gm, "").replace(/,\s*$/, "") +
                "}"
            )
          );

          for (let i = 0; i < response.length; i++) {
            const postingDate = new Date(response[i].due_date);

            response[i].due_date =
              postingDate.getDate().toString().padStart(2, "0") +
              "-" +
              postingDate
                .toLocaleString("default", { month: "short" })
                .toUpperCase() +
              "-" +
              postingDate.getFullYear().toString();
          }
          // console.log(response,"resssss")
        }

        res.send(response);
      } else {
        res.send(err);
        // console.log("error");
      }
    } catch (err) {
      res.send(err);

      throw err;
    }
  }

  getPayableManualApprovalDetails();
});

//PREPAYMENT ACCOUNT API LOVS
app.post("/api/get-prepayment-credit-account", (req, res) => {
  const accountDesc = "'" + req.body.accountDesc + "'";
  async function getPrepaymentmentAccount() {
    let con;

    try {
      con = await oracledb.getConnection({
        user: DB_USER,
        password: DB_PASSWORD,
        connectString: DB_CONNECTION_STRING,
      });

      const response = [];
      const headLevel = [];
      const resp = [];
      let arr0 = "";

      // node native promisify
      // const execute = util.promisify(db.execute).bind(db);

      // UPPER(ACCOUNT_DESCRP) like UPPER('%'||${accountDesc}||'%')
      const data = await con.execute(`
      select a.account_descrp,a.account_class,a.TACCT,A.currency,GET_CURRDESC(A.currency) as currency_description,c.DESCRIPTION from chart_of_acct a,CODE_DESC c where 
      A.ACCOUNT_CLASS='ACCPRE'
      AND a.LEVEL_ID='D'
      AND a.CHART_CODE = ACTUAL_CODE
      AND CODE_TYPE = 'CAC' 
      AND  not exists(SELECT  1 FROM VWR_ACCRUALS_ACCT b where b.CHARGE_CONTRA = a.TACCT) 
      AND NOT EXISTS (SELECT 1 FROM CONTROL_TOTALS_ACCT C WHERE ACCT_NUMBER = A.TACCT)
      AND  not exists(SELECT  1 FROM CHARGES_ACCRUALS D where D.CHARGE_CONTRA = a.TACCT) 
      AND  not exists(SELECT  1 FROM INTEREST_ACCRUALS E where E.INTEREST_CONTRA = a.TACCT)
      `);
      if (data.rows) {
        for (let i = 0; i < data.rows.length; i++) {
          const description = data.rows[i][0];
          const actual_code = data.rows[i][2];
          const expense_account = data.rows[i][2];
          const currency = data.rows[i][3];

          response.push({
            label: actual_code + " - " + description,
            value: expense_account,
            currency: currency,
          });
        }

        res.send(response);
      } else {
        res.send(err);
        console.log("error");
      }
    } catch (err) {
      res.send(err);

      throw err;
    }
  }

  getPrepaymentmentAccount();
});

//PREPAYMENT EXPENSE ACCOUNT API LOVS
app.post("/api/get-prepayment-debit-account", (req, res) => {
  const accountDesc = "'" + req.body.accountDesc + "'";
  const currency = "'" + req.body.currency + "'";
  async function getPrepaymentmentAccount() {
    let con;

    try {
      con = await oracledb.getConnection({
        user: DB_USER,
        password: DB_PASSWORD,
        connectString: DB_CONNECTION_STRING,
      });

      const response = [];
      const headLevel = [];
      const resp = [];
      let arr0 = "";

      // node native promisify
      // const execute = util.promisify(db.execute).bind(db);

      // UPPER(ACCOUNT_DESCRP) like UPPER('%'||${accountDesc}||'%')
      const data = await con.execute(`
      select a.account_descrp,a.account_class,a.TACCT,c.DESCRIPTION from chart_of_acct a,CODE_DESC c where 
      A.ACCOUNT_CLASS='GAEXP'
      AND A.CHART_CODE='40000'
      AND a.LEVEL_ID='D'
      AND CURRENCY = ${currency}
      AND a.CHART_CODE = ACTUAL_CODE
      AND CODE_TYPE = 'CAC' 
      AND  not exists(SELECT  1 FROM VWR_ACCRUALS_ACCT b where b.CHARGE_CONTRA = a.TACCT) 
      AND NOT EXISTS (SELECT 1 FROM CONTROL_TOTALS_ACCT C WHERE ACCT_NUMBER = A.TACCT)
      
      ORDER BY A.TACCT
      `);
      if (data.rows) {
        for (let i = 0; i < data.rows.length; i++) {
          const description = data.rows[i][0];
          const actual_code = data.rows[i][2];
          const expense_account = data.rows[i][2];

          response.push({
            label: actual_code + " - " + description,
            value: expense_account,
            // short_descrp: short_descrp,
          });
        }

        res.send(response);
      } else {
        res.send(err);
        console.log("error");
      }
    } catch (err) {
      res.send(err);

      throw err;
    }
  }

  getPrepaymentmentAccount();
});

//PREPAYMENT TAX API
app.get("/api/get-prepayment-tax", (req, res) => {
  async function getPrepaymentTax() {
    let con;

    try {
      con = await oracledb.getConnection({
        user: DB_USER,
        password: DB_PASSWORD,
        connectString: DB_CONNECTION_STRING,
      });

      const response = [];
      const headLevel = [];
      const resp = [];
      let arr0 = "";

      // node native promisify
      // const execute = util.promisify(db.execute).bind(db);

      const data = await con.execute(`
      select CONTRA_ACCT||' - '|| GET_ACCTDESC(CONTRA_ACCT)  account_description,
      CONTRA_ACCT, TRANS_CODE, TAX_CODE ,
      GET_TAXDESC(TAX_CODE) Tax_description,
       GET_CURRDESC(CURRENCY) currency,
        DECODE(TYPE_OF_FEE,'P','PERCENT','A','AMOUNT') TYPE_OF_FEE,
         FEE_AMOUNT from VW_TB_VOUCHER_TAX where voucher_type='PREP'
      `);

      if (data) {
        for (let i = 0; i < data.rows.length; i++) {
          for (let x = 0; x < data.metaData.length; x++) {
            arr0 +=
              '"' +
              [data.metaData[x].name.toLowerCase()] +
              '" : "' +
              data.rows[i][x] +
              '",';
          }

          response.push(
            JSON.parse(
              "{" +
                arr0.replace(/(\r\n|\n|\r)/gm, "").replace(/,\s*$/, "") +
                "}"
            )
          );
        }

        res.send(response);
      } else {
        res.send(err);
        console.log("error");
      }
    } catch (err) {
      res.send(err);

      throw err;
    }
  }

  getPrepaymentTax();
});

app.post("/api/get-posted-prepayment", (req, res) => {
  async function getPostedPrepayment() {
    let con;
    const {
      PREPAYMENT_ACCT,
      EXPENSE_ACCOUNT,
      FREQUENCY,
      FLAG_MESSAGE,
      BRANCH_CODE,
    } = req.body;
    console.log(PREPAYMENT_ACCT, "LLLKKKKK");

    try {
      con = await oracledb.getConnection({
        user: DB_USER,
        password: DB_PASSWORD,
        connectString: DB_CONNECTION_STRING,
      });

      const response = [];
      const headLevel = [];
      const resp = [];
      let arr0 = "";

      // node native promisify
      // const execute = util.promisify(db.execute).bind(db);

      const data = await con.execute(`
      SELECT ACCT_LINK1||'-'||GET_ACCTDESC(ACCT_LINK1) ACCT_LINK11,ACCT_LINK2||'-'||GET_ACCTDESC(ACCT_LINK2) ACCT_LINK21,
      GET_BRANCHDESC(BRANCH_CODE) BRANCH_CODE2,BRANCH_CODE,GET_FREQ_DESC(FREQUENCY) FREQUENCY,DECODE(TAX,'I','INCLUSIVE','E','EXCLUSIVE') TAX,DOC_AMT,
      START_DATE,FLAG_MESSAGE,DOC_DESCRP,BATCH_NO FROM tb_prepayment_cost WHERE ACCT_LINK1 LIKE ('%'||'${PREPAYMENT_ACCT}'||'%') AND ACCT_LINK2 LIKE ('%'||'${EXPENSE_ACCOUNT}'||'%') AND FREQUENCY LIKE ('%'||'${FREQUENCY}'||'%') AND FLAG_MESSAGE LIKE ('%'||'${FLAG_MESSAGE}'||'%') AND BRANCH_CODE LIKE ('%'||'${BRANCH_CODE}'||'%')
      `);

      // PYMT;
      if (data) {
        console.log("data");
      } else {
        console.log("no data");
      }
      //  POSTING_DATEBATCH_DESC;

      // console.log(data);

      if (data) {
        for (let i = 0; i < data.rows.length; i++) {
          for (let x = 0; x < data.metaData.length; x++) {
            arr0 +=
              '"' +
              [data.metaData[x].name.toLowerCase()] +
              '" : "' +
              data.rows[i][x] +
              '",';
          }

          response.push(
            JSON.parse(
              "{" +
                arr0.replace(/(\r\n|\n|\r)/gm, "").replace(/,\s*$/, "") +
                "}"
            )
          );
        }
        for (let i = 0; i < response.length; i++) {
          const months = [
            "JAN",
            "FEB",
            "MAR",
            "APR",
            "MAY",
            "JUN",
            "JUL",
            "AUG",
            "SEP",
            "OCT",
            "NOV",
            "DEC",
          ];
          const startDate = new Date(response[i].start_date);
          response[i].start_date = `${startDate.getDate()}-${
            months[startDate.getMonth()]
          }-${startDate.getFullYear()}`;
        }

        res.send(response);
      } else {
        res.send(err);
        console.log("error");
      }
    } catch (err) {
      res.send(err);

      throw err;
    }
  }

  getPostedPrepayment();
});

// PREPAYMENT Posting Procedure
app.post("/api/post_account_prepayment_procedure", (req, res) => {
  async function postPrepayment() {
    let con;

    try {
      con = await oracledb.getConnection({
        user: DB_USER,
        password: DB_PASSWORD,
        connectString: DB_CONNECTION_STRING,
      });

      const referenceNumber = req.body.referenceNumber;
      const narration = req.body.narration;
      const frequency = req.body.frequency;
      const bulkAmount = req.body.bulkAmount;
      const taxableAmount = req.body.taxableAmount;
      const scanDocId = req.body.scanDocId;
      const creditBranch = req.body.creditBranch;
      const postedBy = req.body.postedBy;
      const datePosted = req.body.datePosted;
      const postedTerminal = os.hostname();
      const postingIP = req.body.postingIP;
      const approvedBy = req.body.approvedBy;
      const approvedDate = req.body.approvedDate;
      const approvedTerminal = req.body.approvedTerminal;
      const approvedIP = req.body.approvedIP;
      const flag = req.body.flag;
      const flagMessage = req.body.flagMessage;
      const prepaymentAccount = req.body.prepaymentAccount;
      const expenseAccount = req.body.expenseAccount;
      const debitBranch = req.body.debitBranch;
      const startDate = req.body.startDate;
      const tenor = req.body.tenor;
      const batchNumber = req.body.batchNumber;
      const taxComponent = req.body.taxComponent;
      const taxAccounts = req.body.taxAccounts;
      const taxAccts = JSON.stringify(taxAccounts);
      con.execute(
        "BEGIN PKG_Prepayment_post.PKG_Prepayment_posting(:REFERENCE_NBR_b, :DOC_DESCRP_b, :FREQUENCY_b, :DOC_AMT_b, :TAXABLE_AMOUNT_b, :SOURCE_DOC_ID_b, :BRANCH_CODE_b, :POSTED_BY_b, :POSTING_DATE_b, :POSTING_TERMINAL_b, :POSTING_IP_b, :APPROVED_BY_b, :APPROVED_DATE_b, :APPROVED_TERMINAL_b, :APPROVED_IP_b, :FLAG_b, :FLAG_MESSAGE_b, :ACCT_LINK1_b, :ACCT_LINK2_b, :BRANCH_CODE2_b, :START_DATE_b, :TENOR_b, :BATCH_NO_b, :PRE_SEQ_b, :TAX_b, :tax_acs, :api_status, :api_msg ); END;",
        {
          REFERENCE_NBR_b: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: referenceNumber,
          },
          DOC_DESCRP_b: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: narration,
          },
          FREQUENCY_b: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: frequency,
          },
          DOC_AMT_b: {
            type: oracledb.NUMBER,
            dir: oracledb.BIND_IN,
            val: Number(bulkAmount),
          },
          TAXABLE_AMOUNT_b: {
            type: oracledb.NUMBER,
            dir: oracledb.BIND_IN,
            val: Number(taxableAmount),
          },
          SOURCE_DOC_ID_b: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: scanDocId,
          },
          BRANCH_CODE_b: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: creditBranch,
          },
          POSTED_BY_b: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: postedBy,
          },
          POSTING_DATE_b: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: datePosted,
          },
          POSTING_TERMINAL_b: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: postedTerminal,
          },
          POSTING_IP_b: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: postingIP,
          },
          APPROVED_BY_b: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: approvedBy,
          },
          APPROVED_DATE_b: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: approvedDate,
          },
          APPROVED_TERMINAL_b: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: approvedTerminal,
          },
          APPROVED_IP_b: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: approvedIP,
          },
          FLAG_b: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: flag,
          },
          FLAG_MESSAGE_b: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: flagMessage,
          },
          ACCT_LINK1_b: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: prepaymentAccount,
          },
          ACCT_LINK2_b: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: expenseAccount,
          },
          BRANCH_CODE2_b: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: debitBranch,
          },
          START_DATE_b: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: startDate,
          },
          TENOR_b: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: tenor,
          },
          BATCH_NO_b: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: batchNumber,
          },
          PRE_SEQ_b: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: batchNumber,
          },
          TAX_b: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: taxComponent,
          },
          tax_acs: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: taxAccts,
          },
          api_status: {
            type: oracledb.STRING,
            dir: oracledb.BIND_OUT,
          },
          api_msg: {
            type: oracledb.STRING,
            dir: oracledb.BIND_OUT,
          },
        },

        function (err, result) {
          if (err) {
            throw err;
          }
          // return res.send(p)

          if (result) {
            if (result.outBinds.api_status === "Y") {
              let message = result.outBinds.api_msg;
              response = {
                success: result.outBinds.api_status,
                message: message,
              };
              // console.log(response);

              res.send(response);
            } else {
              let message = result.outBinds.api_msg;

              response = {
                success: result.outBinds.api_status,
                message: message,
              };
              res.send(response);
            }
          }
        }
      );
    } catch (err) {
      res.send(err);
    }
  }

  postPrepayment();
});

//PREPAYMENT POSTING APPROVAL DETAILS
app.post("/api/get-prepayment-approval-details", (req, res) => {
  async function getPrepaymentApprovalDetails() {
    let con;

    try {
      con = await oracledb.getConnection({
        user: DB_USER,
        password: DB_PASSWORD,
        connectString: DB_CONNECTION_STRING,
      });
      const expense_reference = "'" + req.body.expense_reference + "'";

      const response = [];
      const headLevel = [];
      const arr = [];
      let arr0 = "";

      // node native promisify
      // const execute = util.promisify(db.execute).bind(db);

      const data = await con.execute(`
      SELECT (ACCT_LINK1||' - '||get_acctdesc(ACCT_LINK1)) ACCT_LINK1,(FREQUENCY ||' - '||GET_FREQ_DESC(FREQUENCY)) FREQUENCY,SOURCE_DOC_ID,
      (ACCT_LINK2||' - '||get_acctdesc(ACCT_LINK2)) ACCT_LINK2,NARRATION,DOC_DESCRP,
      (BRANCH_CODE ||' - '|| GET_BRANCHDESC(BRANCH_CODE)) BRANCH,  DECODE(PAYMENT_MODE,'A','AUTOMATIC','M','MANUAL') PAYMENT_MODE,
       TAX,DOC_AMT,REFERENCE_NBR,START_DATE,TENOR,(BRANCH_CODE2 ||' - '|| GET_BRANCHDESC(BRANCH_CODE2)) BRANCH2,BATCH_NO FROM tb_prepayment_cost WHERE BATCH_NO=${expense_reference}  
      `);

      if (data) {
        for (let i = 0; i < data.rows.length; i++) {
          for (let x = 0; x < data.metaData.length; x++) {
            arr0 +=
              '"' +
              [data.metaData[x].name.toLowerCase()] +
              '" : "' +
              data.rows[i][x] +
              '",';
          }

          response.push(
            JSON.parse(
              "{" +
                arr0.replace(/(\r\n|\n|\r)/gm, "").replace(/,\s*$/, "") +
                "}"
            )
          );
        }

        for (let i = 0; i < response.length; i++) {
          const months = [
            "JAN",
            "FEB",
            "MAR",
            "APR",
            "MAY",
            "JUN",
            "JUL",
            "AUG",
            "SEP",
            "OCT",
            "NOV",
            "DEC",
          ];
          const startDate = new Date(response[i].start_date);
          response[i].start_date = `${startDate.getDate()}-${
            months[startDate.getMonth()]
          }-${startDate.getFullYear()}`;
        }

        res.send(response);
      } else {
        res.send(err);
        console.log("error");
      }
    } catch (err) {
      res.send(err);

      throw err;
    }
  }

  getPrepaymentApprovalDetails();
});

// Reverse Journal
app.post("/api/get-reverse-journal-vouchers", (req, res) => {
  const { key, voucherType, batchNumber, batchAmount, valueDate } = req.body;

  async function getReverseJournalTransactions() {
    let con;

    try {
      con = await oracledb.getConnection({
        user: DB_USER,
        password: DB_PASSWORD,
        connectString: DB_CONNECTION_STRING,
      });

      const response = [];
      const resp = [];
      let arr0 = "";
      let data;

      // node native promisify
      // const execute = util.promisify(db.execute).bind(db);

      if (key === "f") {
        const check = valueDate
          ? `SELECT VALUE_DATE,VOUCHER_NUMBER,BATCH_NO,BATCH_DESC,TRANS_COUNT,BATCH_AMOUNT,USER_NAME,BATCH_STATUS FROM vw_voucher_enq_sum WHERE  APPROVAL_FLAG = 'Y' AND VOUCHER_NUMBER LIKE '%'||'${voucherType}'||'%' AND BATCH_NO LIKE '%'||'${batchNumber}'||'%' AND BATCH_AMOUNT LIKE '%'||'${batchAmount}'||'%' and VALUE_DATE ='${valueDate}' ORDER BY BATCH_NO DESC`
          : `SELECT VALUE_DATE,VOUCHER_NUMBER,BATCH_NO,BATCH_DESC,TRANS_COUNT,BATCH_AMOUNT,USER_NAME,BATCH_STATUS FROM vw_voucher_enq_sum WHERE  APPROVAL_FLAG = 'Y' AND VOUCHER_NUMBER LIKE '%'||'${voucherType}'||'%' AND BATCH_NO LIKE '%'||'${batchNumber}'||'%' AND BATCH_AMOUNT LIKE '%'||'${batchAmount}'||'%' ORDER BY BATCH_NO DESC `;
        // return res.send(voucherType);
        data = await con.execute(check);
      } else {
        data = await con.execute(
          `SELECT VALUE_DATE,VOUCHER_NUMBER,BATCH_NO,BATCH_DESC,TRANS_COUNT,BATCH_AMOUNT,USER_NAME,BATCH_STATUS FROM vw_voucher_enq_sum WHERE  APPROVAL_FLAG = 'Y' AND VOUCHER_NUMBER IN('RCPT','PYMT','JRNL') ORDER BY BATCH_NO DESC`
        );
      }
      // OR FREQUENCY LIKE ${frequency} OR EXPENSE_REFERENCE LIKE ${payableID} OR INVOICE_NUMBER LIKE ${invoice}
      // ('%'||'${PREPAYMENT_ACCT}'||'%')

      if (data) {
        for (let i = 0; i < data.rows.length; i++) {
          for (let x = 0; x < data.metaData.length; x++) {
            arr0 +=
              '"' +
              [data.metaData[x].name.toLowerCase()] +
              '" : "' +
              data.rows[i][x] +
              '",';
          }

          response.push(
            JSON.parse(
              "{" +
                arr0.replace(/(\r\n|\n|\r)/gm, "").replace(/,\s*$/, "") +
                "}"
            )
          );
        }
        for (let i = 0; i < response.length; i++) {
          const months = [
            "JAN",
            "FEB",
            "MAR",
            "APR",
            "MAY",
            "JUN",
            "JUL",
            "AUG",
            "SEP",
            "OCT",
            "NOV",
            "DEC",
          ];
          const ValueDate = new Date(response[i].value_date);
          response[i].value_date = `${ValueDate.getDate()}-${
            months[ValueDate.getMonth()]
          }-${ValueDate.getFullYear()}`;
        }
        res.send(response);
      } else {
        res.send(err);
        console.log("error");
      }
    } catch (err) {
      res.send(err);

      throw err;
    }
  }

  getReverseJournalTransactions();
});

//GET ALL VOUCHERS DETAILS
app.post("/api/get-ALL-VOUCHERS-DETAILS", (req, res) => {
  async function getAllVoucherDetails() {
    let con;

    try {
      con = await oracledb.getConnection({
        user: DB_USER,
        password: DB_PASSWORD,
        connectString: DB_CONNECTION_STRING,
      });
      const { batchNumber, voucherType } = req.body;

      const response = [];
      const headLevel = [];
      const arr = [];
      let arr0 = "";
      console.log(voucherType);

      // node native promisify
      // const execute = util.promisify(db.execute).bind(db);

      const data = await con.execute(`
      SELECT VOUCHER_NUMBER,VALUE_DATE,ACCT_LINK,GET_ACCTDESC(ACCT_LINK) ACCOUNT_DESCRIPTION,DOCUMENT_REF,TRANSACTION_DETAILS,LOCAL_EQUIVALENT_DB,LOCAL_EQUIVALENT_CR,
      BRANCH_CODE||' - '||GET_BRANCHDESC(BRANCH_CODE) BRANCH,CURRENCY_CODE||' - '||GET_CURRENCYDESC(CURRENCY_CODE) CURRENCY,SCAN_DOC_ID
       FROM ac_trans WHERE BATCH_NO = '${batchNumber}' AND VOUCHER_NUMBER='${voucherType}' 
      `);

      if (data) {
        for (let i = 0; i < data.rows.length; i++) {
          for (let x = 0; x < data.metaData.length; x++) {
            arr0 +=
              '"' +
              [data.metaData[x].name.toLowerCase()] +
              '" : "' +
              data.rows[i][x] +
              '",';
          }

          response.push(
            JSON.parse(
              "{" +
                arr0.replace(/(\r\n|\n|\r)/gm, "").replace(/,\s*$/, "") +
                "}"
            )
          );
        }

        for (let i = 0; i < response.length; i++) {
          const months = [
            "JAN",
            "FEB",
            "MAR",
            "APR",
            "MAY",
            "JUN",
            "JUL",
            "AUG",
            "SEP",
            "OCT",
            "NOV",
            "DEC",
          ];
          const startDate = new Date(response[i].value_date);
          response[i].value_date = `${startDate.getDate()}-${
            months[startDate.getMonth()]
          }-${startDate.getFullYear()}`;
          if (response[i].local_equivalent_cr == "null") {
            response[i].local_equivalent_cr = " ";
          } else if (response[i].local_equivalent_db == "null") {
            response[i].local_equivalent_db = " ";
          }
        }

        res.send(response);
      } else {
        res.send(err);
        console.log("error");
      }
    } catch (err) {
      res.send(err);

      throw err;
    }
  }

  getAllVoucherDetails();
});

// prepayment manual Procedure
app.post("/api/post_prepayment_manual", (req, res) => {
  async function postPrepaymentM() {
    let con;
    let scheduleArray = [];

    try {
      con = await oracledb.getConnection({
        user: DB_USER,
        password: DB_PASSWORD,
        connectString: DB_CONNECTION_STRING,
      });
      // const ipAddress = getIPAddress().address;
      const flag = req.body.flag;
      const action = req.body.action;
      const checked = req.body.checked;
      const batchNumber = req.body.batchNumber;
      const branchCode = req.body.branchCode;
      const ACCT_LINK1 = req.body.ACCT_LINK1;
      const ACCT_LINK2 = req.body.ACCT_LINK2;
      const dueAmount = req.body.dueAmount;
      const username = req.body.username;
      const paymentID = req.body.paymentID;
      const approvalTerminal = req.body.approvalTerminal;
      const approvalScanDoc = req.body.approvalScanDoc;
      const narration = req.body.narration;
      const scheduleData = req.body.scheduleData;

      if (scheduleData) {
        scheduleData.map((i) => {
          scheduleArray.push({ ...i, p_AMENDED_TERMINAL: os.hostname() });
        });
      }

      // return res.send(scheduleData);
      con.execute(
        "BEGIN PKG_Prepayment_post.PRC_PREPAYMENT_SCHEDULE_MANUAL(:FLAG_b , :ACTION_P , :CHK_P, :BATCH_NO_b, :BRANCH_CODE_P , :ACCT_LINK1_b  , :ACCT_LINK2_b  , :DUE_AMOUNT_b  , :POSTED_BY_b  , :DOC_DESCRP_b  , :PAYMENT_ID , :SCHEDULE_DATA_B  , :APPROVALTERMINAL_b  , :APPROVALSCANDOC  ,:api_status, :api_msg   ); END;",
        {
          FLAG_b: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: flag,
          },
          ACTION_P: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: action,
          },
          CHK_P: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: checked,
          },
          BATCH_NO_b: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: batchNumber,
          },
          BRANCH_CODE_P: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: branchCode,
          },
          ACCT_LINK1_b: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: ACCT_LINK1,
          },
          // console.log(),
          ACCT_LINK2_b: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: ACCT_LINK2,
          },
          DUE_AMOUNT_b: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: dueAmount,
          },
          POSTED_BY_b: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: username,
          },
          DOC_DESCRP_b: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: narration,
          },
          PAYMENT_ID: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: paymentID,
          },
          SCHEDULE_DATA_B: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: JSON.stringify(scheduleArray),
          },
          APPROVALTERMINAL_b: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: approvalTerminal,
          },
          APPROVALSCANDOC: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: approvalScanDoc,
          },
          api_status: {
            type: oracledb.STRING,
            dir: oracledb.BIND_OUT,
          },
          api_msg: {
            type: oracledb.STRING,
            dir: oracledb.BIND_OUT,
          },
        },

        function (err, result) {
          if (err) {
            throw err;
          }
          // return res.send(p)

          if (result) {
            // console.log(posting_machine_ip,"posting_machine_ip")
            if (result.outBinds.api_status === "Y") {
              let message = result.outBinds.api_msg;
              response = {
                success: result.outBinds.api_status,
                // credit_postings : p,
                message: message,
                // token_id: tokennumber(50),
              };

              res.send(response);
            } else {
              let message = result.outBinds.api_msg;

              response = {
                success: result.outBinds.api_status,
                message: message,
                // token_id: tokennumber(50),
              };

              res.send(response);
            }
          }
        }
      );
    } catch (err) {
      res.send(err);
    }
  }

  postPrepaymentM();
});

// Get COST CENTER POSTED TRANSACTIONS
app.post("/api/get-cost-center-posted-transactions", (req, res) => {
  const { username, BATCH_NO } = req.body;

  async function getCostCenterPostedTransactions() {
    let con;

    try {
      con = await oracledb.getConnection({
        user: DB_USER,
        password: DB_PASSWORD,
        connectString: DB_CONNECTION_STRING,
      });

      const response = [];
      const resp = [];
      let arr0 = "";

      // node native promisify
      // const execute = util.promisify(db.execute).bind(db);

      const data = await con.execute(`
      select * from vw_voucher_enq_sum where user_name ='${username}' and voucher_number = 'CCP' AND APPROVAL_FLAG != 'Y' AND BATCH_NO LIKE '%'||'${BATCH_NO}'||'%' ORDER BY BATCH_NO DESC
      `);
      // OR FREQUENCY LIKE ${frequency} OR EXPENSE_REFERENCE LIKE ${payableID} OR INVOICE_NUMBER LIKE ${invoice}
      // ('%'||'${PREPAYMENT_ACCT}'||'%')

      if (data) {
        for (let i = 0; i < data.rows.length; i++) {
          for (let x = 0; x < data.metaData.length; x++) {
            arr0 +=
              '"' +
              [data.metaData[x].name.toLowerCase()] +
              '" : "' +
              data.rows[i][x] +
              '",';
          }

          response.push(
            JSON.parse(
              "{" +
                arr0.replace(/(\r\n|\n|\r)/gm, "").replace(/,\s*$/, "") +
                "}"
            )
          );
          for (let i = 0; i < response.length; i++) {
            const postingDate = new Date(response[i].value_date);

            response[i].value_date =
              postingDate.getDate().toString().padStart(2, "0") +
              "-" +
              postingDate
                .toLocaleString("default", { month: "short" })
                .toUpperCase() +
              "-" +
              postingDate.getFullYear().toString();
          }
        }
        res.send(response);
      } else {
        res.send(err);
        console.log("error");
      }
    } catch (err) {
      res.send(err);

      throw err;
    }
  }

  getCostCenterPostedTransactions();
});

//cost center posting
app.post("/api/post_cost_center", (req, res) => {
  async function postCostCenter() {
    let con;

    try {
      con = await oracledb.getConnection({
        user: DB_USER,
        password: DB_PASSWORD,
        connectString: DB_CONNECTION_STRING,
      });
      // const ipAddress = getIPAddress().address;
      const flag = req.body.flag;
      const currency = req.body.currency;
      const scanDocument = req.body.scanDocument;
      const batchNumber = req.body.batchNumber;
      const postedBy = req.body.postedBy;
      const valueDate = req.body.valueDate;
      const transDetails = req.body.transDetails;
      const postingBranch = req.body.postingBranch;
      const debit_acs = req.body.debit_acs;
      const credit_acs = req.body.credit_acs;
      const postingChannel = req.body.postingChannel;
      const documentRef = req.body.documentRef;

      console.log(debit_acs, credit_acs, "uiuiuiuiuiui");

      // return res.send(scheduleData);
      con.execute(
        "BEGIN PKG_COST_CENTER_POSTING.PRC_COST_CENTER_POST(:FLAG_b , :p_pcur, :p_scan_doc, :p_postedby, :p_vdate, :p_trans_details,:p_pbranch, :p_document_ref, :p_debit_acs, :p_credit_acs, :p_module, :p_channel, :p_pterm_id, :posting_ip, :batch_number, :api_status, :api_msg   ); END;",
        {
          FLAG_b: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: flag,
          },
          p_pcur: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: currency,
          },
          p_scan_doc: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: scanDocument,
          },
          p_postedby: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: postedBy,
          },
          p_vdate: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: valueDate,
          },
          p_trans_details: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: transDetails,
          },
          p_pbranch: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: postingBranch,
          },
          p_debit_acs: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: JSON.stringify(debit_acs),
          },
          p_credit_acs: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: JSON.stringify(credit_acs),
          },
          p_module: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: flag,
          },
          p_channel: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: postingChannel,
          },
          p_document_ref: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: documentRef,
          },
          p_pterm_id: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: os.hostname(),
          },
          posting_ip: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: ip.address(),
          },
          batch_number: {
            type: oracledb.STRING,
            dir: oracledb.BIND_INOUT,
            val: batchNumber,
          },
          api_status: {
            type: oracledb.STRING,
            dir: oracledb.BIND_OUT,
          },
          api_msg: {
            type: oracledb.STRING,
            dir: oracledb.BIND_OUT,
          },
        },

        function (err, result) {
          if (err) {
            throw err;
          }
          // return res.send(p)

          if (result) {
            // console.log(posting_machine_ip,"posting_machine_ip")
            if (result.outBinds.api_status === "Y") {
              let message = result.outBinds.api_msg;
              response = {
                success: result.outBinds.api_status,
                // credit_postings : p,
                message: message,
                // token_id: tokennumber(50),
              };

              res.send(response);
            } else {
              let message = result.outBinds.api_msg;

              response = {
                success: result.outBinds.api_status,
                message: message,
                // token_id: tokennumber(50),
              };

              res.send(response);
            }
          }
        }
      );
    } catch (err) {
      res.send(err);
    }
  }

  postCostCenter();
});

//PREPAYMENT POSTING APPROVAL DETAILS
app.post("/api/get-posted-cost-center-details", (req, res) => {
  async function getCostCenterTransactions() {
    let con;

    try {
      con = await oracledb.getConnection({
        user: DB_USER,
        password: DB_PASSWORD,
        connectString: DB_CONNECTION_STRING,
      });
      const batch_number = "'" + req.body.batch_number + "'";

      const response = [];
      const headLevel = [];
      const arr = [];
      let arr0 = "";

      // node native promisify
      // const execute = util.promisify(db.execute).bind(db);

      const data = await con.execute(`
      select VOUCHER_NUMBER,VALUE_DATE,ACCT_LINK,GET_ACCTDESC(ACCT_LINK) ACCOUNT_DESCRIPTION,DOCUMENT_REF,TRANSACTION_DETAILS,LOCAL_EQUIVALENT_DB,LOCAL_EQUIVALENT_CR,INTER_BRANCH ||' - ' ||GET_BRANCHDESC(INTER_BRANCH) INTER_BRANCH,SCAN_DOC_ID,BATCH_NO,COST_CENTER,CURRENCY_CODE from ac_post_temp where BATCH_NO=${batch_number} 
      `);

      if (data) {
        for (let i = 0; i < data.rows.length; i++) {
          for (let x = 0; x < data.metaData.length; x++) {
            arr0 +=
              '"' +
              [data.metaData[x].name.toLowerCase()] +
              '" : "' +
              data.rows[i][x] +
              '",';
          }

          response.push(
            JSON.parse(
              "{" +
                arr0.replace(/(\r\n|\n|\r)/gm, "").replace(/,\s*$/, "") +
                "}"
            )
          );
        }

        for (let i = 0; i < response.length; i++) {
          const months = [
            "JAN",
            "FEB",
            "MAR",
            "APR",
            "MAY",
            "JUN",
            "JUL",
            "AUG",
            "SEP",
            "OCT",
            "NOV",
            "DEC",
          ];
          const startDate = new Date(response[i].value_date);
          response[i].value_date = `${startDate.getDate()}-${
            months[startDate.getMonth()]
          }-${startDate.getFullYear()}`;
        }

        res.send(response);
      } else {
        res.send(err);
        console.log("error");
      }
    } catch (err) {
      res.send(err);

      throw err;
    }
  }

  getCostCenterTransactions();
});

//COST CENTER LOV
app.get("/api/get-cost-center-lov", (req, res) => {
  async function getCostCenterLov() {
    let con;

    try {
      con = await oracledb.getConnection({
        user: DB_USER,
        password: DB_PASSWORD,
        connectString: DB_CONNECTION_STRING,
      });

      const response = [];
      const headLevel = [];
      const arr = [];
      let arr0 = "";

      // node native promisify
      // const execute = util.promisify(db.execute).bind(db);

      const data = await con.execute(`
      select  ARM_CODE,ARM_NAME,OFF_BRANCH,ARM_TYPE from TBL_ARM order by ARM_CODE ASC
      `);

      if (data.rows) {
        for (let i = 0; i < data.rows.length; i++) {
          const description = data.rows[i][1];
          const actual_code = data.rows[i][0];

          response.push({
            label: actual_code + " - " + description,
            value: actual_code,
            // short_descrp: short_descrp,
          });
        }

        res.send(response);
      } else {
        res.send(err);
        console.log("error");
      }
    } catch (err) {
      res.send(err);

      throw err;
    }
  }

  getCostCenterLov();
});

//GET COST CENTER BUDGET
app.post("/api/get-cost-center-budget-details", (req, res) => {
  const { acctLink, cost_center_code } = req.body;

  async function getCostCenterBudget() {
    let con;

    try {
      con = await oracledb.getConnection({
        user: DB_USER,
        password: DB_PASSWORD,
        connectString: DB_CONNECTION_STRING,
      });

      const response = [];
      const resp = [];
      let arr0 = "";

      // node native promisify
      // const execute = util.promisify(db.execute).bind(db);

      const data = await con.execute(`
      SELECT NVL(GET_COST_CENTER_BUDGET('${cost_center_code}','${acctLink}',GET_POSTINGDATE),0) AS BUDGET ,SUM(NVL(ABS(AMOUNT_UTILIZED),0)) UTILIZED
      FROM VW_COST_CENTER_ACTUALS C
      WHERE   POSTING_DATE <= GET_POSTINGDATE AND ACCT_LINK ='${acctLink}' AND C.COST_CENTER_ID='${cost_center_code}'
      `);

      if (data) {
        for (let i = 0; i < data.rows.length; i++) {
          for (let x = 0; x < data.metaData.length; x++) {
            arr0 +=
              '"' +
              [data.metaData[x].name.toLowerCase()] +
              '" : "' +
              data.rows[i][x] +
              '",';
          }

          response.push(
            JSON.parse(
              "{" +
                arr0.replace(/(\r\n|\n|\r)/gm, "").replace(/,\s*$/, "") +
                "}"
            )
          );
        }
        for (let i = 0; i < response.length; i++) {
          if (response[i].utilized === "null") {
            response[i].utilized = 0;
          }
          response[i].unutilized =
            Number(response[i].budget).toFixed(2) -
            Number(response[i].utilized).toFixed(2);
        }
        res.send(response);
      } else {
        res.send(err);
        // console.log("error");
      }
    } catch (err) {
      res.send(err);

      throw err;
    }
  }

  getCostCenterBudget();
});

//TELLER-REQUEST-FROM-VAULT
app.post("/api/post_prc_teller_request_from_vault", (req, res) => {
  async function tellerRequestFromVault() {
    let con;

    try {
      con = await oracledb.getConnection({
        user: DB_USER,
        password: DB_PASSWORD,
        connectString: DB_CONNECTION_STRING,
      });
      // const ipAddress = getIPAddress().address;

      const tellerID = req.body.tellerID;
      const currency = req.body.currency;
      const branch = req.body.branch;
      const amount = req.body.amount;

      // return res.send(p2);
      con.execute(
        "BEGIN pkg_cashtrx_rt.prc_telcash_req(:TELLER_v , :bra_v , :amt, :cur_v, :msg_v , :batch_number ); END;",

        {
          TELLER_v: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: tellerID,
          },
          bra_v: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: branch,
          },
          amt: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: amount,
          },
          cur_v: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: currency,
          },
          msg_v: {
            type: oracledb.STRING,
            dir: oracledb.BIND_OUT,
          },
          batch_number: {
            type: oracledb.STRING,
            dir: oracledb.BIND_OUT,
          },
        },

        function (err, result) {
          if (err) {
            throw err;
          }

          if (result) {
            if (
              result.outBinds.msg_v ==
              "INF - 05828: Request Transaction sent successfully"
            ) {
              let message = result.outBinds.msg_v;
              response = {
                message: message,
              };

              res.send(response);
            } else {
              let message = result.outBinds.msg_v;

              response = {
                // success: false,
                message: message,
              };

              res.send(response);
            }
          }
        }
      );
    } catch (err) {
      res.send(err);
    }
  }

  tellerRequestFromVault();
});

//TELLER-CASH-CONFIRMATION
app.post("/api/post_prc_teller_cash_confirmation", (req, res) => {
  async function tellerCashConfirmation() {
    let con;

    try {
      con = await oracledb.getConnection({
        user: DB_USER,
        password: DB_PASSWORD,
        connectString: DB_CONNECTION_STRING,
      });
      // const ipAddress = getIPAddress().address;

      const batchNumber = req.body.batchNumber;
      const branch = req.body.branch;
      // return res.send(p2);
      con.execute(
        "BEGIN pkg_cashtrx_rt.prc_telcash_pending_in(:batch_v , :bra_v , :msg_v ); END;",
        {
          batch_v: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: batchNumber,
          },
          bra_v: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: branch,
          },
          msg_v: {
            type: oracledb.STRING,
            dir: oracledb.BIND_OUT,
          },
        },

        function (err, result) {
          if (err) {
            throw err;
          }

          if (result) {
            if (result.outBinds.msg_v.includes("05845")) {
              let message = result.outBinds.msg_v;
              response = {
                responseCode: "000",
                message: message,
              };

              res.send(response);
            } else {
              let message = result.outBinds.msg_v;

              response = {
                // success: false,
                message: message,
              };

              res.send(response);
            }
          }
        }
      );
    } catch (err) {
      res.send(err);
    }
  }

  tellerCashConfirmation();
});

//delete ungranted-cash-request
app.post("/api/delete-ungranted-cash", (req, res) => {
  // return res.send("Ghana");
  const { batch_number, key } = req.body;
  let deleteUngrantedCash = async () => {
    try {
      const db = await oracledb.getConnection({
        user: DB_USER,
        password: DB_PASSWORD,
        connectString: DB_CONNECTION_STRING,
        timeout: DB_CONNECTION_TIMEOUT,
      });
      const execute = util.promisify(db.execute).bind(db);
      if (key === "delete_ungranted_cash_request") {
        const data =
          await execute(`delete from TB_cash_request_book where batch_no = '${batch_number}'
        and flag = 'N'`);
        if (data.rowsAffected > 0) {
          res.send({
            message: "Data deleted successfully",
            status: "success",
          });
        } else {
          res.send({
            message: "Sorry, error deleting data",
            status: "false",
          });
          console.log(data.rowsAffected, "rrrrrr");
        }
      } else if (key === "delete_rejected_cash_request") {
        const data =
          await execute(`delete from TB_cash_request_book where batch_no = '${batch_number}'
        and flag = 'R'`);
        if (data.rowsAffected > 0) {
          res.send({
            message: "Data deleted successfully",
            status: "success",
          });
        } else {
          res.send({
            message: "Sorry, error deleting data",
            status: "false",
          });
          console.log(data.rowsAffected, "rrrrrr");
        }
      }
    } catch (err) {
      console.log(err);
      res.send("err");
    }
  };
  deleteUngrantedCash();
});

// get payment details
app.post(
  "/api/get-account-details-by-account-name-or-account-desc",
  (req, res) => {
    const currency = "'" + req.body.currency + "'";
    const account_desc = "'" + req.body.account_desc + "'";
    const account_number = "'" + req.body.account_number + "'";

    async function getAccountDetailsByAccountName() {
      let con;

      try {
        con = await oracledb.getConnection({
          user: DB_USER,
          password: DB_PASSWORD,
          connectString: DB_CONNECTION_STRING,
        });

        const response = [];
        const resp = [];
        let arr0 = "";

        // node native promisify
        // const execute = util.promisify(db.execute).bind(db);

        const data = await con.execute(`
        select  (account_descrp||'-'||a.ACCOUNT_NUMBER||'('||get_curriso(currency_code)||')') Account_descrption,
        ACCOUNT_NUMBER TACCT,GET_SHADOW_BAL(account_number) acct_balance,currency_code currency,description , cur_desc, status_desc,TYPE_OF_ACCT
        from VW_ACCOUNT_LIST1 a where 
          currency_CODE = ${currency} 
        AND (UPPER(account_descrp) LIKE UPPER(${account_desc}||'%') 
        OR ACCOUNT_NUMBER LIKE ${account_number}||'%')
        and ROWNUM <=100
        ORDER BY ACCOUNT_NUMBER
  `);
        if (data) {
          for (let i = 0; i < data.rows.length; i++) {
            for (let x = 0; x < data.metaData.length; x++) {
              arr0 +=
                '"' +
                [data.metaData[x].name.toLowerCase()] +
                '" : "' +
                data.rows[i][x] +
                '",';
            }

            response.push(
              JSON.parse(
                "{" +
                  arr0.replace(/(\r\n|\n|\r)/gm, "").replace(/,\s*$/, "") +
                  "}"
              )
            );
          }
          res.send(response);
        } else {
          res.send(err);
          console.log("error");
        }
      } catch (err) {
        res.send(err);

        throw err;
      }
    }

    getAccountDetailsByAccountName();
  }
);

// get payment details
app.post("/api/get-posted-transactions", (req, res) => {
  async function getAccountDetailsByAccountName() {
    let con;

    try {
      con = await oracledb.getConnection({
        user: DB_USER,
        password: DB_PASSWORD,
        connectString: DB_CONNECTION_STRING,
      });

      const {
        batch_number,
        r_trans_type,
        p_user,
        batch_amount,
        approval_flag,
        value_date,
      } = req.body;

      const response = [];
      const resp = [];
      let arr0 = "";

      const data = await con.execute(`
      SELECT BATCH_NO,
      VALUE_DATE,
      POSTING_DATE,
      BATCH_DESC,
      TRANS_COUNT,
      BATCH_AMOUNT,
      USER_NAME,
      BATCH_STATUS,
      APPROVAL_FLAG
      
  FROM vw_voucher_enq_sum
  WHERE voucher_number = '${r_trans_type}' AND
  USER_NAME = '${p_user}' AND
  APPROVAL_FLAG != 'Y' AND
  BATCH_NO LIKE '%'||'${batch_number}'||'%' AND BATCH_AMOUNT LIKE '%'||'${
        batch_amount ? batch_amount : ""
      }'||'%' AND TO_CHAR(VALUE_DATE,'DD-MON-YYYY')  LIKE '%'||'${value_date}'||'%' AND APPROVAL_FLAG LIKE '%'||'${approval_flag}'||'%' ORDER BY BATCH_NO DESC
  `);

      if (data) {
        console.log(data, "data");
      } else {
        console.log("no data");
      }

      // console.log(data);

      if (data) {
        for (let i = 0; i < data.rows.length; i++) {
          for (let x = 0; x < data.metaData.length; x++) {
            arr0 +=
              '"' +
              [data.metaData[x].name.toLowerCase()] +
              '" : "' +
              data.rows[i][x] +
              '",';
          }

          response.push(
            JSON.parse(
              "{" +
                arr0.replace(/(\r\n|\n|\r)/gm, "").replace(/,\s*$/, "") +
                "}"
            )
          );
          // console.log(response,"resssss")
        }
        // for (let i = 0; i < response.length; i++) {
        //   const valueDate = new Date(response[i].value_date);
        //   const batchDesc = new Date(response[i].batch_desc);

        //   response[i].value_date = valueDate.toDateString();
        //   response[i].batch_desc = batchDesc.toDateString();
        // }
        res.send(response);
      } else {
        res.send(err);
        console.log("error");
      }
    } catch (err) {
      res.send(err);

      throw err;
    }
  }

  getAccountDetailsByAccountName();
});

// Get Posted Arrow Button Transactions Details
app.post("/api/get-posted-transaction-details", (req, res) => {
  const batch_no = "'" + req.body.batch_no + "'";
  const r_trans_type = "'" + req.body.r_trans_type + "'";

  async function getPostedTransactionDetails() {
    let con;

    try {
      con = await oracledb.getConnection({
        user: DB_USER,
        password: DB_PASSWORD,
        connectString: DB_CONNECTION_STRING,
      });

      const response = [];
      const resp = [];
      let arr0 = "";

      // node native promisify
      // const execute = util.promisify(db.execute).bind(db);

      const data = await con.execute(`
        select ACCT_LINK,ACCOUNT_DESC,DOCUMENT_REF,TRANSACTION_DETAILS,
      VALUE_DATE,LOCAL_EQUIVALENT_DB,LOCAL_EQUIVALENT_CR,USER_NAME,
      INTER_BRANCH,GET_BRANCHDESC(INTER_BRANCH) BRANCH, NARRATION, BATCH_NO,CURRENCY_CODE,SCAN_DOC_ID,TYPE_OF_ACCT,ACCT_BALANCE
      from (      
      SELECT 
         A.ACCT_LINK,GET_ACCTDESC(A.ACCT_LINK) ACCOUNT_DESC,
         A.DOCUMENT_REF, A.TRANSACTION_DETAILS, 
         A.VALUE_DATE,
         A.LOCAL_EQUIVALENT_DB, A.LOCAL_EQUIVALENT_CR,
         A.USER_NAME, A.INTER_BRANCH,
        A.NARRATION, 
         A.BATCH_NO,
         A.CURRENCY_CODE,
         A.SCAN_DOC_ID,
         b.TYPE_OF_ACCT,
         GET_SHADOW_BAL(A.ACCT_LINK) ACCT_BALANCE
      FROM AC_POST_TEMP A , VW_ACCOUNT_LIST1 b
      WHERE
       voucher_number= ${r_trans_type}
       and a.approval_flag !='R' and
       b.ACCOUNT_NUMBER = a.ACCT_LINK
      union
      SELECT 
         A.ACCT_LINK,GET_ACCTDESC(A.ACCT_LINK) ACCOUNT_DESC,
         A.DOCUMENT_REF, A.TRANSACTION_DETAILS, 
         A.VALUE_DATE,
         A.LOCAL_EQUIVALENT_DB, A.LOCAL_EQUIVALENT_CR,
         A.USER_NAME, A.INTER_BRANCH,
        A.NARRATION, 
         A.BATCH_NO,
         A.CURRENCY_CODE,
         A.SCAN_DOC_ID,
         C.TYPE_OF_ACCT,
       GET_SHADOW_BAL(A.ACCT_LINK) ACCT_BALANCE
      FROM AC_POST_TEMP A,TB_APPROVAL_REJECT B,VW_ACCOUNT_LIST1 C
      WHERE A.BATCH_NO=B.BATCH_NO and
       voucher_number=${r_trans_type} and
       C.ACCOUNT_NUMBER = a.ACCT_LINK
      )
      where batch_no=${batch_no}
         `);

      // PYMT;
      // if (data) {
      //   console.log("data");
      // } else {
      //   console.log("no data");
      // }
      //  POSTING_DATEBATCH_DESC;

      // console.log(data);

      if (data) {
        for (let i = 0; i < data.rows.length; i++) {
          for (let x = 0; x < data.metaData.length; x++) {
            arr0 +=
              '"' +
              [data.metaData[x].name.toLowerCase()] +
              '" : "' +
              data.rows[i][x] +
              '",';
          }

          response.push(
            JSON.parse(
              "{" +
                arr0.replace(/(\r\n|\n|\r)/gm, "").replace(/,\s*$/, "") +
                "}"
            )
          );
          // console.log(response,"resssss")
        }
        for (let i = 0; i < response.length; i++) {
          const valueDate = new Date(response[i].value_date);
          response[i].value_date = valueDate.toDateString();
          if (response[i].local_equivalent_cr == "null") {
            response[i].local_equivalent_cr = " ";
          } else if (response[i].local_equivalent_db == "null") {
            response[i].local_equivalent_db = " ";
          }
        }
        res.send(response);
      } else {
        res.send(err);
        console.log("error");
      }
    } catch (err) {
      res.send(err);

      throw err;
    }
  }

  getPostedTransactionDetails();
});

// Get Posted Arrow Button suspend Details
app.post("/api/get-view-suspended-details", (req, res) => {
  const {
    batch_number,
    r_trans_type,
    p_user,
    batch_amount,
    approval_flag,
    value_date,
  } = req.body;

  async function getViewSuspededDetails() {
    let con;

    try {
      con = await oracledb.getConnection({
        user: DB_USER,
        password: DB_PASSWORD,
        connectString: DB_CONNECTION_STRING,
      });

      const response = [];
      const resp = [];
      let arr0 = "";

      // node native promisify
      // const execute = util.promisify(db.execute).bind(db);

      const data = await con.execute(`
      SELECT BATCH_NO,
      POSTING_DATE,
      VALUE_DATE,
      VOUCHER_NUMBER,
      BATCH_DESC,
      TRANS_COUNT,
      BATCH_AMOUNT,
      USER_NAME
  from vw_voucher_enq_save
  where USER_NAME = '${p_user}' and
  VOUCHER_NUMBER = '${r_trans_type}' and
  BATCH_NO LIKE '%'||'${batch_number}'||'%' AND BATCH_AMOUNT LIKE '%'||'${batch_amount}'||'%' AND TO_CHAR(VALUE_DATE,'DD-MON-YYYY')  LIKE '%'||'${value_date}'||'%' ORDER BY BATCH_NO DESC
  
         `);

      // PYMT;
      if (data) {
        console.log("data");
      } else {
        console.log("no data");
      }
      //  POSTING_DATEBATCH_DESC;

      // console.log(data);

      if (data) {
        for (let i = 0; i < data.rows.length; i++) {
          for (let x = 0; x < data.metaData.length; x++) {
            arr0 +=
              '"' +
              [data.metaData[x].name.toLowerCase()] +
              '" : "' +
              data.rows[i][x] +
              '",';
          }

          response.push(
            JSON.parse(
              "{" +
                arr0.replace(/(\r\n|\n|\r)/gm, "").replace(/,\s*$/, "") +
                "}"
            )
          );
          // console.log(response,"resssss")
        }
        for (let i = 0; i < response.length; i++) {
          const postingDate = new Date(response[i].posting_date);
          const valueDate = new Date(response[i].value_date);

          response[i].posting_date = postingDate.toDateString();
          response[i].value_date = valueDate.toDateString();
        }
        res.send(response);
      } else {
        res.send(err);
        console.log("error");
      }
    } catch (err) {
      res.send(err);

      throw err;
    }
  }

  getViewSuspededDetails();
});

// Get SUSPENDED Arrow Button Transactions Details
app.post("/api/get-suspended-transaction-details", (req, res) => {
  const batch_no = "'" + req.body.batch_no + "'";

  async function getSuspendedDetails() {
    let con;

    try {
      con = await oracledb.getConnection({
        user: DB_USER,
        password: DB_PASSWORD,
        connectString: DB_CONNECTION_STRING,
      });

      const response = [];
      const resp = [];
      let arr0 = "";

      // node native promisify
      // const execute = util.promisify(db.execute).bind(db);

      const data = await con.execute(`      
            select (get_acctdesc(a.acct_link) || '-' || a.acct_link || '(' || get_curriso(a.currency_code) || ')') AS Account_descrption,
      GET_SHADOW_BAL(a.acct_link) as acct_balance ,GET_STATUSDESC(a.acct_link) STATUS, b.TYPE_OF_ACCT, a.* from acct_vouchers a , VW_ACCOUNT_LIST1 b where a.BATCH_NO = ${batch_no} and 
      b.ACCOUNT_NUMBER = a.ACCT_LINK 
      `);

      // SELECT * FROM ACCT_VOUCHERS WHERE voucher_number='PYMT'  and BATCH_NO = ${batch_no}
      // PYMT;
      if (data) {
        console.log("data");
      } else {
        console.log("no data");
      }
      //  POSTING_DATEBATCH_DESC;

      // console.log(data);

      if (data) {
        for (let i = 0; i < data.rows.length; i++) {
          for (let x = 0; x < data.metaData.length; x++) {
            arr0 +=
              '"' +
              [data.metaData[x].name.toLowerCase()] +
              '" : "' +
              data.rows[i][x] +
              '",';
          }

          response.push(
            JSON.parse(
              "{" +
                arr0.replace(/(\r\n|\n|\r)/gm, "").replace(/,\s*$/, "") +
                "}"
            )
          );
          // console.log(response,"resssss")
          for (let i = 0; i < response.length; i++) {
            const voucherDate = new Date(response[i].voucher_date);
            const posting_date = new Date(response[i].posting_date);
            const valueDate = new Date(response[i].value_date);
            const posting_sysdate = new Date(response[i].posting_sys_date);
            const approval_sysdate = new Date(response[i].approval_sys_date);

            response[i].voucher_date = voucherDate.toDateString();
            const day = valueDate.getDate().toString().padStart(2, "0");
            const month = valueDate
              .toLocaleString("default", { month: "short" })
              .toUpperCase();
            const year = valueDate.getFullYear().toString();
            response[i].value_date = `${day}-${month}-${year}`;
            response[i].posting_date = posting_date.toDateString();
            response[i].posting_sys_date = posting_sysdate.toDateString();
            response[i].approval_sys_date = approval_sysdate.toDateString();
          }
        }
        res.send(response);
      } else {
        res.send(err);
        console.log("error");
      }
    } catch (err) {
      res.send(err);

      throw err;
    }
  }

  getSuspendedDetails();
});

//PREPAYMENT SCHEDULE DATA API
app.post("/api/get-prepayment-schedule", (req, res) => {
  async function getPrepaymentSchedule() {
    let con;

    try {
      con = await oracledb.getConnection({
        user: DB_USER,
        password: DB_PASSWORD,
        connectString: DB_CONNECTION_STRING,
      });
      const PREPAYMENT_ACCT = "'" + req.body.PREPAYMENT_ACCT + "'";
      const EXPENSE_ACCOUNT = "'" + req.body.EXPENSE_ACCOUNT + "'";
      const FREQUENCY = "'" + req.body.FREQUENCY + "'";
      const paymentID = "'" + req.body.paymentID + "'";

      const response = [];
      const headLevel = [];
      const arr = [];
      let arr0 = "";

      // node native promisify
      // const execute = util.promisify(db.execute).bind(db);

      const data = await con.execute(`
      SELECT PRE_SEQ, GET_ACCTDESC(ACCT_LINK1) PREPAYMENT_ACCOUNT, GET_ACCTDESC(ACCT_LINK2) EXPENSE_ACCOUNT, 
      GET_FREQ_DESC(FREQUENCY) FREQUENCY, START_DATE, DOC_AMT, GET_BRANCHDESC(BRANCH_CODE) BRANCH_CODE, DOC_DESCRP, POSTED_BY
      , FLAG_MESSAGE  FROM tb_prepayment_cost  WHERE ACCT_LINK1 LIKE ('%'||${PREPAYMENT_ACCT}||'%')  AND 
       ACCT_LINK2 LIKE ('%'||${EXPENSE_ACCOUNT}||'%') AND FREQUENCY LIKE ('%'||${FREQUENCY}||'%') AND PRE_SEQ LIKE ('%'||${paymentID}||'%')
      `);

      if (data.rows) {
        for (let i = 0; i < data.rows.length; i++) {
          for (let x = 0; x < data.metaData.length; x++) {
            arr0 +=
              '"' +
              [data.metaData[x].name.toLowerCase()] +
              '" : "' +
              data.rows[i][x] +
              '",';
          }

          response.push(
            JSON.parse(
              "{" +
                arr0.replace(/(\r\n|\n|\r)/gm, "").replace(/,\s*$/, "") +
                "}"
            )
          );
        }

        for (let i = 0; i < response.length; i++) {
          const months = [
            "JAN",
            "FEB",
            "MAR",
            "APR",
            "MAY",
            "JUN",
            "JUL",
            "AUG",
            "SEP",
            "OCT",
            "NOV",
            "DEC",
          ];
          const startDate = new Date(response[i].start_date);
          response[i].start_date = `${startDate.getDate()}-${
            months[startDate.getMonth()]
          }-${startDate.getFullYear()}`;
        }

        res.send(response);
      } else {
        res.send(err);
        console.log("error");
      }
    } catch (err) {
      res.send(err);

      throw err;
    }
  }

  getPrepaymentSchedule();
});

// Get PREPAYMENT SCHEDULE DETAILS MANUAL
app.post("/api/get-prepayment-schedule-details-manual", (req, res) => {
  const batch_no = "'" + req.body.batch_no + "'";
  const due = "'" + req.body.due + "'";
  const statusFlag = "'" + req.body.statusFlag + "'";

  async function getPrepaymentScheduleDetailsManual() {
    let con;

    try {
      con = await oracledb.getConnection({
        user: DB_USER,
        password: DB_PASSWORD,
        connectString: DB_CONNECTION_STRING,
      });

      const response = [];
      const resp = [];
      let arr0 = "";

      // node native promisify
      // const execute = util.promisify(db.execute).bind(db);

      const data = await con.execute(`
      SELECT SCHEDULE_ID,GET_FREQ_DESC(FREQUENCY) FREQUENCY,DUE_AMOUNT,DOC_DESCRP,
 ACCT_LINK1 ||' - '||GET_ACCTDESC(ACCT_LINK1) ACCT_LINK1, ACCT_LINK2 ||' - '||GET_ACCTDESC(ACCT_LINK2) ACCT_LINK2,DUE_DATE,PAYMENT_ID,
DECODE(PAYMENT_FLAG,'P','Paid','Y','Unpaid','N','Unapproved','C','Cancelled','S','Suspended') PAYMENT_FLAG,DUE
FROM VW_PREPAYMENT_SCHEDULE_SUM WHERE EXP_TYPE='PREP'
and schedule_id=${batch_no}
AND DUE LIKE ('%'||${due}||'%')
and PAYMENT_FLAG LIKE ('%'||${statusFlag}||'%')
ORDER BY DUE_DATE
      `);

      // SELECT * FROM ACCT_VOUCHERS WHERE voucher_number='PYMT'  and BATCH_NO = ${batch_no}
      // PYMT;
      // if (data) {
      //   console.log("data");
      // } else {
      //   console.log("no data");
      // }
      //  POSTING_DATEBATCH_DESC;

      // console.log(data);

      if (data) {
        for (let i = 0; i < data.rows.length; i++) {
          for (let x = 0; x < data.metaData.length; x++) {
            arr0 +=
              '"' +
              [data.metaData[x].name.toLowerCase()] +
              '" : "' +
              data.rows[i][x] +
              '",';
          }

          response.push(
            JSON.parse(
              "{" +
                arr0.replace(/(\r\n|\n|\r)/gm, "").replace(/,\s*$/, "") +
                "}"
            )
          );
          // console.log(response,"resssss")
          for (let i = 0; i < response.length; i++) {
            const dueDate = new Date(response[i].due_date);
            const day = dueDate.getDate().toString().padStart(2, "0");
            const month = dueDate
              .toLocaleString("default", { month: "short" })
              .toUpperCase();
            const year = dueDate.getFullYear().toString();
            response[i].due_date = `${day}-${month}-${year}`;
          }
        }
        res.send(response);
      } else {
        res.send(err);
        console.log("error");
      }
    } catch (err) {
      res.send(err);

      throw err;
    }
  }

  getPrepaymentScheduleDetailsManual();
});

// DERRICK STANDING ORDER API's
// -------------------------------------------------------------------------
app.post("/api/standingOrderLOVs", (req, res) => {
  const { debitBranch, bankCode, branchCode, frequency } = req.body;
  async function standingOrderLOVs() {
    let con;
    // let bigArray = [];
    let debitBranchArray = [];
    let bankCodeArray = [];
    let branchCodeArray = [];
    let frequencyArray = [];

    try {
      con = await oracledb.getConnection({
        user: DB_USER,
        password: DB_PASSWORD,
        connectString: DB_CONNECTION_STRING,
        timeout: DB_CONNECTION_TIMEOUT,
      });

      if (debitBranch === "debitBranch") {
        const data = await con.execute(
          `select br_description,br_code from tb_branch where length(br_code)>2 ORDER BY br_code ASC`
        );

        if (data.rows) {
          // const arr = [];

          for (let i = 0; i < data.rows.length; i++) {
            const description = data.rows[i][0];
            const actual_code = data.rows[i][1];

            debitBranchArray.push({
              label: `${actual_code} - ${description}`,
              value: `${actual_code}`,
            });
          }

          // res.send(arr);
          // return arr;
        }
      }

      if (bankCode) {
        const data = await con.execute(
          `
          select actual_code,substr(description,1,45) from code_desc
        where code_type = '${bankCode}'
        and exists (select 1 from banks_nostro where bank_code = actual_code ) `
        );

        if (data.rows) {
          // const arr = [];

          for (let i = 0; i < data.rows.length; i++) {
            const actual_code = data.rows[i][0];
            const description = data.rows[i][1];

            bankCodeArray.push({
              label: `${actual_code} - ${description}`,
              value: `${actual_code}`,
            });
          }

          // res.send(arr);
          // return arr;
        }
      }

      if (branchCode === "branchCode") {
        const data = await con.execute(
          ` SELECT ALL TB_BRANCH.BR_CODE, TB_BRANCH.BR_DESCRIPTION
          FROM TB_BRANCH ORDER BY TB_BRANCH.BR_CODE ASC  `
        );

        if (data.rows) {
          // const arr = [];

          for (let i = 0; i < data.rows.length; i++) {
            const actual_code = data.rows[i][0];
            const description = data.rows[i][1];

            branchCodeArray.push({
              label: `${actual_code} - ${description}`,
              value: `${actual_code}`,
            });
          }

          // res.send(arr);
          // return arr;
        }
      }

      if (frequency) {
        const data = await con.execute(
          `select actual_code,description from code_desc a where a.code_type
          = '${frequency}' ORDER BY actual_code ASC`
        );

        if (data.rows) {
          // const arr = [];

          for (let i = 0; i < data.rows.length; i++) {
            const actual_code = data.rows[i][0];
            const description = data.rows[i][1];

            frequencyArray.push({
              label: `${actual_code} - ${description}`,
              value: `${actual_code}`,
            });
          }

          // res.send(arr);
          // return arr;
        }
      } else {
        res.send(err);
        console.log(err, "error here");
      }

      res.send({
        debitBranch: debitBranchArray,
        bankCode: bankCodeArray,
        branchCode: branchCodeArray,
        frequency: frequencyArray,
      });
    } catch (err) {
      res.send(err);
    }
  }

  standingOrderLOVs();
});

// ----------------------------------------------------------------------------

// --CREATE USER APIs--------------------------------------------------------------------------

// get-user-personal-info
app.post("/api/getUserID", (req, res) => {
  // return res.send(accountName);
  const { key, staff_id } = req.body;
  async function getUserPesonalInfo() {
    let con;

    try {
      con = await oracledb.getConnection({
        user: DB_USER,
        password: DB_PASSWORD,
        connectString: DB_CONNECTION_STRING,
        timeout: DB_CONNECTION_TIMEOUT,
      });

      if (key === 1) {
        const data = await con.execute(
          `select f_name || ' ' || NVL(m_name, '') || ' ' || s_name  || ' - ' || id as label, id as value from personal_info`
        );
        // res.send("here")

        var arr0 = [];
        var response = [];

        if (data.rows) {
          for (let i = 0; i < data.rows.length; i++) {
            console.log(data.rows.length);
            for (let x = 0; x < data.metaData.length; x++) {
              arr0 +=
                '"' +
                [data.metaData[x].name.toLowerCase()] +
                '" : "' +
                data.rows[i][x] +
                '",';
            }

            // res.send(arr0)
            response.push(JSON.parse("{" + arr0.replace(/,\s*$/, "") + "}"));
            // res.send(JSON.parse("{" + arr0.replace(/,\s*$/, "") + "}"));
          }

          res.send(response);
          // res.send(data);
        } else {
          res.send("Something went wrong... Nothing was returned!!");
        }
      } else if (key === 2) {
        // on change function
        const data = await con.execute(
          `select f_name || ' ' || NVL(m_name, '') || ' ' || s_name as name, id, branch, department from personal_info where id='${staff_id}' `
        );
        // res.send("here")

        var arr0 = [];
        var response = [];

        if (data.rows) {
          for (let i = 0; i < data.rows.length; i++) {
            console.log(data.rows.length);
            for (let x = 0; x < data.metaData.length; x++) {
              arr0 +=
                '"' +
                [data.metaData[x].name.toLowerCase()] +
                '" : "' +
                data.rows[i][x] +
                '",';
            }

            // res.send(arr0)
            response.push(JSON.parse("{" + arr0.replace(/,\s*$/, "") + "}"));
            // res.send(JSON.parse("{" + arr0.replace(/,\s*$/, "") + "}"));
          }

          res.send(response);
          // res.send(data);
        } else {
          res.send("Something went wrong... Nothing was returned!!");
        }
      }
    } catch (err) {
      console.log(err);
      res.send(err);
    }
  }

  getUserPesonalInfo();
});

// get branch
app.get("/api/get-user-branch", (req, res) => {
  let getBranch = async () => {
    try {
      const db = await oracledb.getConnection({
        user: DB_USER,
        password: DB_PASSWORD,
        connectString: DB_CONNECTION_STRING,
        timeout: DB_CONNECTION_TIMEOUT,
      });
      const execute = util.promisify(db.execute).bind(db);

      const data = await execute(
        `SELECT TB_BRANCH.BR_CODE as value, TB_BRANCH.BR_DESCRIPTION as label
        FROM TB_BRANCH`
      );
      if (data) {
        var arr0 = "";
        var arr = [];

        for (let i = 0; i < data.rows.length; i++) {
          for (let x = 0; x < data.metaData.length; x++) {
            arr0 +=
              '"' +
              [data.metaData[x].name.toLowerCase()] +
              '" : "' +
              data.rows[i][x] +
              '",';
          }

          arr.push(JSON.parse("{" + arr0.replace(/,\s*$/, "") + "}"));
        }

        return res.send(arr);
      } else {
        res.send("Something went wrong... Nothing was returned!!");
      }
    } catch (err) {
      console.log(err);
      res.send("err");
    }
  };
  getBranch();
});

// get-user-authority-code
app.get("/api/get-user-authority-code", (req, res) => {
  let getBranch = async () => {
    try {
      const db = await oracledb.getConnection({
        user: DB_USER,
        password: DB_PASSWORD,
        connectString: DB_CONNECTION_STRING,
        timeout: DB_CONNECTION_TIMEOUT,
      });
      const execute = util.promisify(db.execute).bind(db);

      const data = await execute(
        `select ACTUAL_CODE as value, DESCRIPTION as label from code_desc
        where code_type = 'ACS'
        order by actual_code`
      );
      if (data) {
        var arr0 = "";
        var arr = [];

        for (let i = 0; i < data.rows.length; i++) {
          for (let x = 0; x < data.metaData.length; x++) {
            arr0 +=
              '"' +
              [data.metaData[x].name.toLowerCase()] +
              '" : "' +
              data.rows[i][x] +
              '",';
          }

          arr.push(JSON.parse("{" + arr0.replace(/,\s*$/, "") + "}"));
        }

        return res.send(arr);
      } else {
        res.send("Something went wrong... Nothing was returned!!");
      }
    } catch (err) {
      console.log(err);
    }
  };
  getBranch();
});

// get-user-access-right
app.get("/api/get-user-access-right", (req, res) => {
  let getBranch = async () => {
    try {
      const db = await oracledb.getConnection({
        user: DB_USER,
        password: DB_PASSWORD,
        connectString: DB_CONNECTION_STRING,
        timeout: DB_CONNECTION_TIMEOUT,
      });
      const execute = util.promisify(db.execute).bind(db);

      const data = await execute(
        `select DESCRIPTION as label,ACTUAL_CODE as value from code_desc where code_type='AUS'`
      );
      if (data) {
        var arr0 = "";
        var arr = [];

        for (let i = 0; i < data.rows.length; i++) {
          for (let x = 0; x < data.metaData.length; x++) {
            arr0 +=
              '"' +
              [data.metaData[x].name.toLowerCase()] +
              '" : "' +
              data.rows[i][x] +
              '",';
          }

          arr.push(JSON.parse("{" + arr0.replace(/,\s*$/, "") + "}"));
        }

        return res.send(arr);
      } else {
        res.send("Something went wrong... Nothing was returned!!");
      }
    } catch (err) {
      console.log(err);
    }
  };
  getBranch();
});

// get-user-approval-level
app.get("/api/get-user-approval-level", (req, res) => {
  let getBranch = async () => {
    try {
      const db = await oracledb.getConnection({
        user: DB_USER,
        password: DB_PASSWORD,
        connectString: DB_CONNECTION_STRING,
        timeout: DB_CONNECTION_TIMEOUT,
      });
      const execute = util.promisify(db.execute).bind(db);

      const data = await execute(
        `select Actual_code as value,Description as label
        from code_desc where code_type='GPU'
        order by actual_code`
      );
      if (data) {
        var arr0 = "";
        var arr = [];

        for (let i = 0; i < data.rows.length; i++) {
          for (let x = 0; x < data.metaData.length; x++) {
            arr0 +=
              '"' +
              [data.metaData[x].name.toLowerCase()] +
              '" : "' +
              data.rows[i][x] +
              '",';
          }

          arr.push(JSON.parse("{" + arr0.replace(/,\s*$/, "") + "}"));
        }

        return res.send(arr);
      } else {
        res.send("Something went wrong... Nothing was returned!!");
      }
    } catch (err) {
      console.log(err);
    }
  };
  getBranch();
});

// get-teller-role
app.post("/api/get-teller-role", (req, res) => {
  const { access_code } = req.body;
  let getTellerRole = async () => {
    try {
      const db = await oracledb.getConnection({
        user: DB_USER,
        password: DB_PASSWORD,
        connectString: DB_CONNECTION_STRING,
        timeout: DB_CONNECTION_TIMEOUT,
      });
      const execute = util.promisify(db.execute).bind(db);

      const data = await execute(
        `select role_CODE as value, DESCRIPTION as label from VW_TELLERROLE
        where role_type=get_telltype('${access_code}')`
      );
      if (data) {
        var arr0 = "";
        var arr = [];

        for (let i = 0; i < data.rows.length; i++) {
          for (let x = 0; x < data.metaData.length; x++) {
            arr0 +=
              '"' +
              [data.metaData[x].name.toLowerCase()] +
              '" : "' +
              data.rows[i][x] +
              '",';
          }

          arr.push(JSON.parse("{" + arr0.replace(/,\s*$/, "") + "}"));
        }

        return res.send(arr);
      } else {
        res.send("Something went wrong... Nothing was returned!!");
      }
    } catch (err) {
      console.log(err);
    }
  };
  getTellerRole();
});

// get-teller-limit
app.post("/api/get-teller-limit", (req, res) => {
  const { teller_role } = req.body;
  let getTellerLimit = async () => {
    try {
      const db = await oracledb.getConnection({
        user: DB_USER,
        password: DB_PASSWORD,
        connectString: DB_CONNECTION_STRING,
        timeout: DB_CONNECTION_TIMEOUT,
      });
      const execute = util.promisify(db.execute).bind(db);

      const data = await execute(
        `select get_currdesc(currency_code), max_online_cr, min_off_dr, max_floor_lim, min_floor_lim  from Users_teller_currency where Teller_name='${teller_role}'`
      );
      //   if (data.rows.length > 0) {
      //     currencyCode = data.rows[0][0]
      // }

      // const data1
      if (data) {
        var arr0 = "";
        var arr = [];

        for (let i = 0; i < data.rows.length; i++) {
          for (let x = 0; x < data.metaData.length; x++) {
            arr0 +=
              '"' +
              [data.metaData[x].name.toLowerCase()] +
              '" : "' +
              data.rows[i][x] +
              '",';
          }

          arr.push(JSON.parse("{" + arr0.replace(/,\s*$/, "") + "}"));
        }

        return res.send(arr);
      } else {
        res.send("Something went wrong... Nothing was returned!!");
      }
    } catch (err) {
      console.log(err);
    }
  };
  getTellerLimit();
});

// get-access-form-listing
app.post("/api/get-access-form-listing", (req, res) => {
  const { access_code } = req.body;
  let getAccessFormListing = async () => {
    try {
      const db = await oracledb.getConnection({
        user: DB_USER,
        password: DB_PASSWORD,
        connectString: DB_CONNECTION_STRING,
        timeout: DB_CONNECTION_TIMEOUT,
      });
      const execute = util.promisify(db.execute).bind(db);

      const data = await execute(
        `SELECT grping, label FROM VW_access_forms_listing WHERE ACCESS_CODE = '${access_code}' `
        // where access_code = '${access_code}'
      );
      if (data) {
        var arr0 = "";
        var arr = [];

        for (let i = 0; i < data.rows.length; i++) {
          for (let x = 0; x < data.metaData.length; x++) {
            arr0 +=
              '"' +
              [data.metaData[x].name.toLowerCase()] +
              '" : "' +
              data.rows[i][x] +
              '",';
          }

          arr.push(JSON.parse("{" + arr0.replace(/,\s*$/, "") + "}"));
        }

        return res.send(arr);
      } else {
        res.send("Something went wrong... Nothing was returned!!");
      }
    } catch (err) {
      console.log(err);
    }
  };
  getAccessFormListing();
});

// get-currency-description
app.post("/api/get-currency-description", (req, res) => {
  const { currency_description } = req.body;
  let getCurrencyDescription = async () => {
    try {
      const db = await oracledb.getConnection({
        user: DB_USER,
        password: DB_PASSWORD,
        connectString: DB_CONNECTION_STRING,
        timeout: DB_CONNECTION_TIMEOUT,
      });
      const execute = util.promisify(db.execute).bind(db);

      const data = await execute();

      if (data) {
        var arr0 = "";
        var arr = [];

        for (let i = 0; i < data.rows.length; i++) {
          for (let x = 0; x < data.metaData.length; x++) {
            arr0 +=
              '"' +
              [data.metaData[x].name.toLowerCase()] +
              '" : "' +
              data.rows[i][x] +
              '",';
          }

          arr.push(JSON.parse("{" + arr0.replace(/,\s*$/, "") + "}"));
        }

        return res.send(arr);
      } else {
        res.send("Something went wrong... Nothing was returned!!");
      }
    } catch (err) {
      console.log(err);
    }
  };
  getCurrencyDescription();
});

// get-all-the-details-for-a-selected-user
app.get("/api/get-individual-details", (req, res) => {
  let getIndividualDetails = async () => {
    try {
      const db = await oracledb.getConnection({
        user: DB_USER,
        password: DB_PASSWORD,
        connectString: DB_CONNECTION_STRING,
        timeout: DB_CONNECTION_TIMEOUT,
      });
      const execute = util.promisify(db.execute).bind(db);

      const data = await execute(`select * from personal_info`);
      if (data) {
        var arr0 = "";
        var arr = [];

        for (let i = 0; i < data.rows.length; i++) {
          for (let x = 0; x < data.metaData.length; x++) {
            arr0 +=
              '"' +
              [data.metaData[x].name.toLowerCase()] +
              '" : "' +
              data.rows[i][x] +
              '",';
          }

          arr.push(JSON.parse("{" + arr0.replace(/,\s*$/, "") + "}"));
        }

        return res.send(arr);
      } else {
        res.send("Something went wrong... Nothing was returned!!");
      }
    } catch (err) {
      console.log(err);
    }
  };
  getIndividualDetails();
});

// Get Posted Arrow Button Transactions Details
app.get("/api/get-balance-sheet-details", (req, res) => {
  async function getBalanceSheetDetails() {
    let con;

    try {
      con = await oracledb.getConnection({
        user: DB_USER,
        password: DB_PASSWORD,
        connectString: DB_CONNECTION_STRING,
      });

      const response = [];
      const headLevel = [];
      const resp = [];
      let arr0 = "";

      // node native promisify
      // const execute = util.promisify(db.execute).bind(db);

      const data = await con.execute(`
      SELECT BS_CODE,BS_DESC,LEVEL_INDICATOR,LINE_CATEGORY, get_Branchdesc(BRANCH_CODE) Branch, ORDERING,nvl(CLEAR_TO_CODE,' ') as CLEAR_TO_CODE, ORDER_OF_PRINT from BALANCE_SHEET ORDER BY ORDER_OF_PRINT ASC
      `);
      // WHERE LEVEL_INDICATOR='H' and BS_DESC <>'.'

      // PYMT;
      if (data) {
        console.log("data");
      } else {
        console.log("no data");
      }
      //  POSTING_DATEBATCH_DESC;

      // console.log(data);

      if (data) {
        for (let i = 0; i < data.rows.length; i++) {
          for (let x = 0; x < data.metaData.length; x++) {
            arr0 +=
              '"' +
              [data.metaData[x].name.toLowerCase()] +
              '" : "' +
              data.rows[i][x] +
              '",';
          }

          response.push(
            JSON.parse(
              "{" +
                arr0.replace(/(\r\n|\n|\r)/gm, "").replace(/,\s*$/, "") +
                "}"
            )
          );
        }

        res.send(response);
      } else {
        res.send(err);
        console.log("error");
      }
    } catch (err) {
      res.send(err);

      throw err;
    }
  }

  getBalanceSheetDetails();
});

// Get Parent line Details
app.get("/api/get-parent-line-details", (req, res) => {
  // const code = "'" + req.body.code + "'";

  async function getParentLineDetails() {
    let con;

    try {
      con = await oracledb.getConnection({
        user: DB_USER,
        password: DB_PASSWORD,
        connectString: DB_CONNECTION_STRING,
        timeout: DB_CONNECTION_TIMEOUT,
      });

      const data = await con.execute(
        `select bs_desc Description,bs_code Code from balance_sheet
        where level_indicator='T' and flag='Y'`
      );

      if (data.rows) {
        const arr = [];

        for (let i = 0; i < data.rows.length; i++) {
          const description = data.rows[i][0];
          const actual_code = data.rows[i][1];
          const short_descrp = data.rows[i][2];

          arr.push({
            label: actual_code + " - " + description,
            value: actual_code,
            // short_descrp: short_descrp,
          });
        }

        res.send(arr);
      } else {
        res.send(err);
        console.log(err);
      }
    } catch (err) {
      res.send(err);
    }
  }

  getParentLineDetails();
});

app.post("/api/get-reporting-line-code", (req, res) => {
  let balanceSheetType = req.body.balanceSheetType;

  async function getReportingLineCode() {
    let con;

    if (balanceSheetType) {
      response = `where level_indicator = 'D' and BALANCE_SHEET_AC_TYPE = '${balanceSheetType}' order by bs_code`;
    } else {
      response = `where level_indicator = 'D' order by bs_code`;
    }

    try {
      con = await oracledb.getConnection({
        user: DB_USER,
        password: DB_PASSWORD,
        connectString: DB_CONNECTION_STRING,
        timeout: DB_CONNECTION_TIMEOUT,
      });

      const data = await con.execute(
        `select bs_code,bs_desc
         from balance_sheet ${response}`
      );

      if (data.rows) {
        const arr = [];

        for (let i = 0; i < data.rows.length; i++) {
          const description = data.rows[i][0];
          const actual_code = data.rows[i][1];
          const short_descrp = data.rows[i][2];

          arr.push({
            label: actual_code + " - " + description,
            value: description,
            // short_descrp: short_descrp,
          });
        }

        res.send(arr);
      } else {
        res.send(err);
        console.log(err);
      }
    } catch (err) {
      res.send(err);
    }
  }

  getReportingLineCode();
});

app.get("/api/get-add-branch-code-account-class", (req, res) => {
  // const code = "'" + req.body.code + "'";

  async function getAccountClass() {
    let con;

    try {
      con = await oracledb.getConnection({
        user: DB_USER,
        password: DB_PASSWORD,
        connectString: DB_CONNECTION_STRING,
        timeout: DB_CONNECTION_TIMEOUT,
      });

      const data = await con.execute(
        `SELECT ACTUAL_CODE, DESCRIPTION
        FROM CODE_DESC  
        where code_type='ACL'`
      );

      if (data.rows) {
        const arr = [];

        for (let i = 0; i < data.rows.length; i++) {
          const description = data.rows[i][0];
          const actual_code = data.rows[i][1];
          const short_descrp = data.rows[i][2];

          arr.push({
            label: actual_code + " - " + description,
            value: actual_code,
            // short_descrp: short_descrp,
          });
        }

        res.send(arr);
      } else {
        res.send(err);
        console.log(err);
      }
    } catch (err) {
      res.send(err);
    }
  }

  getAccountClass();
});

app.post("/api/get-branch-account-details", (req, res) => {
  const accountCode = req.body.accountCode;
  let getBranchAccountDetails = async () => {
    try {
      const db = await oracledb.getConnection({
        user: DB_USER,
        password: DB_PASSWORD,
        connectString: DB_CONNECTION_STRING,
        timeout: DB_CONNECTION_TIMEOUT,
      });
      const execute = util.promisify(db.execute).bind(db);

      const data = await execute(
        `SELECT * 
        FROM CHART_OF_ACCT
        WHERE ACCOUNT_CODE = '${accountCode}'
        `
      );

      if (data) {
        var arr0 = "";
        var arr = [];

        for (let i = 0; i < data.rows.length; i++) {
          for (let x = 0; x < data.metaData.length; x++) {
            arr0 +=
              '"' +
              [data.metaData[x].name.toLowerCase()] +
              '" : "' +
              data.rows[i][x] +
              '",';
          }

          arr.push(JSON.parse("{" + arr0.replace(/,\s*$/, "") + "}"));
        }

        return res.send(arr);
      } else {
        res.send("Something went wrong... Nothing was returned!!");
      }
    } catch (err) {
      console.log(err);
    }
  };
  getBranchAccountDetails();
});

const payment = require("./controllers/payments/paymentController.js");
// Get Receiving Bank
app.post("/api/receiving_banks", payment.Banks);

// Sender's Corre A/C53a LoVs
app.get("/api/senderCorre", payment.CorreAC53a);

// Account With Inst. 57a LoVs
app.get("/api/accountInst", payment.Inst57a);

// PayerBBAN
app.post("/api/payerBBAN", payment.BBAN);

// Get Account Description
app.post("/api/getAccountDescription", payment.getAccountName);

// Get Tax
app.post("/api/getTax", payment.Tax);

// Get Bank Branches
app.get("/api/getBranches", payment.BanksBranch);

// Tenor for FD Creation Entry
app.post("/api/FDTenor", payment.Tenor);

// Central Approval
app.post("/api/centralApprovals", payment.CentralApp);

// Fees Transactions
app.post("/api/fessTransactions", payment.FeesTransaction);

// FD Entry Creation
app.post("/api/fdCreation", payment.FDEC);

// RTGS Origination
app.post("/api/rtgsOrigination", payment.RTGSOrigination);

// Next Int. and Mat Date
app.post("/api/getDates", payment.NextIntDate);

// Sender's Institution
app.post("/api/senderInstitutions", payment.SenderInstitution);

// ReceiverInstitution
app.post("/api/receiverInstitution", payment.ReceiverInstitution);

// FDNEW
app.post("/api/FDEntry", payment.FDN);

// Call Account Entry
const callAccount = require("./controllers/payments/callAccount.js");
const { parse } = require("path");

app.post("/api/callAccount/customerNumber", callAccount.CUSTNUM);
app.post("/api/callAccount/beneCustomer", callAccount.BENNUM);
app.post("/api/callAccount/srcAccountLovs", callAccount.srcAccountLovs);
app.post("/api/callAccount/interestAccount", callAccount.InterestAccount);
app.post("/api/callAccount/liquidationAccount", callAccount.LiquidationAccount);
app.get("/api/callAccount/dealSources", callAccount.DealSource);
app.get("/api/callAccount/productCodes", callAccount.ProductLovs);
app.post("/api/callAccount/currencyCode", callAccount.Currency);
app.post("/api/callAccount/InterestAgreed", callAccount.IAR);

// branch
const branchEnquiry = require("./controllers/branch/branchEnquiryController");
app.get("/api/branchEnquiry/branchZone", branchEnquiry.branchZone);
app.get("/api/branchEnquiry/branches", branchEnquiry.branches);
app.post("/api/branchEnquiry/getAllBranches", branchEnquiry.getAllBranches);
app.post(
  "/api/branchEnquiry/getSelectedBranch",
  branchEnquiry.getSelectedBranch
);
app.post("/api/branchEnquiry/getLimits", branchEnquiry.getLimits);

// create branch
const createNewBranch = require("./controllers/branch/createBranchController");
const { getHobbyLov } = require("./controllers/account/hobbyController/hobbyController.js");


app.get("/api/createBank/clearingCode", createNewBranch.clearingCode);
app.get("/api/createBank/region", createNewBranch.region);
app.post(
  "/api/createBank/get-branch-managers",
  createNewBranch.getBranchManagers
);
app.get("/api/createBank/branchFieldError", createNewBranch.branchFieldError);
app.get(
  "/api/createBank/get-new-branch-code",
  createNewBranch.getNewBranchCode
);
// Create Branch User Action Audit
app.post("/api/user-audit-action-create-branch", (req, res) => {
  const { username, branchCode, formattedDate, lastLogin, ipAddress } =
    req.body;

  const hostname = os.hostname();

  let user_action_audit = async (
    username,
    branchCode,
    formattedDate,
    hostname,
    ipAddress
  ) => {
    try {
      const db = await oracledb.getConnection({
        user: DB_USER,
        password: DB_PASSWORD,
        connectString: DB_CONNECTION_STRING,
        timeout: DB_CONNECTION_TIMEOUT,
      });

      // node native promisify
      const execute = util.promisify(db.execute).bind(db);
      let response = await execute(
        // `INSERT INTO user_daily_audit(AMT1,AMT2,COMMENTS,FORM_CODE,KEY_VAL1,KEY_VAL2,KEY_VAL3,
        //   POSTED_BY,POSTING_DATE,POSTING_SYS_TIME,SESSION_ID,TERMINAL_ID,TERMINAL_IP,programs,BRANCH_CODE) VALUES (
        //        null,
        //        null,
        //        'BRANCH_CREATION: '${username}'',
        //        'AAFF',
        //        '${key1}', // key val 1
        //        '${key2}', // key val 2
        //        '${key3}', // key val 3
        //        '${username}', // posted by
        //        '${globalDate}',
        //        '${lastLogin}',
        //        null, // session id
        //        '${hostname}', // terminal id
        //        '${ipAddress}',
        //        'React', // programs
        //        'get_userbranch(${username})', // branch code
        //        );`

        `BEGIN user_action_auditA(null, null, 'BRANCH_CREATION : ${branchCode}', 'AAFF', '${branchCode}', null, null, '${username}', ${formattedDate}, GET_SYSTIME, GET_SESSID, '${hostname}', '${ipAddress}', 'React'); END;`
      );

      if (response) {
        res.send([
          {
            responseCode: "000",
            responseMessage: "Branch Created Successfully",
          },
        ]);
      }
    } finally {
      // conn.end();
    }
  };

  // return user_action_audit(
  //   a,
  //   b,
  //   c,
  //   d,
  //   username,
  //   branchCode,
  //   formattedDate,
  //   lastLogin,
  //   ipAddress
  // );
});
///////////////////////////////////////////////////////////////////

// const dbConfig = {
//   user: DB_USER,
//   password: DB_PASSWORD,
//   connectString: DB_CONNECTION_STRING,
// };

app.post("/api/casa/act/create/rt", async (req, res) => {
  let con;
  try {
    con = await oracledb.getConnection({
      user: DB_USER,
      password: DB_PASSWORD,
      connectString: DB_CONNECTION_STRING,
    });

    const {
      title_v,
      gender_v,
      fname_v,
      mname_v,
      sname_v,
      short_name_v,
      alias_v,
      tin_v,
      preferred_name_v,
      dob_v,
      country_v,
      region_v,
      district_v,
      location_v,
      preferred_lang_v,
      minor_v,
      Guardian_id_v,
      Guardian_type_v,
      health_challenge_v,
      health_challenge_type_v,
      staff_indicator_v,
      staff_id_v,
      OCCUPATION_V,
      OTHER_OCCUPATION_V,
      RESIDENT_V,
      nATIONALITY_V,
      NATIONAL_ID_V,
      NIN_dateissued_v,
      nin_expiry_v,
      ID_type_v,
      id_nO_v,
      id_issue_at_v,
      ID_issued_authority_v,
      ID_date_issued_v,
      ID_expirydate_v,
      Mobile_comm_no_v,
      home_phone_type_v,
      Home_phone_no_v,
      office_phone_type_v,
      office_phone_no_v,
      Office_email_v,
      home_email,
      enable_IB_V,
      enable_MB_V,
      enable_ussd_V,
      enable_smsalert_V,
      enable_emailalert_V,
      mobile_bankphoneno_V,
      Mobile_bankemail_v,
      NOK_fullname_v,
      NOK_ID_type_v,
      NOK_id_number_v,
      NOK_expirydate_v,
      NOK_IssueDate_v,
      NOK_relationship_v,
      NOK_Percent_share_v,
      Nok_Relation_type_v,
      Curr_addr_region_v,
      Curr_addr_hse_typ_v,
      Curr_addr_flat_hse_no_v,
      Curr_addr_building_name_v,
      Curr_addr_streetname_v,
      Curr_addr_location_v,
      Curr_addr_city_v,
      Curr_addr_nearestlandmark_v,
      Curr_addr_natureownship_v,
      Curr_addr_stayedsince_v,
      Curr_addr_costaccomodation_v,
      Curr_addr_current_value_v,
      Curr_addr_balancemortgage_v,
      Curr_addr_attention_party_v,
      Perm_addr_region_v,
      perm_addr_hse_typ_v,
      perm_addr_flat_hse_no_v,
      perm_addr_building_name_v,
      perm_addr_streetname_v,
      perm_addr_location_v,
      perm_addr_city_v,
      perm_addr_nearestlandmark_v,
      perm_addr_natureownship_v,
      perm_addr_stayedsince_v,
      perm_addr_costaccomodation_v,
      perm_addr_current_value_v,
      perm_addr_balancemortgage_v,
      perm_addr_attention_party_v,
      type_of_c_v,
      OVERRIDE_CODE_v,
      SUB_rel_v,
      rel_dedup_v,
      p_channel,
      p_pterm_id,
      p_pip,
      username_v,
      hostname_v,
      key,
      cust_no,
      relation_no,
    } = req.body;

    if (key === "update") {
      const statement = `
        UPDATE TB_RELATION_temp
        SET TITLE = :title_v,
            GENDER = :gender_v,
            FIRST_NAME = :fname_v,
            LAST_NAME = :mname_v
            SURNAME = :sname_v,
            ALIAS_NAME = :alias_v,
            DATE_OF_BIRTH = :dob_v,
            RESIDENCE_COUNTRY = :country_v,
            REGION = :region_v,
            DISTRICT = :district_v,
            LOCATION = :location_v,
            PREFERED_LANG = :preferred_lang_v,
            MINOR = :minor_v,
            GUARDIAN_ID = :Guardian_id_v,
            GUARDIAN_TYPE = :Guardian_type_v,
            HEALTH_CHALLENGE = :health_challenge_v,
            H_CHALLENGE_TYPE = :health_challenge_type_v,
            STAFF_ID = :staff_id_v,
            RESIDENCE_STATUS = :RESIDENT_V,
            NIN_EXPIRY_DATE = :nin_expiry_v,
            ID_TYPE = :ID_type_v,
            ID_NUMBER = :id_nO_v,
            ID_ISSUED_AT = :id_issue_at_v,
            ID_ISSUED_AUTHORITY = :ID_issued_authority_v,
            NIN_DATE_ISSUE = :NIN_dateissued_v,
            ID_EXPIRY_DATE = :ID_expirydate_v,
            HOME_PHONE_TYPE = :home_phone_type_v,
            HOME_PHONE_NO = :Home_phone_no_v,
            OFFICE_PHONE_TYPE = :office_phone_type_v,
            OFFICE_PHONE_NO = :office_phone_no_v,
            OFFICE_EMAIL = :Office_email_v,
            HOME_EMAIL = :home_email,
            ENABLE_IB = :enable_IB_V,
            ENABLE_MOBILEB = :enable_MB_V,
            ENABLE_USSD = :enable_ussd_V,
            ENAMBE_SMS_ALERT = :enable_smsalert_V,
            ENABLE_EMAIL_ALERT = :enable_emailalert_V,
            NEXT_OF_KIN = :NOK_fullname_v,
            NEXT_OF_KIN_ID_TYPE = :NOK_ID_type_v,
            NEXT_OF_KIN_ID_NO = :NOK_id_number_v,
            NEXT_OF_KIN_ID_EXPDATE = :NOK_expirydate_v,
            NEXT_OF_KIN_RELATIONSHIP = :NOK_relationship_v,
            NEXT_OF_KIN_PERCENTSHARE = :NOK_Percent_share_v
        WHERE relation_no = :relation_no`;

      // Bind values and execute the PL/SQL statement
      const result = await con.execute(statement, {
        title_v,
        gender_v,
        fname_v,
        mname_v,
        sname_v,
        short_name_v,
        alias_v,
        tin_v,
        preferred_name_v,
        dob_v,
        country_v,
        region_v,
        district_v,
        location_v,
        preferred_lang_v,
        minor_v,
        Guardian_id_v,
        Guardian_type_v,
        health_challenge_v,
        health_challenge_type_v,
        staff_indicator_v,
        staff_id_v,
        OCCUPATION_V,
        OTHER_OCCUPATION_V,
        RESIDENT_V,
        nATIONALITY_V,
        NATIONAL_ID_V,
        NIN_dateissued_v,
        nin_expiry_v,
        ID_type_v,
        id_nO_v,
        id_issue_at_v,
        ID_issued_authority_v,
        ID_date_issued_v,
        ID_expirydate_v,
        Mobile_comm_no_v,
        home_phone_type_v,
        Home_phone_no_v,
        office_phone_type_v,
        office_phone_no_v,
        Office_email_v,
        home_email,
        enable_IB_V,
        enable_MB_V,
        enable_ussd_V,
        enable_smsalert_V,
        enable_emailalert_V,
        mobile_bankphoneno_V,
        Mobile_bankemail_v,
        NOK_fullname_v,
        NOK_ID_type_v,
        NOK_id_number_v,
        NOK_expirydate_v,
        NOK_IssueDate_v,
        NOK_relationship_v,
        NOK_Percent_share_v,
        Nok_Relation_type_v,
        Curr_addr_region_v,
        Curr_addr_hse_typ_v,
        Curr_addr_flat_hse_no_v,
        Curr_addr_building_name_v,
        Curr_addr_streetname_v,
        Curr_addr_location_v,
        Curr_addr_city_v,
        Curr_addr_nearestlandmark_v,
        Curr_addr_natureownship_v,
        Curr_addr_stayedsince_v,
        Curr_addr_costaccomodation_v,
        Curr_addr_current_value_v,
        Curr_addr_balancemortgage_v,
        Curr_addr_attention_party_v,
        Perm_addr_region_v,
        perm_addr_hse_typ_v,
        perm_addr_flat_hse_no_v,
        perm_addr_building_name_v,
        perm_addr_streetname_v,
        perm_addr_location_v,
        perm_addr_city_v,
        perm_addr_nearestlandmark_v,
        perm_addr_natureownship_v,
        perm_addr_stayedsince_v,
        perm_addr_costaccomodation_v,
        perm_addr_current_value_v,
        perm_addr_balancemortgage_v,
        perm_addr_attention_party_v,
        type_of_c_v,
        OVERRIDE_CODE_v,
        SUB_rel_v,
        rel_dedup_v,
        p_channel,
        p_pterm_id,
        p_pip,
        cust_no_v: { dir: oracledb.BIND_OUT, type: oracledb.STRING },
        rel_no_v: { dir: oracledb.BIND_OUT, type: oracledb.STRING },
        username_v: "your_username",
        hostname_v: "your_hostname",
        api_status: { dir: oracledb.BIND_OUT, type: oracledb.STRING },
        api_msg: { dir: oracledb.BIND_OUT, type: oracledb.STRING },
      });

      const selectResult = await con.execute(
        `SELECT RELATION_NO, FIRST_NAME, SURNAME, LAST_NAME, GENDER, DATE_OF_BIRTH, MOBILE1
        FROM TB_RELATION_temp
        WHERE  cust_no = ${cust_no}'`
      );

      // response.relations = selectResult.rows;

      res.json({ selectResult });
    }
    // Create Oracle DB connection
    // const connection = await oracleDb.getConnection(dbConfig);

    // Prepare the PL/SQL statement
    const statement = `
      BEGIN
        BANKOWNER.PKG_CASA_ACT_create_RT.prc_casa_addrelation_rt(
          :title_v,
          :gender_v,
          :fname_v,
          :mname_v,
          :sname_v,
          :short_name_v,
          :alias_v,
          :tin_v,
          :preferred_name_v,
          :dob_v,
          :country_v,
          :region_v,
          :district_v,
          :location_v,
          :preferred_lang_v,
          :minor_v,
          :Guardian_id_v,
          :Guardian_type_v,
          :health_challenge_v,
          :health_challenge_type_v,
          :staff_indicator_v,
          :staff_id_v,
          :OCCUPATION_V,
          :OTHER_OCCUPATION_V,
          :RESIDENT_V,
          :nATIONALITY_V,
          :NATIONAL_ID_V,
          :NIN_dateissued_v,
          :nin_expiry_v,
          :ID_type_v,
          :id_nO_v,
          :id_issue_at_v,
          :ID_issued_authority_v,
          :ID_date_issued_v,
          :ID_expirydate_v,
          :Mobile_comm_no_v,
          :home_phone_type_v,
          :Home_phone_no_v,
          :office_phone_type_v,
          :office_phone_no_v,
          :Office_email_v,
          :home_email,
          :enable_IB_V,
          :enable_MB_V,
          :enable_ussd_V,
          :enable_smsalert_V,
          :enable_emailalert_V,
          :mobile_bankphoneno_V,
          :Mobile_bankemail_v,
          :NOK_fullname_v,
          :NOK_ID_type_v,
          :NOK_id_number_v,
          :NOK_expirydate_v,
          :NOK_IssueDate_v,
          :NOK_relationship_v,
          :NOK_Percent_share_v,
          :Nok_Relation_type_v,
          :Curr_addr_region_v,
          :Curr_addr_hse_typ_v,
          :Curr_addr_flat_hse_no_v,
          :Curr_addr_building_name_v,
          :Curr_addr_streetname_v,
          :Curr_addr_location_v,
          :Curr_addr_city_v,
          :Curr_addr_nearestlandmark_v,
          :Curr_addr_natureownship_v,
          :Curr_addr_stayedsince_v,
          :Curr_addr_costaccomodation_v,
          :Curr_addr_current_value_v,
          :Curr_addr_balancemortgage_v,
          :Curr_addr_attention_party_v,
          :Perm_addr_region_v,
          :perm_addr_hse_typ_v,
          :perm_addr_flat_hse_no_v,
          :perm_addr_building_name_v,
          :perm_addr_streetname_v,
          :perm_addr_location_v,
          :perm_addr_city_v,
          :perm_addr_nearestlandmark_v,
          :perm_addr_natureownship_v,
          :perm_addr_stayedsince_v,
          :perm_addr_costaccomodation_v,
          :perm_addr_current_value_v,
          :perm_addr_balancemortgage_v,
          :perm_addr_attention_party_v,
          :type_of_c_v,
          :OVERRIDE_CODE_v,
          :SUB_rel_v,
          :rel_dedup_v,
          :p_channel,
          :p_pterm_id,
          :p_pip,
          :cust_no_v,
          :rel_no_v,
          :username_v,
          :hostname_v,
          :api_status,
          :api_msg
        );
      END;
    `;

    // Bind values and execute the PL/SQL statement
    const result = await con.execute(statement, {
      title_v,
      gender_v,
      fname_v,
      mname_v,
      sname_v,
      short_name_v,
      alias_v,
      tin_v,
      preferred_name_v,
      dob_v,
      country_v,
      region_v,
      district_v,
      location_v,
      preferred_lang_v,
      minor_v,
      Guardian_id_v,
      Guardian_type_v,
      health_challenge_v,
      health_challenge_type_v,
      staff_indicator_v,
      staff_id_v,
      OCCUPATION_V,
      OTHER_OCCUPATION_V,
      RESIDENT_V,
      nATIONALITY_V,
      NATIONAL_ID_V,
      NIN_dateissued_v,
      nin_expiry_v,
      ID_type_v,
      id_nO_v,
      id_issue_at_v,
      ID_issued_authority_v,
      ID_date_issued_v,
      ID_expirydate_v,
      Mobile_comm_no_v,
      home_phone_type_v,
      Home_phone_no_v,
      office_phone_type_v,
      office_phone_no_v,
      Office_email_v,
      home_email,
      enable_IB_V,
      enable_MB_V,
      enable_ussd_V,
      enable_smsalert_V,
      enable_emailalert_V,
      mobile_bankphoneno_V,
      Mobile_bankemail_v,
      NOK_fullname_v,
      NOK_ID_type_v,
      NOK_id_number_v,
      NOK_expirydate_v,
      NOK_IssueDate_v,
      NOK_relationship_v,
      NOK_Percent_share_v,
      Nok_Relation_type_v,
      Curr_addr_region_v,
      Curr_addr_hse_typ_v,
      Curr_addr_flat_hse_no_v,
      Curr_addr_building_name_v,
      Curr_addr_streetname_v,
      Curr_addr_location_v,
      Curr_addr_city_v,
      Curr_addr_nearestlandmark_v,
      Curr_addr_natureownship_v,
      Curr_addr_stayedsince_v,
      Curr_addr_costaccomodation_v,
      Curr_addr_current_value_v,
      Curr_addr_balancemortgage_v,
      Curr_addr_attention_party_v,
      Perm_addr_region_v,
      perm_addr_hse_typ_v,
      perm_addr_flat_hse_no_v,
      perm_addr_building_name_v,
      perm_addr_streetname_v,
      perm_addr_location_v,
      perm_addr_city_v,
      perm_addr_nearestlandmark_v,
      perm_addr_natureownship_v,
      perm_addr_stayedsince_v,
      perm_addr_costaccomodation_v,
      perm_addr_current_value_v,
      perm_addr_balancemortgage_v,
      perm_addr_attention_party_v,
      type_of_c_v,
      OVERRIDE_CODE_v,
      SUB_rel_v,
      rel_dedup_v,
      p_channel,
      p_pterm_id,
      p_pip,
      cust_no_v: { dir: oracledb.BIND_OUT, type: oracledb.STRING },
      rel_no_v: { dir: oracledb.BIND_OUT, type: oracledb.STRING },
      username_v: "your_username",
      hostname_v: "your_hostname",
      api_status: { dir: oracledb.BIND_OUT, type: oracledb.STRING },
      api_msg: { dir: oracledb.BIND_OUT, type: oracledb.STRING },
    });

    // Retrieve output parameters
    const cust_no_v = result.outBinds.cust_no_v;
    const rel_no_v = result.outBinds.rel_no_v;
    const api_status = result.outBinds.api_status;
    const api_msg = result.outBinds.api_msg;

    //const result2 = await con.execute(`Select RELATION_NO, FIRST_NAME, SURNAME, LAST_NAME, GENDER, DATE_OF_BIRTH, MOBILE1 from TB_RELATION_temp`)
    // return res.send(rel_no_v);

    // Close the DB connection

    // Prepare and send the API response
    if (api_status === "Y") {
      const response = {
        cust_no: cust_no_v,
        rel_no: rel_no_v,
        api_status,
        api_msg,
      };

      // Retrieve additional data from TB_RELATION_temp
      // const results2 = `

      // `;

      const selectResult = await con.execute(
        `SELECT RELATION_NO, FIRST_NAME, SURNAME, LAST_NAME, GENDER, DATE_OF_BIRTH, MOBILE1
        FROM TB_RELATION_temp
        WHERE CUSTOMER_NUMBER = '${cust_no_v}'`
      );

      // response.relations = selectResult.rows;

      res.json({ response, selectResult });
    } else {
      res.status(500).json({ error: api_msg });
    }

    await con.close();

    // const response = {
    //   cust_no: cust_no_v,
    //   rel_no: rel_no_v,
    //   api_status,
    //   api_msg,
    // };
    // res.json(response);
  } catch (error) {
    console.log("Error executing API:", error);
    res.status(500).json({ error: "An unexpected error occurred." });
  }
});

// Get Approval Authority API
app.post("/api/get-approval-authority", async (req, res) => {
  const { user_id, branch_code } = req.body;

  let getApprovalAuthority = async () => {
    try {
      const db = await oracledb.getConnection({
        user: DB_USER,
        password: DB_PASSWORD,
        connectString: DB_CONNECTION_STRING,
        timeout: DB_CONNECTION_TIMEOUT,
      });
      const execute = util.promisify(db.execute).bind(db);

      const data = await execute(
        `select approval_authority from menu_users where user_name ='${user_id}'and branch_code = '${branch_code}'`
      );

      if (data) {
        var arr = [];

        for (let i = 0; i < data.rows.length; i++) {
          var obj = {};
          for (let x = 0; x < data.metaData.length; x++) {
            obj[data.metaData[x].name.toLowerCase()] = data.rows[i][x];
          }
          arr.push(obj);
        }

        return res.send(arr);
      } else {
        res.send("Something went wrong... Nothing was returned!!");
      }
    } catch (err) {
      console.log(err);
      res.status(500).send("Internal Server Error");
    }
  };

  await getApprovalAuthority();
});

// Summary Approvals API
app.post("/api/summary-approvals", async (req, res) => {
  const { user_id, branch } = req.body;

  let getSummaryApprovals = async () => {
    try {
      const db = await oracledb.getConnection({
        user: DB_USER,
        password: DB_PASSWORD,
        connectString: DB_CONNECTION_STRING,
        timeout: DB_CONNECTION_TIMEOUT,
      });
      const execute = util.promisify(db.execute).bind(db);

      await execute(
        "BEGIN PRC_DET_MYAPP_SUMM(:user_id, :branch); COMMIT; END;",
        {
          user_id: user_id,
          branch: branch,
        }
      );

      const data = await execute(
        `SELECT * FROM TB_DET_MYAPP_SUMM WHERE user_name='${user_id}' ORDER BY TIME DESC`
      );

      if (data) {
        var arr = [];

        for (let i = 0; i < data.rows.length; i++) {
          var obj = {};
          for (let x = 0; x < data.metaData.length; x++) {
            obj[data.metaData[x].name.toLowerCase()] = data.rows[i][x];
          }
          arr.push(obj);
        }

        return res.send(arr);
      } else {
        res.send("Something went wrong... Nothing was returned!!");
      }
    } catch (err) {
      console.log(err);
      res.status(500).send("Internal Server Error");
    }
  };

  await getSummaryApprovals();
});

app.post("/api/approval-items", async (req, res) => {
  const { posted_by, branch_code, item_code } = req.body;

  let getApprovalItems = async () => {
    try {
      const db = await oracledb.getConnection({
        user: DB_USER,
        password: DB_PASSWORD,
        connectString: DB_CONNECTION_STRING,
        timeout: DB_CONNECTION_TIMEOUT,
      });
      const execute = util.promisify(db.execute).bind(db);

      const getLimitCodeNDesc = await execute(
        "select get_MYAPP_LIMIT_TYPE(:item_code, 'CODE') as limit_code, get_MYAPP_LIMIT_TYPE(:item_code, 'DESC') as limit_desc from dual",
        {
          item_code: item_code,
        }
      );

      const getPostingDate = await execute(
        "select posting_date from parameters"
      );

      // return res.send(limit_code);

      let limit_code;
      let limit_desc;
      let posting_date;
      let currency = "";
      let amount = "";

      const getDetails = [];

      // get limit_code and limit_desc
      if (getLimitCodeNDesc && getLimitCodeNDesc.rows) {
        const limitCodeNDescArr = getLimitCodeNDesc.rows.map((row) => {
          const obj = {};
          for (let i = 0; i < getLimitCodeNDesc.metaData.length; i++) {
            obj[getLimitCodeNDesc.metaData[i].name.toLowerCase()] = row[i];
          }
          return obj;
        });

        limitCodeNDescArr.forEach((value) => {
          limit_code = value.limit_code;
          limit_desc = value.limit_desc;
        });

        // return res.send(limit_code);
      }

      //  get posting date
      if (getPostingDate && getPostingDate.rows) {
        const postingDateArr = getPostingDate.rows.map((row) => {
          const obj = {};
          for (let i = 0; i < getPostingDate.metaData.length; i++) {
            obj[getPostingDate.metaData[i].name.toLowerCase()] = row[i];
          }
          return obj;
        });

        postingDateArr.forEach((value) => {
          posting_date = value.posting_date;
        });

        const dateObj = new Date(posting_date);

        const day = dateObj.getUTCDate().toString().padStart(2, "0");
        const month = new Intl.DateTimeFormat("en-US", { month: "short" })
          .format(dateObj)
          .toUpperCase();
        const year = dateObj.getUTCFullYear();

        posting_date = `${day}-${month}-${year}`;

        // return res.send(posting_date);
      }

      const getCurrencyNAmount = await execute(
        `SELECT currency, amount FROM VW_DET_MYAPP WHERE item_code = '${item_code}'`
      );

      // return console.log(`SELECT currency, amount FROM VW_DET_MYAPP WHERE branch_code= '${branch_code}' AND item_code = '${item_code}'`);

      // return res.send(getCurrencyNAmount);

      // console.log(branch_code);

      // get currency and amount
      if (getCurrencyNAmount && getCurrencyNAmount.rows) {
        const currencyNAmountArr = getCurrencyNAmount.rows.map((row) => {
          const obj = {};
          for (let i = 0; i < getCurrencyNAmount.metaData.length; i++) {
            obj[getCurrencyNAmount.metaData[i].name.toLowerCase()] = row[i];
          }
          return obj;
        });

        currencyNAmountArr.forEach((value) => {
          currency = value.currency;
          amount = value.amount;
        });
      }

      // return res.send(getCurrencyNAmount);

      // return console.log(`SELECT *
      // FROM VW_DET_MYAPP
      // WHERE
      //   ITEM_CODE = '${item_code}'
      //   AND POSTED_BY != '${posted_by}'
      //   AND (branch_code = '${branch_code}' OR get_GLOBAL_BRA('${branch_code}', '${posted_by}') = 'Y')
      //   AND ('${limit_code}' = 'S' or get_userapp_limit_ALL('${limit_desc}', 'D', '${currency}', '${posted_by}', '${amount}') = 'Y')`);

      const data = await execute(`SELECT *
      FROM VW_DET_MYAPP
      WHERE 
        ITEM_CODE = '${item_code}'
        AND POSTED_BY != '${posted_by}'
        AND (branch_code = '${branch_code}' OR get_GLOBAL_BRA('${branch_code}', '${posted_by}') = 'Y')
        AND ('${limit_code}' = 'S' or get_userapp_limit_ALL('${limit_desc}', 'D', '${currency}', '${posted_by}', '${amount}') = 'Y') ORDER BY TIME DESC`);

      if (data && data.rows) {
        const arr = data.rows.map((row) => {
          const obj = {};
          for (let i = 0; i < data.metaData.length; i++) {
            obj[data.metaData[i].name.toLowerCase()] = row[i];
          }
          return obj;
        });

        return res.send(arr);
      } else {
        res.send("Something went wrong... Nothing was returned!!");
      }
    } catch (err) {
      console.log(err);
      res.status(500).send("Internal Server Error");
    }
  };

  await getApprovalItems();
});

// API to Get the details of My Approval Items
app.post("/api/get-details-of-my-approval-items", async (req, res) => {
  const { user_id, branch_code, posting_date } = req.body;

  let getDetailsOfMyApprovalItems = async () => {
    try {
      const db = await oracledb.getConnection({
        user: DB_USER,
        password: DB_PASSWORD,
        connectString: DB_CONNECTION_STRING,
        timeout: DB_CONNECTION_TIMEOUT,
      });
      const execute = util.promisify(db.execute).bind(db);

      const data = await execute(
        `SELECT distinct A.BATCH_NO , A.ITEM_CODE , GET_CODEDESC_INFO(A.ITEM_CODE,'MYP')  as description , A.APP_FLAG as approval_status , B.ACCT_LINK  as account_number , NVL (GET_CODEDESC_INFO(A.ITEM_CODE,'MYP'), GET_ACCTDESC (ACCT_LINK)) as account_name , get_curriso(B.CURRENCY) AS CURRENCY , B.AMOUNT, B.POSTING_DATE as posting_date, A.APP_BY as approved_by , A.APP_DATE as approval_date , B.POSTED_BY 
 FROM tb_myused_app A JOIN tb_det_myapp B ON A.batch_no = B.batch_no 
 where b.branch_code = '${branch_code}' and b.posted_by = '${user_id}'`
        // `SELECT
        //     myused.ACT_CODE as item_code,
        //     GET_CODEDESC_INFO(myused.ACT_CODE,'MYP')  as description,
        //     myused.REFERENCE_NO as batch_no,
        //     myapp.POSTED_BY as posted_by,
        //     myapp.POSTING_DATE as posting_date,
        //     myapp.ACCT_NO as account_number,
        //     NVL (description, GET_ACCTDESC (ACCT_NO)) account_name,
        //     myapp.POSTING_SYSTIME as time,
        //     get_curriso(myapp.CURRENCY) as currency,
        //     myapp.AMOUNT as amount,
        //     myused.APPROVAL_FLAG as approval_status,
        //     myused.APPROVED_BY as approved_by,
        //     myused.APPROVAL_DATE as approval_date,
        //     myused.APPROVAL_DATE as approval_time
        // FROM
        //     TB_SUMM_AUTH myapp
        // JOIN
        //     TB_AUTH_DONE myused ON myapp.reference_no = myused.reference_no
        // WHERE
        //     myapp.POSTED_BY = '${user_id}'
        //     AND myapp.BRANCH_CODE = '${branch_code}'
        // ORDER BY
        //     myapp.POSTING_SYSTIME DESC`
      );

      if (data) {
        var arr = [];

        for (let i = 0; i < data.rows.length; i++) {
          var obj = {};
          for (let x = 0; x < data.metaData.length; x++) {
            obj[data.metaData[x].name.toLowerCase()] = data.rows[i][x];
          }
          arr.push(obj);
        }

        return res.send(arr);
      } else {
        res.send("Something went wrong... Nothing was returned!!");
      }
    } catch (err) {
      console.log(err);
      res.status(500).send("Internal Server Error");
    }
  };

  await getDetailsOfMyApprovalItems();
});

app.post("/api/my-approvals", async (req, res) => {
  const { user_id, branch_code, posting_date } = req.body;

  let getMyApprovals = async () => {
    try {
      const db = await oracledb.getConnection({
        user: DB_USER,
        password: DB_PASSWORD,
        connectString: DB_CONNECTION_STRING,
        timeout: DB_CONNECTION_TIMEOUT,
      });
      const execute = util.promisify(db.execute).bind(db);

      const myApprovalsCount = await execute(
        `SELECT * FROM TB_SUMM_AUTH myapp JOIN TB_AUTH_DONE myused ON myapp.reference_no = myused.reference_no where myapp.POSTED_BY ='${user_id}' and myapp.BRANCH_CODE = '${branch_code}'`
      );

      // `SELECT count(*) as my_approvals_count FROM TB_DET_MYAPP myapp JOIN TB_MYUSED_APP myused ON myapp.batch_no = myused.batch_no where myapp.POSTED_BY ='${user_id}' and myapp.BRANCH_CODE = '${branch_code}' and myapp.POSTING_DATE = '${posting_date}'`;

      if (myApprovalsCount) {
        var arr = [];

        for (let i = 0; i < myApprovalsCount.rows.length; i++) {
          var obj = {};
          for (let x = 0; x < myApprovalsCount.metaData.length; x++) {
            obj[myApprovalsCount.metaData[x].name.toLowerCase()] =
              myApprovalsCount.rows[i][x];
          }
          arr.push(obj);
        }

        return res.send(arr);
      }
    } catch (err) {
      console.log(err);
      res.status(500).send("Internal Server Error");
    }
  };

  await getMyApprovals();
});

// Cashier Limit Details API
app.post("/api/get-cashier-limit-details", async (req, res) => {
  const { trans_number } = req.body;

  let cashierlimit = async () => {
    try {
      const db = await oracledb.getConnection({
        user: DB_USER,
        password: DB_PASSWORD,
        connectString: DB_CONNECTION_STRING,
        timeout: DB_CONNECTION_TIMEOUT,
      });
      const execute = util.promisify(db.execute).bind(db);

      const data = await execute(
        `SELECT * FROM VW_CASHIER_LIMIT WHERE trans_number='${trans_number}'`
      );

      if (data) {
        var arr = [];

        for (let i = 0; i < data.rows.length; i++) {
          var obj = {};
          for (let x = 0; x < data.metaData.length; x++) {
            obj[data.metaData[x].name.toLowerCase()] = data.rows[i][x];
          }
          arr.push(obj);
        }

        return res.send(arr);
      } else {
        res.send("Something went wrong... Nothing was returned!!");
      }
    } catch (err) {
      console.log(err);
      res.status(500).send("Internal Server Error");
    }
  };

  await cashierlimit();
});

// Approve Cashier Limit API
app.post("/api/approve-cashier-limit", async (req, res) => {
  try {
    const {
      account_link,
      branch_code,
      currency_code,
      approval_flag,
      transaction_amount,
      approved_by,
      username,
      posting_date,
      sys_date,
      terminal_id,
      trans_type,
      trans_number,
      reason,
    } = req.body;

    // return console.log(req.body);

    // Initialize the connection variable with let
    let con;

    // Move the function outside the route handler for better readability
    const approveCashierLimit = async () => {
      try {
        con = await oracledb.getConnection({
          user: DB_USER,
          password: DB_PASSWORD,
          connectString: DB_CONNECTION_STRING,
        });

        // Prepare the PL/SQL statement
        const statement = `
          BEGIN
            prc_telltrans_app(
              :ACCT_LINK,
              :BRANCH_CODE,
              :CURRENCY_CODE,
              :APPROVED,
              :TRANS_AMOUNT,
              :POSETD_BY,
              :USERNAME,
              :DATE,
              :SYSDATE,
              :TERMINAL,
              :TRANS_TYPE,
              :TRANS_NUMBER,
              :R_REASON,
              :RESPONSE_CODE,
              :RESPONSE_MESS
            );
          END;
        `;

        // Bind values and execute the PL/SQL statement
        const result = await con.execute(statement, {
          ACCT_LINK: account_link,
          BRANCH_CODE: branch_code,
          CURRENCY_CODE: currency_code,
          APPROVED: approval_flag,
          TRANS_AMOUNT: transaction_amount,
          POSETD_BY: approved_by,
          USERNAME: username,
          DATE: posting_date,
          SYSDATE: sys_date,
          TERMINAL: terminal_id,
          TRANS_TYPE: trans_type,
          TRANS_NUMBER: trans_number,
          R_REASON: reason,
          RESPONSE_CODE: { dir: oracledb.BIND_OUT, type: oracledb.STRING },
          RESPONSE_MESS: { dir: oracledb.BIND_OUT, type: oracledb.STRING },
        });

        // Retrieve output parameters
        const response_code = result.outBinds.RESPONSE_CODE;
        const response_message = result.outBinds.RESPONSE_MESS;

        // Send the response with output parameters
        res.send({ response_code, response_message });
      } catch (err) {
        console.log(err);
        // Send an appropriate error response
        res.status(500).send("Internal Server Error");
      } finally {
        // Close the connection when done, whether there was an error or not
        if (con) {
          try {
            await con.close();
          } catch (err) {
            console.log("Error closing connection:", err);
          }
        }
      }
    };

    // Call the approveCashierLimit function
    await approveCashierLimit();
  } catch (err) {
    console.log(err);
    // Handle any other unexpected error that may occur outside the approveCashierLimit function
    res.status(500).send("Internal Server Error");
  }
});

app.post("/api/get-user-data", async (req, res) => {
  try {
    const dynamicNumber = req.body.dynamicNumber;

    if (!dynamicNumber) {
      return res.status(400).send("Dynamic number is required.");
    }

    const db = await oracledb.getConnection({
      user: DB_USER,
      password: DB_PASSWORD,
      connectString: DB_CONNECTION_STRING,
    });

    const checkQuery = `
      SELECT COUNT(*) AS userCount
      FROM vw_relation_all
      WHERE ID_NUMBER = :dynamicNumber
      OR MOBILE1 = :dynamicNumber
      OR EMAIL_ADDRESS = :dynamicNumber
    `;

    const checkResult = await db.execute(checkQuery, { dynamicNumber });

    const userCount = checkResult.rows[0][0];

    if (userCount > 0) {
      const dataQuery = `
        SELECT *
        FROM vw_relation_all
        WHERE ID_NUMBER = :dynamicNumber
        OR MOBILE1 = :dynamicNumber
        OR EMAIL_ADDRESS = :dynamicNumber
      `;

      const dataResult = await db.execute(dataQuery, { dynamicNumber });

      if (dataResult.rows.length > 0) {
        const userData = dataResult.rows[0];
        const formattedData = {};

        // Convert the result into a key-value object
        dataResult.metaData.forEach((meta, index) => {
          formattedData[meta.name.toLowerCase()] = userData[index];
        });

        res.json({ userExists: true, userData: formattedData });
      } else {
        res.status(204).send("No data found");
      }
    } else {
      res.json({ userExists: false });
    }
  } catch (err) {
    console.error("Error:", err.message);
    res.status(500).send("Internal Server Error");
  } finally {
    if (db) {
      console.log(db);
    }
  }
});

// Reject Cashier Limit API
app.post("/api/reject-cashier-limit", async (req, res) => {
  try {
    const {
      account_link,
      branch_code,
      currency_code,
      approval_flag,
      transaction_amount,
      approved_by,
      username,
      posting_date,
      sys_date,
      terminal_id,
      trans_type,
      trans_number,
      reason,
    } = req.body;

    // return console.log(req.body);

    // Initialize the connection variable with let
    let con;

    // Move the function outside the route handler for better readability
    const approveCashierLimit = async () => {
      try {
        con = await oracledb.getConnection({
          user: DB_USER,
          password: DB_PASSWORD,
          connectString: DB_CONNECTION_STRING,
        });

        // Prepare the PL/SQL statement
        const statement = `
          BEGIN
            prc_telltrans_rej(
              :ACCT_LINK,
              :BRANCH_CODE,
              :CURRENCY_CODE,
              :APPROVED,
              :TRANS_AMOUNT,
              :POSETD_BY,
              :USERNAME,
              :DATE,
              :SYSDATE,
              :TERMINAL,
              :TRANS_TYPE,
              :TRANS_NUMBER,
              :R_REASON,
              :RESPONSE_CODE,
              :RESPONSE_MESS
            );
          END;
        `;

        // Bind values and execute the PL/SQL statement
        const result = await con.execute(statement, {
          ACCT_LINK: account_link,
          BRANCH_CODE: branch_code,
          CURRENCY_CODE: currency_code,
          APPROVED: approval_flag,
          TRANS_AMOUNT: transaction_amount,
          POSETD_BY: approved_by,
          USERNAME: username,
          DATE: posting_date,
          SYSDATE: sys_date,
          TERMINAL: terminal_id,
          TRANS_TYPE: trans_type,
          TRANS_NUMBER: trans_number,
          R_REASON: reason,
          RESPONSE_CODE: { dir: oracledb.BIND_OUT, type: oracledb.STRING },
          RESPONSE_MESS: { dir: oracledb.BIND_OUT, type: oracledb.STRING },
        });

        // Retrieve output parameters
        const response_code = result.outBinds.RESPONSE_CODE;
        const response_message = result.outBinds.RESPONSE_MESS;

        // Send the response with output parameters
        res.send({ response_code, response_message });
      } catch (err) {
        console.log(err);
        // Send an appropriate error response
        res.status(500).send("Internal Server Error");
      } finally {
        // Close the connection when done, whether there was an error or not
        if (con) {
          try {
            await con.close();
          } catch (err) {
            console.log("Error closing connection:", err);
          }
        }
      }
    };

    // Call the approveCashierLimit function
    await approveCashierLimit();
  } catch (err) {
    console.log(err);
    // Handle any other unexpected error that may occur outside the approveCashierLimit function
    res.status(500).send("Internal Server Error");
  }
});

/////////////////////////////////////////////////////////
app.get("/api/arm", async (req, res) => {
  let con;
  try {
    con = await oracledb.getConnection({
      user: DB_USER,
      password: DB_PASSWORD,
      connectString: DB_CONNECTION_STRING,
    });

    // Execute the query
    const result = await con.execute(
      "SELECT * FROM tbl_arm WHERE arm_type = 'O'"
    );

    // Release the connection
    await con.close();

    // Process the query result
    const rows = result.rows;

    // Convert rows to an array of label-value objects
    const data = rows.map((row) => ({
      label: `${row[0]} - ${row[1]}`,
      value: `$${row[0]}`,
    }));

    // Send the response
    res.json(data);
  } catch (err) {
    console.log("Error executing query:", err);
    res.status(500).json({ error: "An error occurred" });
  }
});

///////////////////////////////////////////////////////////
app.post("/api/documents/user", async (req, res) => {
  const cust_type = req.body.cust_type;

  try {
    const db = await oracledb.getConnection({
      user: process.env.DB_USER,
      password: process.env.DB_PASSWORD,
      connectString: process.env.DB_CONNECTION_STRING,
      timeout: process.env.DB_CONNECTION_TIMEOUT,
    });

    const execute = util.promisify(db.execute).bind(db);

    const data = await execute(
      `select b.description, a.sr_no, a.doc_code, a.mandate, a.doc_cat from doc_control a join code_desc b on a.DOC_CODE=b.actual_code and b.code_type='DOC' where a.cust_type='${cust_type}' and PROCESS='ACC' ORDER BY a.sr_no ASC`
    );

    if (data) {
      const response = data.rows.map((row) => {
        const obj = {};
        data.metaData.forEach((column, index) => {
          obj[column.name.toLowerCase()] = row[index];
        });
        return obj;
      });

      res.send({
        responseCode: "000",
        responseMessage: response,
      });
    } else {
      res.send("Something went wrong... Nothing was returned!!");
    }
  } catch (error) {
    console.log(error);
    res.status(500).json({ error: "An error occurred" });
  } finally {
    // Release the connection
    // if (db) {
    //   try {
    //     await db.close();
    //   } catch (error) {
    //     console.log("Error closing the database connection:", error);
    //   }
    // }
  }
});

// Salary Upload Without Fee
app.post("/api/general-salary-noFees", async (req, res) => {
  const { postedBy, batchNumber, jsonData } = req.body;
  console.log(postedBy);
  console.log(batchNumber);
  // console.log(jsonData);
  try {
    const connection = await oracledb.getConnection({
      user: DB_USER,
      password: DB_PASSWORD,
      connectString: DB_CONNECTION_STRING,
    });
    // Delete existing data for the postedBy user
    await connection.execute(
      `delete from TBL_GENERAL_SAL_NOFEES where posted_by = :app_user`,
      {
        app_user: postedBy,
      },
      { autoCommit: true }
    );

    // Insert  Data
    // const insert_into_noFees = jsonData.map(({ PIN, BBAN, AMOUNT }) => {
    //   return connection.execute(
    //     `INSERT INTO TBL_GENERAL_SAL_NOFEES (POSTED_BY, BATCH_NO, PIN, ACCT_LINK, CR_AMOUNT) VALUES (:1, :2, :3, :4, :5)`,
    //     [postedBy, batchNumber, PIN, BBAN, AMOUNT],
    //     { autoCommit: true }
    //   );
    // });
    const insertData = jsonData.map(({ PIN, BBAN, AMOUNT }) => [
      postedBy,
      batchNumber,
      PIN,
      BBAN,
      AMOUNT,
    ]);

    // Insert data in batches
    const batchSize = 1000; // Adjust the batch size as needed
    for (let i = 0; i < insertData.length; i += batchSize) {
      const batch = insertData.slice(i, i + batchSize);
      await connection.executeMany(
        `INSERT INTO TBL_GENERAL_SAL_NOFEES (POSTED_BY, BATCH_NO, PIN, ACCT_LINK, CR_AMOUNT) VALUES (:1, :2, :3, :4, :5)`,
        batch,
        { autoCommit: true }
      );
    }

    // await Promise.all(insert_into_noFees);
    console.log("Data inserted successfully");

    // Delete statemets
    await connection.execute(
      `delete from TBL_GENERAL_SAL_NOFEES where batch_no=:P4_BATCH and acct_link LIKE '%' || 'EOD' || '%'`,
      {
        P4_BATCH: batchNumber,
      },
      { autoCommit: true }
    );

    await connection.execute(
      `delete from TBL_GENERAL_SAL_NOFEES where batch_no=:P4_BATCH and CR_AMOUNT LIKE '%' || 'EOD' || '%'`,
      {
        P4_BATCH: batchNumber,
      },
      { autoCommit: true }
    );

    await connection.execute(
      `delete from TBL_GENERAL_SAL_NOFEES where batch_no=:P4_BATCH and PIN LIKE '%' || 'EOD' || '%'`,
      {
        P4_BATCH: batchNumber,
      },
      { autoCommit: true }
    );

    await connection.execute("commit");

    await connection.execute(
      `delete from TBL_GENERAL_SAL_NOFEES where batch_no=:P4_BATCH and acct_link is null`,
      {
        P4_BATCH: batchNumber,
      },
      { autoCommit: true }
    );
    await connection.execute("commit");
    // select from grid
    const gridQuery = `
    select pin, acct_link, acct_status as account_descrp, cr_amount, br_description, currency_code
    from (
      select pin, acct_link, acct_status, cr_amount, br_description, currency_code
      from vw_generalsalary_nofees
      where batch_no=:P2_BATCH
      order by pin
    )
  `;
    const Result = await connection.execute(gridQuery, {
      P2_BATCH: batchNumber,
    });

    const excelResult = Result.rows.map((row) => ({
      PIN: row[0],
      ACCOUNT_NUMBER: row[1],
      ACCOUNT_DESCRIPTION: row[2],
      CREDIT_AMOUNT: row[3],
      BRANCH_DESCRIPTION: row[4],
      CURRENCY_CODE: row[5],
    }));
    //  console.log(excelResult);

    res.send({
      responseCode: "000",
      responseMessage: "Data uploaded successfully",
      data: excelResult,
    });
  } catch (error) {
    console.log("Error inserting data:", error);
    res.send({
      responseCode: "998",
      responseMessage: "Error uploading data",
    });
  }
});

// app.post("/api/salary-upload", async (req, res) => {
//   const {
//     key,
//     formCode,
//     postedBy,
//     batchNumber,
//     jsonData,
//     currencyCode,
//     accountNumber,
//     branchCode,
//     debitNarration,
//     creditNarration,
//     scanDoc,
//     terminalId,
//     feeTax,
//     feeCharge,
//   } = req.body;
//   try {
//     const connection = await oracledb.getConnection({
//       user: DB_USER,
//       password: DB_PASSWORD,
//       connectString: DB_CONNECTION_STRING,
//     });
//     if (key === "uploadNoFees") {
//       // Delete existing data for the postedBy user
//       await connection.execute(
//         `delete from TBL_GENERAL_SAL_NOFEES where posted_by = :app_user`,
//         {
//           app_user: postedBy,
//         },
//         { autoCommit: true }
//       );
//       // Insert Data
//       const insertData = jsonData.map(({ PIN, BBAN, AMOUNT }) => [
//         postedBy,
//         batchNumber,
//         PIN,
//         BBAN,
//         AMOUNT,
//       ]);
//       // Insert data in batches
//       const batchSize = 1000; // Adjust the batch size as needed
//       for (let i = 0; i < insertData.length; i += batchSize) {
//         const batch = insertData.slice(i, i + batchSize);
//         await connection.executeMany(
//           `INSERT INTO TBL_GENERAL_SAL_NOFEES (POSTED_BY, BATCH_NO, PIN, ACCT_LINK, CR_AMOUNT) VALUES (:1, :2, :3, :4, :5)`,
//           batch,
//           { autoCommit: true }
//         );
//       }
//       // Delete statemets
//       await connection.execute(
//         `delete from TBL_GENERAL_SAL_NOFEES where batch_no=:P4_BATCH and acct_link LIKE '%' || 'EOD' || '%'`,
//         {
//           P4_BATCH: batchNumber,
//         },
//         { autoCommit: true }
//       );
//       await connection.execute(
//         `delete from TBL_GENERAL_SAL_NOFEES where batch_no=:P4_BATCH and CR_AMOUNT LIKE '%' || 'EOD' || '%'`,
//         {
//           P4_BATCH: batchNumber,
//         },
//         { autoCommit: true }
//       );
//       await connection.execute(
//         `delete from TBL_GENERAL_SAL_NOFEES where batch_no=:P4_BATCH and PIN LIKE '%' || 'EOD' || '%'`,
//         {
//           P4_BATCH: batchNumber,
//         },
//         { autoCommit: true }
//       );
//       await connection.execute("commit");
//       await connection.execute(
//         `delete from TBL_GENERAL_SAL_NOFEES where batch_no=:P4_BATCH and acct_link is null`,
//         {
//           P4_BATCH: batchNumber,
//         },
//         { autoCommit: true }
//       );
//       await connection.execute("commit");
//       // select from grid
//       const gridQuery = `
//      select pin, acct_link, acct_status as account_descrp, cr_amount, br_description, currency_code
//      from (
//        select pin, acct_link, acct_status, cr_amount, br_description, currency_code
//        from vw_generalsalary_nofees
//        where batch_no=:P2_BATCH
//        order by pin
//      )
//    `;
//       const Result = await connection.execute(gridQuery, {
//         P2_BATCH: batchNumber,
//       });
//       const validAcctQuery = `select count(a.acct_link) from vw_generalsalary_nofees a where currency_code=:P2_CURRCODE and status_indicator in ('N','DO','DR') and a.batch_no=:P2_BATCH`;
//       const invalidAcctQuery = `select count(acct_link) from vw_generalsalary_nofees a where status_indicator is null and a.batch_no='${batchNumber}'`;
//       const MismatchesAcctQuery = `select count(a.acct_link)  from vw_generalsalary_nofees a where a.currency_code!=:P2_CURRCODE and a.batch_no=:P2_BATCH`;
//       const NotNormalQuery = `select count(a.acct_link)  from vw_generalsalary_nofees a where a.currency_code=:P2_CURRCODE and  a.batch_no=:P2_BATCH and nvl(status_indicator,'X') NOT in ('N','DO','DR')`;

//       const binds = {
//         P2_CURRCODE: currencyCode.trim(),
//         P2_BATCH: batchNumber.trim(),
//       };

//       // const options = {
//       //   outFormat: oracledb.OUT_FORMAT_OBJECT,
//       // };

//       const r1 = await connection.execute(validAcctQuery, binds);
//       const r2 = await connection.execute(invalidAcctQuery);
//       const r3 = await connection.execute(MismatchesAcctQuery, binds);
//       const r4 = await connection.execute(NotNormalQuery, binds);

//       const AccountCounts = {
//         validAccounts: r1.rows[0][0],
//         invalidAccounts: r2.rows[0][0],
//         CurrencyMismatchesAccounts: r3.rows[0][0],
//         notNormalAccounts: r4.rows[0][0],
//       };
//       // console.log(AccountCounts);
//       const excelResult = Result.rows.map((row) => ({
//         PIN: row[0],
//         ACCOUNT_NUMBER: row[1],
//         ACCOUNT_DESCRIPTION: row[2],
//         CREDIT_AMOUNT: row[3],
//         BRANCH_DESCRIPTION: row[4],
//         // CURRENCY_CODE: row[5],
//       }));

//       const newDDD = [AccountCounts, excelResult];
//       // console.log(newDDD);
//       res.send({
//         responseCode: "000",
//         responseMessage: "Data uploaded successfully",
//         data: newDDD,
//       });
//     }

//     if (key === "uploadFees") {
//       let cal = {};
//       // Delete existing data for the postedBy user
//       await connection.execute(
//         `delete from TBL_GENERAL_SAL_FEES where posted_by = :app_user`,
//         {
//           app_user: postedBy,
//         },
//         { autoCommit: true }
//       );
//       // Insert Data
//       const insertData = jsonData.map(({ PIN, BBAN, AMOUNT }) => [
//         postedBy,
//         batchNumber,
//         PIN,
//         BBAN,
//         AMOUNT,
//       ]);
//       // Insert data in batches
//       const batchSize = 1000; // Adjust the batch size as needed
//       for (let i = 0; i < insertData.length; i += batchSize) {
//         const batch = insertData.slice(i, i + batchSize);
//         await connection.executeMany(
//           `INSERT INTO TBL_GENERAL_SAL_FEES (POSTED_BY, BATCH_NO, PIN, ACCT_LINK, CR_AMOUNT) VALUES (:1, :2, :3, :4, :5)`,
//           batch,
//           { autoCommit: true }
//         );
//       }
//       // Delete statemets
//       await connection.execute(
//         `delete from TBL_GENERAL_SAL_FEES where batch_no=:P4_BATCH and acct_link LIKE '%' || 'EOD' || '%'`,
//         {
//           P4_BATCH: batchNumber,
//         },
//         { autoCommit: true }
//       );
//       await connection.execute(
//         `delete from TBL_GENERAL_SAL_FEES where batch_no=:P4_BATCH and CR_AMOUNT LIKE '%' || 'EOD' || '%'`,
//         {
//           P4_BATCH: batchNumber,
//         },
//         { autoCommit: true }
//       );
//       await connection.execute(
//         `delete from TBL_GENERAL_SAL_FEES where batch_no=:P4_BATCH and PIN LIKE '%' || 'EOD' || '%'`,
//         {
//           P4_BATCH: batchNumber,
//         },
//         { autoCommit: true }
//       );
//       await connection.execute("commit");
//       await connection.execute(
//         `delete from TBL_GENERAL_SAL_FEES where batch_no=:P4_BATCH and acct_link is null`,
//         {
//           P4_BATCH: batchNumber,
//         },
//         { autoCommit: true }
//       );
//       await connection.execute("commit");
//       // select from grid
//       const gridQuery = `
//      select pin, acct_link, acct_status as account_descrp, cr_amount, br_description, currency_code
//      from (
//        select pin, acct_link, acct_status, cr_amount, br_description, currency_code
//        from VW_GENERALSALARY_FEES
//        where batch_no=:P2_BATCH
//        order by pin
//      )
//    `;
//       const Result = await connection.execute(gridQuery, {
//         P2_BATCH: batchNumber,
//       });
//       const excelResult = Result.rows.map((row) => ({
//         PIN: row[0],
//         ACCOUNT_NUMBER: row[1],
//         ACCOUNT_DESCRIPTION: row[2],
//         CREDIT_AMOUNT: row[3],
//         BRANCH_DESCRIPTION: row[4],
//         // CURRENCY_CODE: row[5],
//       }));
//       if (excelResult.length > 0) {
//         let charge, feeTypeAmt, taxx, feeTypeTax, totalCharge;

//         //sum of CREDIT_AMOUNT
//         const totalCreditAmount = excelResult.reduce(
//           (sum, row) => sum + row.CREDIT_AMOUNT,
//           0
//         );
//         // GET CHARGE
//         try {
//           let result = await connection.execute(
//             `SELECT FEE_AMOUNT, TYPE_OF_FEE FROM TB_TRANS_FEES_EXCEPTION
//          WHERE TRANS_CODE = 'SAL' AND currency = :P10_CURRCODE
//          AND CUSTOMER_NUMBER = get_customerno(:P10_CONTRA)`,
//             [currencyCode, accountNumber]
//           );
//           [charge, feeTypeAmt] = result.rows[0];
//         } catch (error) {
//           charge = null;
//           feeTypeAmt = null;
//         }
//         if (charge === null) {
//           try {
//             let result = await connection.execute(
//               `SELECT FEE_AMOUNT, TYPE_OF_FEE FROM tb_trans_fee_details
//            WHERE TRANS_CODE = 'SAL' AND currency = :P10_CURRCODE`,
//               [currencyCode]
//             );
//             [charge, feeTypeAmt] = result.rows[0];
//           } catch (error) {
//             charge = null;
//             feeTypeAmt = null;
//           }
//         }
//         // GET TAX
//         try {
//           let result = await connection.execute(
//             `SELECT FEE_AMOUNT, TYPE_OF_FEE FROM tb_trans_tax_exception
//          WHERE TRANS_CODE = 'SAL' AND TAX_CODE = 'GST' AND currency = :P10_CURRCODE`,
//             [currencyCode]
//           );
//           [taxx, feeTypeTax] = result.rows[0];
//         } catch (error) {
//           taxx = null;
//           feeTypeTax = null;
//         }
//         if (taxx === null) {
//           try {
//             let result = await connection.execute(
//               `SELECT FEE_AMOUNT, TYPE_OF_FEE FROM tb_trans_tax
//            WHERE TRANS_CODE = 'SAL' AND TAX_CODE = 'GST' AND currency = :P10_CURRCODE`,
//               [currencyCode]
//             );
//             [taxx, feeTypeTax] = result.rows[0];
//           } catch (error) {
//             taxx = 0;
//             feeTypeTax = 0;
//           }
//         }
//         // GET Charges
//         if (feeTypeTax === "P" && taxx > 0) {
//           taxx = (taxx / 100) * (charge || 1) * excelResult.length;
//         } else if (taxx > 0 && feeTypeTax !== "P") {
//           taxx = taxx * excelResult.length;
//         }
//         if (feeTypeAmt === "P" && charge > 0) {
//           charge = (charge / 100) * (totalCreditAmount || 1);
//         } else if (charge > 0 && feeTypeAmt !== "P") {
//           charge = (charge || 1) * excelResult.length;
//         }
//         totalCharge = (charge || 0) + (taxx || 0);

//         // Set response
//         cal = {
//           Processing: charge.toFixed(2),
//           Tax: taxx.toFixed(2),
//           Total_Charge: totalCharge.toFixed(2),
//           Total_Amount: totalCreditAmount.toFixed(2),
//         };
//       }
//       const validAcctQuery = `select count(a.acct_link) from VW_GENERALSALARY_FEES a where currency_code=:P2_CURRCODE and status_indicator in ('N','DO','DR') and a.batch_no=:P2_BATCH`;
//       const invalidAcctQuery = `select count(acct_link) from VW_GENERALSALARY_FEES a where status_indicator is null and a.batch_no='${batchNumber}'`;
//       const MismatchesAcctQuery = `select count(a.acct_link)  from VW_GENERALSALARY_FEES a where a.currency_code!=:P2_CURRCODE and a.batch_no=:P2_BATCH`;

//       const binds = {
//         P2_CURRCODE: currencyCode?.trim(),
//         P2_BATCH: batchNumber?.trim(),
//       };

//       // const options = {
//       //   outFormat: oracledb.OUT_FORMAT_OBJECT,
//       // };

//       const r1 = await connection.execute(validAcctQuery, binds);
//       const r2 = await connection.execute(invalidAcctQuery);
//       const r3 = await connection.execute(MismatchesAcctQuery, binds);
//       // const r4 = await connection.execute(NotNormalQuery, binds);

//       const AccountCounts = {
//         validAccounts: r1.rows[0][0],
//         invalidAccounts: r2.rows[0][0],
//         CurrencyMismatchesAccounts: r3.rows[0][0],
//         // notNormalAccounts : r4.rows[0][0],
//       };
//       // console.log(AccountCounts);

//       const newDDD = [AccountCounts, excelResult, cal];
//       // console.log(newDDD);
//       res.send({
//         responseCode: "000",
//         responseMessage: "Data uploaded successfully",
//         data: newDDD,
//         // data: excelResult
//       });
//     }

//     if (key === "invalidAccountsFees") {
//       invalidAccountquerry = `select pin, acct_link, acct_status as account_descrp, cr_amount
//       from (
//         select pin, acct_link, acct_status, cr_amount
//         from VW_GENERALSALARY_FEES
//         where batch_no='${batchNumber}' and status_indicator is null
//         order by pin
//       )`;
//       const Result = await connection.execute(invalidAccountquerry);
//       const invalidAccountResult = Result.rows.map((row) => ({
//         PIN: row[0],
//         ACCOUNT_NUMBER: row[1],
//         ACCOUNT_STATUS: row[2],
//         CREDIT_AMOUNT: row[3],
//       }));
//       res.send({
//         responseCode: "000",
//         responseMessage: "Invalid Account Result",
//         data: invalidAccountResult,
//       });
//     }
//     if (key === "invalidAccounts") {
//       invalidAccountquerry = `select pin, acct_link, acct_status as account_descrp, cr_amount
//       from (
//         select pin, acct_link, acct_status, cr_amount
//         from vw_generalsalary_nofees
//         where batch_no='${batchNumber}' and status_indicator is null
//         order by pin
//       )`;
//       const Result = await connection.execute(invalidAccountquerry);
//       const invalidAccountResult = Result.rows.map((row) => ({
//         PIN: row[0],
//         ACCOUNT_NUMBER: row[1],
//         ACCOUNT_STATUS: row[2],
//         CREDIT_AMOUNT: row[3],
//       }));
//       res.send({
//         responseCode: "000",
//         responseMessage: "Invalid Account Result",
//         data: invalidAccountResult,
//       });
//     }
//     if (key === "currencyMismatch") {
//       currencyMismacthq = ` SELECT
//       pin,
//       acct_link,
//       acct_status AS account_descrp,
//       cr_amount,
//       (get_curriso(currency_code) || ' - ' || get_currencydesc(currency_code)) AS currency
//     FROM (
//       SELECT
//         pin,
//         acct_link,
//         acct_status,
//         cr_amount,
//         currency_code
//       FROM vw_generalsalary_nofees
//       WHERE batch_no='${batchNumber}' AND currency_code!='${currencyCode}'
//       ORDER BY pin
//     )`;
//       const Result = await connection.execute(currencyMismacthq);
//       const currencyMismatchResult = Result.rows.map((row) => ({
//         PIN: row[0],
//         ACCOUNT_NUMBER: row[1],
//         ACCOUNT_DESCRIPTION: row[2],
//         // CREDIT_AMOUNT: row[3],
//         CURRENCY_CODE: row[4],
//         CREDIT_AMOUNT: row[3],
//       }));
//       console.log(currencyMismatchResult);
//       res.send({
//         responseCode: "000",
//         responseMessage: "Invalid Account Result",
//         data: currencyMismatchResult,
//       });
//     }
//     if (key === "currencyMismatchFees") {
//       currencyMismacthq = `select pin, acct_link, acct_status as account_descrp, cr_amount, (get_curriso(currency_code) || ' - ' || get_currencydesc(currency_code)) AS currency
//       from (
//         select pin, acct_link, acct_status, cr_amount, currency_code
//         from VW_GENERALSALARY_FEES
//         where batch_no='${batchNumber}' and currency_code!='${currencyCode}'
//         order by pin )`;
//       const Result = await connection.execute(currencyMismacthq);
//       const currencyMismatchResult = Result.rows.map((row) => ({
//         PIN: row[0],
//         ACCOUNT_NUMBER: row[1],
//         ACCOUNT_DESCRIPTION: row[2],
//         CURRENCY_CODE: row[4],
//         CREDIT_AMOUNT: row[3],
//       }));
//       res.send({
//         responseCode: "000",
//         responseMessage: "Invalid Account Result",
//         data: currencyMismatchResult,
//       });
//     }
//     if (key === "nonNormalModal") {
//       NotNormalQuery = `select pin,acct_link,account_descrp,cr_amount,(get_curriso(currency_code) || ' - ' || get_currencydesc(currency_code)) AS currency from (
//         select pin,acct_link,acct_status account_descrp,cr_amount,currency_code from
//         vw_generalsalary_nofees where currency_code='${currencyCode}' and  batch_no='${batchNumber}' and nvl(status_indicator,'X') NOT in ('N','DO','DR') order by pin )`;
//       const Result = await connection.execute(NotNormalQuery);
//       const notNormalResult = Result.rows.map((row) => ({
//         PIN: row[0],
//         ACCOUNT_NUMBER: row[1],
//         ACCOUNT_DESCRIPTION: row[2],
//         CREDIT_AMOUNT: row[3],
//         CURRENCY_CODE: row[4],
//       }));
//       // console.log(notNormalResult);
//       res.send({
//         responseCode: "000",
//         responseMessage: "Non-Normal Account Result",
//         data: notNormalResult,
//       });
//     }
//     if (key === "viewExceptions") {
//       viewExceptionsQuery = ` select pin,acct_link,InvalidStatus,cr_amount,currency from (

//         select pin,acct_link,STATUS InvalidStatus,cr_amount,
//         (get_curriso(currency_code)||' - '||get_currencydesc(currency_code))currency from VW_GENERAL_SALARY_UPLOAD
//            where batch_no='${batchNumber}' and nvl(ACCOUNT_DESCRP,'x') != nvl(STATUS,'y') union all

//         select bankcode,acct_link,acct_status InvalidStatus ,cr_amount,
//         null currency from
//          vw_achupload where batch_no='${batchNumber}' and ACCOUNT_DESCRP!=acct_status   order by pin

//          )`;
//       const Result = await connection.execute(viewExceptionsQuery);
//       const viewExceptionsResult = Result.rows.map((row) => ({
//         PIN: row[0],
//         ACCOUNT_NUMBER: row[1],
//         ACCOUNT_DESCRIPTION: row[2],
//         CREDIT_AMOUNT: row[3],
//         CURRENCY_CODE: row[4],
//       }));
//       // console.log(viewExceptionsResult);
//       res.send({
//         responseCode: "000",
//         responseMessage: "View Exceptions Account Result",
//         data: viewExceptionsResult,
//       });
//     }
//     if (key === "viewExceptionsFees") {
//       viewExceptionsQuery = `select pin,acct_link,InvalidStatus,cr_amount,currency from (

//         select pin,acct_link,STATUS InvalidStatus,cr_amount,
//         (get_curriso(currency_code)||' - '||get_currencydesc(currency_code))currency from VW_GENERAL_SALARY_UPLOAD
//            where batch_no='${batchNumber}' and nvl(ACCOUNT_DESCRP,'x') != nvl(STATUS,'y') union all

//         select bankcode,acct_link,acct_status InvalidStatus ,cr_amount,
//         null currency from
//          vw_achupload where batch_no='${batchNumber}' and ACCOUNT_DESCRP!=acct_status   order by pin

//          )`;
//       const Result = await connection.execute(viewExceptionsQuery);
//       const viewExceptionsResult = Result.rows.map((row) => ({
//         PIN: row[0],
//         ACCOUNT_NUMBER: row[1],
//         ACCOUNT_DESCRIPTION: row[2],
//         CREDIT_AMOUNT: row[3],
//         CURRENCY_CODE: row[4],
//       }));
//       res.send({
//         responseCode: "000",
//         responseMessage: "View Exceptions Account Result",
//         data: viewExceptionsResult,
//       });
//     }
//     if (formCode === "CHQQ") {
//       const gettrans = await connection.execute(` SELECT SYS_CODE actual_code
//     FROM CODE_DESC a ,sysgen_transactions b
//     WHERE CODE_TYPE='TR'
//     and a.actual_code  = b.actual_code
//     AND a.actual_code ='SAL'`);
//       const transCode = gettrans.rows[0][0];
//       // console.log(transCode);
//       connection.execute(
//         "BEGIN prc_uploadsalary_nofees(:P2_BATCH, :P2_CONTRA, :app_user, :BRA_CODE, :P2_NARRATION, :P2_CREDITNARR, :P2_SCANDOC, :P2_TRANSCODE, :TERMINAL, :FORMCODE, :mess_v,:allow_dup); END;",
//         {
//           P2_BATCH: batchNumber,
//           P2_CONTRA: accountNumber,
//           app_user: postedBy,
//           BRA_CODE: branchCode,
//           P2_NARRATION: debitNarration,
//           P2_CREDITNARR: creditNarration,
//           P2_SCANDOC: scanDoc,
//           P2_TRANSCODE: transCode,
//           TERMINAL: terminalId,
//           FORMCODE: formCode,
//           allow_dup: "N",
//           mess_v: {
//             type: oracledb.STRING,
//             dir: oracledb.BIND_OUT,
//           },
//         },
//         function (err, result) {
//           if (err) {
//             console.log(err);
//           }

//           if (result?.outBinds?.mess_v === "S") {
//             res.send({
//               responseCode: "000",
//             });
//           } else {
//             console.log(result.outBinds.mess_v);
//             res.send({
//               responseCode: "998",
//               responseMessage: "Failed to Upload Data",
//             });
//           }
//         }
//       );
//     }
//     if (formCode === "TFZB") {
//       const gettrans = await connection.execute(` SELECT SYS_CODE actual_code
//     FROM CODE_DESC a ,sysgen_transactions b
//     WHERE CODE_TYPE='TR'
//     and a.actual_code  = b.actual_code
//     AND a.actual_code ='SAL'`);
//       const transCode = gettrans.rows[0][0];
//       connection.execute(
//         "BEGIN prc_uploadsalary_fees(:batch_v, :contra_v, :user_v, :bra_v, :narration_v, :Cnarration_v, :doc_v, :transCode_v, :hostname_v, :formcode, :charge_v, :tax_v, :cur_v, :totalcharge_v, :mess_v); END;",
//         {
//           batch_v: batchNumber,
//           contra_v: accountNumber,
//           user_v: postedBy,
//           bra_v: branchCode,
//           narration_v: debitNarration,
//           Cnarration_v: creditNarration,
//           doc_v: scanDoc,
//           transCode_v: transCode,
//           hostname_v: terminalId,
//           formcode: formCode,
//           charge_v: feeCharge,
//           tax_v: feeTax,
//           cur_v: currencyCode,
//           totalcharge_v: {
//             type: oracledb.NUMBER,
//             dir: oracledb.BIND_OUT,
//           },
//           mess_v: {
//             type: oracledb.STRING,
//             dir: oracledb.BIND_OUT,
//           },
//         },
//         function (err, result) {
//           if (err) {
//             console.log(err);
//           }
//           if (result?.outBinds?.mess_v === "S") {
//             res.send({
//               responseCode: "000",
//             });
//           } else {
//             console.log(result.outBinds.P2_PROCEED);
//             res.send({
//               responseCode: "998",
//               responseMessage: "Failed to Upload Data",
//             });
//           }
//         }
//       );
//     }
//     if (key === "AccountsWithExceptions") {
//       querry = `select cheque_no Pin, account,account_desc,acct_status,amount
//      from TB_SALARYUPLOAD_EXCEPTION where batch_no='${batchNumber}'`;
//       const Result = await connection.execute(querry);
//       const viewExceptionsResult = Result.rows.map((row) => ({
//         PIN: row[0],
//         ACCOUNT_NUMBER: row[1],
//         ACCOUNT_DESCRIPTION: row[2],
//         EXCEPTION: row[3],
//         CREDIT_AMOUNT: row[4],
//       }));
//       //  console.log(viewExceptionsResult);
//       res.send({
//         responseCode: "000",
//         responseMessage: "Accounts Exceptions",
//         data: viewExceptionsResult,
//       });
//     }
//   } catch (error) {
//     console.error("Error:", error);
//     res.send({
//       responseCode: "999",
//       responseMessage: "An Error Occured",
//     });
//   }
// });

app.post("/api/salary-upload", async (req, res) => {
  const {
    key,
    formCode,
    postedBy,
    batchNumber,
    jsonData,
    currencyCode,
    accountNumber,
    branchCode,
    debitNarration,
    creditNarration,
    scanDoc,
    terminalId,
    feeTax,
    feeCharge,
    transCode,
    allowDup,
  } = req.body;
  console.log(req.body);
  try {
    const connection = await oracledb.getConnection({
      user: DB_USER,
      password: DB_PASSWORD,
      connectString: DB_CONNECTION_STRING,
    });
    if (key === "uploadNoFees") {
      // console.log("it is happening here ")
      // Delete existing data for the postedBy user
      await connection.execute(
        `delete from TBL_GENERAL_SAL_NOFEES where posted_by = :app_user`,
        {
          app_user: postedBy,
        },
        { autoCommit: true }
      );
      // Insert Data
      const insertData = jsonData.map(({ PIN, BBAN, AMOUNT }) => [
        postedBy,
        batchNumber,
        PIN,
        BBAN,
        AMOUNT,
      ]);
      // Insert data in batches
      const batchSize = 1000; // Adjust the batch size as needed
      for (let i = 0; i < insertData.length; i += batchSize) {
        const batch = insertData.slice(i, i + batchSize);
        await connection.executeMany(
          `INSERT INTO TBL_GENERAL_SAL_NOFEES (POSTED_BY, BATCH_NO, PIN, ACCT_LINK, CR_AMOUNT) VALUES (:1, :2, :3, :4, :5)`,
          batch,
          { autoCommit: true }
        );
      }
      // Delete statemets
      await connection.execute(
        `delete from TBL_GENERAL_SAL_NOFEES where batch_no=:P4_BATCH and acct_link LIKE '%' || 'EOD' || '%'`,
        {
          P4_BATCH: batchNumber,
        },
        { autoCommit: true }
      );
      await connection.execute(
        `delete from TBL_GENERAL_SAL_NOFEES where batch_no=:P4_BATCH and CR_AMOUNT LIKE '%' || 'EOD' || '%'`,
        {
          P4_BATCH: batchNumber,
        },
        { autoCommit: true }
      );
      await connection.execute(
        `delete from TBL_GENERAL_SAL_NOFEES where batch_no=:P4_BATCH and PIN LIKE '%' || 'EOD' || '%'`,
        {
          P4_BATCH: batchNumber,
        },
        { autoCommit: true }
      );
      await connection.execute("commit");
      await connection.execute(
        `delete from TBL_GENERAL_SAL_NOFEES where batch_no=:P4_BATCH and acct_link is null`,
        {
          P4_BATCH: batchNumber,
        },
        { autoCommit: true }
      );
      await connection.execute("commit");
      // select from grid
      const gridQuery = `
     select pin, acct_link, acct_status as account_descrp, cr_amount, br_description, currency_code
     from (
       select pin, acct_link, acct_status, cr_amount, br_description, currency_code
       from vw_generalsalary_nofees
       where batch_no=:P2_BATCH
       order by pin
     )`;
      const Result = await connection.execute(gridQuery, {
        P2_BATCH: batchNumber,
      });
      const validAcctQuery = `select count(a.acct_link) from vw_generalsalary_nofees a where currency_code=:P2_CURRCODE and status_indicator in ('N','DO','DR') and a.batch_no=:P2_BATCH`;
      const invalidAcctQuery = `select count(acct_link) from vw_generalsalary_nofees a where status_indicator is null and a.batch_no='${batchNumber}'`;
      const MismatchesAcctQuery = `select count(a.acct_link)  from vw_generalsalary_nofees a where a.currency_code!=:P2_CURRCODE and a.batch_no=:P2_BATCH`;
      const NotNormalQuery = `select count(a.acct_link)  from vw_generalsalary_nofees a where a.currency_code=:P2_CURRCODE and  a.batch_no=:P2_BATCH and nvl(status_indicator,'X') NOT in ('N','DO','DR')`;
      //const DuplicateEnquiry =`SELECT SUM(duplicate_count)  total_duplicates FROM (SELECT acct_link, COUNT(*) - 1  duplicate_count FROM vw_generalsalary_nofees where batch_no=:P2_BATCH GROUP BY acct_link HAVING COUNT(*) > 1)  subquery`;
      const binds = {
        P2_CURRCODE: currencyCode.trim(),
        P2_BATCH: batchNumber.trim(),
      };

      // const options = {
      //   outFormat: oracledb.OUT_FORMAT_OBJECT,
      // };

      const r1 = await connection.execute(validAcctQuery, binds);
      const r2 = await connection.execute(invalidAcctQuery);
      const r3 = await connection.execute(MismatchesAcctQuery, binds);
      const r4 = await connection.execute(NotNormalQuery, binds);
      //const r5 = await connection.execute(DuplicateEnquiry, binds);

      const AccountCounts = {
        validAccounts: r1.rows[0][0],
        invalidAccounts: r2.rows[0][0],
        CurrencyMismatchesAccounts: r3.rows[0][0],
        notNormalAccounts: r4.rows[0][0],
        //DuplicateAccounts: r5.rows[0][0]
      };
      // console.log(AccountCounts);
      const excelResult = Result.rows.map((row) => ({
        PIN: row[0],
        ACCOUNT_NUMBER: row[1],
        ACCOUNT_DESCRIPTION: row[2],
        CREDIT_AMOUNT: row[3],
        BRANCH_DESCRIPTION: row[4],
        // CURRENCY_CODE: row[5],
      }));

      const newDDD = [AccountCounts, excelResult];
      // console.log(newDDD);
      res.send({
        responseCode: "000",
        responseMessage: "Data uploaded successfully",
        data: newDDD,
      });
    }

    if (key === "uploadFees") {
      let cal = {};
      // Delete existing data for the postedBy user
      await connection.execute(
        `delete from TBL_GENERAL_SAL_FEES where posted_by = :app_user`,
        {
          app_user: postedBy,
        },
        { autoCommit: true }
      );
      // Insert Data
      const insertData = jsonData.map(({ PIN, BBAN, AMOUNT }) => [
        postedBy,
        batchNumber,
        PIN,
        BBAN,
        AMOUNT,
      ]);
      // Insert data in batches
      const batchSize = 1000; // Adjust the batch size as needed
      for (let i = 0; i < insertData.length; i += batchSize) {
        const batch = insertData.slice(i, i + batchSize);
        await connection.executeMany(
          `INSERT INTO TBL_GENERAL_SAL_FEES (POSTED_BY, BATCH_NO, PIN, ACCT_LINK, CR_AMOUNT) VALUES (:1, :2, :3, :4, :5)`,
          batch,
          { autoCommit: true }
        );
      }
      // Delete statemets
      await connection.execute(
        `delete from TBL_GENERAL_SAL_FEES where batch_no=:P4_BATCH and acct_link LIKE '%' || 'EOD' || '%'`,
        {
          P4_BATCH: batchNumber,
        },
        { autoCommit: true }
      );
      await connection.execute(
        `delete from TBL_GENERAL_SAL_FEES where batch_no=:P4_BATCH and CR_AMOUNT LIKE '%' || 'EOD' || '%'`,
        {
          P4_BATCH: batchNumber,
        },
        { autoCommit: true }
      );
      await connection.execute(
        `delete from TBL_GENERAL_SAL_FEES where batch_no=:P4_BATCH and PIN LIKE '%' || 'EOD' || '%'`,
        {
          P4_BATCH: batchNumber,
        },
        { autoCommit: true }
      );
      await connection.execute("commit");
      await connection.execute(
        `delete from TBL_GENERAL_SAL_FEES where batch_no=:P4_BATCH and acct_link is null`,
        {
          P4_BATCH: batchNumber,
        },
        { autoCommit: true }
      );
      await connection.execute("commit");
      // select from grid
      const gridQuery = `
     select pin, acct_link, acct_status as account_descrp, cr_amount, br_description, currency_code
     from (
       select pin, acct_link, acct_status, cr_amount, br_description, currency_code
       from VW_GENERALSALARY_FEES
       where batch_no=:P2_BATCH
       order by pin
     )`;
      const Result = await connection.execute(gridQuery, {
        P2_BATCH: batchNumber,
      });
      const excelResult = Result.rows.map((row) => ({
        PIN: row[0],
        ACCOUNT_NUMBER: row[1],
        ACCOUNT_DESCRIPTION: row[2],
        CREDIT_AMOUNT: row[3],
        BRANCH_DESCRIPTION: row[4],
        // CURRENCY_CODE: row[5],
      }));
      if (excelResult.length > 0) {
        let charge, feeTypeAmt, taxx, feeTypeTax, totalCharge;

        //sum of CREDIT_AMOUNT
        const totalCreditAmount = excelResult.reduce(
          (sum, row) => sum + row.CREDIT_AMOUNT,
          0
        );
        // GET CHARGE
        try {
          let result = await connection.execute(
            `SELECT FEE_AMOUNT, TYPE_OF_FEE FROM TB_TRANS_FEES_EXCEPTION
         WHERE TRANS_CODE = 'SAL' AND currency = :P10_CURRCODE
         AND CUSTOMER_NUMBER = get_customerno(:P10_CONTRA)`,
            [currencyCode, accountNumber]
          );
          [charge, feeTypeAmt] = result.rows[0];
        } catch (error) {
          charge = null;
          feeTypeAmt = null;
        }
        if (charge === null) {
          try {
            let result = await connection.execute(
              `SELECT FEE_AMOUNT, TYPE_OF_FEE FROM tb_trans_fee_details
           WHERE TRANS_CODE = 'SAL' AND currency = :P10_CURRCODE`,
              [currencyCode]
            );
            [charge, feeTypeAmt] = result.rows[0];
          } catch (error) {
            charge = null;
            feeTypeAmt = null;
          }
        }
        // GET TAX
        try {
          let result = await connection.execute(
            `SELECT FEE_AMOUNT, TYPE_OF_FEE FROM tb_trans_tax_exception
         WHERE TRANS_CODE = 'SAL' AND TAX_CODE = 'GST' AND currency = :P10_CURRCODE`,
            [currencyCode]
          );
          [taxx, feeTypeTax] = result.rows[0];
        } catch (error) {
          taxx = null;
          feeTypeTax = null;
        }
        if (taxx === null) {
          try {
            let result = await connection.execute(
              `SELECT FEE_AMOUNT, TYPE_OF_FEE FROM tb_trans_tax
           WHERE TRANS_CODE = 'SAL' AND TAX_CODE = 'GST' AND currency = :P10_CURRCODE`,
              [currencyCode]
            );
            [taxx, feeTypeTax] = result.rows[0];
          } catch (error) {
            taxx = 0;
            feeTypeTax = 0;
          }
        }
        // GET Charges
        if (feeTypeTax === "P" && taxx > 0) {
          taxx = (taxx / 100) * (charge || 1) * excelResult.length;
        } else if (taxx > 0 && feeTypeTax !== "P") {
          taxx = taxx * excelResult.length;
        }
        if (feeTypeAmt === "P" && charge > 0) {
          charge = (charge / 100) * (totalCreditAmount || 1);
        } else if (charge > 0 && feeTypeAmt !== "P") {
          charge = (charge || 1) * excelResult.length;
        }
        totalCharge = (charge || 0) + (taxx || 0);

        // Set response
        cal = {
          Processing: charge.toFixed(2),
          Tax: taxx.toFixed(2),
          Total_Charge: totalCharge.toFixed(2),
          Total_Amount: totalCreditAmount.toFixed(2),
        };
      }
      const validAcctQuery = `select count(a.acct_link) from VW_GENERALSALARY_FEES a where currency_code=:P2_CURRCODE and status_indicator in ('N','DO','DR') and a.batch_no=:P2_BATCH`;
      const invalidAcctQuery = `select count(acct_link) from VW_GENERALSALARY_FEES a where status_indicator is null and a.batch_no='${batchNumber}'`;
      const MismatchesAcctQuery = `select count(a.acct_link)  from VW_GENERALSALARY_FEES a where a.currency_code!=:P2_CURRCODE and a.batch_no=:P2_BATCH`;

      const binds = {
        P2_CURRCODE: currencyCode?.trim(),
        P2_BATCH: batchNumber?.trim(),
      };

      // const options = {
      //   outFormat: oracledb.OUT_FORMAT_OBJECT,
      // };

      const r1 = await connection.execute(validAcctQuery, binds);
      const r2 = await connection.execute(invalidAcctQuery);
      const r3 = await connection.execute(MismatchesAcctQuery, binds);
      // const r4 = await connection.execute(NotNormalQuery, binds);

      const AccountCounts = {
        validAccounts: r1.rows[0][0],
        invalidAccounts: r2.rows[0][0],
        CurrencyMismatchesAccounts: r3.rows[0][0],
        // notNormalAccounts : r4.rows[0][0],
      };
      // console.log(AccountCounts);

      const newDDD = [AccountCounts, excelResult, cal];
      // console.log(newDDD);
      res.send({
        responseCode: "000",
        responseMessage: "Data uploaded successfully",
        data: newDDD,
        // data: excelResult
      });
    }

    if (key === "invalidAccountsFees") {
      invalidAccountquerry = `select pin, acct_link, acct_status as account_descrp, cr_amount
      from (
        select pin, acct_link, acct_status, cr_amount
        from VW_GENERALSALARY_FEES
        where batch_no='${batchNumber}' and status_indicator is null 
        order by pin
      )`;
      const Result = await connection.execute(invalidAccountquerry);
      const invalidAccountResult = Result.rows.map((row) => ({
        PIN: row[0],
        ACCOUNT_NUMBER: row[1],
        ACCOUNT_STATUS: row[2],
        CREDIT_AMOUNT: row[3],
      }));
      res.send({
        responseCode: "000",
        responseMessage: "Invalid Account Result",
        data: invalidAccountResult,
      });
    }
    if (key === "invalidAccounts") {
      invalidAccountquerry = `select pin, acct_link, acct_status as account_descrp, cr_amount
      from (
        select pin, acct_link, acct_status, cr_amount
        from vw_generalsalary_nofees
        where batch_no='${batchNumber}' and status_indicator is null 
        order by pin
      )`;
      const Result = await connection.execute(invalidAccountquerry);
      const invalidAccountResult = Result.rows.map((row) => ({
        PIN: row[0],
        ACCOUNT_NUMBER: row[1],
        ACCOUNT_STATUS: row[2],
        CREDIT_AMOUNT: row[3],
      }));
      res.send({
        responseCode: "000",
        responseMessage: "Invalid Account Result",
        data: invalidAccountResult,
      });
    }
    if (key === "currencyMismatch") {
      currencyMismacthq = ` SELECT
      pin,
      acct_link,
      acct_status AS account_descrp,
      cr_amount,
      (get_curriso(currency_code) || ' - ' || get_currencydesc(currency_code)) AS currency
    FROM (
      SELECT
        pin,
        acct_link,
        acct_status,
        cr_amount,
        currency_code
      FROM vw_generalsalary_nofees
      WHERE batch_no='${batchNumber}' AND currency_code!='${currencyCode}'
      ORDER BY pin
    )`;
      const Result = await connection.execute(currencyMismacthq);
      const currencyMismatchResult = Result.rows.map((row) => ({
        PIN: row[0],
        ACCOUNT_NUMBER: row[1],
        ACCOUNT_DESCRIPTION: row[2],
        // CREDIT_AMOUNT: row[3],
        CURRENCY_CODE: row[4],
        CREDIT_AMOUNT: row[3],
      }));
      console.log(currencyMismatchResult);
      res.send({
        responseCode: "000",
        responseMessage: "Invalid Account Result",
        data: currencyMismatchResult,
      });
    }
    if (key === "currencyMismatchFees") {
      currencyMismacthq = `select pin, acct_link, acct_status as account_descrp, cr_amount, (get_curriso(currency_code) || ' - ' || get_currencydesc(currency_code)) AS currency
      from (
        select pin, acct_link, acct_status, cr_amount, currency_code
        from VW_GENERALSALARY_FEES
        where batch_no='${batchNumber}' and currency_code!='${currencyCode}'
        order by pin )`;
      const Result = await connection.execute(currencyMismacthq);
      const currencyMismatchResult = Result.rows.map((row) => ({
        PIN: row[0],
        ACCOUNT_NUMBER: row[1],
        ACCOUNT_DESCRIPTION: row[2],
        CURRENCY_CODE: row[4],
        CREDIT_AMOUNT: row[3],
      }));
      res.send({
        responseCode: "000",
        responseMessage: "Invalid Account Result",
        data: currencyMismatchResult,
      });
    }
    if (key === "nonNormalModal") {
      NotNormalQuery = `select pin,acct_link,account_descrp,cr_amount,(get_curriso(currency_code) || ' - ' || get_currencydesc(currency_code)) AS currency from (
        select pin,acct_link,acct_status account_descrp,cr_amount,currency_code from
        vw_generalsalary_nofees where currency_code='${currencyCode}' and  batch_no='${batchNumber}' and nvl(status_indicator,'X') NOT in ('N','DO','DR') order by pin )`;
      const Result = await connection.execute(NotNormalQuery);
      const notNormalResult = Result.rows.map((row) => ({
        PIN: row[0],
        ACCOUNT_NUMBER: row[1],
        ACCOUNT_DESCRIPTION: row[2],
        CREDIT_AMOUNT: row[3],
        CURRENCY_CODE: row[4],
      }));
      // console.log(notNormalResult);
      res.send({
        responseCode: "000",
        responseMessage: "Non-Normal Account Result",
        data: notNormalResult,
      });
    }
    if (key === "viewExceptions") {
      viewExceptionsQuery = ` select pin,acct_link,InvalidStatus,cr_amount,currency from (

        select pin,acct_link,STATUS InvalidStatus,cr_amount,
        (get_curriso(currency_code)||' - '||get_currencydesc(currency_code))currency from VW_GENERAL_SALARY_UPLOAD
           where batch_no='${batchNumber}' and nvl(ACCOUNT_DESCRP,'x') != nvl(STATUS,'y') union all 
           
        select bankcode,acct_link,acct_status InvalidStatus ,cr_amount,
        null currency from
         vw_achupload where batch_no='${batchNumber}' and ACCOUNT_DESCRP!=acct_status   order by pin
         
         )`;
      const Result = await connection.execute(viewExceptionsQuery);
      const viewExceptionsResult = Result.rows.map((row) => ({
        PIN: row[0],
        ACCOUNT_NUMBER: row[1],
        ACCOUNT_DESCRIPTION: row[2],
        CREDIT_AMOUNT: row[3],
        CURRENCY_CODE: row[4],
      }));
      // console.log(viewExceptionsResult);
      res.send({
        responseCode: "000",
        responseMessage: "View Exceptions Account Result",
        data: viewExceptionsResult,
      });
    }
    if (key === "viewExceptionsFees") {
      viewExceptionsQuery = `select pin,acct_link,InvalidStatus,cr_amount,currency from (

        select pin,acct_link,STATUS InvalidStatus,cr_amount,
        (get_curriso(currency_code)||' - '||get_currencydesc(currency_code))currency from VW_GENERAL_SALARY_UPLOAD
           where batch_no='${batchNumber}' and nvl(ACCOUNT_DESCRP,'x') != nvl(STATUS,'y') union all 
           
        select bankcode,acct_link,acct_status InvalidStatus ,cr_amount,
        null currency from
         vw_achupload where batch_no='${batchNumber}' and ACCOUNT_DESCRP!=acct_status   order by pin
         
         )`;
      const Result = await connection.execute(viewExceptionsQuery);
      const viewExceptionsResult = Result.rows.map((row) => ({
        PIN: row[0],
        ACCOUNT_NUMBER: row[1],
        ACCOUNT_DESCRIPTION: row[2],
        CREDIT_AMOUNT: row[3],
        CURRENCY_CODE: row[4],
      }));
      res.send({
        responseCode: "000",
        responseMessage: "View Exceptions Account Result",
        data: viewExceptionsResult,
      });
    }
    if (formCode === "CHQQ") {
      const gettrans = await connection.execute(` SELECT SYS_CODE actual_code
    FROM CODE_DESC a ,sysgen_transactions b
    WHERE CODE_TYPE='TR' 
    and a.actual_code  = b.actual_code
    AND a.actual_code ='SAL'`);
      const transCode = gettrans.rows[0][0];
      console.log(transCode);
      // console.log(transCode);
      connection.execute(
        "BEGIN prc_uploadsalary_nofees(:P2_BATCH, :P2_CONTRA, :app_user, :BRA_CODE, :P2_NARRATION, :P2_CREDITNARR, :P2_SCANDOC, :P2_TRANSCODE, :TERMINAL, :FORMCODE, :mess_v,:allow_dup); END;",
        {
          P2_BATCH: batchNumber,
          P2_CONTRA: accountNumber,
          app_user: postedBy,
          BRA_CODE: branchCode,
          P2_NARRATION: debitNarration,
          P2_CREDITNARR: creditNarration,
          P2_SCANDOC: scanDoc,
          P2_TRANSCODE: transCode,
          TERMINAL: terminalId,
          FORMCODE: formCode,
          allow_dup: allowDup,
          mess_v: {
            type: oracledb.STRING,
            dir: oracledb.BIND_OUT,
          },
        },
        function (err, result) {
          if (err) {
            console.log(err);
          }
          console.log(result?.outBinds);
          if (
            result?.outBinds?.mess_v === null ||
            result?.outBinds?.mess_v === "null" ||
            result?.outBinds?.mess_v === "S"
          ) {
            res.send({
              responseCode: "000",
              responseMessage: "Data Uploaded Successfully",
            });
          } else {
            console.log(result.outBinds.mess_v);
            res.send({
              responseCode: "998",
              responseMessage: "Failed to Upload Dat",
            });
          }
        }
      );
    }
    if (formCode === "TFZB") {
      const gettrans = await connection.execute(` SELECT SYS_CODE actual_code
    FROM CODE_DESC a ,sysgen_transactions b
    WHERE CODE_TYPE='TR' 
    and a.actual_code  = b.actual_code
    AND a.actual_code ='SAL'`);
      const transCode = gettrans.rows[0][0];
      connection.execute(
        "BEGIN prc_uploadsalary_fees(:batch_v, :contra_v, :user_v, :bra_v, :narration_v, :Cnarration_v, :doc_v, :transCode_v, :hostname_v, :formcode, :charge_v, :tax_v, :cur_v, :totalcharge_v, :mess_v); END;",
        {
          batch_v: batchNumber,
          contra_v: accountNumber,
          user_v: postedBy,
          bra_v: branchCode,
          narration_v: debitNarration,
          Cnarration_v: creditNarration,
          doc_v: scanDoc,
          transCode_v: transCode,
          hostname_v: terminalId,
          formcode: formCode,
          charge_v: feeCharge,
          tax_v: feeTax,
          cur_v: currencyCode,
          totalcharge_v: {
            type: oracledb.NUMBER,
            dir: oracledb.BIND_OUT,
          },
          mess_v: {
            type: oracledb.STRING,
            dir: oracledb.BIND_OUT,
          },
        },
        function (err, result) {
          if (err) {
            console.log(err);
          }
          if (result?.outBinds?.mess_v === "S") {
            res.send({
              responseCode: "000",
            });
          } else {
            console.log(result.outBinds.mess_v);
            res.send({
              responseCode: "998",
              responseMessage: "Failed to Upload Data",
            });
          }
        }
      );
    }
    if (key === "AccountsWithExceptions") {
      querry = `select cheque_no Pin, account,account_desc,acct_status,amount
     from TB_SALARYUPLOAD_EXCEPTION where batch_no='${batchNumber}'`;
      const Result = await connection.execute(querry);
      const viewExceptionsResult = Result.rows.map((row) => ({
        PIN: row[0],
        ACCOUNT_NUMBER: row[1],
        ACCOUNT_DESCRIPTION: row[2],
        EXCEPTION: row[3],
        CREDIT_AMOUNT: row[4],
      }));
      //  console.log(viewExceptionsResult);
      res.send({
        responseCode: "000",
        responseMessage: "Accounts Exceptions",
        data: viewExceptionsResult,
      });
    }
  } catch (error) {
    console.error("Error:", error);
    res.send({
      responseCode: "999",
      responseMessage: "An Error Occured",
    });
  }
});
//////////////////////////////////////////////////
// Market FX Rates API
//////////////////////////////////////////////////
app.post("/api/market-fx-rates", (req, res) => {
  const { posting_date } = req.body;

  const dateObj = new Date(posting_date);

  const day = dateObj.getUTCDate().toString().padStart(2, "0");
  const month = new Intl.DateTimeFormat("en-US", { month: "short" })
    .format(dateObj)
    .toUpperCase();
  const year = dateObj.getUTCFullYear();

  let postingDate = `${day}-${month}-${year}`;

  let getTellerLimit = async () => {
    try {
      const db = await oracledb.getConnection({
        user: DB_USER,
        password: DB_PASSWORD,
        connectString: DB_CONNECTION_STRING,
        timeout: DB_CONNECTION_TIMEOUT,
      });
      const execute = util.promisify(db.execute).bind(db);

      const data = await execute(
        `SELECT * FROM curpair_hist WHERE PDT = 'FX' AND POSTING_DATE='${postingDate}'`
      );

      // const data1
      if (data) {
        var arr0 = "";
        var arr = [];

        for (let i = 0; i < data.rows.length; i++) {
          for (let x = 0; x < data.metaData.length; x++) {
            arr0 +=
              '"' +
              [data.metaData[x].name.toLowerCase()] +
              '" : "' +
              data.rows[i][x] +
              '",';
          }

          arr.push(JSON.parse("{" + arr0.replace(/,\s*$/, "") + "}"));
        }

        return res.send(arr);
      } else {
        res.send("Something went wrong... Nothing was returned!!");
      }
    } catch (err) {
      console.log(err);
    }
  };
  getTellerLimit();
});

//////////////////////////////////////////////////
// System Rates API
//////////////////////////////////////////////////
app.post("/api/system-rates", (req, res) => {
  const { posting_date } = req.body;

  const dateObj = new Date(posting_date);

  const day = dateObj.getUTCDate().toString().padStart(2, "0");
  const month = new Intl.DateTimeFormat("en-US", { month: "short" })
    .format(dateObj)
    .toUpperCase();
  const year = dateObj.getUTCFullYear();

  let postingDate = `${day}-${month}-${year}`;

  let getTellerLimit = async () => {
    try {
      const db = await oracledb.getConnection({
        user: DB_USER,
        password: DB_PASSWORD,
        connectString: DB_CONNECTION_STRING,
        timeout: DB_CONNECTION_TIMEOUT,
      });
      const execute = util.promisify(db.execute).bind(db);

      const data = await execute(
        `SELECT * FROM curpair_hist WHERE PDT = 'SPT' AND POSTING_DATE='${postingDate}'`
      );

      // const data1
      if (data) {
        var arr0 = "";
        var arr = [];

        for (let i = 0; i < data.rows.length; i++) {
          for (let x = 0; x < data.metaData.length; x++) {
            arr0 +=
              '"' +
              [data.metaData[x].name.toLowerCase()] +
              '" : "' +
              data.rows[i][x] +
              '",';
          }

          arr.push(JSON.parse("{" + arr0.replace(/,\s*$/, "") + "}"));
        }

        return res.send(arr);
      } else {
        res.send("Something went wrong... Nothing was returned!!");
      }
    } catch (err) {
      console.log(err);
    }
  };
  getTellerLimit();
});

//////////////////////////////////////////////////
// InterBank (INT) Rates API
//////////////////////////////////////////////////
app.post("/api/inter-bank-rates", (req, res) => {
  const { posting_date } = req.body;

  const dateObj = new Date(posting_date);

  const day = dateObj.getUTCDate().toString().padStart(2, "0");
  const month = new Intl.DateTimeFormat("en-US", { month: "short" })
    .format(dateObj)
    .toUpperCase();
  const year = dateObj.getUTCFullYear();

  let postingDate = `${day}-${month}-${year}`;

  let getTellerLimit = async () => {
    try {
      const db = await oracledb.getConnection({
        user: DB_USER,
        password: DB_PASSWORD,
        connectString: DB_CONNECTION_STRING,
        timeout: DB_CONNECTION_TIMEOUT,
      });
      const execute = util.promisify(db.execute).bind(db);

      const data = await execute(
        `SELECT * FROM curpair_hist WHERE PDT = 'INT' AND POSTING_DATE='${postingDate}'`
      );

      // const data1
      if (data) {
        var arr0 = "";
        var arr = [];

        for (let i = 0; i < data.rows.length; i++) {
          for (let x = 0; x < data.metaData.length; x++) {
            arr0 +=
              '"' +
              [data.metaData[x].name.toLowerCase()] +
              '" : "' +
              data.rows[i][x] +
              '",';
          }

          arr.push(JSON.parse("{" + arr0.replace(/,\s*$/, "") + "}"));
        }

        return res.send(arr);
      } else {
        res.send("Something went wrong... Nothing was returned!!");
      }
    } catch (err) {
      console.log(err);
    }
  };
  getTellerLimit();
});

////////////////////////////////////////////////////
// facility enquiry

// TORSGOD
// ATM - Torsgod
app.get("/api/get-atm-types", (req, res) => {
  // const { code } = req.body;
  let getBranch = async () => {
    try {
      const db = await oracledb.getConnection({
        user: DB_USER,
        password: DB_PASSWORD,
        connectString: DB_CONNECTION_STRING,
        timeout: DB_CONNECTION_TIMEOUT,
      });
      const execute = util.promisify(db.execute).bind(db);

      // return res.send("ghamna");
      // res.send(con);
      const data = await execute(
        `select actual_code as value,description as label from code_desc where code_type = 'ATM'
        and status = 'Y' and class_code = 'A'
        order by CLASS_CODE`
      );
      if (data) {
        // res.send(response);

        var arr0 = "";
        var arr = [];

        for (let i = 0; i < data.rows.length; i++) {
          for (let x = 0; x < data.metaData.length; x++) {
            arr0 +=
              '"' +
              [data.metaData[x].name.toLowerCase()] +
              '" : "' +
              data.rows[i][x] +
              '",';
          }

          arr.push(JSON.parse("{" + arr0.replace(/,\s*$/, "") + "}"));
        }

        return res.send(arr);

        // res.send({
        //   responseCode: "000",
        //   responseMessage : arr
        // });
      } else {
        res.send("Something went wrong... Nothing was returned!!");
      }
    } catch (err) {
      console.log(err);
      res.send("err");
    }
  };
  getBranch();
});

////////////////////////////////////////////////////
// facility enquiry

// TORSGOD
// ATM - Torsgod
app.post("/api/atm-card-customer-details", (req, res) => {
  const { account_link } = req.body;

  let getAtmCustomerDetails = async () => {
    try {
      const db = await oracledb.getConnection({
        user: DB_USER,
        password: DB_PASSWORD,
        connectString: DB_CONNECTION_STRING,
        timeout: DB_CONNECTION_TIMEOUT,
      });

      const response = [];
      let arr0 = "";

      // node native promisify
      const execute = util.promisify(db.execute).bind(db);

      const data = await execute(
        `select customer_number from g_ledger_vw where accts=:account_link`,
        {
          account_link,
        }
      );

      if (data.rows.length > 0) {
        customer_number = data.rows[0][0];
      }

      const data0 = await execute(
        `select c_type, get_atm_corp from customer where customer_number = '${customer_number}'`
      );

      if (data0.rows.length > 0) {
        c_type = data0.rows[0][0];
        get_atm_corp = data0.rows[0][1];
      }

      const data1 = await execute(
        `select account_descrp from g_ledger_vw  
        where accts=:account_link and prod_code in
        (SELECT PROD_CODE FROM TB_PRODUCT WHERE ALLOW_ATM='Y')
        AND CURRENCY_CODE in (select currency_code from tb_currency where allow_atm = 'Y')
        `,
        {
          account_link,
        }
      );

      if (c_type === "I" || c_type === "O" || get_atm_corp === "Y") {
        if (data1) {
          for (let i = 0; i < data1.rows.length; i++) {
            for (let x = 0; x < data1.metaData.length; x++) {
              arr0 +=
                '"' +
                [data1.metaData[x].name.toLowerCase()] +
                '" : "' +
                data1.rows[i][x] +
                '",';
            }

            response.push(JSON.parse("{" + arr0.replace(/,\s*$/, "") + "}"));
          }

          if (response !== []) {
            res.send(response);
          } else {
            res.send("Cannot request ATM card for this account");
          }

          // console.log(response);
        } else {
          res.send("Something went wrong... Nothing was returned!!");
        }
      } else {
        res.send("A valid Account Number is required");
      }
    } finally {
      // conn.end();
    }
  };

  getAtmCustomerDetails();
});

// get atm valid customer details
app.post("/api/atm-card-valid-customer-details", (req, res) => {
  const { account_link } = req.body;

  let getAtmValidCustomerDetails = async () => {
    try {
      const db = await oracledb.getConnection({
        user: DB_USER,
        password: DB_PASSWORD,
        connectString: DB_CONNECTION_STRING,
        timeout: DB_CONNECTION_TIMEOUT,
      });

      const response = [];
      let arr0 = "";

      // node native promisify
      const execute = util.promisify(db.execute).bind(db);

      const data = await execute(
        `select customer_number from g_ledger_vw where accts=:account_link`,
        {
          account_link,
        }
      );

      if (data.rows.length > 0) {
        customer_number = data.rows[0][0];
      }

      const data0 = await execute(
        `select c_type from customer where customer_number ='${customer_number}'`
      );

      if (data0.rows.length > 0) {
        c_type = data0.rows[0][0];
      }

      const data1 = await execute(
        `
        select account_descrp as account_description, GET_CURRDESC(CURRENCY_CODE) as currency, get_customerTelNo('${customer_number}') as phone_number  from g_ledger_vw  
        where accts=:account_link and prod_code in
        (SELECT PROD_CODE FROM TB_PRODUCT WHERE ALLOW_ATM='Y')
        AND CURRENCY_CODE in (select currency_code from tb_currency where allow_atm = 'Y')
        `,
        {
          account_link,
        }
      );

      if (c_type === "I" || c_type === "O" || get_atm_corp === "Y") {
        if (data1) {
          for (let i = 0; i < data1.rows.length; i++) {
            for (let x = 0; x < data1.metaData.length; x++) {
              arr0 +=
                '"' +
                [data1.metaData[x].name.toLowerCase()] +
                '" : "' +
                data1.rows[i][x] +
                '",';
            }

            response.push(JSON.parse("{" + arr0.replace(/,\s*$/, "") + "}"));
          }

          if (response !== []) {
            res.send(response);
          } else {
            res.send("A valid Account Number is required");
          }

          // console.log(response);
        } else {
          res.send("Something went wrong... Nothing was returned!!");
        }
      } else {
        res.send("A valid Account Number is required");
      }
    } finally {
      // conn.end();
    }
  };

  getAtmValidCustomerDetails();
});

// validations on ATM, Account Number
app.post("/api/atm-account-number-validation-1", (req, res) => {
  const { account_link, atm_card_type } = req.body;

  let getValidationsOnATMAccountNumber = async () => {
    try {
      const db = await oracledb.getConnection({
        user: DB_USER,
        password: DB_PASSWORD,
        connectString: DB_CONNECTION_STRING,
        timeout: DB_CONNECTION_TIMEOUT,
      });

      const response = [];
      let arr0 = "";

      // node native promisify
      const execute = util.promisify(db.execute).bind(db);

      const data = await execute(
        `
        SELECT COUNT(ACCT_LINK) as count1
FROM pan_account A
WHERE  CARD_STATUS = 'A' AND ACCT_LINK= GET_BBAN(:account_link) or  ACCT_LINK= :account_link AND CARD_TYPE = :atm_card_type`,
        {
          account_link,
          account_link,
          atm_card_type,
        }
      );

      if (data) {
        for (let i = 0; i < data.rows.length; i++) {
          for (let x = 0; x < data.metaData.length; x++) {
            arr0 +=
              '"' +
              [data.metaData[x].name.toLowerCase()] +
              '" : "' +
              data.rows[i][x] +
              '",';
          }

          response.push(
            JSON.parse(
              "{" +
                arr0.replace(/(\r\n|\n|\r)/gm, "").replace(/,\s*$/, "") +
                "}"
            )
          );
        }

        res.send(response);
      } else {
        res.send("Something went wrong... Nothing was returned!!");
      }
    } finally {
      // conn.end();
    }
  };

  getValidationsOnATMAccountNumber();
});

app.post("/api/atm-account-number-validation-2", (req, res) => {
  const { account_link, atm_card_type } = req.body;

  let getValidationsOnATMAccountNumber = async () => {
    try {
      const db = await oracledb.getConnection({
        user: DB_USER,
        password: DB_PASSWORD,
        connectString: DB_CONNECTION_STRING,
        timeout: DB_CONNECTION_TIMEOUT,
      });

      const response = [];
      let arr0 = "";

      // node native promisify
      const execute = util.promisify(db.execute).bind(db);

      const data = await execute(
        `
        SELECT COUNT(ACCT_LINK) as count2
        FROM ATM_requisition_temp A
        WHERE ACCT_LINK=:account_link and nvl(ACTION_FLAG,'N')  = 'N'
        AND CHEQUE_BOOK_TYPE = :atm_card_type`,
        {
          account_link,
          atm_card_type,
        }
      );

      if (data) {
        for (let i = 0; i < data.rows.length; i++) {
          for (let x = 0; x < data.metaData.length; x++) {
            arr0 +=
              '"' +
              [data.metaData[x].name.toLowerCase()] +
              '" : "' +
              data.rows[i][x] +
              '",';
          }

          response.push(
            JSON.parse(
              "{" +
                arr0.replace(/(\r\n|\n|\r)/gm, "").replace(/,\s*$/, "") +
                "}"
            )
          );
        }

        res.send(response);
      } else {
        res.send("Something went wrong... Nothing was returned!!");
      }
    } finally {
      // conn.end();
    }
  };

  getValidationsOnATMAccountNumber();
});

// atm card type details
app.post("/api/get-atm-card-type-details", (req, res) => {
  const { atm_card_type } = req.body;

  let getATMCardType = async () => {
    try {
      const db = await oracledb.getConnection({
        user: DB_USER,
        password: DB_PASSWORD,
        connectString: DB_CONNECTION_STRING,
        timeout: DB_CONNECTION_TIMEOUT,
      });

      const response = [];
      let arr0 = "";

      // node native promisify
      const execute = util.promisify(db.execute).bind(db);

      const data = await execute(
        `SELECT 
        atm_limit_setup.ATM_LIMIT,
        atm_limit_setup.LIMIT_DURATION,
        code_desc.description
    FROM
        TB_ATM_LIMIT_SETUP atm_limit_setup
    JOIN
        code_desc ON atm_limit_setup.LIMIT_DURATION = code_desc.actual_code
    WHERE
        atm_limit_setup.ATM_CODE = :atm_card_type
        AND code_desc.code_type = 'SFD'
    `,
        {
          atm_card_type,
        }
      );

      if (data) {
        for (let i = 0; i < data.rows.length; i++) {
          for (let x = 0; x < data.metaData.length; x++) {
            arr0 +=
              '"' +
              [data.metaData[x].name.toLowerCase()] +
              '" : "' +
              data.rows[i][x] +
              '",';
          }

          response.push(
            JSON.parse(
              "{" +
                arr0.replace(/(\r\n|\n|\r)/gm, "").replace(/,\s*$/, "") +
                "}"
            )
          );
        }

        res.send(response);
      } else {
        res.send("Something went wrong... Nothing was returned!!");
      }
    } finally {
      // conn.end();
    }
  };

  getATMCardType();
});

// // Get Loan General Enquiry API Endpoint - ORACLE
app.post("/api/loan-general-enquiry-fetch-data", (req, res) => {
  const {
    facility_no,
    name,
    currency_code,
    facility_account,
    repayment_account,
    ac_class,
    facility_status,
    sect,
    ro,
    tenor,
    INTSUSP_CHK,
    PENSUS_CHK,
    BACKDATE_CHK,
    CANCELLED_CHK,
    RESTRUCTURED_CHK,
    inarrears_CHK,
    withpenal_CHK,
    EXPIRED_CHK,
    CLASSIFIED_CHK,
    ARREARSINT_CHK,
    facility_type,
    amount_granted_between_from,
    amount_granted_between_to,
    days_expiry_from,
    days_expiry_to,
    effective_date_from,
    effective_date_to,
    expiry_date_from,
    expiry_date_to,
    disbursed_date_from,
    disbursed_date_to,
    branch,
    prod_code,
    customer_number,
  } = req.body;

  let getGeneralLoanEnquiry = async () => {
    try {
      const db = await oracledb.getConnection({
        user: DB_USER,
        password: DB_PASSWORD,
        connectString: DB_CONNECTION_STRING,
      });

      const response = [];
      let arr0 = "";
      let determinant = "";

      // node native promisify
      const execute = util.promisify(db.execute).bind(db);

      const data = await execute(
        `select * from VW_LOAN_GEN_ENQnew where 
          FACILITY_NO LIKE '%'||:facility_no||'%'  
          and NAME LIKE '%'||:name||'%'
          and currency_code like '%'||:currency_code||'%'
          and PRINCIPAL_ACCOUNT LIKE '%'||:facility_account||'%'  
          and REPAYMENT_ACCOUNT LIKE '%'||:repayment_account||'%'
          and class_code like '%'||:ac_class||'%'
          and loan_status like '%'||:facility_status||'%'
          and nvl(SECTOR_CODE,'0') like '%'||:sect||'%'
          and nvl(ro,'0') like '%'||:ro||'%'
          and TENOR LIKE '%'||:tenor||'%'
          AND INTSUS_FLAG like '%'||:INTSUSP_CHK||'%'
          and PENSUS_flag like '%'||:PENSUS_CHK||'%'
          AND BKDATED_FLAG like '%'||:BACKDATE_CHK||'%'
          AND CANC_FLAG like '%'||:CANCELLED_CHK||'%'
          and RESTR_FLAG like '%'||:RESTRUCTURED_CHK||'%'
          and INTARR_FLAG like '%'||:inarrears_CHK||'%'
          and PENAL_FLAG like '%'||:withpenal_CHK||'%'
          and EXPIRED_FLAG like '%'||:EXPIRED_CHK||'%'
          and NPA_FLAG like '%'||:CLASSIFIED_CHK||'%'
          and ARRINT_FLAG like '%'||:ARREARSINT_CHK||'%'
          and facility_type like '%'||:facility_type||'%'
          and AMOUNT_GRANTED between nvl(:amount_granted_between_from,0) and nvl(:amount_granted_between_to,999999999999999) 
          and days_expiry between  nvl(:days_expiry_from,-9999999) and nvl(:days_expiry_to,9999999)
          and EFFECTIVE_DATE BETWEEN NVL(:effective_date_from,'01-JAN-1970') AND NVL(:effective_date_to,'01-JAN-2100')
          and EXPIRY_DATE BETWEEN NVL(:expiry_date_from,'01-JAN-1970') AND NVL(:expiry_date_to,'01-JAN-2100')
          and disbursement_date BETWEEN NVL(:disbursed_date_from,'01-JAN-1970') AND NVL(:disbursed_date_to,'01-JAN-2100')
          AND BRANCH_CODE LIKE '%'||:branch||'%'
          AND prod_code LIKE '%'||:prod_code||'%'
          and customer_number like '%'||:customer_number||'%'
          and ROWNUM <= 50`,
        {
          facility_no,
          name,
          currency_code,
          facility_account,
          repayment_account,
          ac_class,
          facility_status,
          sect,
          ro,
          tenor,
          INTSUSP_CHK,
          PENSUS_CHK,
          BACKDATE_CHK,
          CANCELLED_CHK,
          RESTRUCTURED_CHK,
          inarrears_CHK,
          withpenal_CHK,
          EXPIRED_CHK,
          CLASSIFIED_CHK,
          ARREARSINT_CHK,
          facility_type,
          amount_granted_between_from,
          amount_granted_between_to,
          days_expiry_from,
          days_expiry_to,
          effective_date_from,
          effective_date_to,
          expiry_date_from,
          expiry_date_to,
          disbursed_date_from,
          disbursed_date_to,
          branch,
          prod_code,
          customer_number,
        }
      );
      // return res.send(data);

      if (data) {
        for (let i = 0; i < data.rows.length; i++) {
          for (let x = 0; x < data.metaData.length; x++) {
            arr0 +=
              '"' +
              [data.metaData[x].name.toLowerCase()] +
              '" : "' +
              data.rows[i][x] +
              '",';
          }

          response.push(JSON.parse("{" + arr0.replace(/,\s*$/, "") + "}"));
        }

        res.send(response);
        // console.log(response);
      } else {
        res.send("Something went wrong... Nothing was returned!!");
      }
    } finally {
      // conn.end();
    }
  };

  getGeneralLoanEnquiry();
});

// EARLY SETTLEMENT DETAILS
app.post("/api/early-settle-loan", (req, res) => {
  const { facility_no } = req.body;

  let getGeneralLoanEnquiry = async () => {
    try {
      const db = await oracledb.getConnection({
        user: DB_USER,
        password: DB_PASSWORD,
        connectString: DB_CONNECTION_STRING,
      });

      const response = [];
      let arr0 = "";

      // node native promisify
      const execute = util.promisify(db.execute).bind(db);

      const data = await execute(
        `select * from facility where facility_no = :facility_no`,
        {
          facility_no,
        }
      );

      // return res.send(data);

      if (data) {
        for (let i = 0; i < data.rows.length; i++) {
          for (let x = 0; x < data.metaData.length; x++) {
            arr0 +=
              '"' +
              [data.metaData[x].name.toLowerCase()] +
              '" : "' +
              data.rows[i][x] +
              '",';
          }

          response.push(JSON.parse("{" + arr0.replace(/,\s*$/, "") + "}"));
        }

        res.send(response);
        // console.log(response);
      } else {
        res.send("Something went wrong... Nothing was returned!!");
      }
    } finally {
      // conn.end();
    }
  };

  getGeneralLoanEnquiry();
});

// get-customer-table-details
app.post("/api/loan-general-enquiry-get-facility-table-details", (req, res) => {
  const { facility_no } = req.body;

  let getGeneralLoanEnquiry = async () => {
    try {
      const db = await oracledb.getConnection({
        user: DB_USER,
        password: DB_PASSWORD,
        connectString: DB_CONNECTION_STRING,
      });

      const response = [];
      let arr0 = "";

      // node native promisify
      const execute = util.promisify(db.execute).bind(db);

      const data = await execute(
        `select * from REPAYMENT_SCHD_HDNEW where  FACILITY_NO = '${facility_no}'`
      );

      // return res.send(data);

      if (data) {
        for (let i = 0; i < data.rows.length; i++) {
          for (let x = 0; x < data.metaData.length; x++) {
            arr0 +=
              '"' +
              [data.metaData[x].name.toLowerCase()] +
              '" : "' +
              data.rows[i][x] +
              '",';
          }

          response.push(JSON.parse("{" + arr0.replace(/,\s*$/, "") + "}"));
        }

        res.send(response);
        // console.log(response);
      } else {
        res.send("Something went wrong... Nothing was returned!!");
      }
    } finally {
      // conn.end();
    }
  };

  getGeneralLoanEnquiry();
});

// get customer contact details
app.post(
  "/api/loan-general-enquiry-get-customer-personal-details",
  (req, res) => {
    const { customer_number } = req.body;

    let getGeneralLoanEnquiry = async () => {
      try {
        const db = await oracledb.getConnection({
          user: DB_USER,
          password: DB_PASSWORD,
          connectString: DB_CONNECTION_STRING,
        });

        const response = [];
        let arr0 = "";

        // node native promisify
        const execute = util.promisify(db.execute).bind(db);

        const data = await execute(
          `	select customer_number,residential_address,email_address,mobile1
          from tb_relation where customer_number='${customer_number}'`
        );

        // return res.send(data);

        if (data) {
          for (let i = 0; i < data.rows.length; i++) {
            for (let x = 0; x < data.metaData.length; x++) {
              arr0 +=
                '"' +
                [data.metaData[x].name.toLowerCase()] +
                '" : "' +
                data.rows[i][x] +
                '",';
            }

            response.push(JSON.parse("{" + arr0.replace(/,\s*$/, "") + "}"));
          }

          res.send(response);
          // console.log(response);
        } else {
          res.send("Something went wrong... Nothing was returned!!");
        }
      } finally {
        // conn.end();
      }
    };

    getGeneralLoanEnquiry();
  }
);

// get details of schedule
app.post("/api/loan-general-enquiry-schedule-dets", (req, res) => {
  const { facility_no } = req.body;

  let getGeneralLoanEnquiry = async () => {
    try {
      const db = await oracledb.getConnection({
        user: DB_USER,
        password: DB_PASSWORD,
        connectString: DB_CONNECTION_STRING,
      });

      const response = [];
      let arr0 = "";

      // node native promisify
      const execute = util.promisify(db.execute).bind(db);

      const data = await execute(
        `select repay_seq_no, date_due, principal, interest, monthp, prp, int_paid, ppd, intpaide_date from R_SCHEDULE_TEMP where FACILITY_NO = '${facility_no}' `
      );

      // return res.send(data);

      if (data) {
        for (let i = 0; i < data.rows.length; i++) {
          for (let x = 0; x < data.metaData.length; x++) {
            arr0 +=
              '"' +
              [data.metaData[x].name.toLowerCase()] +
              '" : "' +
              data.rows[i][x] +
              '",';
          }

          response.push(JSON.parse("{" + arr0.replace(/,\s*$/, "") + "}"));
        }

        res.send(response);
        // console.log(response);
      } else {
        res.send("Something went wrong... Nothing was returned!!");
      }
    } finally {
      // conn.end();
    }
  };

  getGeneralLoanEnquiry();
});

// print the schedule
app.post("/api/loan-general-enquiry-print-schedule", (req, res) => {
  const { facility_no } = req.body;

  let getGeneralLoanEnquiry = async () => {
    try {
      const db = await oracledb.getConnection({
        user: DB_USER,
        password: DB_PASSWORD,
        connectString: DB_CONNECTION_STRING,
      });

      const response = [];
      let arr0 = "";

      // node native promisify
      const execute = util.promisify(db.execute).bind(db);

      const data = await execute(
        `select REPAY_SEQ_NO, DATE_DUE repayment_date, PRESENT_DATE presentation_date, PRINCIPAL principal_due,INTEREST interest_due, 
        (nvl(PRINCIPAL,0)+nvl(INTEREST,0)) repayment_amount
        from r_schedule_temp
        where facility_no ='${facility_no}'
        order by repay_seq_no asc`
      );

      // return res.send(data);

      if (data) {
        for (let i = 0; i < data.rows.length; i++) {
          for (let x = 0; x < data.metaData.length; x++) {
            arr0 +=
              '"' +
              [data.metaData[x].name.toLowerCase()] +
              '" : "' +
              data.rows[i][x] +
              '",';
          }

          response.push(JSON.parse("{" + arr0.replace(/,\s*$/, "") + "}"));
        }

        res.send(response);
        // console.log(response);
      } else {
        res.send("Something went wrong... Nothing was returned!!");
      }
    } finally {
      // conn.end();
    }
  };

  getGeneralLoanEnquiry();
});

// sector lovs
app.get("/api/loan-general-enquiry-get-sector", (req, res) => {
  let getSectorLOV = async () => {
    try {
      const db = await oracledb.getConnection({
        user: DB_USER,
        password: DB_PASSWORD,
        connectString: DB_CONNECTION_STRING,
      });

      const response = [];
      let arr0 = "";

      // node native promisify
      const execute = util.promisify(db.execute).bind(db);

      const data = await execute(
        `select actual_CODE as value,description as label from code_desc
        where code_type='MAS'
        order by actual_CODE asc`
      );

      // return res.send(data);

      if (data) {
        for (let i = 0; i < data.rows.length; i++) {
          for (let x = 0; x < data.metaData.length; x++) {
            arr0 +=
              '"' +
              [data.metaData[x].name.toLowerCase()] +
              '" : "' +
              data.rows[i][x] +
              '",';
          }

          response.push(JSON.parse("{" + arr0.replace(/,\s*$/, "") + "}"));
        }

        res.send(response);
        // console.log(response);
      } else {
        res.send("Something went wrong... Nothing was returned!!");
      }
    } finally {
      // conn.end();
    }
  };

  getSectorLOV();
});
// ro lovs
app.get("/api/loan-general-enquiry-get-ro", (req, res) => {
  let getRoLOV = async () => {
    try {
      const db = await oracledb.getConnection({
        user: DB_USER,
        password: DB_PASSWORD,
        connectString: DB_CONNECTION_STRING,
      });

      const response = [];
      let arr0 = "";

      // node native promisify
      const execute = util.promisify(db.execute).bind(db);

      const data = await execute(
        `select ARM_CODE as value,ARM_NAME as label from TBL_ARM
        order by ARM_CODE asc `
      );

      // return res.send(data);

      if (data) {
        for (let i = 0; i < data.rows.length; i++) {
          for (let x = 0; x < data.metaData.length; x++) {
            arr0 +=
              '"' +
              [data.metaData[x].name.toLowerCase()] +
              '" : "' +
              data.rows[i][x] +
              '",';
          }

          response.push(JSON.parse("{" + arr0.replace(/,\s*$/, "") + "}"));
        }

        res.send(response);
        // console.log(response);
      } else {
        res.send("Something went wrong... Nothing was returned!!");
      }
    } finally {
      // conn.end();
    }
  };

  getRoLOV();
});

// get chart of account enquiry
app.post("/api/get-chart-of-accounts-enquiry", (req, res) => {
  async function getChartOfAccountEnquiry() {
    let con;

    try {
      con = await oracledb.getConnection({
        user: DB_USER,
        password: DB_PASSWORD,
        connectString: DB_CONNECTION_STRING,
      });

      const chartGroup = req.body.chartGroup;
      const accountNumber = req.body.accountNumber;
      const clearToAccount = req.body.clearToAccount;
      const Status = req.body.Status;
      const dateFrom = req.body.dateFrom;
      const dateTo = req.body.dateTo;
      const createdBy = req.body.createdBy;
      const reconcilation = req.body.reconcilation;
      const accountDescription = req.body.accountDescription;

      const response = [];
      const resp = [];
      let arr0 = "";

      const data = await con.execute(
        `SELECT TACCT,CHART_CODE,ACCOUNT_DESCRP,LEVEL_ID,CLEAR_TO_CODE,GET_CURRDESC(CURRENCY) CURRENCY,CURRENCY as CURRENCY_CODE,GET_BRANCHDESC(BRANCH_CODE) BRANCH_CODE,
        POSTED_BY,POSTING_DATE,FLAG_MESSAGE,ACCOUNT_RESTRICTION,BRANCH_CODE as BRANCH,STATUS,ACCOUNT_CLASS,AUTO_RECON
         FROM COA_ENQ_VW WHERE CHART_CODE LIKE '%'||:chartGroup||'%'
        AND TACCT LIKE '%'||:accountNumber||'%' 
        AND CLEAR_TO_CODE LIKE '%'||:clearToAccount||'%' 
        AND POSTING_DATE BETWEEN NVL(:dateFrom,'01-JAN-1970') AND NVL(:dateTo,'01-JAN-2100')
        AND POSTED_BY LIKE '%'||:createdBy||'%' 
        AND ACCOUNT_DESCRP LIKE '%'||:accountDescription||'%' 
        AND FLAG LIKE '%'||:Status||'%'
        AND AUTO_RECON LIKE '%'||:reconcilation||'%'  AND ROWNUM <= 100
      `,
        {
          chartGroup,
          accountNumber,
          clearToAccount,
          dateFrom,
          dateTo,
          createdBy,
          accountDescription,
          Status,
          reconcilation,
        }
      );

      if (data) {
        for (let i = 0; i < data.rows.length; i++) {
          for (let x = 0; x < data.metaData.length; x++) {
            arr0 +=
              '"' +
              [data.metaData[x].name.toLowerCase()] +
              '" : "' +
              data.rows[i][x] +
              '",';
          }

          response.push(
            JSON.parse(
              "{" +
                arr0.replace(/(\r\n|\n|\r)/gm, "").replace(/,\s*$/, "") +
                "}"
            )
          );
        }

        for (let i = 0; i < response.length; i++) {
          const postingDate = new Date(response[i].posting_date);
          response[i].posting_date = postingDate.toDateString();
        }

        res.send(response);
      } else {
        res.send(err);
        console.log("error");
      }
    } catch (err) {
      res.send(err);

      throw err;
    }
  }

  getChartOfAccountEnquiry();
});

app.post("/api/get-chart-of-accounts-amendments", (req, res) => {
  async function getChartOfAccountAmendments() {
    let con;

    try {
      con = await oracledb.getConnection({
        user: DB_USER,
        password: DB_PASSWORD,
        connectString: DB_CONNECTION_STRING,
      });

      const chartGroup = req.body.chartGroup;
      const accountNumber = req.body.accountNumber;
      const clearToAccount = req.body.clearToAccount;
      const createdBy = req.body.createdBy;
      const accountDescription = req.body.accountDescription;
      const Status = req.body.Status;

      const response = [];
      const resp = [];
      let arr0 = "";

      const data = await con.execute(
        `SELECT CHART_CODE,TACCT,ACCOUNT_DESCRP,LEVEL_ID,CLEAR_TO_CODE,GET_CURRDESC(CURRENCY) AS CURRENCY,CURRENCY AS CURRENCY_CODE,GET_BRANCHDESC(BRANCH_CODE) AS BRANCH_CODE,
        BRANCH_CODE AS BRANCH,POSTED_BY,to_char(POSTING_DATE,'DD-MON-YYYY') as POSTING_DATE,FLAG,FLAG_MESSAGE,ACCOUNT_RESTRICTION,VIEW_RESTRICT,STATUS,ACCOUNT_CLASS,BP_CODE AS REPORTING_LINE_CODE,STATE AS POSTING_RESTRICTION,CUST_NO,ACCOUNT_CODE
        FROM chart_of_acct WHERE CHART_CODE LIKE '%'||:chartGroup||'%'
        AND TACCT LIKE '%'||:accountNumber||'%' 
        AND CLEAR_TO_CODE LIKE '%'||:clearToAccount||'%' 
        AND POSTED_BY LIKE '%'||:createdBy||'%' 
        AND ACCOUNT_DESCRP LIKE '%'||:accountDescription||'%'
        AND STATUS LIKE '%'||:Status||'%' 
        AND ROWNUM <= 100 `,
        {
          chartGroup,
          accountNumber,
          clearToAccount,
          createdBy,
          accountDescription,
          Status,
        }
      );

      if (data) {
        for (let i = 0; i < data.rows.length; i++) {
          for (let x = 0; x < data.metaData.length; x++) {
            arr0 +=
              '"' +
              [data.metaData[x].name.toLowerCase()] +
              '" : "' +
              data.rows[i][x] +
              '",';
          }

          response.push(
            JSON.parse(
              "{" +
                arr0.replace(/(\r\n|\n|\r)/gm, "").replace(/,\s*$/, "") +
                "}"
            )
          );
        }

        res.send(response);
      } else {
        res.send(err);
        console.log("error");
      }
    } catch (err) {
      res.send(err);

      throw err;
    }
  }

  getChartOfAccountAmendments();
});

app.post("/api/get-chart-of-accounts-approvals", (req, res) => {
  async function getChartOfAccountApprovals() {
    let con;

    try {
      con = await oracledb.getConnection({
        user: DB_USER,
        password: DB_PASSWORD,
        connectString: DB_CONNECTION_STRING,
      });

      const chartGroup = req.body.chartGroup;
      const createdBy = req.body.createdBy;
      const accountDescription = req.body.accountDescription;
      const accountNumber = req.body.accountNumber;

      const response = [];
      const resp = [];
      let arr0 = "";

      const data = await con.execute(
        `SELECT CHART_CODE,ACCOUNT_CODE,ACCOUNT_DESCRP,LEVEL_ID,CLEAR_TO_CODE,GET_CURRDESC(CURRENCY) AS CURRENCY,CURRENCY AS CURRENCY_CODE,GET_BRANCHDESC(BRANCH_CODE) AS BRANCH,
        BRANCH_CODE AS BRANCH_CODE,POSTED_BY,to_char(POSTING_DATE,'DD-MON-YYYY') as POSTING_DATE,FLAG,FLAG_MESSAGE,ACCOUNT_RESTRICTION,VIEW_RESTRICT,STATUS,ACCOUNT_CLASS,TACCT AS ACCOUNT_NUMBER,STATE AS POSTING_RESTRICTION,
        ACCOUNT_ORDERING,ACCOUNT_CLASS,BP_CODE AS REPORTING_LINE_CODE,GET_BP_DESC(BSPL,BP_CODE) as line_description,CUST_NO
        FROM vw_charts_approve WHERE CHART_CODE LIKE '%'||:chartGroup||'%'
        AND ROWNUM <= 100 
        ORDER BY CHART_CODE`,
        {
          chartGroup,
        }
      );

      if (data) {
        for (let i = 0; i < data.rows.length; i++) {
          for (let x = 0; x < data.metaData.length; x++) {
            arr0 +=
              '"' +
              [data.metaData[x].name.toLowerCase()] +
              '" : "' +
              data.rows[i][x] +
              '",';
          }

          response.push(
            JSON.parse(
              "{" +
                arr0.replace(/(\r\n|\n|\r)/gm, "").replace(/,\s*$/, "") +
                "}"
            )
          );
        }

        res.send(response);
      } else {
        res.send(err);
        console.log("error");
      }
    } catch (err) {
      res.send(err);

      throw err;
    }
  }

  getChartOfAccountApprovals();
});

// Get Clear to Account
app.get("/api/get-clear-to-account-details", (req, res) => {
  async function cleartoAccountDetails() {
    let con;

    try {
      con = await oracledb.getConnection({
        user: DB_USER,
        password: DB_PASSWORD,
        connectString: DB_CONNECTION_STRING,
        timeout: DB_CONNECTION_TIMEOUT,
      });

      const data = await con.execute(
        `
        select account_code,account_descrp from chart_of_acct where level_id = 'T' order by account_code
        `
      );

      if (data.rows) {
        const arr = [];

        for (let i = 0; i < data.rows.length; i++) {
          const description = data.rows[i][1];
          const actual_code = data.rows[i][0];
          // const short_descrp = data.rows[i][2];

          arr.push({
            label: actual_code + " - " + description,
            value: actual_code,
            // short_descrp: short_descrp,
          });
        }

        res.send(arr);
      } else {
        res.send(err);
        console.log(err);
      }
    } catch (err) {
      res.send(err);
    }
  }

  cleartoAccountDetails();
});

// Get CREATED BY DETAILS
app.get("/api/get-created-by-details", (req, res) => {
  async function getCreatedBy() {
    let con;

    try {
      con = await oracledb.getConnection({
        user: DB_USER,
        password: DB_PASSWORD,
        connectString: DB_CONNECTION_STRING,
        timeout: DB_CONNECTION_TIMEOUT,
      });

      const data = await con.execute(
        `
        SELECT ALL MENU_USERS.USER_NAME, MENU_USERS.FULLNAME, MENU_USERS.APP_FLAG
        FROM MENU_USERS where app_flag='Y'
        `
      );

      if (data.rows) {
        const arr = [];

        for (let i = 0; i < data.rows.length; i++) {
          const description = data.rows[i][1];
          const actual_code = data.rows[i][0];
          // const short_descrp = data.rows[i][2];

          arr.push({
            label: actual_code + " - " + description,
            value: actual_code,
            // short_descrp: short_descrp,
          });
        }

        res.send(arr);
      } else {
        res.send(err);
        console.log(err);
      }
    } catch (err) {
      res.send(err);
    }
  }

  getCreatedBy();
});

// product lovs
app.get("/api/loan-general-enquiry-get-product", (req, res) => {
  let getProductLOV = async () => {
    try {
      const db = await oracledb.getConnection({
        user: DB_USER,
        password: DB_PASSWORD,
        connectString: DB_CONNECTION_STRING,
      });

      const response = [];
      let arr0 = "";

      // node native promisify
      const execute = util.promisify(db.execute).bind(db);

      const data = await execute(
        ` select PROD_CODE as value,description as label
        from tb_product a 
        where a.prod_group in ('1','5')
        and exists(select 1 from facility_controlss b
            where a.prod_group = b.type_of_acct
            and a.prod_sgroup = b.legal_form)
        order by PROD_CODE `
      );

      // return res.send(data);

      if (data) {
        for (let i = 0; i < data.rows.length; i++) {
          for (let x = 0; x < data.metaData.length; x++) {
            arr0 +=
              '"' +
              [data.metaData[x].name.toLowerCase()] +
              '" : "' +
              data.rows[i][x] +
              '",';
          }

          response.push(JSON.parse("{" + arr0.replace(/,\s*$/, "") + "}"));
        }

        res.send(response);
        // console.log(response);
      } else {
        res.send("Something went wrong... Nothing was returned!!");
      }
    } finally {
      // conn.end();
    }
  };

  getProductLOV();
});

// get loan setup
app.post("/api/loan-general-enquiry-loan-setup", (req, res) => {
  const { principal_acct } = req.body;

  let getLoanSetup = async () => {
    try {
      const db = await oracledb.getConnection({
        user: DB_USER,
        password: DB_PASSWORD,
        connectString: DB_CONNECTION_STRING,
        timeout: DB_CONNECTION_TIMEOUT,
      });

      const response = [];
      let arr0 = "";

      // node native promisify
      const execute = util.promisify(db.execute).bind(db);

      const data = await execute(
        `select * from VW_FACILITY_DETAILS where PRINCIPAL_ACCOUNT = :principal_acct`,
        {
          principal_acct,
        }
      );

      if (data) {
        for (let i = 0; i < data.rows.length; i++) {
          for (let x = 0; x < data.metaData.length; x++) {
            arr0 +=
              '"' +
              [data.metaData[x].name.toLowerCase()] +
              '" : "' +
              data.rows[i][x] +
              '",';
          }

          response.push(
            JSON.parse(
              "{" +
                arr0.replace(/(\r\n|\n|\r)/gm, "").replace(/,\s*$/, "") +
                "}"
            )
          );
        }

        res.send(response);
      } else {
        res.send("Something went wrong... Nothing was returned!!");
      }
    } finally {
      // conn.end();
    }
  };

  getLoanSetup();
});

// get guarantor for facility enquiry
//
app.post("/api/loan-general-enquiry-guarantor", (req, res) => {
  const { principal_acct } = req.body;

  let getFacilityEnquiryGuarantor = async () => {
    try {
      const db = await oracledb.getConnection({
        user: DB_USER,
        password: DB_PASSWORD,
        connectString: DB_CONNECTION_STRING,
        timeout: DB_CONNECTION_TIMEOUT,
      });

      const response = [];
      let arr0 = "";

      // node native promisify
      const execute = util.promisify(db.execute).bind(db);

      const data = await execute(
        `select * from GUARANTORS_DET where PRINCIPAL_ACCOUNT = :principal_acct`,
        {
          principal_acct,
        }
      );

      if (data) {
        for (let i = 0; i < data.rows.length; i++) {
          for (let x = 0; x < data.metaData.length; x++) {
            arr0 +=
              '"' +
              [data.metaData[x].name.toLowerCase()] +
              '" : "' +
              data.rows[i][x] +
              '",';
          }

          response.push(
            JSON.parse(
              "{" +
                arr0.replace(/(\r\n|\n|\r)/gm, "").replace(/,\s*$/, "") +
                "}"
            )
          );
        }

        res.send(response);
      } else {
        res.send("Something went wrong... Nothing was returned!!");
      }
    } finally {
      // conn.end();
    }
  };

  getFacilityEnquiryGuarantor();
});

// get customer number and name
app.get("/api/get-customer-name-and-number", (req, res) => {
  let getCustomerNameAndNumber = async () => {
    try {
      const db = await oracledb.getConnection({
        user: DB_USER,
        password: DB_PASSWORD,
        connectString: DB_CONNECTION_STRING,
        timeout: DB_CONNECTION_TIMEOUT,
      });

      const response = [];
      let arr0 = "";

      // node native promisify
      const execute = util.promisify(db.execute).bind(db);

      const data = await execute(
        `select distinct name as label, name as value from VW_LOAN_GEN_ENQnew`
      );

      if (data) {
        for (let i = 0; i < data.rows.length; i++) {
          for (let x = 0; x < data.metaData.length; x++) {
            arr0 +=
              '"' +
              [data.metaData[x].name.toLowerCase()] +
              '" : "' +
              data.rows[i][x] +
              '",';
          }

          response.push(
            JSON.parse(
              "{" +
                arr0.replace(/(\r\n|\n|\r)/gm, "").replace(/,\s*$/, "") +
                "}"
            )
          );
        }

        res.send(response);
      } else {
        res.send("Something went wrong... Nothing was returned!!");
      }
    } finally {
      // conn.end();
    }
  };

  getCustomerNameAndNumber();
});

// get customer number and name
app.post("/api/get-customer-name-basedOn-Number", (req, res) => {
  const { customer_number } = req.body;
  let getCustomerNameBasedOnNumber = async () => {
    try {
      const db = await oracledb.getConnection({
        user: DB_USER,
        password: DB_PASSWORD,
        connectString: DB_CONNECTION_STRING,
        timeout: DB_CONNECTION_TIMEOUT,
      });

      const response = [];
      let arr0 = "";

      // node native promisify
      const execute = util.promisify(db.execute).bind(db);

      const data = await execute(
        `select distinct name from VW_LOAN_GEN_ENQnew where customer_number = '${customer_number}'`
      );

      if (data) {
        for (let i = 0; i < data.rows.length; i++) {
          for (let x = 0; x < data.metaData.length; x++) {
            arr0 +=
              '"' +
              [data.metaData[x].name.toLowerCase()] +
              '" : "' +
              data.rows[i][x] +
              '",';
          }

          response.push(
            JSON.parse(
              "{" +
                arr0.replace(/(\r\n|\n|\r)/gm, "").replace(/,\s*$/, "") +
                "}"
            )
          );
        }

        res.send(response);
      } else {
        res.send("Something went wrong... Nothing was returned!!");
      }
    } finally {
      // conn.end();
    }
  };

  getCustomerNameBasedOnNumber();
});

//get loan repayments
app.post("/api/loan-repayments", (req, res) => {
  const { facility_number } = req.body;
  let getLoanRepayments = async () => {
    try {
      const db = await oracledb.getConnection({
        user: DB_USER,
        password: DB_PASSWORD,
        connectString: DB_CONNECTION_STRING,
        timeout: DB_CONNECTION_TIMEOUT,
      });

      const response = [];
      let arr0 = "";

      // node native promisify
      const execute = util.promisify(db.execute).bind(db);

      const data = await execute(
        `select FACILITY_NO,REPAY_SEQ_NO INT_SEQ_NO,DATE_DUE ACTIVITY_DATE,INTEREST CALC_INT_AMOUNT,
        PRINCIPAL CALC_PRINCIPAL_AMOUNT,MONTHP MONTHLY_P, INT_PAID INT, PRP PR, TOTP TOTAL_REP,PPD,
        INTPAIDE_DATE INT_DATE 
        from R_SCHEDULE_TEMP
        where facility_no =:facility_number`,
        {
          facility_number,
        }
      );

      if (data) {
        for (let i = 0; i < data.rows.length; i++) {
          for (let x = 0; x < data.metaData.length; x++) {
            arr0 +=
              '"' +
              [data.metaData[x].name.toLowerCase()] +
              '" : "' +
              data.rows[i][x] +
              '",';
          }

          response.push(
            JSON.parse(
              "{" +
                arr0.replace(/(\r\n|\n|\r)/gm, "").replace(/,\s*$/, "") +
                "}"
            )
          );
        }

        res.send(response);
      } else {
        res.send("Something went wrong... Nothing was returned!!");
      }
    } finally {
      // conn.end();
    }
  };

  getLoanRepayments();
});

//get financials
app.post("/api/loan-general-enquiry-financials", (req, res) => {
  const { principal_acct } = req.body;

  let getLoanEnquiryFinancials = async () => {
    try {
      const db = await oracledb.getConnection({
        user: DB_USER,
        password: DB_PASSWORD,
        connectString: DB_CONNECTION_STRING,
        timeout: DB_CONNECTION_TIMEOUT,
      });

      const response = [];
      let arr0 = "";

      // node native promisify
      const execute = util.promisify(db.execute).bind(db);

      const data = await execute(
        `select * from vw_custloan_analysis where PRINCIPAL_ACCOUNT = :principal_acct`,
        {
          principal_acct,
        }
      );

      if (data) {
        for (let i = 0; i < data.rows.length; i++) {
          for (let x = 0; x < data.metaData.length; x++) {
            arr0 +=
              '"' +
              [data.metaData[x].name.toLowerCase()] +
              '" : "' +
              data.rows[i][x] +
              '",';
          }

          response.push(
            JSON.parse(
              "{" +
                arr0.replace(/(\r\n|\n|\r)/gm, "").replace(/,\s*$/, "") +
                "}"
            )
          );
        }

        res.send(response);
      } else {
        res.send("Something went wrong... Nothing was returned!!");
      }
    } finally {
      // conn.end();
    }
  };

  getLoanEnquiryFinancials();
});

// get income details (individual) - financials tab
app.post("/api/loan-general-enquiry-income-details-financials", (req, res) => {
  const { principal_acct } = req.body;

  let getLoanEnquiryFinancials = async () => {
    try {
      const db = await oracledb.getConnection({
        user: DB_USER,
        password: DB_PASSWORD,
        connectString: DB_CONNECTION_STRING,
        timeout: DB_CONNECTION_TIMEOUT,
      });

      const response = [];
      let arr0 = "";

      // node native promisify
      const execute = util.promisify(db.execute).bind(db);

      const data = await execute(
        `select income_type, amount, considered_amt from LOAN_INDV_INCOME where PRINCIPAL_ACCOUNT = :principal_acct AND INCOME_TYPE='INC'`,
        {
          principal_acct,
        }
      );

      if (data) {
        for (let i = 0; i < data.rows.length; i++) {
          for (let x = 0; x < data.metaData.length; x++) {
            arr0 +=
              '"' +
              [data.metaData[x].name.toLowerCase()] +
              '" : "' +
              data.rows[i][x] +
              '",';
          }

          response.push(
            JSON.parse(
              "{" +
                arr0.replace(/(\r\n|\n|\r)/gm, "").replace(/,\s*$/, "") +
                "}"
            )
          );
        }

        res.send(response);
      } else {
        res.send("Something went wrong... Nothing was returned!!");
      }
    } finally {
      // conn.end();
    }
  };

  getLoanEnquiryFinancials();
});

// get expenditure details (individual) - financials tab
app.post(
  "/api/loan-general-enquiry-expenditure-details-financials",
  (req, res) => {
    const { principal_acct } = req.body;

    let getLoanEnquiryFinancials = async () => {
      try {
        const db = await oracledb.getConnection({
          user: DB_USER,
          password: DB_PASSWORD,
          connectString: DB_CONNECTION_STRING,
          timeout: DB_CONNECTION_TIMEOUT,
        });

        const response = [];
        let arr0 = "";

        // node native promisify
        const execute = util.promisify(db.execute).bind(db);

        const data = await execute(
          `select income_type, amount, considered_amt from LOAN_INDV_INCOME where PRINCIPAL_ACCOUNT = :principal_acct AND INCOME_TYPE='EXP'`,
          {
            principal_acct,
          }
        );

        if (data) {
          for (let i = 0; i < data.rows.length; i++) {
            for (let x = 0; x < data.metaData.length; x++) {
              arr0 +=
                '"' +
                [data.metaData[x].name.toLowerCase()] +
                '" : "' +
                data.rows[i][x] +
                '",';
            }

            response.push(
              JSON.parse(
                "{" +
                  arr0.replace(/(\r\n|\n|\r)/gm, "").replace(/,\s*$/, "") +
                  "}"
              )
            );
          }

          res.send(response);
        } else {
          res.send("Something went wrong... Nothing was returned!!");
        }
      } finally {
        // conn.end();
      }
    };

    getLoanEnquiryFinancials();
  }
);

// get assets details (individual) - financials tab
app.post("/api/loan-general-enquiry-assets-details-financials", (req, res) => {
  const { principal_acct } = req.body;

  let getLoanEnquiryFinancials = async () => {
    try {
      const db = await oracledb.getConnection({
        user: DB_USER,
        password: DB_PASSWORD,
        connectString: DB_CONNECTION_STRING,
        timeout: DB_CONNECTION_TIMEOUT,
      });

      const response = [];
      let arr0 = "";

      // node native promisify
      const execute = util.promisify(db.execute).bind(db);

      const data = await execute(
        `select income_type, amount, considered_amt from LOAN_INDV_INCOME where PRINCIPAL_ACCOUNT = :principal_acct AND INCOME_TYPE='ASS'`,
        {
          principal_acct,
        }
      );

      if (data) {
        for (let i = 0; i < data.rows.length; i++) {
          for (let x = 0; x < data.metaData.length; x++) {
            arr0 +=
              '"' +
              [data.metaData[x].name.toLowerCase()] +
              '" : "' +
              data.rows[i][x] +
              '",';
          }

          response.push(
            JSON.parse(
              "{" +
                arr0.replace(/(\r\n|\n|\r)/gm, "").replace(/,\s*$/, "") +
                "}"
            )
          );
        }

        res.send(response);
      } else {
        res.send("Something went wrong... Nothing was returned!!");
      }
    } finally {
      // conn.end();
    }
  };

  getLoanEnquiryFinancials();
});

// get liability details (individual) - financials tab
app.post(
  "/api/loan-general-enquiry-liability-details-financials",
  (req, res) => {
    const { principal_acct } = req.body;

    let getLoanEnquiryFinancials = async () => {
      try {
        const db = await oracledb.getConnection({
          user: DB_USER,
          password: DB_PASSWORD,
          connectString: DB_CONNECTION_STRING,
          timeout: DB_CONNECTION_TIMEOUT,
        });

        const response = [];
        let arr0 = "";

        // node native promisify
        const execute = util.promisify(db.execute).bind(db);

        const data = await execute(
          `select income_type, amount, considered_amt from LOAN_INDV_INCOME where PRINCIPAL_ACCOUNT = :principal_acct AND INCOME_TYPE='LLB'`,
          {
            principal_acct,
          }
        );

        if (data) {
          for (let i = 0; i < data.rows.length; i++) {
            for (let x = 0; x < data.metaData.length; x++) {
              arr0 +=
                '"' +
                [data.metaData[x].name.toLowerCase()] +
                '" : "' +
                data.rows[i][x] +
                '",';
            }

            response.push(
              JSON.parse(
                "{" +
                  arr0.replace(/(\r\n|\n|\r)/gm, "").replace(/,\s*$/, "") +
                  "}"
              )
            );
          }

          res.send(response);
        } else {
          res.send("Something went wrong... Nothing was returned!!");
        }
      } finally {
        // conn.end();
      }
    };

    getLoanEnquiryFinancials();
  }
);

// get all loans modal
app.post("/api/loan-general-enquiry-view-all-loans", (req, res) => {
  const { customer_number } = req.body;

  let viewAllFacilityLoans = async () => {
    try {
      const db = await oracledb.getConnection({
        user: DB_USER,
        password: DB_PASSWORD,
        connectString: DB_CONNECTION_STRING,
        timeout: DB_CONNECTION_TIMEOUT,
      });

      const response = [];
      let arr0 = "";

      // node native promisify
      const execute = util.promisify(db.execute).bind(db);

      const data = await execute(
        `select * from vw_facility_summary_all where customer_number = :customer_number`,
        {
          customer_number,
        }
      );

      if (data) {
        for (let i = 0; i < data.rows.length; i++) {
          for (let x = 0; x < data.metaData.length; x++) {
            arr0 +=
              '"' +
              [data.metaData[x].name.toLowerCase()] +
              '" : "' +
              data.rows[i][x] +
              '",';
          }

          response.push(
            JSON.parse(
              "{" +
                arr0.replace(/(\r\n|\n|\r)/gm, "").replace(/,\s*$/, "") +
                "}"
            )
          );
        }

        res.send(response);
      } else {
        res.send("Something went wrong... Nothing was returned!!");
      }
    } finally {
      // conn.end();
    }
  };

  viewAllFacilityLoans();
});

// get collateral
app.post("/api/loan-general-enquiry-get-collateral", (req, res) => {
  const { principalAccount } = req.body;

  let viewAllFacilityLoans = async () => {
    try {
      const db = await oracledb.getConnection({
        user: DB_USER,
        password: DB_PASSWORD,
        connectString: DB_CONNECTION_STRING,
        timeout: DB_CONNECTION_TIMEOUT,
      });

      const response = [];
      let arr0 = "";

      // node native promisify
      const execute = util.promisify(db.execute).bind(db);

      const data = await execute(
        `  select * from TB_COLLATERAL_USED where PRINCIPAL_ACCOUNT = :principalAccount
`,
        {
          principalAccount,
        }
      );

      if (data) {
        for (let i = 0; i < data.rows.length; i++) {
          for (let x = 0; x < data.metaData.length; x++) {
            arr0 +=
              '"' +
              [data.metaData[x].name.toLowerCase()] +
              '" : "' +
              data.rows[i][x] +
              '",';
          }

          response.push(
            JSON.parse(
              "{" +
                arr0.replace(/(\r\n|\n|\r)/gm, "").replace(/,\s*$/, "") +
                "}"
            )
          );
        }

        res.send(response);
      } else {
        res.send("Something went wrong... Nothing was returned!!");
      }
    } finally {
      // conn.end();
    }
  };

  viewAllFacilityLoans();
});

// get documents in loan general enquiry
app.post("/api/loan-general-enquiry-get-documents", (req, res) => {
  const { principalAccount } = req.body;

  let viewAllFacilityLoans = async () => {
    try {
      const db = await oracledb.getConnection({
        user: DB_USER,
        password: DB_PASSWORD,
        connectString: DB_CONNECTION_STRING,
        timeout: DB_CONNECTION_TIMEOUT,
      });

      const response = [];
      let arr0 = "";

      // node native promisify
      const execute = util.promisify(db.execute).bind(db);

      const data = await execute(
        `select sr_no, doc_no, doc_date, expiry_date, mandatory, received_date  from VW_DOCUMENTS_DETAILS where PRINCIPAL_ACCOUNT = :principalAccount`,
        {
          principalAccount,
        }
      );

      if (data) {
        for (let i = 0; i < data.rows.length; i++) {
          for (let x = 0; x < data.metaData.length; x++) {
            arr0 +=
              '"' +
              [data.metaData[x].name.toLowerCase()] +
              '" : "' +
              data.rows[i][x] +
              '",';
          }

          response.push(
            JSON.parse(
              "{" +
                arr0.replace(/(\r\n|\n|\r)/gm, "").replace(/,\s*$/, "") +
                "}"
            )
          );
        }

        res.send(response);
      } else {
        res.send("Something went wrong... Nothing was returned!!");
      }
    } finally {
      // conn.end();
    }
  };

  viewAllFacilityLoans();
});

// get branches
// get all branches
app.get("/api/get-all-branches", (req, res) => {
  const { code } = req.body;
  let getBranch = async () => {
    try {
      const db = await oracledb.getConnection({
        user: DB_USER,
        password: DB_PASSWORD,
        connectString: DB_CONNECTION_STRING,
        timeout: DB_CONNECTION_TIMEOUT,
      });
      const execute = util.promisify(db.execute).bind(db);

      // return res.send("ghamna");
      // res.send(con);
      const data = await execute(
        `SELECT TB_BRANCH.BR_CODE as value, TB_BRANCH.BR_DESCRIPTION as label
        FROM TB_BRANCH`
      );
      if (data) {
        // res.send(response);

        var arr0 = "";
        var arr = [];

        for (let i = 0; i < data.rows.length; i++) {
          for (let x = 0; x < data.metaData.length; x++) {
            arr0 +=
              '"' +
              [data.metaData[x].name.toLowerCase()] +
              '" : "' +
              data.rows[i][x] +
              '",';
          }

          arr.push(JSON.parse("{" + arr0.replace(/,\s*$/, "") + "}"));
        }

        return res.send(arr);

        // res.send({
        //   responseCode: "000",
        //   responseMessage : arr
        // });
      } else {
        res.send("Something went wrong... Nothing was returned!!");
      }
    } catch (err) {
      console.log(err);
      res.send("err");
    }
  };
  getBranch();
});
///////////////////////////////////////////////////

//////////////////////////////////////////////////
// COLLECTIONS - CREDITS
app.get("/api/get-collector-names", async (req, res) => {
  try {
    const db = await oracledb.getConnection({
      user: DB_USER,
      password: DB_PASSWORD,
      connectString: DB_CONNECTION_STRING,
      timeout: DB_CONNECTION_TIMEOUT,
    });

    const response = [];
    const execute = util.promisify(db.execute).bind(db);

    const data = await execute(`
      SELECT ALL USER_NAME as value, USER_NAME || ' - ' || FULLNAME as label
      FROM MENU_USERS A 
      WHERE NOT EXISTS (
        SELECT 1 FROM TB_USER_MENU_ACCESSES C 
        WHERE C.USER_NAME=A.USER_NAME AND C.ACCESS_CODE IN (12, 15)
      ) AND NOT EXISTS (
        SELECT 1 FROM TB_COLLECTOR D WHERE D.USER_NAME= A.USER_NAME
      )
    `);

    if (data) {
      for (let i = 0; i < data.rows.length; i++) {
        const item = {};
        for (let x = 0; x < data.metaData.length; x++) {
          item[data.metaData[x].name.toLowerCase()] = data.rows[i][x];
        }
        response.push(item);
      }
      res.send(response);
    } else {
      res.send("Something went wrong... Nothing was returned!!");
    }
  } catch (err) {
    console.error(err);
    res.send(err);
  }
});

// COLLECTIONS - GET BRANCH CODES FOR CHECKBOXES
app.post("/api/get-collector-branch-chk", async (req, res) => {
  const { username } = req.body;
  try {
    const db = await oracledb.getConnection({
      user: DB_USER,
      password: DB_PASSWORD,
      connectString: DB_CONNECTION_STRING,
      timeout: DB_CONNECTION_TIMEOUT,
    });

    const response = [];
    const execute = util.promisify(db.execute).bind(db);

    const data = await execute(
      `
      SELECT BR_CODE || ' - ' || BR_DESCRIPTION AS BR_CODE
      FROM tb_coll_arr
      WHERE COLL_ID = :username
    `,
      { username }
    );

    if (data) {
      for (let i = 0; i < data.rows.length; i++) {
        const item = {};
        for (let x = 0; x < data.metaData.length; x++) {
          item[data.metaData[x].name.toLowerCase()] = data.rows[i][x];
        }
        response.push(item);
      }
      res.send(response);
    } else {
      res.send("Something went wrong... Nothing was returned!!");
    }
  } catch (err) {
    console.error(err);
    res.send(err);
  }
});

app.post("/api/get-collector-product-chk", async (req, res) => {
  const { username } = req.body;
  try {
    const db = await oracledb.getConnection({
      user: DB_USER,
      password: DB_PASSWORD,
      connectString: DB_CONNECTION_STRING,
      timeout: DB_CONNECTION_TIMEOUT,
    });

    const response = [];
    const execute = util.promisify(db.execute).bind(db);

    const data = await execute(
      `
      SELECT PROD_CODE || ' - ' || PROD_DESC AS PROD_CODE
      FROM tb_coll_product
      WHERE COLL_ID = :username
    `,
      { username }
    );

    if (data) {
      for (let i = 0; i < data.rows.length; i++) {
        const item = {};
        for (let x = 0; x < data.metaData.length; x++) {
          item[data.metaData[x].name.toLowerCase()] = data.rows[i][x];
        }
        response.push(item);
      }
      res.send(response);
    } else {
      res.send("Something went wrong... Nothing was returned!!");
    }
  } catch (err) {
    console.error(err);
    res.send(err);
  }
});

// GET COLLECTOR GROUP
app.post("/api/get-collector-group", async (req, res) => {
  const { username } = req.body;
  try {
    const db = await oracledb.getConnection({
      user: DB_USER,
      password: DB_PASSWORD,
      connectString: DB_CONNECTION_STRING,
      timeout: DB_CONNECTION_TIMEOUT,
    });

    const response = [];
    const execute = util.promisify(db.execute).bind(db);

    const data = await execute(
      `
    SELECT COLLECTOR_CODE || ' - ' || DESCRIPTION as value, DESCRIPTION as label
    FROM VW_COLLECTOR_SETUP A
    WHERE NOT EXISTS(SELECT 1 FROM TB_COLLECTOR B WHERE B.USER_NAME =:username
    AND B.COLL_TYPE = A.COLLECTOR_CODE) 
    `,
      { username }
    );

    if (data) {
      for (let i = 0; i < data.rows.length; i++) {
        const item = {};
        for (let x = 0; x < data.metaData.length; x++) {
          item[data.metaData[x].name.toLowerCase()] = data.rows[i][x];
        }
        response.push(item);
      }
      res.send(response);
    } else {
      res.send("Something went wrong... Nothing was returned!!");
    }
  } catch (err) {
    console.error(err);
    res.send(err);
  }
});

// GET GLOBAL COLLECTOR LOV
app.get("/api/get-collector-zone", async (req, res) => {
  try {
    const db = await oracledb.getConnection({
      user: DB_USER,
      password: DB_PASSWORD,
      connectString: DB_CONNECTION_STRING,
      timeout: DB_CONNECTION_TIMEOUT,
    });

    const response = [];
    const execute = util.promisify(db.execute).bind(db);

    const data = await execute(`
    SELECT ALL ACTUAL_CODE as value, DESCRIPTION as label
    FROM VW_ZONES 
    `);

    if (data) {
      for (let i = 0; i < data.rows.length; i++) {
        const item = {};
        for (let x = 0; x < data.metaData.length; x++) {
          item[data.metaData[x].name.toLowerCase()] = data.rows[i][x];
        }
        response.push(item);
      }
      res.send(response);
    } else {
      res.send("Something went wrong... Nothing was returned!!");
    }
  } catch (err) {
    console.error(err);
    res.send(err);
  }
});

// GET MIN AND MAX DAYS
app.post("/api/get-min-and-max-days", async (req, res) => {
  const { collectorCode } = req.body;
  try {
    const db = await oracledb.getConnection({
      user: DB_USER,
      password: DB_PASSWORD,
      connectString: DB_CONNECTION_STRING,
      timeout: DB_CONNECTION_TIMEOUT,
    });

    const response = [];
    const execute = util.promisify(db.execute).bind(db);

    const data = await execute(
      `
      SELECT collector_min_days, collector_max_days 
      FROM VW_COLLECTOR_DETAILS 
      where COLLECTOR_CODE=:collectorCode
    `,
      { collectorCode }
    );

    if (data) {
      for (let i = 0; i < data.rows.length; i++) {
        const item = {};
        for (let x = 0; x < data.metaData.length; x++) {
          item[data.metaData[x].name.toLowerCase()] = data.rows[i][x];
        }
        response.push(item);
      }
      res.send(response);
    } else {
      res.send("Something went wrong... Nothing was returned!!");
    }
  } catch (err) {
    console.error(err);
    res.send(err);
  }
});

// GET THE BRANCHES
app.post("/api/get-branches-from-zone-name", async (req, res) => {
  const { zone_name } = req.body;
  try {
    const db = await oracledb.getConnection({
      user: DB_USER,
      password: DB_PASSWORD,
      connectString: DB_CONNECTION_STRING,
      timeout: DB_CONNECTION_TIMEOUT,
    });

    const response = [];
    const execute = util.promisify(db.execute).bind(db);

    const data = await execute(
      `
      select BR_CODE, BR_CODE || ' - ' ||BR_DESCRIPTION as BR_DESCRIPTION from tb_branch where
 br_zone = :zone_name
    `,
      { zone_name }
    );

    if (data) {
      for (let i = 0; i < data.rows.length; i++) {
        const item = {};
        for (let x = 0; x < data.metaData.length; x++) {
          item[data.metaData[x].name.toLowerCase()] = data.rows[i][x];
        }
        response.push(item);
      }
      res.send(response);
    } else {
      res.send("Something went wrong... Nothing was returned!!");
    }
  } catch (err) {
    console.error(err);
    res.send(err);
  }
});

app.get("/api/get-branches-for-coll-creation", async (req, res) => {
  try {
    const db = await oracledb.getConnection({
      user: DB_USER,
      password: DB_PASSWORD,
      connectString: DB_CONNECTION_STRING,
      timeout: DB_CONNECTION_TIMEOUT,
    });

    const response = [];
    const execute = util.promisify(db.execute).bind(db);

    const data = await execute(
      `
      select BR_CODE, BR_CODE || ' - ' ||BR_DESCRIPTION as BR_DESCRIPTION from tb_branch
    `,
      { zone_name }
    );

    if (data) {
      for (let i = 0; i < data.rows.length; i++) {
        const item = {};
        for (let x = 0; x < data.metaData.length; x++) {
          item[data.metaData[x].name.toLowerCase()] = data.rows[i][x];
        }
        response.push(item);
      }
      res.send(response);
    } else {
      res.send("Something went wrong... Nothing was returned!!");
    }
  } catch (err) {
    console.error(err);
    res.send(err);
  }
});

// GET COLLECTOR PRODUCTS
app.get("/api/get-collector-products", async (req, res) => {
  try {
    const db = await oracledb.getConnection({
      user: DB_USER,
      password: DB_PASSWORD,
      connectString: DB_CONNECTION_STRING,
      timeout: DB_CONNECTION_TIMEOUT,
    });

    const response = [];
    const execute = util.promisify(db.execute).bind(db);

    const data = await execute(` 
    SELECT prod_code, description
    FROM tb_product a
   WHERE     a.prod_group = '5'
         AND EXISTS
                 (SELECT 1
                    FROM facility_controlss b
                   WHERE     a.prod_group = b.type_of_acct
                         AND a.prod_sgroup = b.legal_form
                         AND ln_active = 'Y')
  UNION
  SELECT prod_code, description
    FROM tb_product a
   WHERE     a.prod_group IN ('1', '2')
         AND EXISTS
                 (SELECT 1
                    FROM charges_type_acct b
                   WHERE     a.prod_group = b.type_of_acct
                         AND a.prod_sgroup = b.legal_form
                         AND allow_overdraft='Y')
  `);

    if (data) {
      for (let i = 0; i < data.rows.length; i++) {
        const item = {};
        for (let x = 0; x < data.metaData.length; x++) {
          item[data.metaData[x].name.toLowerCase()] = data.rows[i][x];
        }
        response.push(item);
      }
      res.send(response);
    } else {
      res.send("Something went wrong... Nothing was returned!!");
    }
  } catch (err) {
    console.error(err);
    res.send(err);
  }
});

// GET COLLECTOR DETAILS
// GET COLLECTOR DETAILS
app.post("/api/get-collector-details", async (req, res) => {
  const {
    username,
    zone_name,
    collector_group,
    exp_level,
    min_ratio,
    max_ratio,
    min_days,
    max_days,
  } = req.body;
  try {
    const db = await oracledb.getConnection({
      user: DB_USER,
      password: DB_PASSWORD,
      connectString: DB_CONNECTION_STRING,
      timeout: DB_CONNECTION_TIMEOUT,
    });

    const response = [];
    const execute = util.promisify(db.execute).bind(db);

    const data = await execute(
      ` 
      SELECT 
    user_name, 
    CASE 
        WHEN zone_code IS NOT NULL  
        THEN zone_code || ' - ' || zone_name 
        ELSE zone_name 
    END AS zone_name, 
    CASE 
        WHEN collector_code IS NOT NULL 
        THEN collector_code || ' - ' || collector_type 
        ELSE collector_type 
    END AS collector_group, 
    collector_min_days, 
    collector_max_days,
    exp_level || ' - ' || get_expDesc(exp_level) as exp_level,
    globaluser, 
    ratio, 
    fullname,
    flag
FROM 
    VW_COLLECTOR_DETAILS 
WHERE   
    (user_name || ' - ' || fullname) LIKE '%' || :username || '%'
    AND (zone_code || ' - ' || zone_name) LIKE '%' || :zone_name || '%' 
    AND (collector_code || ' - ' || collector_type) LIKE '%' || :collector_group || '%' 
    AND exp_level LIKE '%' || :exp_level || '%'  
    AND ratio BETWEEN nvl(:min_ratio, 0) AND nvl(:max_ratio, 9999999) 
    AND collector_min_days BETWEEN nvl(:min_days, 0) AND nvl(:max_days,999999)
ORDER BY 
    user_name DESC

  `,
      {
        username,
        zone_name,
        collector_group,
        exp_level,
        min_ratio,
        max_ratio,
        min_days,
        max_days,
      }
    );

    if (data) {
      for (let i = 0; i < data.rows.length; i++) {
        const item = {};
        for (let x = 0; x < data.metaData.length; x++) {
          item[data.metaData[x].name.toLowerCase()] = data.rows[i][x];
        }
        response.push(item);
      }
      res.send(response);
    } else {
      res.send("Something went wrong... Nothing was returned!!");
    }
  } catch (err) {
    console.error(err);
    res.send(err);
  }
});

// GET AVAILABLE COLLECTORS-LOV
app.get("/api/get-available-collectors-lov", async (req, res) => {
  try {
    const db = await oracledb.getConnection({
      user: DB_USER,
      password: DB_PASSWORD,
      connectString: DB_CONNECTION_STRING,
      timeout: DB_CONNECTION_TIMEOUT,
    });

    const response = [];
    const execute = util.promisify(db.execute).bind(db);

    const data = await execute(
      ` 
      SELECT 
        user_name as value, 
        fullname as label
        FROM 
        VW_COLLECTOR_DETAILS 
        where flag = 'A' 
        ORDER BY 
        user_name DESC
  `
    );

    if (data) {
      for (let i = 0; i < data.rows.length; i++) {
        const item = {};
        for (let x = 0; x < data.metaData.length; x++) {
          item[data.metaData[x].name.toLowerCase()] = data.rows[i][x];
        }
        response.push(item);
      }
      res.send(response);
    } else {
      res.send("Something went wrong... Nothing was returned!!");
    }
  } catch (err) {
    console.error(err);
    res.send(err);
  }
});

// GET AVAILABLE COLLECTORS DETAILS FROM LOV
app.post("/api/get-available-collectors", async (req, res) => {
  const { username } = req.body;
  try {
    const db = await oracledb.getConnection({
      user: DB_USER,
      password: DB_PASSWORD,
      connectString: DB_CONNECTION_STRING,
      timeout: DB_CONNECTION_TIMEOUT,
    });

    const response = [];
    const execute = util.promisify(db.execute).bind(db);

    const data = await execute(
      ` 
      SELECT 
        user_name, 
        CASE 
            WHEN zone_code IS NOT NULL  
            THEN zone_code || ' - ' || zone_name 
            ELSE zone_name 
        END AS zone_name, 
        CASE 
            WHEN collector_code IS NOT NULL 
            THEN collector_code || ' - ' || collector_type 
            ELSE collector_type 
        END AS collector_group, 
        collector_min_days, 
        collector_max_days,
        exp_level || ' - ' || get_expDesc(exp_level) as exp_level,
        globaluser, 
        ratio, 
        fullname,
        flag
        FROM 
        VW_COLLECTOR_DETAILS 
        where flag = 'A' and user_name = :username
        ORDER BY 
        user_name DESC
  `,
      { username }
    );

    if (data) {
      for (let i = 0; i < data.rows.length; i++) {
        const item = {};
        for (let x = 0; x < data.metaData.length; x++) {
          item[data.metaData[x].name.toLowerCase()] = data.rows[i][x];
        }
        response.push(item);
      }
      res.send(response);
    } else {
      res.send("Something went wrong... Nothing was returned!!");
    }
  } catch (err) {
    console.error(err);
    res.send(err);
  }
});

// GET COLLECTOR DETAILS
app.get("/api/get-enquiry-on-collector-details", async (req, res) => {
  // const { username, zone_name } = req.body;
  try {
    const db = await oracledb.getConnection({
      user: DB_USER,
      password: DB_PASSWORD,
      connectString: DB_CONNECTION_STRING,
      timeout: DB_CONNECTION_TIMEOUT,
    });

    const response = [];
    const execute = util.promisify(db.execute).bind(db);

    const data = await execute(
      ` 
      SELECT 
      (user_name || ' - ' || fullname) as label, user_name  as value
      
  FROM 
      VW_COLLECTOR_DETAILS 
  ORDER BY 
      user_name DESC
  `
    );

    if (data) {
      for (let i = 0; i < data.rows.length; i++) {
        const item = {};
        for (let x = 0; x < data.metaData.length; x++) {
          item[data.metaData[x].name.toLowerCase()] = data.rows[i][x];
        }
        response.push(item);
      }
      res.send(response);
    } else {
      res.send("Something went wrong... Nothing was returned!!");
    }
  } catch (err) {
    console.error(err);
    res.send(err);
  }
});

// GET AMEND DETAILS
app.get("/api/get-collector-amend-details", async (req, res) => {
  try {
    const db = await oracledb.getConnection({
      user: DB_USER,
      password: DB_PASSWORD,
      connectString: DB_CONNECTION_STRING,
      timeout: DB_CONNECTION_TIMEOUT,
    });

    const response = [];
    const execute = util.promisify(db.execute).bind(db);

    const data = await execute(
      ` 
      SELECT 
      user_name as value,  
      fullname as label
      FROM 
      VW_COLLECTOR_DETAILS  
      ORDER BY 
      user_name DESC
  `
    );

    if (data) {
      for (let i = 0; i < data.rows.length; i++) {
        const item = {};
        for (let x = 0; x < data.metaData.length; x++) {
          item[data.metaData[x].name.toLowerCase()] = data.rows[i][x];
        }
        response.push(item);
      }
      res.send(response);
    } else {
      res.send("Something went wrong... Nothing was returned!!");
    }
  } catch (err) {
    console.error(err);
    res.send(err);
  }
});

// GET EXPERIENCE LEVEL
app.get("/api/get-collector-experience-level", async (req, res) => {
  try {
    const db = await oracledb.getConnection({
      user: DB_USER,
      password: DB_PASSWORD,
      connectString: DB_CONNECTION_STRING,
      timeout: DB_CONNECTION_TIMEOUT,
    });

    const response = [];
    const execute = util.promisify(db.execute).bind(db);

    const data = await execute(
      `SELECT ACTUAL_CODE as value,ACTUAL_CODE || ' - ' || DESCRIPTION as label from CODE_DESC where CODE_TYPE ='EXP'`
    );

    if (data) {
      for (let i = 0; i < data.rows.length; i++) {
        const item = {};
        for (let x = 0; x < data.metaData.length; x++) {
          item[data.metaData[x].name.toLowerCase()] = data.rows[i][x];
        }
        response.push(item);
      }
      res.send(response);
    } else {
      res.send("Something went wrong... Nothing was returned!!");
    }
  } catch (err) {
    console.error(err);
    res.send(err);
  }
});

/////////////////////////////////////////////////
// COLLECTOR GROUP CREATION
// COLLECTOR TABLE STOFF
app.post("/api/get-collector-group-setup", async (req, res) => {
  try {
    const db = await oracledb.getConnection({
      user: DB_USER,
      password: DB_PASSWORD,
      connectString: DB_CONNECTION_STRING,
      timeout: DB_CONNECTION_TIMEOUT,
    });

    const response = [];
    const execute = util.promisify(db.execute).bind(db);

    // Retrieve parameters from the request body
    const { collector_code, collector_min_days, collector_max_days } = req.body;

    let query = `SELECT * FROM VW_COLLECTOR_SETUP WHERE 1 = 1 order by collector_min_days asc`;

    const binds = {};

    if (collector_code) {
      query += ` AND collector_code = :collectorCode`;
      binds.collectorCode = collector_code;
    }

    if (collector_min_days) {
      query += ` AND collector_min_days >= :collectorMinDays`;
      binds.collectorMinDays = collector_min_days;
    }

    if (collector_max_days) {
      query += ` AND collector_min_days <= :collectorMaxDays`;
      binds.collectorMaxDays = collector_max_days;
    }

    const data = await execute(query, binds);

    if (data) {
      for (let i = 0; i < data.rows.length; i++) {
        const item = {};
        for (let x = 0; x < data.metaData.length; x++) {
          item[data.metaData[x].name.toLowerCase()] = data.rows[i][x];
        }
        response.push(item);
      }
      res.send(response);
    } else {
      res.send("Something went wrong... Nothing was returned!!");
    }
  } catch (err) {
    console.error(err);
    res.send(err);
  }
});

// COLLECTOR LOV
app.get("/api/get-collector-group-lov", async (req, res) => {
  try {
    const db = await oracledb.getConnection({
      user: DB_USER,
      password: DB_PASSWORD,
      connectString: DB_CONNECTION_STRING,
      timeout: DB_CONNECTION_TIMEOUT,
    });

    const response = [];
    const execute = util.promisify(db.execute).bind(db);

    const data = await execute(`
    select a.actual_code as value, a.actual_code || ' - ' ||a.description as label from  code_desc a  
    where code_type='TCL' 
    `);

    if (data) {
      for (let i = 0; i < data.rows.length; i++) {
        const item = {};
        for (let x = 0; x < data.metaData.length; x++) {
          item[data.metaData[x].name.toLowerCase()] = data.rows[i][x];
        }
        response.push(item);
      }
      res.send(response);
    } else {
      res.send("Something went wrong... Nothing was returned!!");
    }
  } catch (err) {
    console.error(err);
    res.send(err);
  }
});

// // COLLECTOR GROUP AMENDDMENT PRC - MAYAA
// app.post("/api/collector-grp-amendment-prc", async (req, res) => {
//   const {
//     collector_code_v,
//     collector_desc_v,
//     collector_min_days_v,
//     collector_max_days_v,
//     posting_branch_v,
//     posted_by_v,
//     global_username_v,
//     response_v,
//   } = req.body;

//   try {
//     const connection = await oracledb.getConnection({
//       user: DB_USER,
//       password: DB_PASSWORD,
//       connectString: DB_CONNECTION_STRING,
//     });

//     await connection.execute(
//       `BEGIN prc_collector_group_amendment(
//         :collector_code_v,
//         :collector_desc_v,
//         :collector_min_days_v,
//         :collector_max_days_v,
//         :posting_branch_v,
//         :posted_by_v,
//         :machine_ip_v,
//         :hostname_v,
//         :terminal_v,
//         :global_username_v,
//         :prog_v,
//         :response_v
//         ); END;`,
//       {
//         collector_code_v,
//         collector_desc_v,
//         collector_min_days_v,
//         collector_max_days_v,
//         posting_branch_v,
//         posted_by_v,
//         machine_ip_v: {
//           val: ip.address(),
//           dir: oracledb.BIND_IN,
//           maxSize: 50,
//         },
//         hostname_v: {
//           val: os.hostname(),
//           dir: oracledb.BIND_IN,
//           maxSize: 50,
//         },
//         terminal_v: {
//           val: os.hostname(),
//           dir: oracledb.BIND_IN,
//           maxSize: 50,
//         },
//         global_username_v,
//         prog_v: {
//           val: "React",
//           dir: oracledb.BIND_IN,
//           maxSize: 10,
//         },
//         response_v: {
//           val: response_v,
//           dir: oracledb.BIND_OUT,
//           maxSize: 200,
//         },
//       },

//       function (err, result) {
//         if (err) {
//           console.log(err);
//           response = {
//             responseCode: "999",
//             responseMessage: "Internal Server Error",
//           };
//           res.send(response);
//         }
//         if (result) {
//           // return res.send(result);
//           if (result.outBinds.response_v?.includes("07526")) {
//             const message = result.outBinds.response_v;
//             response = {
//               responseCode: "000",
//               responseMessage: message,
//             };
//           } else {
//             response = {
//               responseCode: "998",
//               responseMessage: result.outBinds.response_v,
//             };
//           }
//           res.send(response);
//         }
//       }
//     );
//   } catch (error) {
//     console.error("Error:", error);
//     res.send({
//       // error: error.toString();
//       responseCode: `999`,
//       responseMessage: "Internal server error",
//     });
//   }
// });

// COLLECTOR GROUP REMOVAL
app.post("/api/collector-grp-deletion-prc", async (req, res) => {
  const { collector_code_v, global_username_v, posting_branch_v } = req.body;

  try {
    const connection = await oracledb.getConnection({
      user: DB_USER,
      password: DB_PASSWORD,
      connectString: DB_CONNECTION_STRING,
    });

    await connection.execute(
      `BEGIN prc_collector_group_deletion(
        :collector_code_v, 
        :global_username_v,
        :posting_branch_v,
        :machine_ip_v,
        :hostname_v,
        :prog_v,
        :response_v
        ); END;`,
      {
        collector_code_v,
        global_username_v,
        posting_branch_v,
        machine_ip_v: {
          val: ip.address(),
          dir: oracledb.BIND_IN,
          maxSize: 50,
        },
        hostname_v: {
          val: os.hostname(),
          dir: oracledb.BIND_IN,
          maxSize: 50,
        },
        prog_v: {
          val: "React",
          dir: oracledb.BIND_IN,
          maxSize: 10,
        },
        response_v: {
          dir: oracledb.BIND_OUT,
          maxSize: 200,
        },
      },

      function (err, result) {
        if (err) {
          console.log(err);
          response = {
            responseCode: "999",
            responseMessage: "Internal Server Error",
          };
          res.send(response);
        }
        if (result) {
          const message = result.outBinds.response_v;
          if (message.includes("success")) {
            response = {
              responseCode: "000",
              responseMessage: message,
            };
          } else {
            response = {
              responseCode: "998",
              responseMessage: message,
            };
          }
          res.send(response);
        }
      }
    );
  } catch (error) {
    console.error("Error:", error);
    res.send({
      responseCode: "999",
      responseMessage: "Internal server error",
    });
  }
});

// COLLECTOR GROUP OK PROCEDURE
app.post("/api/collector-group-creation-ok", async (req, res) => {
  const {
    collector_desc_v,
    collector_min_days_v,
    collector_max_days_v,
    posting_branch_v,
    posted_by_v,
    global_username_v,
    response_v,
  } = req.body;

  try {
    const connection = await oracledb.getConnection({
      user: DB_USER,
      password: DB_PASSWORD,
      connectString: DB_CONNECTION_STRING,
    });

    await connection.execute(
      `BEGIN prc_collector_group_creation(
        :collector_desc_v, 
        :collector_min_days_v,
        :collector_max_days_v,
        :posting_branch_v, 
        :posted_by_v,   
        :machine_ip_v,
        :hostname_v,
        :terminal_v,
        :global_username_v,
        :prog_v,
        :response_v
        ); END;`,
      {
        collector_desc_v,
        collector_min_days_v,
        collector_max_days_v,
        posting_branch_v,
        posted_by_v,
        machine_ip_v: {
          val: ip.address(),
          dir: oracledb.BIND_IN,
          maxSize: 50,
        },
        hostname_v: {
          val: os.hostname(),
          dir: oracledb.BIND_IN,
          maxSize: 50,
        },
        terminal_v: {
          val: os.hostname(),
          dir: oracledb.BIND_IN,
          maxSize: 50,
        },
        global_username_v,
        prog_v: {
          val: "React",
          dir: oracledb.BIND_OUT,
          maxSize: 10,
        },
        response_v: {
          val: response_v,
          dir: oracledb.BIND_OUT,
          maxSize: 500,
        },
      },

      function (err, result) {
        if (err) {
          console.log(err);
          response = {
            responseCode: "999",
            responseMessage: "Internal Server Error",
          };
          res.send(response);
        }
        if (result) {
          // return res.send(result);
          if (result.outBinds.response_v?.includes("07526")) {
            const message = result.outBinds.response_v;
            response = {
              responseCode: "000",
              responseMessage: message,
            };
          } else {
            response = {
              responseCode: "998",
              responseMessage: result.outBinds.response_v,
            };
          }
          res.send(response);
        }
      }
    );
  } catch (error) {
    console.error("Error:", error);
    res.send({
      // error: error.toString();
      responseCode: `999`,
      responseMessage: "Internal server error",
    });
  }
});

// COLLCETOR GROUP CREAITON AUTHORIZE APPROVAL
app.post("/api/collector-group-creation-authorize", async (req, res) => {
  const {
    COLLECTOR_CODE_v,
    POSTING_BRANCH_v,
    posted_by_v,
    global_username_v,
    response_v,
  } = req.body;

  try {
    const connection = await oracledb.getConnection({
      user: DB_USER,
      password: DB_PASSWORD,
      connectString: DB_CONNECTION_STRING,
    });

    await connection.execute(
      `BEGIN prc_collector_group_creation(
        :COLLECTOR_CODE_v, 
        :POSTING_BRANCH_v,
        :posted_by_v, 
        :global_username_v,
        :hostname_global_v,
        :machine_ip_v,
        :prog_v,
        :response_v
        ); END;`,
      {
        COLLECTOR_CODE_v,
        posting_branch_v,
        posted_by_v,
        global_username_v,
        hostname_global_v: {
          val: os.hostname(),
          dir: oracledb.BIND_IN,
          maxSize: 50,
        },
        machine_ip_v: {
          val: ip.address(),
          dir: oracledb.BIND_IN,
          maxSize: 50,
        },
        prog_v: {
          val: "React",
          dir: oracledb.BIND_OUT,
          maxSize: 10,
        },
        response_v: {
          val: response_v,
          dir: oracledb.BIND_OUT,
          maxSize: 500,
        },
      },

      function (err, result) {
        if (err) {
          console.log(err);
          response = {
            responseCode: "999",
            responseMessage: "Internal Server Error",
          };
          res.send(response);
        }
        if (result) {
          // return res.send(result);
          if (result.outBinds.response_v?.includes("07526")) {
            const message = result.outBinds.response_v;
            response = {
              responseCode: "000",
              responseMessage: message,
            };
          } else {
            response = {
              responseCode: "998",
              responseMessage: result.outBinds.response_v,
            };
          }
          res.send(response);
        }
      }
    );
  } catch (error) {
    console.error("Error:", error);
    res.send({
      // error: error.toString();
      responseCode: `999`,
      responseMessage: "Internal server error",
    });
  }
});

// GET COLLECTOR GROUP DETAILS
app.post(
  "/api/get-selected-approval-collector-group-details",
  async (req, res) => {
    const { collector_code } = req.body;
    try {
      const db = await oracledb.getConnection({
        user: DB_USER,
        password: DB_PASSWORD,
        connectString: DB_CONNECTION_STRING,
        timeout: DB_CONNECTION_TIMEOUT,
      });

      const response = [];
      const execute = util.promisify(db.execute).bind(db);

      const data = await execute(
        `
   select * from VW_COLLECTOR_SETUP WHERE COLLECTOR_CODE= :collector_code`,
        {
          collector_code,
        }
      );

      if (data) {
        for (let i = 0; i < data.rows.length; i++) {
          const item = {};
          for (let x = 0; x < data.metaData.length; x++) {
            item[data.metaData[x].name.toLowerCase()] = data.rows[i][x];
          }
          response.push(item);
        }
        res.send(response);
      } else {
        res.send("Something went wrong... Nothing was returned!!");
      }
    } catch (err) {
      console.error(err);
      res.send(err);
    }
  }
);

// COLLECTOR GROUP AMENDDMENT PRC - MAYAA
app.post("/api/collector-grp-amendment-prc", async (req, res) => {
  const {
    collector_code_v,
    collector_desc_v,
    collector_min_days_v,
    collector_max_days_v,
    posting_branch_v,
    posted_by_v,
    global_username_v,
    response_v,
  } = req.body;

  try {
    const connection = await oracledb.getConnection({
      user: DB_USER,
      password: DB_PASSWORD,
      connectString: DB_CONNECTION_STRING,
    });

    await connection.execute(
      `BEGIN prc_collector_group_amendment(
        :collector_code_v, 
        :collector_desc_v, 
        :collector_min_days_v,
        :collector_max_days_v,
        :posting_branch_v, 
        :posted_by_v,   
        :machine_ip_v,
        :hostname_v,
        :terminal_v,
        :global_username_v,
        :prog_v,
        :response_v
        ); END;`,
      {
        collector_code_v,
        collector_desc_v,
        collector_min_days_v,
        collector_max_days_v,
        posting_branch_v,
        posted_by_v,
        machine_ip_v: {
          val: ip.address(),
          dir: oracledb.BIND_IN,
          maxSize: 50,
        },
        hostname_v: {
          val: os.hostname(),
          dir: oracledb.BIND_IN,
          maxSize: 50,
        },
        terminal_v: {
          val: os.hostname(),
          dir: oracledb.BIND_IN,
          maxSize: 50,
        },
        global_username_v,
        prog_v: {
          val: "React",
          dir: oracledb.BIND_IN,
          maxSize: 10,
        },
        response_v: {
          val: response_v,
          dir: oracledb.BIND_OUT,
          maxSize: 200,
        },
      },

      function (err, result) {
        if (err) {
          console.log(err);
          response = {
            responseCode: "999",
            responseMessage: "Internal Server Error",
          };
          res.send(response);
        }
        if (result) {
          // return res.send(result);
          if (result.outBinds.response_v?.includes("07526")) {
            const message = result.outBinds.response_v;
            response = {
              responseCode: "000",
              responseMessage: message,
            };
          } else {
            response = {
              responseCode: "998",
              responseMessage: result.outBinds.response_v,
            };
          }
          res.send(response);
        }
      }
    );
  } catch (error) {
    console.error("Error:", error);
    res.send({
      // error: error.toString();
      responseCode: `999`,
      responseMessage: "Internal server error",
    });
  }
});

// COLLECTOR GROUP REMOVAL
app.post("/api/collector-grp-deletion-prc", async (req, res) => {
  const { collector_code_v, global_username_v, posting_branch_v } = req.body;

  try {
    const connection = await oracledb.getConnection({
      user: DB_USER,
      password: DB_PASSWORD,
      connectString: DB_CONNECTION_STRING,
    });

    await connection.execute(
      `BEGIN prc_collector_group_deletion(
        :collector_code_v, 
        :global_username_v,
        :posting_branch_v,
        :machine_ip_v,
        :hostname_v,
        :prog_v,
        :response_v
        ); END;`,
      {
        collector_code_v,
        global_username_v,
        posting_branch_v,
        machine_ip_v: {
          val: ip.address(),
          dir: oracledb.BIND_IN,
          maxSize: 50,
        },
        hostname_v: {
          val: os.hostname(),
          dir: oracledb.BIND_IN,
          maxSize: 50,
        },
        prog_v: {
          val: "React",
          dir: oracledb.BIND_IN,
          maxSize: 10,
        },
        response_v: {
          dir: oracledb.BIND_OUT,
          maxSize: 200,
        },
      },

      function (err, result) {
        if (err) {
          console.log(err);
          response = {
            responseCode: "999",
            responseMessage: "Internal Server Error",
          };
          res.send(response);
        }
        if (result) {
          const message = result.outBinds.response_v;
          if (message.includes("success")) {
            response = {
              responseCode: "000",
              responseMessage: message,
            };
          } else {
            response = {
              responseCode: "998",
              responseMessage: message,
            };
          }
          res.send(response);
        }
      }
    );
  } catch (error) {
    console.error("Error:", error);
    res.send({
      responseCode: "999",
      responseMessage: "Internal server error",
    });
  }
});

// TORSUU
app.post("/api/prc-amend-collector-group", async (req, res) => {
  const {
    collector_code_v,
    collector_min_days_v,
    collector_max_days_v,
    collector_type_v,
    username_v,
    machine_ip_v,
    hostname_v,
    posted_by_v,
    global_bra_v,
    frmcode,
    prog_v,
    response_v,
  } = req.body;

  try {
    const connection = await oracledb.getConnection({
      user: DB_USER,
      password: DB_PASSWORD,
      connectString: DB_CONNECTION_STRING,
    });
    await connection.execute(
      `BEGIN prc_grp_collector_amendment(
        :collector_code_v,
        :collector_min_days_v,
        :collector_max_days_v,
        :collector_type_v,
        :username_v,
        :machine_ip_v,
        :hostname_v,
        :posted_by_v,
        :global_bra_v,
        :frmcode,
        :prog_v,
        :response_v
      ); END;`,
      {
        collector_code_v: {
          val: collector_code_v,
          dir: oracledb.BIND_IN,
          maxSize: 20,
        },
        collector_min_days_v: {
          val: collector_min_days_v,
          dir: oracledb.BIND_IN,
          maxSize: 20,
          type: oracledb.NUMBER,
        },
        collector_max_days_v: {
          val: collector_max_days_v,
          dir: oracledb.BIND_IN,
          maxSize: 20,
          type: oracledb.NUMBER,
        },
        collector_type_v: {
          val: collector_type_v,
          dir: oracledb.BIND_IN,
          maxSize: 20,
        },
        username_v: {
          val: username_v,
          dir: oracledb.BIND_IN,
          maxSize: 20,
        },
        machine_ip_v: {
          val: ip.address(),
          dir: oracledb.BIND_IN,
          maxSize: 20,
        },
        hostname_v: {
          val: os.hostname(),
          dir: oracledb.BIND_IN,
          maxSize: 20,
        },
        posted_by_v: {
          val: posted_by_v,
          dir: oracledb.BIND_IN,
          maxSize: 20,
        },
        global_bra_v: {
          val: global_bra_v,
          dir: oracledb.BIND_IN,
          maxSize: 20,
        },
        frmcode: {
          val: frmcode,
          dir: oracledb.BIND_IN,
          maxSize: 20,
        },

        prog_v: {
          val: "REACT",
          dir: oracledb.BIND_IN,
          maxSize: 20,
        },

        response_v: {
          val: response_v,
          dir: oracledb.BIND_OUT,
          maxSize: 200,
        },
      },

      function (err, result) {
        if (err) {
          console.log(err);
          response = {
            responseCode: "999",
            responseMessage: "Internal Server Error",
          };
          res.send(response);
        }
        if (result) {
          if (result.outBinds.response_v.includes("07526")) {
            const message = result.outBinds.response_v;
            response = {
              responseCode: "000",
              responseMessage: message,
            };
          } else {
            response = {
              responseCode: "998",
              responseMessage: result.outBinds.response_v,
            };
          }
          res.send(response);
        }
      }
    );
  } catch (error) {
    console.error("Error:", error);
    res.send({
      // error: error.toString();
      responseCode: `999`,
      responseMessage: "Internal server error",
    });
  }
});

///////////////////////////////////////////////
// COLLECTOR REMOVAL
app.get("/api/get-collector-removal-data", async (req, res) => {
  try {
    const db = await oracledb.getConnection({
      user: DB_USER,
      password: DB_PASSWORD,
      connectString: DB_CONNECTION_STRING,
      timeout: DB_CONNECTION_TIMEOUT,
    });

    const response = [];
    const execute = util.promisify(db.execute).bind(db);

    const data = await execute(`
    SELECT * FROM VW_COLLECTOR_DETAILS WHERE flag in('A','Y') ORDER BY user_name desc
    `);

    if (data) {
      for (let i = 0; i < data.rows.length; i++) {
        const item = {};
        for (let x = 0; x < data.metaData.length; x++) {
          item[data.metaData[x].name.toLowerCase()] = data.rows[i][x];
        }
        response.push(item);
      }
      res.send(response);
    } else {
      res.send("Something went wrong... Nothing was returned!!");
    }
  } catch (err) {
    console.error(err);
    res.send(err);
  }
});

// COLLECTOR REMOVAL PROCEDURE

app.post("/api/collector-removal-ok", async (req, res) => {
  const { user_name_v, zone_name_v, global_branch, clt_code_v, response_v } =
    req.body;

  try {
    const connection = await oracledb.getConnection({
      user: DB_USER,
      password: DB_PASSWORD,
      connectString: DB_CONNECTION_STRING,
    });

    await connection.execute(
      `BEGIN prc_remove_collector(
        :user_name_v, 
        :frm, 
        :zone_name_v,
        :global_branch, 
        :clt_code_v, 
        :hostname_v,
        :machine_ip_v, 
        :prog_v,
        :response_v
        ); END;`,
      {
        user_name_v,
        frm: {
          val: "CCMP",
          dir: oracledb.BIND_IN,
          maxSize: 10,
        },
        zone_name_v,
        global_branch,
        clt_code_v,
        hostname_v: {
          val: os.hostname(),
          dir: oracledb.BIND_IN,
          maxSize: 50,
        },
        machine_ip_v: {
          val: ip.address(),
          dir: oracledb.BIND_IN,
          maxSize: 50,
        },
        prog_v: {
          val: "React",
          dir: oracledb.BIND_OUT,
          maxSize: 10,
        },
        response_v: {
          val: response_v,
          dir: oracledb.BIND_OUT,
          maxSize: 500,
        },
      },

      function (err, result) {
        if (err) {
          console.log(err);
          response = {
            responseCode: "999",
            responseMessage: "Internal Server Error",
          };
          res.send(response);
        }
        if (result) {
          // return res.send(result);
          if (result.outBinds.response_v?.includes("07526")) {
            const message = result.outBinds.response_v;
            response = {
              responseCode: "000",
              responseMessage: message,
            };
          } else {
            response = {
              responseCode: "998",
              responseMessage: result.outBinds.response_v,
            };
          }
          res.send(response);
        }
      }
    );
  } catch (error) {
    console.error("Error:", error);
    res.send({
      // error: error.toString();
      responseCode: `999`,
      responseMessage: "Internal server error",
    });
  }
});

// GET BRANCHES TO BE REMOVED
app.post("/api/collector-removal-branches", async (req, res) => {
  const { username } = req.body;
  try {
    const db = await oracledb.getConnection({
      user: DB_USER,
      password: DB_PASSWORD,
      connectString: DB_CONNECTION_STRING,
      timeout: DB_CONNECTION_TIMEOUT,
    });

    const response = [];
    const execute = util.promisify(db.execute).bind(db);

    const data = await execute(
      `
      SELECT BR_CODE, BR_DESCRIPTION
      FROM tb_coll_arr
      WHERE COLL_ID = :username
    `,
      { username }
    );

    if (data) {
      for (let i = 0; i < data.rows.length; i++) {
        const item = {};
        for (let x = 0; x < data.metaData.length; x++) {
          item[data.metaData[x].name.toLowerCase()] = data.rows[i][x];
        }
        response.push(item);
      }
      res.send(response);
    } else {
      res.send("Something went wrong... Nothing was returned!!");
    }
  } catch (err) {
    console.error(err);
    res.send(err);
  }
});

///////////////////////////////////////////////
// COLLECTOR ENQUIRY
app.get("/api/get-collector-enq-name-lov", async (req, res) => {
  try {
    const db = await oracledb.getConnection({
      user: DB_USER,
      password: DB_PASSWORD,
      connectString: DB_CONNECTION_STRING,
      timeout: DB_CONNECTION_TIMEOUT,
    });

    const response = [];
    const execute = util.promisify(db.execute).bind(db);

    const data = await execute(`
    select distinct  user_name as value , FULLNAME as label
    from VW_COLLECTOR_DETAILS 
    where FLAG='A' 
    `);

    if (data) {
      for (let i = 0; i < data.rows.length; i++) {
        const item = {};
        for (let x = 0; x < data.metaData.length; x++) {
          item[data.metaData[x].name.toLowerCase()] = data.rows[i][x];
        }
        response.push(item);
      }
      res.send(response);
    } else {
      res.send("Something went wrong... Nothing was returned!!");
    }
  } catch (err) {
    console.error(err);
    res.send(err);
  }
});

// ZONE NAME
app.get("/api/get-collector-enq-zone-name-lov", async (req, res) => {
  try {
    const db = await oracledb.getConnection({
      user: DB_USER,
      password: DB_PASSWORD,
      connectString: DB_CONNECTION_STRING,
      timeout: DB_CONNECTION_TIMEOUT,
    });

    const response = [];
    const execute = util.promisify(db.execute).bind(db);

    const data = await execute(`
    SELECT distinct zone_code as value, zone_name as label FROM  vw_collector_details 
    where FLAG='A'
    order by zone_code 
    `);

    if (data) {
      for (let i = 0; i < data.rows.length; i++) {
        const item = {};
        for (let x = 0; x < data.metaData.length; x++) {
          item[data.metaData[x].name.toLowerCase()] = data.rows[i][x];
        }
        response.push(item);
      }
      res.send(response);
    } else {
      res.send("Something went wrong... Nothing was returned!!");
    }
  } catch (err) {
    console.error(err);
    res.send(err);
  }
});

// BRANCHES FOR COLLECTOR ENQUIRY
app.get("/api/get-collector-enq-branches-lov", async (req, res) => {
  try {
    const db = await oracledb.getConnection({
      user: DB_USER,
      password: DB_PASSWORD,
      connectString: DB_CONNECTION_STRING,
      timeout: DB_CONNECTION_TIMEOUT,
    });

    const response = [];
    const execute = util.promisify(db.execute).bind(db);

    const data = await execute(`
    SELECT br_code as value, br_DESCRIPTION as label FROM  vw_collector_details 
    WHERE FLAG='A' order by br_code 
    `);

    if (data) {
      for (let i = 0; i < data.rows.length; i++) {
        const item = {};
        for (let x = 0; x < data.metaData.length; x++) {
          item[data.metaData[x].name.toLowerCase()] = data.rows[i][x];
        }
        response.push(item);
      }
      res.send(response);
    } else {
      res.send("Something went wrong... Nothing was returned!!");
    }
  } catch (err) {
    console.error(err);
    res.send(err);
  }
});

// COLLECTOR TYPE LOV
app.get("/api/get-collector-enq-collectorType-lov", async (req, res) => {
  try {
    const db = await oracledb.getConnection({
      user: DB_USER,
      password: DB_PASSWORD,
      connectString: DB_CONNECTION_STRING,
      timeout: DB_CONNECTION_TIMEOUT,
    });

    const response = [];
    const execute = util.promisify(db.execute).bind(db);

    const data = await execute(`
    SELECT distinct COLLECTOR_CODE as value, COLLECTOR_TYPE as label FROM  vw_collector_details WHERE 
    FLAG='A' order by COLLECTOR_CODE
    `);

    if (data) {
      for (let i = 0; i < data.rows.length; i++) {
        const item = {};
        for (let x = 0; x < data.metaData.length; x++) {
          item[data.metaData[x].name.toLowerCase()] = data.rows[i][x];
        }
        response.push(item);
      }
      res.send(response);
    } else {
      res.send("Something went wrong... Nothing was returned!!");
    }
  } catch (err) {
    console.error(err);
    res.send(err);
  }
});
//////////////////////////////////////////////////

////////////////////////////////////////////////
// COLLECTOR CREATION OK PROCEDURE
app.post("/api/collector-creation-ok", async (req, res) => {
  const {
    user_name_v,
    zone_name_v,
    globaluser_v,
    global_branch,
    clt_code_v,
    chk_v,
    machine_ip_v,
    hostname_v,
    prog_v,
    frm,
    accesses,
    products,
    POSTED_BY_V,
    EXP_LEVEL_V,
    RATIO_V,
    response_v,
  } = req.body;

  try {
    const connection = await oracledb.getConnection({
      user: DB_USER,
      password: DB_PASSWORD,
      connectString: DB_CONNECTION_STRING,
    });

    await connection.execute(
      `BEGIN prc_collector_creation(
        :user_name_v, 
        :zone_name_v,
        :globaluser_v, 
        :global_branch,
        :clt_code_v,
        :chk_v,
        :machine_ip_v, 
        :hostname_v,
        :prog_v,
        :frm,
        :accesses,
        :products,
        :terminal_v,
        :POSTED_BY_V,
        :EXP_LEVEL_V,
        :RATIO_V,
        :response_v
        ); END;`,
      {
        user_name_v: {
          val: user_name_v,
          dir: oracledb.BIND_IN,
          maxSize: 200,
        },
        zone_name_v,
        globaluser_v,
        global_branch,
        clt_code_v,
        chk_v,
        machine_ip_v,
        hostname_v,
        prog_v,
        frm,
        accesses: JSON.stringify(accesses),
        products: JSON.stringify(products),
        terminal_v: {
          val: os.hostname(),
          dir: oracledb.BIND_IN,
          maxSize: 20,
        },
        POSTED_BY_V,
        EXP_LEVEL_V,
        RATIO_V,
        response_v: {
          val: response_v,
          dir: oracledb.BIND_OUT,
          maxSize: 500,
        },
      },

      function (err, result) {
        if (err) {
          console.log(err);
          response = {
            responseCode: "999",
            responseMessage: "Internal Server Error",
          };
          res.send(response);
        }
        if (result) {
          // return res.send(result);
          if (result.outBinds.response_v?.includes("07526")) {
            const message = result.outBinds.response_v;
            response = {
              responseCode: "000",
              responseMessage: message,
            };
          } else {
            response = {
              responseCode: "998",
              responseMessage: result.outBinds.response_v,
            };
          }
          res.send(response);
        }
      }
    );
  } catch (error) {
    console.error("Error:", error);
    res.send({
      // error: error.toString();
      responseCode: `999`,
      responseMessage: "Internal server error",
    });
  }
});

app.post("/api/collector-amendment", async (req, res) => {
  const {
    user_name_v,
    zone_name_v,
    globaluser_v,
    global_branch,
    clt_code_v,
    chk_v,
    machine_ip_v,
    hostname_v,
    prog_v,
    frm,
    accesses,
    products,
    POSTED_BY_V,
    EXP_LEVEL_V,
    RATIO_V,
    response_v,
  } = req.body;

  try {
    const connection = await oracledb.getConnection({
      user: DB_USER,
      password: DB_PASSWORD,
      connectString: DB_CONNECTION_STRING,
    });

    await connection.execute(
      `BEGIN prc_collector_amendment(
        :user_name_v, 
        :zone_name_v,
        :globaluser_v, 
        :global_branch,
        :clt_code_v,
        :chk_v,
        :machine_ip_v, 
        :hostname_v,
        :prog_v,
        :frm,
        :accesses,
        :products,
        :terminal_v,
        :POSTED_BY_V,
        :EXP_LEVEL_V,
        :RATIO_V,
        :response_v
        ); END;`,
      {
        user_name_v: {
          val: user_name_v,
          dir: oracledb.BIND_IN,
          maxSize: 200,
        },
        zone_name_v: {
          val: zone_name_v,
          dir: oracledb.BIND_IN,
          maxSize: 200,
        },
        globaluser_v: {
          val: globaluser_v,
          dir: oracledb.BIND_IN,
          maxSize: 1,
        },
        global_branch: {
          val: global_branch,
          dir: oracledb.BIND_IN,
          maxSize: 200,
        },
        clt_code_v: {
          val: clt_code_v,
          dir: oracledb.BIND_IN,
          maxSize: 40,
        },
        chk_v: {
          val: chk_v,
          dir: oracledb.BIND_IN,
          maxSize: 1,
        },
        machine_ip_v: {
          val: machine_ip_v,
          dir: oracledb.BIND_IN,
          maxSize: 50,
        },
        hostname_v: {
          val: hostname_v,
          dir: oracledb.BIND_IN,
          maxSize: 50,
        },
        prog_v: {
          val: prog_v,
          dir: oracledb.BIND_IN,
          maxSize: 50,
        },
        frm: {
          val: frm,
          dir: oracledb.BIND_IN,
          maxSize: 50,
        },
        accesses: {
          val: JSON.stringify(accesses),
          dir: oracledb.BIND_IN,
        },
        products: {
          val: JSON.stringify(products),
          dir: oracledb.BIND_IN,
        },
        terminal_v: {
          val: os.hostname(),
          dir: oracledb.BIND_IN,
          maxSize: 20,
        },
        POSTED_BY_V: {
          val: POSTED_BY_V,
          dir: oracledb.BIND_IN,
          maxSize: 50,
        },
        EXP_LEVEL_V: {
          val: EXP_LEVEL_V,
          dir: oracledb.BIND_IN,
          maxSize: 10,
        },
        RATIO_V: {
          val: RATIO_V,
          dir: oracledb.BIND_IN,
          maxSize: 10,
        },
        response_v: {
          dir: oracledb.BIND_OUT,
          maxSize: 500,
        },
      },
      function (err, result) {
        if (err) {
          console.error(err);
          res.send({
            responseCode: "999",
            responseMessage: "Internal Server Error",
          });
        } else {
          const message = result.outBinds.response_v;
          if (message?.includes("07526")) {
            res.send({
              responseCode: "000",
              responseMessage: message,
            });
          } else {
            res.send({
              responseCode: "998",
              responseMessage: message,
            });
          }
        }
      }
    );

    await connection.close();
  } catch (error) {
    console.error("Error:", error);
    res.send({
      responseCode: "999",
      responseMessage: "Internal server error",
    });
  }
});

//////////////////////////////////////////////////

// COLLECTOR CREATION APPROVAL SCREEN
// GET COLLECTOR APPROVAL DETAILS
app.post("/api/get-customer-approval-details", async (req, res) => {
  const { username } = req.body;
  try {
    const db = await oracledb.getConnection({
      user: DB_USER,
      password: DB_PASSWORD,
      connectString: DB_CONNECTION_STRING,
      timeout: DB_CONNECTION_TIMEOUT,
    });

    const response = [];
    const execute = util.promisify(db.execute).bind(db);

    const data = await execute(
      `
      select * from VW_COLLECTOR_DETAILS where user_name = :username
    `,
      {
        username,
      }
    );

    if (data) {
      for (let i = 0; i < data.rows.length; i++) {
        const item = {};
        for (let x = 0; x < data.metaData.length; x++) {
          item[data.metaData[x].name.toLowerCase()] = data.rows[i][x];
        }
        response.push(item);
      }
      res.send(response);
    } else {
      res.send("Something went wrong... Nothing was returned!!");
    }
  } catch (err) {
    console.error(err);
    res.send(err);
  }
});

// BRANCHES OF COLLECTOR CREATED
app.post("/api/get-customer-approval-branches", async (req, res) => {
  const { username } = req.body;
  try {
    const db = await oracledb.getConnection({
      user: DB_USER,
      password: DB_PASSWORD,
      connectString: DB_CONNECTION_STRING,
      timeout: DB_CONNECTION_TIMEOUT,
    });

    const response = [];
    const execute = util.promisify(db.execute).bind(db);

    const data = await execute(
      `
      select br_code, br_description from tb_coll_arr where coll_id = :username
    `,
      {
        username,
      }
    );

    if (data) {
      for (let i = 0; i < data.rows.length; i++) {
        const item = {};
        for (let x = 0; x < data.metaData.length; x++) {
          item[data.metaData[x].name.toLowerCase()] = data.rows[i][x];
        }
        response.push(item);
      }
      res.send(response);
    } else {
      res.send("Something went wrong... Nothing was returned!!");
    }
  } catch (err) {
    console.error(err);
    res.send(err);
  }
});

// PRODUCTS OF COLLECTOR CREATED
app.post("/api/get-customer-approval-products", async (req, res) => {
  const { username } = req.body;
  try {
    const db = await oracledb.getConnection({
      user: DB_USER,
      password: DB_PASSWORD,
      connectString: DB_CONNECTION_STRING,
      timeout: DB_CONNECTION_TIMEOUT,
    });

    const response = [];
    const execute = util.promisify(db.execute).bind(db);

    const data = await execute(
      `
      select * from tb_coll_product where coll_id = :username
    `,
      {
        username,
      }
    );

    if (data) {
      for (let i = 0; i < data.rows.length; i++) {
        const item = {};
        for (let x = 0; x < data.metaData.length; x++) {
          item[data.metaData[x].name.toLowerCase()] = data.rows[i][x];
        }
        response.push(item);
      }
      res.send(response);
    } else {
      res.send("Something went wrong... Nothing was returned!!");
    }
  } catch (err) {
    console.error(err);
    res.send(err);
  }
});

// AUTHORIZE OR OK COLLECTOR CREATON
app.post("/api/collector-creation-authorize", async (req, res) => {
  const {
    USER_NAME_v,
    COLLECTOR_CODE_v,
    POSTING_BRANCH_v,
    posted_by_v,
    ZONE_NAME_v,
    global_username_v,
    response_v,
  } = req.body;

  try {
    const connection = await oracledb.getConnection({
      user: DB_USER,
      password: DB_PASSWORD,
      connectString: DB_CONNECTION_STRING,
    });

    await connection.execute(
      `BEGIN prc_collector_auth(
        :LSTREASON_v,
        :DSREASON_v,
        :USER_NAME_v,
        :COLLECTOR_CODE_v,
        :posting_terminal_v,
        :POSTING_IP_v,
        :POSTING_BRANCH_v,
        :posted_by_v,
        :frmcode_v,
        :ZONE_NAME_v,
        :global_username_v,
        :hostname_global_v,
        :machine_ip_v,
        :prog_v,
        :response_v 
        ); END;`,
      {
        LSTREASON_v: {
          val: "",
          dir: oracledb.BIND_IN,
          maxSize: 50,
        },
        DSREASON_v: {
          val: "",
          dir: oracledb.BIND_IN,
          maxSize: 50,
        },
        USER_NAME_v,
        COLLECTOR_CODE_v,
        posting_terminal_v: {
          val: os.hostname(),
          dir: oracledb.BIND_IN,
          maxSize: 50,
        },
        POSTING_IP_v: {
          val: ip.address(),
          dir: oracledb.BIND_IN,
          maxSize: 50,
        },
        POSTING_BRANCH_v,
        posted_by_v,
        frmcode_v: {
          val: "CCAP",
          dir: oracledb.BIND_IN,
          maxSize: 50,
        },
        ZONE_NAME_v,
        global_username_v,
        hostname_global_v: {
          val: os.hostname(),
          dir: oracledb.BIND_IN,
          maxSize: 50,
        },
        machine_ip_v: {
          val: ip.address(),
          dir: oracledb.BIND_IN,
          maxSize: 50,
        },
        prog_v: {
          val: "React",
          dir: oracledb.BIND_OUT,
          maxSize: 10,
        },
        response_v: {
          val: response_v,
          dir: oracledb.BIND_OUT,
          maxSize: 500,
        },
      },

      function (err, result) {
        if (err) {
          console.log(err);
          response = {
            responseCode: "999",
            responseMessage: "Internal Server Error",
          };
          res.send(response);
        }
        if (result) {
          // return res.send(result);
          if (result.outBinds.response_v?.includes("07526")) {
            const message = result.outBinds.response_v;
            response = {
              responseCode: "000",
              responseMessage: message,
            };
          } else {
            response = {
              responseCode: "998",
              responseMessage: result.outBinds.response_v,
            };
          }
          res.send(response);
        }
      }
    );
  } catch (error) {
    console.error("Error:", error);
    res.send({
      // error: error.toString();
      responseCode: `999`,
      responseMessage: "Internal server error",
    });
  }
});

// REJECT OR CANCEL COLLECTOR CREATION
app.post("/api/collector-creation-reject-and-cancel", async (req, res) => {
  const {
    APP_REJ_v,
    app_flag_v,
    LSTREASON_V,
    DSREASON_v,
    USER_NAME_v,
    COLLECTOR_CODE_v,
    POSTING_BRANCH_v,
    posted_by_v,
    ZONE_NAME_v,
    global_username_v,
    response_v,
  } = req.body;

  try {
    const connection = await oracledb.getConnection({
      user: DB_USER,
      password: DB_PASSWORD,
      connectString: DB_CONNECTION_STRING,
    });

    await connection.execute(
      `BEGIN prc_collector_rej_cncl(
        :APP_REJ_v,
        :app_flag_v,
        :LSTREASON_v,
        :DSREASON_v,
        :USER_NAME_v,
        :COLLECTOR_CODE_v,
        :posting_terminal_v,
        :POSTING_IP_v,
        :POSTING_BRANCH_v,
        :posted_by_v,
        :frmcode_v,
        :ZONE_NAME_v,
        :global_username_v,
        :hostname_global_v,
        :machine_ip_v,
        :prog_v,
        :response_v 
        ); END;`,
      {
        APP_REJ_v: {
          val: APP_REJ_v,
          dir: oracledb.BIND_INOUT,
          maxSize: 50,
        },
        app_flag_v,
        LSTREASON_v: {
          val: LSTREASON_V,
          dir: oracledb.BIND_IN,
          maxSize: 50,
        },
        DSREASON_v: {
          val: DSREASON_v,
          dir: oracledb.BIND_IN,
          maxSize: 50,
        },
        USER_NAME_v,
        COLLECTOR_CODE_v,
        posting_terminal_v: {
          val: os.hostname(),
          dir: oracledb.BIND_IN,
          maxSize: 50,
        },
        POSTING_IP_v: {
          val: ip.address(),
          dir: oracledb.BIND_IN,
          maxSize: 50,
        },
        POSTING_BRANCH_v,
        posted_by_v,
        frmcode_v: {
          val: "CCAP",
          dir: oracledb.BIND_IN,
          maxSize: 50,
        },
        ZONE_NAME_v,
        global_username_v,
        hostname_global_v: {
          val: os.hostname(),
          dir: oracledb.BIND_IN,
          maxSize: 50,
        },
        machine_ip_v: {
          val: ip.address(),
          dir: oracledb.BIND_IN,
          maxSize: 50,
        },
        prog_v: {
          val: "React",
          dir: oracledb.BIND_OUT,
          maxSize: 10,
        },
        response_v: {
          val: response_v,
          dir: oracledb.BIND_OUT,
          maxSize: 500,
        },
      },

      function (err, result) {
        if (err) {
          console.log(err);
          response = {
            responseCode: "999",
            responseMessage: "Internal Server Error",
          };
          res.send(response);
        }
        if (result) {
          // return res.send(result);
          if (result.outBinds.response_v?.includes("07526")) {
            const message = result.outBinds.response_v;
            response = {
              responseCode: "000",
              responseMessage: message,
            };
          } else {
            response = {
              responseCode: "998",
              responseMessage: result.outBinds.response_v,
            };
          }
          res.send(response);
        }
      }
    );
  } catch (error) {
    console.error("Error:", error);
    res.send({
      // error: error.toString();
      responseCode: `999`,
      responseMessage: "Internal server error",
    });
  }
});

// GET REASON FOR COLLECTOR CREATION
app.get("/api/get-collector-reject-reasons", async (req, res) => {
  try {
    const db = await oracledb.getConnection({
      user: DB_USER,
      password: DB_PASSWORD,
      connectString: DB_CONNECTION_STRING,
      timeout: DB_CONNECTION_TIMEOUT,
    });

    const response = [];
    const execute = util.promisify(db.execute).bind(db);

    const data = await execute(`
    SELECT ALL TB_REJECT_REASON.REJECT_CODE as value, 
    TB_REJECT_REASON.REJECT_DESCRIPTION AS label
    FROM TB_REJECT_REASON
    WHERE
    TB_REJECT_REASON.STATUS= '1'
    ORDER BY TB_REJECT_REASON.REJECT_CODE
 `);

    if (data) {
      for (let i = 0; i < data.rows.length; i++) {
        const item = {};
        for (let x = 0; x < data.metaData.length; x++) {
          item[data.metaData[x].name.toLowerCase()] = data.rows[i][x];
        }
        response.push(item);
      }
      res.send(response);
    } else {
      res.send("Something went wrong... Nothing was returned!!");
    }
  } catch (err) {
    console.error(err);
    res.send(err);
  }
});

//////////////////////////////////////////////////

/////////////////////////////////////////////////
// ARREARS CUSTOMERS FEEDBACK
app.post("/api/get-arrears-customers-feedback", async (req, res) => {
  const { principal_account, promise_date, days_in_arrears } = req.body;
  try {
    const db = await oracledb.getConnection({
      user: DB_USER,
      password: DB_PASSWORD,
      connectString: DB_CONNECTION_STRING,
      timeout: DB_CONNECTION_TIMEOUT,
    });

    const response = [];
    const execute = util.promisify(db.execute).bind(db);

    const data = await execute(
      `
    select * from TB_COLLECTORS_LOG where FASCILITY_NO like '%'||:principal_account ||'%'AND promise_date like'%'||TO_DATE(:promise_date)||'%' and days_in_arr like '%'||:days_in_arrears||'%' order by promise_date desc
    `,
      {
        principal_account,
        promise_date,
        days_in_arrears,
      }
    );

    if (data) {
      for (let i = 0; i < data.rows.length; i++) {
        const item = {};
        for (let x = 0; x < data.metaData.length; x++) {
          item[data.metaData[x].name.toLowerCase()] = data.rows[i][x];
        }
        response.push(item);
      }
      res.send(response);
    } else {
      res.send("Something went wrong... Nothing was returned!!");
    }
  } catch (err) {
    console.error(err);
    res.send(err);
  }
});

/////////////////////////////////////////////////////
// ARREARS MANAGEMENT
app.get("/api/get-arrears-mgt-branches", async (req, res) => {
  try {
    const db = await oracledb.getConnection({
      user: DB_USER,
      password: DB_PASSWORD,
      connectString: DB_CONNECTION_STRING,
      timeout: DB_CONNECTION_TIMEOUT,
    });

    const response = [];
    const execute = util.promisify(db.execute).bind(db);

    const data = await execute(`
    SELECT BR_CODE as value, BR_DESCRIPTION as label FROM TB_BRANCH `);

    if (data) {
      for (let i = 0; i < data.rows.length; i++) {
        const item = {};
        for (let x = 0; x < data.metaData.length; x++) {
          item[data.metaData[x].name.toLowerCase()] = data.rows[i][x];
        }
        response.push(item);
      }
      res.send(response);
    } else {
      res.send("Something went wrong... Nothing was returned!!");
    }
  } catch (err) {
    console.error(err);
    res.send(err);
  }
});

// GET CUSTOMER CURRENCY OF ARREARS MANAGEMENT
app.post("/api/get-arrears-customer-curr", async (req, res) => {
  const { princ_acct } = req.body;
  try {
    const db = await oracledb.getConnection({
      user: DB_USER,
      password: DB_PASSWORD,
      connectString: DB_CONNECTION_STRING,
      timeout: DB_CONNECTION_TIMEOUT,
    });

    const response = [];
    const execute = util.promisify(db.execute).bind(db);

    const data = await execute(
      `
    SELECT GET_CURRDESC(GET_ACCTCURRCODE(:princ_acct)) as currency  FROM DUAL`,
      {
        princ_acct,
      }
    );

    if (data) {
      for (let i = 0; i < data.rows.length; i++) {
        const item = {};
        for (let x = 0; x < data.metaData.length; x++) {
          item[data.metaData[x].name.toLowerCase()] = data.rows[i][x];
        }
        response.push(item);
      }
      res.send(response);
    } else {
      res.send("Something went wrong... Nothing was returned!!");
    }
  } catch (err) {
    console.error(err);
    res.send(err);
  }
});

// GET PROD DESCRIPTION
app.post("/api/get-arrears-customer-prod", async (req, res) => {
  const { princ_acct } = req.body;
  try {
    const db = await oracledb.getConnection({
      user: DB_USER,
      password: DB_PASSWORD,
      connectString: DB_CONNECTION_STRING,
      timeout: DB_CONNECTION_TIMEOUT,
    });

    const response = [];
    const execute = util.promisify(db.execute).bind(db);

    const data = await execute(
      `
    SELECT get_productdesc(GET_ACCT_PROD(:princ_acct)) AS product_type FROM DUAL
`,
      {
        princ_acct,
      }
    );

    if (data) {
      for (let i = 0; i < data.rows.length; i++) {
        const item = {};
        for (let x = 0; x < data.metaData.length; x++) {
          item[data.metaData[x].name.toLowerCase()] = data.rows[i][x];
        }
        response.push(item);
      }
      res.send(response);
    } else {
      res.send("Something went wrong... Nothing was returned!!");
    }
  } catch (err) {
    console.error(err);
    res.send(err);
  }
});

// GET CUSTOMER RELATIONS MANAGER
app.post("/api/get-arrears-customer-rm", async (req, res) => {
  const { princ_acct } = req.body;
  try {
    const db = await oracledb.getConnection({
      user: DB_USER,
      password: DB_PASSWORD,
      connectString: DB_CONNECTION_STRING,
      timeout: DB_CONNECTION_TIMEOUT,
    });

    const response = [];
    const execute = util.promisify(db.execute).bind(db);

    const data = await execute(
      `
    SELECT GET_ARMDESC(ARM_1) as rm  FROM g_ledger  where acct_link =:princ_acct
          
`,
      {
        princ_acct,
      }
    );

    if (data) {
      for (let i = 0; i < data.rows.length; i++) {
        const item = {};
        for (let x = 0; x < data.metaData.length; x++) {
          item[data.metaData[x].name.toLowerCase()] = data.rows[i][x];
        }
        response.push(item);
      }
      res.send(response);
    } else {
      res.send("Something went wrong... Nothing was returned!!");
    }
  } catch (err) {
    console.error(err);
    res.send(err);
  }
});

// GET CUSTOMER EMAIL
app.post("/api/get-arrears-customer-email", async (req, res) => {
  const { princ_acct } = req.body;
  try {
    const db = await oracledb.getConnection({
      user: DB_USER,
      password: DB_PASSWORD,
      connectString: DB_CONNECTION_STRING,
      timeout: DB_CONNECTION_TIMEOUT,
    });

    const response = [];
    const execute = util.promisify(db.execute).bind(db);

    const data = await execute(
      `
        select 
         a.facility_no,a.principal_account,a.maintenance_fee_account repayment_acct,
         a.princ_in_arr,a.int_in_arr,c.account_descrp,b.phone1, b.phone2,(nvl(a.p_days_in_arr,0) + nvl(a.i_days_in_arr,0))
         days_in_arr,d.br_code,b.e_mail
         from vw_arreas_master a,customer b,g_ledger c, tb_branch d
          where a.principal_account = c.acct_link
          and a.branch_code = d.br_code
          and c.customer_number = b.customer_number
          and a.principal_account=:princ_acct and rownum=1
         order by days_in_arr desc
          
`,
      {
        princ_acct,
      }
    );

    if (data) {
      for (let i = 0; i < data.rows.length; i++) {
        const item = {};
        for (let x = 0; x < data.metaData.length; x++) {
          item[data.metaData[x].name.toLowerCase()] = data.rows[i][x];
        }
        response.push(item);
      }
      res.send(response);
    } else {
      res.send("Something went wrong... Nothing was returned!!");
    }
  } catch (err) {
    console.error(err);
    res.send(err);
  }
});

// GET CUSTOMER FACILITY TYPE
app.post("/api/get-arrears-customer-facility-type", async (req, res) => {
  const { facility_no } = req.body;
  try {
    const db = await oracledb.getConnection({
      user: DB_USER,
      password: DB_PASSWORD,
      connectString: DB_CONNECTION_STRING,
      timeout: DB_CONNECTION_TIMEOUT,
    });

    const response = [];
    const execute = util.promisify(db.execute).bind(db);

    const data = await execute(
      `
       SELECT DISTINCT decode(type_of_facility,'16','LOAN','O2','OVERDRAFT') as facility_no  FROM FACILITY  WHERE facility_no =:facility_no
   
`,
      {
        facility_no,
      }
    );

    if (data) {
      for (let i = 0; i < data.rows.length; i++) {
        const item = {};
        for (let x = 0; x < data.metaData.length; x++) {
          item[data.metaData[x].name.toLowerCase()] = data.rows[i][x];
        }
        response.push(item);
      }
      res.send(response);
    } else {
      res.send("Something went wrong... Nothing was returned!!");
    }
  } catch (err) {
    console.error(err);
    res.send(err);
  }
});

// GET CUSTOMER ACCOUNT TYPE ARREARS MANAGEMENT
app.post("/api/get-arrears-customer-account-class", async (req, res) => {
  const { princ_acct } = req.body;
  try {
    const db = await oracledb.getConnection({
      user: DB_USER,
      password: DB_PASSWORD,
      connectString: DB_CONNECTION_STRING,
      timeout: DB_CONNECTION_TIMEOUT,
    });

    const response = [];
    const execute = util.promisify(db.execute).bind(db);

    const data = await execute(
      `
      SELECT get_acctclassdesc(:princ_acct) as account_class FROM DUAL
`,
      {
        princ_acct,
      }
    );

    if (data) {
      for (let i = 0; i < data.rows.length; i++) {
        const item = {};
        for (let x = 0; x < data.metaData.length; x++) {
          item[data.metaData[x].name.toLowerCase()] = data.rows[i][x];
        }
        response.push(item);
      }
      res.send(response);
    } else {
      res.send("Something went wrong... Nothing was returned!!");
    }
  } catch (err) {
    console.error(err);
    res.send(err);
  }
});
// GET NON-FID ACCOUNTS
app.get("/api/get-non-fidAccounts", async (req, res) => {
  try {
    const db = await oracledb.getConnection({
      user: DB_USER,
      password: DB_PASSWORD,
      connectString: DB_CONNECTION_STRING,
      timeout: DB_CONNECTION_TIMEOUT,
    });

    const response = [];
    const execute = util.promisify(db.execute).bind(db);

    const data =
      await execute(`select fac_no, get_acctdesc(princ_act) as customer_name, arr_date as date_due, princ_bal as principal, int_bal as interest,princ_bal as prp, int_paid, days_arr as overdue_day, amt_granted
    from ARREARS_MASTER a
    where PRINC_ACT not in (select b.PRINCIPAL_ACCOUNT from vw_fidaccounts b where a.PRINC_ACT = b.PRINCIPAL_ACCOUNT)
    `);

    if (data) {
      for (let i = 0; i < data.rows.length; i++) {
        const item = {};
        for (let x = 0; x < data.metaData.length; x++) {
          item[data.metaData[x].name.toLowerCase()] = data.rows[i][x];
        }
        response.push(item);
      }
      res.send(response);
    } else {
      res.send("Something went wrong... Nothing was returned!!");
    }
  } catch (err) {
    console.error(err);
    res.send(err);
  }
});

// GET CUSTOMERS IN ARREARS
app.post("/api/get-customers-in-arrears", async (req, res) => {
  const { account_descrp, principal_account, br_code, username } = req.body;
  try {
    const db = await oracledb.getConnection({
      user: DB_USER,
      password: DB_PASSWORD,
      connectString: DB_CONNECTION_STRING,
      timeout: DB_CONNECTION_TIMEOUT,
    });

    const response0 = [];
    const response = [];
    const execute = util.promisify(db.execute).bind(db);

    const data0 = await execute(
      `
    select distinct min(collector_min_days) as min_days,max(collector_max_days) as max_days
    from vw_collector_details where user_name=:username and flag='A'`,
      { username }
    );

    if (data0) {
      for (let i = 0; i < data0.rows.length; i++) {
        const item = {};
        for (let x = 0; x < data0.metaData.length; x++) {
          item[data0.metaData[x].name.toLowerCase()] = data0.rows[i][x];
        }
        response0.push(item);
      }
      // res.send(response0);
    } else {
      res.send("Something went wrong... Nothing was returned!!");
    }

    const data = await execute(
      `Select * from VW_COLLECTION a where a.DAYS_IN_ARR BETWEEN 0 AND 999999
      AND  ( EXISTS (SELECT 1 FROM CLT_BRANCHES b ))
      and a.PRINCIPAL_ACCOUNT not in (select PRINCIPAL_ACCOUNT from VW_COLLECTORS_LOG b where b.PROMISE_DATE > '01-NOV-2024')
      AND  a.ACCOUNT_DESCRP like '%'||:account_descrp||'%'
      AND a.PRINCIPAL_ACCOUNT like'%'||:principal_account||'%'
      AND a.BRANCH_CODE like'%'||:br_code||'%'`,
      {
        account_descrp,
        principal_account,
        br_code,
      }
    );

    if (data) {
      for (let i = 0; i < data.rows.length; i++) {
        const item = {};
        for (let x = 0; x < data.metaData.length; x++) {
          item[data.metaData[x].name.toLowerCase()] = data.rows[i][x];
        }
        response.push(item);
      }
      res.send(response);
    } else {
      res.send("Something went wrong... Nothing was returned!!");
    }
  } catch (err) {
    console.error(err);
    res.send(err);
  }
});

// FAILURE REASONS LOV
app.get("/api/get-arrears-failure-reason", async (req, res) => {
  try {
    const db = await oracledb.getConnection({
      user: DB_USER,
      password: DB_PASSWORD,
      connectString: DB_CONNECTION_STRING,
      timeout: DB_CONNECTION_TIMEOUT,
    });

    const response = [];
    const execute = util.promisify(db.execute).bind(db);

    const data =
      await execute(`SELECT ACTUAL_CODE || ' - ' || DESCRIPTION as label , ACTUAL_CODE as value FROM  CODE_DESC  WHERE CODE_TYPE='CFR'
    `);

    if (data) {
      for (let i = 0; i < data.rows.length; i++) {
        const item = {};
        for (let x = 0; x < data.metaData.length; x++) {
          item[data.metaData[x].name.toLowerCase()] = data.rows[i][x];
        }
        response.push(item);
      }
      res.send(response);
    } else {
      res.send("Something went wrong... Nothing was returned!!");
    }
  } catch (err) {
    console.error(err);
    res.send(err);
  }
});

// CUSTOMER FEEDBACK LOV
app.get("/api/get-arrears-customer-feedback", async (req, res) => {
  try {
    const db = await oracledb.getConnection({
      user: DB_USER,
      password: DB_PASSWORD,
      connectString: DB_CONNECTION_STRING,
      timeout: DB_CONNECTION_TIMEOUT,
    });

    const response = [];
    const execute = util.promisify(db.execute).bind(db);

    const data =
      await execute(`SELECT ACTUAL_CODE as value, ACTUAL_CODE || ' - ' || DESCRIPTION as label FROM  CODE_DESC WHERE CODE_TYPE='CFB'
    `);

    if (data) {
      for (let i = 0; i < data.rows.length; i++) {
        const item = {};
        for (let x = 0; x < data.metaData.length; x++) {
          item[data.metaData[x].name.toLowerCase()] = data.rows[i][x];
        }
        response.push(item);
      }
      res.send(response);
    } else {
      res.send("Something went wrong... Nothing was returned!!");
    }
  } catch (err) {
    console.error(err);
    res.send(err);
  }
});

// CUSTOMER FEEDBACK TABLE DATA
app.post("/api/get-cust-arrears-feedback-table", async (req, res) => {
  const { principal_account } = req.body;
  try {
    const db = await oracledb.getConnection({
      user: DB_USER,
      password: DB_PASSWORD,
      connectString: DB_CONNECTION_STRING,
      timeout: DB_CONNECTION_TIMEOUT,
    });

    const response = [];
    const execute = util.promisify(db.execute).bind(db);

    const data = await execute(
      `select * from VW_COLLECTORS_LOG where PRINCIPAL_ACCOUNT=:principal_account`,
      {
        principal_account,
      }
    );

    if (data) {
      for (let i = 0; i < data.rows.length; i++) {
        const item = {};
        for (let x = 0; x < data.metaData.length; x++) {
          item[data.metaData[x].name.toLowerCase()] = data.rows[i][x];
        }
        response.push(item);
      }
      res.send(response);
    } else {
      res.send("Something went wrong... Nothing was returned!!");
    }
  } catch (err) {
    console.error(err);
    res.send(err);
  }
});

// SCHEDULE MODAL DATA
app.post("/api/get-arrears-loan-general-data", async (req, res) => {
  const { facility_no } = req.body;
  try {
    const db = await oracledb.getConnection({
      user: DB_USER,
      password: DB_PASSWORD,
      connectString: DB_CONNECTION_STRING,
      timeout: DB_CONNECTION_TIMEOUT,
    });

    const response = [];
    const execute = util.promisify(db.execute).bind(db);

    const data = await execute(
      `select * from REPAYMENT_SCHD_HD where  FACILITY_NO =:facility_no
    `,
      { facility_no }
    );

    if (data) {
      for (let i = 0; i < data.rows.length; i++) {
        const item = {};
        for (let x = 0; x < data.metaData.length; x++) {
          item[data.metaData[x].name.toLowerCase()] = data.rows[i][x];
        }
        response.push(item);
      }
      res.send(response);
    } else {
      res.send("Something went wrong... Nothing was returned!!");
    }
  } catch (err) {
    console.error(err);
    res.send(err);
  }
});

// SCHEDULE MODAL TABLE DATA
app.post("/api/get-arrears-loan-general-schedule", async (req, res) => {
  const { facility_no } = req.body;
  try {
    const db = await oracledb.getConnection({
      user: DB_USER,
      password: DB_PASSWORD,
      connectString: DB_CONNECTION_STRING,
      timeout: DB_CONNECTION_TIMEOUT,
    });

    const response = [];
    const execute = util.promisify(db.execute).bind(db);

    const data = await execute(
      `select * from R_SCHEDULE_TEMP where FACILITY_NO =:facility_no order by REPAY_SEQ_NO
    `,
      { facility_no }
    );

    if (data) {
      for (let i = 0; i < data.rows.length; i++) {
        const item = {};
        for (let x = 0; x < data.metaData.length; x++) {
          item[data.metaData[x].name.toLowerCase()] = data.rows[i][x];
        }
        response.push(item);
      }
      res.send(response);
    } else {
      res.send("Something went wrong... Nothing was returned!!");
    }
  } catch (err) {
    console.error(err);
    res.send(err);
  }
});

// ARREARS MANAGEMENT OK PROCEDURE
app.post("/api/arrears-mgmt-ok", async (req, res) => {
  const {
    promised_date_v,
    rc_code_v,
    notes_v,
    feedbk_code_v,
    princ_acc_v,
    username_v,
    Total_AMT_v,
    BR_CODE_v,
    risk_v,
    DAYS_IN_ARR_v,
    response_v,
  } = req.body;

  try {
    const connection = await oracledb.getConnection({
      user: DB_USER,
      password: DB_PASSWORD,
      connectString: DB_CONNECTION_STRING,
    });

    await connection.execute(
      `BEGIN prc_arrears_management_ok(
        :promised_date_v,
        :rc_code_v,
        :notes_v, 
        :feedbk_code_v,
        :princ_acc_v, 
        :username_v,
        :Total_AMT_v,
        :BR_CODE_v,
        :risk_v,
        :DAYS_IN_ARR_v,  
        :response_v
        ); END;`,
      {
        promised_date_v: {
          val: promised_date_v,
          dir: oracledb.BIND_IN,
          maxSize: 50,
        },
        rc_code_v: {
          val: rc_code_v,
          dir: oracledb.BIND_IN,
          maxSize: 20,
        },
        notes_v: {
          val: notes_v,
          dir: oracledb.BIND_IN,
          maxSize: 200,
        },
        feedbk_code_v: {
          val: feedbk_code_v,
          dir: oracledb.BIND_IN,
          maxSize: 20,
        },
        princ_acc_v: {
          val: princ_acc_v,
          dir: oracledb.BIND_IN,
          maxSize: 20,
        },
        username_v: {
          val: username_v,
          dir: oracledb.BIND_IN,
          maxSize: 20,
        },
        Total_AMT_v: {
          val: Total_AMT_v,
          dir: oracledb.BIND_IN,
          maxSize: 20,
        },
        BR_CODE_v: {
          val: BR_CODE_v,
          dir: oracledb.BIND_IN,
          maxSize: 20,
        },
        risk_v: {
          val: risk_v,
          dir: oracledb.BIND_IN,
          maxSize: 20,
        },
        DAYS_IN_ARR_v: {
          val: DAYS_IN_ARR_v,
          dir: oracledb.BIND_IN,
          maxSize: 20,
        },
        response_v: {
          val: response_v,
          dir: oracledb.BIND_OUT,
          maxSize: 200,
        },
      },

      function (err, result) {
        if (err) {
          console.log(err);
          response = {
            responseCode: "999",
            responseMessage: "Internal Server Error",
          };
          res.send(response);
        }
        if (result) {
          // return res.send(result);
          if (result.outBinds.response_v?.includes("07526")) {
            const message = result.outBinds.response_v;
            response = {
              responseCode: "000",
              responseMessage: message,
            };
          } else {
            response = {
              responseCode: "998",
              responseMessage: result.outBinds.response_v,
            };
          }
          res.send(response);
        }
      }
    );
  } catch (error) {
    console.error("Error:", error);
    res.send({
      // error: error.toString();
      responseCode: `999`,
      responseMessage: "Internal server error",
    });
  }
});

// TESTING FOR THE APPROVAL OF ARREARS MGMT
app.post("/api/get-appr-arr-mgmt", async (req, res) => {
  const { username, zone_name } = req.body;
  try {
    const db = await oracledb.getConnection({
      user: DB_USER,
      password: DB_PASSWORD,
      connectString: DB_CONNECTION_STRING,
      timeout: DB_CONNECTION_TIMEOUT,
    });

    const response = [];
    const execute = util.promisify(db.execute).bind(db);

    const data = await execute(
      `
      SELECT * 
      FROM VW_COLLECTOR_DETAILS WHERE
      FLAG = 'N' and user_name LIKE'%'||:username||'%' and zone_name LIKE'%'||:zone_name||'%' 
      order by user_name desc
    `,
      { username, zone_name }
    );

    if (data) {
      for (let i = 0; i < data.rows.length; i++) {
        const item = {};
        for (let x = 0; x < data.metaData.length; x++) {
          item[data.metaData[x].name.toLowerCase()] = data.rows[i][x];
        }
        response.push(item);
      }
      res.send(response);
    } else {
      res.send("Something went wrong... Nothing was returned!!");
    }
  } catch (err) {
    console.error(err);
    res.send(err);
  }
});

////////////////////////////////////////////////////////////////////////////////////
// SUPERVISOR SCREEN
app.post("/api/get-fids", async (req, res) => {
  const {
    principal_from,
    principal_to,
    interest_from,
    interest_to,
    facility_no,
    customer_name,
  } = req.body;
  try {
    const db = await oracledb.getConnection({
      user: DB_USER,
      password: DB_PASSWORD,
      connectString: DB_CONNECTION_STRING,
      timeout: DB_CONNECTION_TIMEOUT,
    });

    const response = [];
    const execute = util.promisify(db.execute).bind(db);

    const data = await execute(
      `
      SELECT 
      b.principal_account,
      a.facility_no, 
      get_acctdesc(b.principal_account) AS customer_name, 
      a.date_due, 
      a.principal, 
      a.interest, 
      a.prp, 
      a.ppd, 
      a.int_paid, 
      a.intpaide_date,
      a.overdue_day
  FROM 
      R_SCHEDULE_TEMP a, 
      facility b
  WHERE 
      (a.REPAY_SEQ_NO = '1' OR a.int_paid IS NOT NULL OR a.prp IS NOT NULL)
      AND a.facility_no = b.facility_no  
      AND a.DATE_DUE < get_postingdate 
      AND a.OVERDUE_DAY BETWEEN 1 AND 4
      AND (a.PRINCIPAL != a.PRP OR a.INTEREST != a.INT_PAID) 
      AND a.principal BETWEEN NVL(:principal_from, 0) AND NVL(:principal_to, 99999999999999999)
      AND a.interest BETWEEN NVL(:interest_from, 0) AND NVL(:interest_to, 99999999999999999)
      AND a.facility_no LIKE '%' || :facility_no || '%'
      AND get_acctdesc(b.principal_account) LIKE '%' || :customer_name || '%'
      ORDER BY a.overdue_day DESC, 
    a.principal DESC
  FETCH FIRST 500 ROWS ONLY
    `,
      {
        principal_from,
        principal_to,
        interest_from,
        interest_to,
        facility_no,
        customer_name,
      }
    );

    if (data) {
      for (let i = 0; i < data.rows.length; i++) {
        const item = {};
        for (let x = 0; x < data.metaData.length; x++) {
          item[data.metaData[x].name.toLowerCase()] = data.rows[i][x];
        }
        response.push(item);
      }
      res.send(response);
    } else {
      res.send("Something went wrong... Nothing was returned!!");
    }
  } catch (err) {
    console.error(err);
    res.send(err);
  }
});

// GET SOFT COLLECTIONS QUEUE
app.post("/api/get-soft-coll-queue", async (req, res) => {
  const {
    principal_from,
    principal_to,
    interest_from,
    interest_to,
    facility_no,
    customer_name,
  } = req.body;
  try {
    const db = await oracledb.getConnection({
      user: DB_USER,
      password: DB_PASSWORD,
      connectString: DB_CONNECTION_STRING,
      timeout: DB_CONNECTION_TIMEOUT,
    });

    const response = [];
    const execute = util.promisify(db.execute).bind(db);

    const data = await execute(
      `
SELECT 
b.principal_account,
    a.facility_no, 
    get_acctdesc(b.principal_account) AS customer_name, 
    a.date_due, 
    a.principal, 
    a.interest, 
    a.prp, 
    a.ppd, 
    a.int_paid, 
    a.intpaide_date,
    a.overdue_day
FROM 
    R_SCHEDULE_TEMP a, 
    facility b
WHERE 
    (a.REPAY_SEQ_NO = '1' OR a.int_paid IS NOT NULL OR a.prp IS NOT NULL)
    AND a.facility_no = b.facility_no  
    AND a.DATE_DUE < get_postingdate 
    AND a.OVERDUE_DAY BETWEEN 5 AND 30
    AND (a.PRINCIPAL != a.PRP OR a.INTEREST != a.INT_PAID) 
    AND a.principal BETWEEN NVL(:principal_from, 0) AND NVL(:principal_to, 99999999999999999)
    AND a.interest BETWEEN NVL(:interest_from, 0) AND NVL(:interest_to, 99999999999999999)
    AND a.facility_no LIKE '%' || :facility_no || '%'
    AND get_acctdesc(b.principal_account) LIKE '%' || :customer_name || '%'
ORDER BY 
    a.overdue_day DESC, 
    a.principal DESC
FETCH FIRST 500 ROWS ONLY

    `,
      {
        principal_from,
        principal_to,
        interest_from,
        interest_to,
        facility_no,
        customer_name,
      }
    );

    if (data) {
      for (let i = 0; i < data.rows.length; i++) {
        const item = {};
        for (let x = 0; x < data.metaData.length; x++) {
          item[data.metaData[x].name.toLowerCase()] = data.rows[i][x];
        }
        response.push(item);
      }
      res.send(response);
    } else {
      res.send("Something went wrong... Nothing was returned!!");
    }
  } catch (err) {
    console.error(err);
    res.send(err);
  }
});

// GET MID COLLECTIONS QUEUE
app.post("/api/get-mid-coll-queue", async (req, res) => {
  const {
    principal_from,
    principal_to,
    interest_from,
    interest_to,
    facility_no,
    customer_name,
  } = req.body;
  try {
    const db = await oracledb.getConnection({
      user: DB_USER,
      password: DB_PASSWORD,
      connectString: DB_CONNECTION_STRING,
      timeout: DB_CONNECTION_TIMEOUT,
    });

    const response = [];
    const execute = util.promisify(db.execute).bind(db);

    const data = await execute(
      `
SELECT 
      b.principal_account,
      a.facility_no, 
      get_acctdesc(b.principal_account) AS customer_name, 
      a.date_due, 
      a.principal, 
      a.interest, 
      a.prp, 
      a.ppd, 
      a.int_paid, 
      a.intpaide_date,
      a.overdue_day
  FROM 
      R_SCHEDULE_TEMP a, 
      facility b
  WHERE 
      (a.REPAY_SEQ_NO = '1' OR a.int_paid IS NOT NULL OR a.prp IS NOT NULL)
      AND a.facility_no = b.facility_no  
      AND a.DATE_DUE < get_postingdate 
      AND a.OVERDUE_DAY BETWEEN 31 AND 60
      AND (a.PRINCIPAL != a.PRP OR a.INTEREST != a.INT_PAID) 
      AND a.principal BETWEEN NVL(:principal_from, 0) AND NVL(:principal_to, 99999999999999999)
      AND a.interest BETWEEN NVL(:interest_from, 0) AND NVL(:interest_to, 99999999999999999)
      AND a.facility_no LIKE '%' || :facility_no || '%'
      AND get_acctdesc(b.principal_account) LIKE '%' || :customer_name || '%'
      ORDER BY a.overdue_day DESC, 
    a.principal DESC
  FETCH FIRST 500 ROWS ONLY
    `,
      {
        principal_from,
        principal_to,
        interest_from,
        interest_to,
        facility_no,
        customer_name,
      }
    );

    if (data) {
      for (let i = 0; i < data.rows.length; i++) {
        const item = {};
        for (let x = 0; x < data.metaData.length; x++) {
          item[data.metaData[x].name.toLowerCase()] = data.rows[i][x];
        }
        response.push(item);
      }
      res.send(response);
    } else {
      res.send("Something went wrong... Nothing was returned!!");
    }
  } catch (err) {
    console.error(err);
    res.send(err);
  }
});

// GET HARD COLLECTIONS QUEUE
app.post("/api/get-hard-coll-queue", async (req, res) => {
  const {
    principal_from,
    principal_to,
    interest_from,
    interest_to,
    facility_no,
    customer_name,
  } = req.body;
  try {
    const db = await oracledb.getConnection({
      user: DB_USER,
      password: DB_PASSWORD,
      connectString: DB_CONNECTION_STRING,
      timeout: DB_CONNECTION_TIMEOUT,
    });

    const response = [];
    const execute = util.promisify(db.execute).bind(db);

    const data = await execute(
      `
SELECT 
      b.principal_account,
      a.facility_no, 
      get_acctdesc(b.principal_account) AS customer_name, 
      a.date_due, 
      a.principal, 
      a.interest, 
      a.prp, 
      a.ppd, 
      a.int_paid, 
      a.intpaide_date,
      a.overdue_day
  FROM 
      R_SCHEDULE_TEMP a, 
      facility b
  WHERE 
      (a.REPAY_SEQ_NO = '1' OR a.int_paid IS NOT NULL OR a.prp IS NOT NULL)
      AND a.facility_no = b.facility_no  
      AND a.DATE_DUE < get_postingdate 
      AND a.OVERDUE_DAY BETWEEN 61 AND 90
      AND (a.PRINCIPAL != a.PRP OR a.INTEREST != a.INT_PAID) 
      AND a.principal BETWEEN NVL(:principal_from, 0) AND NVL(:principal_to, 99999999999999999)
      AND a.interest BETWEEN NVL(:interest_from, 0) AND NVL(:interest_to, 99999999999999999)
      AND a.facility_no LIKE '%' || :facility_no || '%'
      AND get_acctdesc(b.principal_account) LIKE '%' || :customer_name || '%'
      ORDER BY a.overdue_day DESC, 
    a.principal DESC
  FETCH FIRST 500 ROWS ONLY
    `,
      {
        principal_from,
        principal_to,
        interest_from,
        interest_to,
        facility_no,
        customer_name,
      }
    );

    if (data) {
      for (let i = 0; i < data.rows.length; i++) {
        const item = {};
        for (let x = 0; x < data.metaData.length; x++) {
          item[data.metaData[x].name.toLowerCase()] = data.rows[i][x];
        }
        response.push(item);
      }
      res.send(response);
    } else {
      res.send("Something went wrong... Nothing was returned!!");
    }
  } catch (err) {
    console.error(err);
    res.send(err);
  }
});

//////////////////////////////////////////////////
// ARREARS MONITORY DETAILS
app.post("/api/get-arrears-monitory-details", async (req, res) => {
  const {
    facility_no,
    acct_desc,
    principal_acct,
    br_code,
    days_in_arr_less,
    days_in_arr_greater,
  } = req.body;

  try {
    const db = await oracledb.getConnection({
      user: DB_USER,
      password: DB_PASSWORD,
      connectString: DB_CONNECTION_STRING,
      timeout: DB_CONNECTION_TIMEOUT,
    });

    const response = [];
    const execute = util.promisify(db.execute).bind(db);

    const data = await execute(
      `select * from VW_COLLECTION where FACILITY_NO like'%'||:facility_no||'%'
      and ACCOUNT_DESCRP like '%'||:acct_desc||'%' 
      AND PRINCIPAL_ACCOUNT like'%'||:principal_acct||'%'
      AND BRANCH_CODE like'%'||:br_code||'%' 
      and DAYS_IN_ARR <=NVL(:days_in_arr_less,200000)
      AND  DAYS_IN_ARR >=NVL(:days_in_arr_greater,-200000)
      order by DAYS_IN_ARR DESC
    `,
      {
        facility_no,
        acct_desc,
        principal_acct,
        br_code,
        days_in_arr_less,
        days_in_arr_greater,
      }
    );

    if (data) {
      for (let i = 0; i < data.rows.length; i++) {
        const item = {};
        for (let x = 0; x < data.metaData.length; x++) {
          item[data.metaData[x].name.toLowerCase()] = data.rows[i][x];
        }
        response.push(item);
      }
      res.send(response);
    } else {
      res.send("Something went wrong... Nothing was returned!!");
    }
  } catch (err) {
    console.error(err);
    res.send(err);
  }
});

// GET ARREARS BRANCH
app.get("/api/get-arrears-monitory-branches", async (req, res) => {
  try {
    const db = await oracledb.getConnection({
      user: DB_USER,
      password: DB_PASSWORD,
      connectString: DB_CONNECTION_STRING,
      timeout: DB_CONNECTION_TIMEOUT,
    });

    const response = [];
    const execute = util.promisify(db.execute).bind(db);

    const data = await execute(
      `select BR_CODE as value, BR_DESCRIPTION as label  from tb_branch`
    );

    // where BR_ZONE=  ''

    if (data) {
      for (let i = 0; i < data.rows.length; i++) {
        const item = {};
        for (let x = 0; x < data.metaData.length; x++) {
          item[data.metaData[x].name.toLowerCase()] = data.rows[i][x];
        }
        response.push(item);
      }
      res.send(response);
    } else {
      res.send("Something went wrong... Nothing was returned!!");
    }
  } catch (err) {
    console.error(err);
    res.send(err);
  }
});

// GET COLLECTOR DETAILS FOR ARREARS MONITORY DETAILS
app.post("/api/get-arrears-collector-details", async (req, res) => {
  const { facility_no } = req.body;

  try {
    const db = await oracledb.getConnection({
      user: DB_USER,
      password: DB_PASSWORD,
      connectString: DB_CONNECTION_STRING,
      timeout: DB_CONNECTION_TIMEOUT,
    });

    const response = [];
    const execute = util.promisify(db.execute).bind(db);

    const data = await execute(
      `select * from vw_COLLECTORS_LOG where FACILITY_NO=:facility_no `,
      {
        facility_no,
      }
    );

    if (data) {
      for (let i = 0; i < data.rows.length; i++) {
        const item = {};
        for (let x = 0; x < data.metaData.length; x++) {
          item[data.metaData[x].name.toLowerCase()] = data.rows[i][x];
        }
        response.push(item);
      }
      res.send(response);
    } else {
      res.send("Something went wrong... Nothing was returned!!");
    }
  } catch (err) {
    console.error(err);
    res.send(err);
  }
});

//////////////////////////////////////////////////

//////////// FIDELITY CREDIT DISBURSEMENT APIs /////////////////////////

// loan type
app.get("/api/get-loan-types-fid", (req, res) => {
  let getLoanType = async () => {
    try {
      const db = await oracledb.getConnection({
        user: DB_USER,
        password: DB_PASSWORD,
        connectString: DB_CONNECTION_STRING,
        timeout: DB_CONNECTION_TIMEOUT,
      });

      const response = [];
      let arr0 = "";

      // node native promisify
      const execute = util.promisify(db.execute).bind(db);

      const data = await execute(
        `select description value, description label
from tb_product
where prod_group = 5 
union all
select '599', 'OVERDRAFT' from dual`
      );

      if (data) {
        for (let i = 0; i < data.rows.length; i++) {
          for (let x = 0; x < data.metaData.length; x++) {
            arr0 +=
              '"' +
              [data.metaData[x]?.name?.toLowerCase()] +
              '" : "' +
              data.rows[i][x] +
              '",';
          }

          response.push(
            JSON.parse(
              "{" +
                arr0.replace(/(\r\n|\n|\r)/gm, "").replace(/,\s*$/, "") +
                "}"
            )
          );
        }

        res.send(response);
      } else {
        res.send("Something went wrong... Nothing was returned!!");
      }
    } finally {
      // conn.end();
    }
  };

  getLoanType();
});

// branch
app.get("/api/get-branch-fid", (req, res) => {
  let getBranch = async () => {
    try {
      const db = await oracledb.getConnection({
        user: DB_USER,
        password: DB_PASSWORD,
        connectString: DB_CONNECTION_STRING,
        timeout: DB_CONNECTION_TIMEOUT,
      });

      const response = [];
      let arr0 = "";

      // node native promisify
      const execute = util.promisify(db.execute).bind(db);

      const data = await execute(
        `SELECT DISTINCT BR_CODE value,BR_CODE || ' - ' || BR_DESCRIPTION label FROM TB_BRANCH`
      );

      if (data) {
        for (let i = 0; i < data.rows.length; i++) {
          for (let x = 0; x < data.metaData.length; x++) {
            arr0 +=
              '"' +
              [data.metaData[x]?.name?.toLowerCase()] +
              '" : "' +
              data.rows[i][x] +
              '",';
          }

          response.push(
            JSON.parse(
              "{" +
                arr0.replace(/(\r\n|\n|\r)/gm, "").replace(/,\s*$/, "") +
                "}"
            )
          );
        }

        res.send(response);
      } else {
        res.send("Something went wrong... Nothing was returned!!");
      }
    } finally {
      // conn.end();
    }
  };

  getBranch();
});

// channel
app.get("/api/get-channel-fid", (req, res) => {
  let getChannel = async () => {
    try {
      const db = await oracledb.getConnection({
        user: DB_USER,
        password: DB_PASSWORD,
        connectString: DB_CONNECTION_STRING,
        timeout: DB_CONNECTION_TIMEOUT,
      });

      const response = [];
      let arr0 = "";

      // node native promisify
      const execute = util.promisify(db.execute).bind(db);

      const data = await execute(
        `select actual_code value, actual_code || ' - ' || description label
from code_desc
where code_type ='CHN'
and SHORT_DESCRP is not null`
      );

      if (data) {
        for (let i = 0; i < data.rows.length; i++) {
          for (let x = 0; x < data.metaData.length; x++) {
            arr0 +=
              '"' +
              [data.metaData[x]?.name?.toLowerCase()] +
              '" : "' +
              data.rows[i][x] +
              '",';
          }

          response.push(
            JSON.parse(
              "{" +
                arr0.replace(/(\r\n|\n|\r)/gm, "").replace(/,\s*$/, "") +
                "}"
            )
          );
        }

        res.send(response);
      } else {
        res.send("Something went wrong... Nothing was returned!!");
      }
    } finally {
      // conn.end();
    }
  };

  getChannel();
});

// disbursement grid
app.post("/api/get-disbursement-grid", (req, res) => {
  const {
    cust_name_v,
    amt_v,
    app_no_v,
    channel_v,
    approved_by_v,
    branch_code_v,
    facility_type_v,
  } = req.body;
  let getDisbursementGrid = async () => {
    try {
      const db = await oracledb.getConnection({
        user: DB_USER,
        password: DB_PASSWORD,
        connectString: DB_CONNECTION_STRING,
        timeout: DB_CONNECTION_TIMEOUT,
      });

      const response = [];
      let arr0 = "";

      // node native promisify
      const execute = util.promisify(db.execute).bind(db);

      const data = await execute(
        `select applicant_no, applicant_name, amount, no_of_tranches, posting_sys_date, GET_BRANCHDESC(branch_code) branch_desc, GET_CURRISO(currency) curr, approved_by, channel, facility_type from loans_app_summ
where app_flag='07'
and applicant_name like '%'||'${cust_name_v}'||'%'
and amount>nvl('${amt_v}',0) 
and applicant_no like '%'||'${app_no_v}'||'%'
and channel like '%'||'${channel_v}'||'%'
and approved_by like '%'||'${approved_by_v}'||'%'
and branch_code like '%'||nvl('${branch_code_v}','')||'%'
and facility_type like upper('%'||'${facility_type_v}'||'%')`
      );

      if (data) {
        for (let i = 0; i < data.rows.length; i++) {
          for (let x = 0; x < data.metaData.length; x++) {
            arr0 +=
              '"' +
              [data.metaData[x].name.toLowerCase()] +
              '" : "' +
              data.rows[i][x] +
              '",';
          }

          response.push(
            JSON.parse(
              "{" +
                arr0.replace(/(\r\n|\n|\r)/gm, "").replace(/,\s*$/, "") +
                "}"
            )
          );
        }

        res.send(response);
      } else {
        res.send("Something went wrong... Nothing was returned!!");
      }
    } catch (e) {
      res.send(e);
    }
  };

  getDisbursementGrid();
});

// disbursement details
app.post("/api/get-disbursement-details-fid", (req, res) => {
  let { loan_app_no } = req.body;
  let getDisbursementDetails = async () => {
    try {
      const db = await oracledb.getConnection({
        user: DB_USER,
        password: DB_PASSWORD,
        connectString: DB_CONNECTION_STRING,
        timeout: DB_CONNECTION_TIMEOUT,
      });

      const response = [];
      let arr0 = "";

      // return res.send({transaction_number : transaction_number, yo: "yo"});

      // node native promisify
      const execute = util.promisify(db.execute).bind(db);

      const data = await execute(
        ` select * from vw_loan_prod_details where loan_app_no = '${loan_app_no}'`
      );

      if (data) {
        for (let i = 0; i < data.rows.length; i++) {
          for (let x = 0; x < data.metaData.length; x++) {
            arr0 +=
              '"' +
              [data.metaData[x].name.toLowerCase()] +
              '" : "' +
              data.rows[i][x] +
              '",';
          }

          response.push(
            JSON.parse(
              "{" +
                arr0.replace(/(\r\n|\n|\r)/gm, "").replace(/,\s*$/, "") +
                "}"
            )
          );
        }

        res.send(response);
      } else {
        res.send("Something went wrong... Nothing was returned!!");
      }
    } catch (e) {
      res.send(e);
    }
  };

  getDisbursementDetails();
});

///////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////
// Cross Rates API
//////////////////////////////////////////////////
app.post("/api/cross-rates", (req, res) => {
  const { posting_date } = req.body;

  const dateObj = new Date(posting_date);

  const day = dateObj.getUTCDate().toString().padStart(2, "0");
  const month = new Intl.DateTimeFormat("en-US", { month: "short" })
    .format(dateObj)
    .toUpperCase();
  const year = dateObj.getUTCFullYear();

  let postingDate = `${day}-${month}-${year}`;

  let getTellerLimit = async () => {
    try {
      const db = await oracledb.getConnection({
        user: DB_USER,
        password: DB_PASSWORD,
        connectString: DB_CONNECTION_STRING,
        timeout: DB_CONNECTION_TIMEOUT,
      });
      const execute = util.promisify(db.execute).bind(db);

      const data = await execute(
        `SELECT * FROM curpair_hist WHERE PDT = 'CX' AND POSTING_DATE='${postingDate}'`
      );

      // const data1
      if (data) {
        var arr0 = "";
        var arr = [];

        for (let i = 0; i < data.rows.length; i++) {
          for (let x = 0; x < data.metaData.length; x++) {
            arr0 +=
              '"' +
              [data.metaData[x].name.toLowerCase()] +
              '" : "' +
              data.rows[i][x] +
              '",';
          }

          arr.push(JSON.parse("{" + arr0.replace(/,\s*$/, "") + "}"));
        }

        return res.send(arr);
      } else {
        res.send("Something went wrong... Nothing was returned!!");
      }
    } catch (err) {
      console.log(err);
    }
  };
  getTellerLimit();
});

// NOSTRO

// NOSTRO STATEMENT OUTSTANDING
app.get("/api/nostro-accounts", (req, res) => {
  async function getNostroAccounts() {
    let con;
    try {
      con = await oracledb.getConnection({
        user: DB_USER,
        password: DB_PASSWORD,
        connectString: DB_CONNECTION_STRING,
        timeout: DB_CONNECTION_TIMEOUT,
      });

      const data = await con.execute(
        `SELECT DISTINCT NOSTRO_AC as value, GET_ACCTDESC(NOSTRO_AC) as label
        FROM TB_BANKS_ACCT, G_LEDGER
       WHERE  ACCT_LINK = NOSTRO_AC
       --AND VOSTRO IS NOT NULL
       AND AUTO_RECON = 'A'
       AND CONT = 'Y'
       UNION ALL
       SELECT DISTINCT NOSTRO_AC,GET_ACCTDESC(NOSTRO_AC) ACCOUNT_DESCRP
        FROM TB_BANKS_ACCT, G_LEDGER
       WHERE ACCT_LINK = NOSTRO_AC
       --AND  VOSTRO IS NOT NULL
       AND AUTO_RECON = 'A'
       AND CONT = 'N'`
      );

      let response = [];
      let arr0 = "";
      if (data) {
        for (let i = 0; i < data.rows.length; i++) {
          for (let x = 0; x < data.metaData.length; x++) {
            arr0 +=
              '"' +
              [data.metaData[x].name.toLowerCase()] +
              '" : "' +
              data.rows[i][x] +
              '",';
          }

          response.push(JSON.parse("{" + arr0.replace(/,\s*$/, "") + "}"));
        }

        res.send(response);
      } else {
        res.send("Something went wrong... Nothing was returned!!");
      }
    } catch (err) {
      res.send(err);
    }
  }
  getNostroAccounts();
});

// NOSTRO OUTSTANDING AC TRANS DATA
app.post("/api/nostro-outstanding-acTrans-data", (req, res) => {
  const { account_load, start_date, end_date, document_ref } = req.body;
  async function getNostroData() {
    let con;
    try {
      con = await oracledb.getConnection({
        user: DB_USER,
        password: DB_PASSWORD,
        connectString: DB_CONNECTION_STRING,
        timeout: DB_CONNECTION_TIMEOUT,
      });

      const data = await con.execute(
        `select * from VW_SWIFT_RECON where ACCT_LINK = :account_load
        AND ACTRANS = 'A'
        and VALUE_DATE between NVL(TO_DATE(:start_date, 'DD-MON-YYYY'),'01-JAN-1900') and NVL(TO_DATE(:end_date, 'DD-MON-YYYY'),'23-feb-9999') 
        and document_ref LIKE '%'||:document_ref||'%' order by VALUE_DATE ,trans_no`,
        { account_load, start_date, end_date, document_ref }
      );

      if (data) {
        let arr0 = "";
        let arr = [];

        for (let i = 0; i < data.rows.length; i++) {
          let obj = {};
          for (let x = 0; x < data.metaData.length; x++) {
            obj = { ...obj, [data.metaData[x].name]: data.rows[i][x] };
          }
          arr.push(obj);
        }
        res.send(arr);
      } else {
        res.send("Something went wrong... Nothing was returned!!");
      }
    } catch (err) {
      res.send(err.toString());
    }
  }
  getNostroData();
});

// NOSTRO INSERTION INTO AC TRANS LOWER DATA
app.post("/api/nostro-insert-into-acTransLowerTable", (req, res) => {
  const {
    trans_no,
    acct_link,
    account_description,
    document_ref,
    amount,
    value_date,
    batch_no,
    username,
  } = req.body;
  async function getNostroData() {
    let con;
    try {
      con = await oracledb.getConnection({
        user: DB_USER,
        password: DB_PASSWORD,
        connectString: DB_CONNECTION_STRING,
        timeout: DB_CONNECTION_TIMEOUT,
      });

      const data = await con.execute(
        `
        INSERT INTO SWIFT_RECONS
(
   TRANS_NO, ACCT_LINK ,   ACCOUNT_DESCRP ,   DOCUMENT_REF ,
     OUST , VALUE_DATE ,BATCH_NO,POSTED_BY,TRANS_TYPE
   )
   VALUES
   (
   :trans_no,:acct_link,:account_description,
   :document_ref,TO_NUMBER(:amount),
   TO_DATE(:value_date, 'DD-MON-YYYY'),:batch_no,:username,'SWF'
    )
        `,
        {
          trans_no,
          acct_link,
          account_description,
          document_ref,
          amount,
          value_date,
          batch_no,
          username,
        }
      );

      if (data) {
        let arr0 = "";
        let arr = [];

        for (let i = 0; i < data.rows?.length; i++) {
          let obj = {};
          for (let x = 0; x < data.metaData.length; x++) {
            obj = { ...obj, [data.metaData[x].name]: data.rows[i][x] };
          }
          arr.push(obj);
        }
        res.send(arr);
      } else {
        res.send("Something went wrong... Nothing was returned!!");
      }
    } catch (err) {
      res.send(err.toString());
    }
  }
  getNostroData();
});

// NOSTRO INSERTION INTO SWIFT LOWER DATA
app.post("/api/nostro-insert-into-swiftLowerTable", (req, res) => {
  const {
    trans_no,
    sendRef,
    value_date,
    amount,
    document_ref,
    batch_no,
    acct_link,
    username,
  } = req.body;
  async function getNostroData() {
    let con;
    try {
      con = await oracledb.getConnection({
        user: DB_USER,
        password: DB_PASSWORD,
        connectString: DB_CONNECTION_STRING,
        timeout: DB_CONNECTION_TIMEOUT,
      });

      const data = await con.execute(
        ` 	INSERT INTO SWIFT_RECONS2
(
      TRANS_NO,SEND_REF20 ,VALUE_DATE261 , STATE_AMT261 ,
     ACCT_OWN_REF261 ,BATCH_NO,ACCT_LINK,POSTED_BY,TRANS_TYPE
   )
   VALUES
   
   (
   :trans_no,:sendRef ,TO_DATE(:value_date, 'DD-MON-YYYY'),
   TO_NUMBER(:amount) ,:document_ref,:batch_no,
   :acct_link ,:username,'SWF'
    )`,
        {
          trans_no,
          sendRef,
          value_date,
          amount,
          document_ref,
          batch_no,
          acct_link,
          username,
        }
      );

      if (data) {
        let arr0 = "";
        let arr = [];

        for (let i = 0; i < data.rows.length; i++) {
          let obj = {};
          for (let x = 0; x < data.metaData.length; x++) {
            obj = { ...obj, [data.metaData[x].name]: data.rows[i][x] };
          }
          arr.push(obj);
        }
        res.send(arr);
      } else {
        res.send("Something went wrong... Nothing was returned!!");
      }
    } catch (err) {
      res.send(err.toString());
    }
  }
  getNostroData();
});

// NOSTRO OUTSTANDING SWIFT DATA
app.post("/api/nostro-outstanding-swift-data", (req, res) => {
  const { account_load, start_date, end_date, document_ref } = req.body;
  async function getNostroData() {
    let con;
    try {
      con = await oracledb.getConnection({
        user: DB_USER,
        password: DB_PASSWORD,
        connectString: DB_CONNECTION_STRING,
        timeout: DB_CONNECTION_TIMEOUT,
      });

      const data = await con.execute(
        `select * from VW_SWIFT_RECON where ACCT_LINK = :account_load
        AND ACTRANS = 'S'
        and VALUE_DATE between NVL(TO_DATE(:start_date, 'DD-MON-YYYY'),'01-JAN-1900') and NVL(TO_DATE(:end_date, 'DD-MON-YYYY'),'23-feb-9999') 
        and document_ref LIKE '%'||:document_ref||'%' order by VALUE_DATE ,trans_no`,
        { account_load, start_date, end_date, document_ref }
      );

      if (data) {
        let arr0 = "";
        let arr = [];

        for (let i = 0; i < data.rows.length; i++) {
          let obj = {};
          for (let x = 0; x < data.metaData.length; x++) {
            obj = { ...obj, [data.metaData[x].name]: data.rows[i][x] };
          }
          arr.push(obj);
        }
        res.send(arr);
      } else {
        res.send("Something went wrong... Nothing was returned!!");
      }
    } catch (err) {
      res.send(err.toString());
    }
  }
  getNostroData();
});

// NOSTRO AC TRANS RECONCILIATION
app.post("/api/nostro-acTrans-reconciliation", (req, res) => {
  const { username } = req.body;
  async function getNostroData() {
    let con;
    try {
      con = await oracledb.getConnection({
        user: DB_USER,
        password: DB_PASSWORD,
        connectString: DB_CONNECTION_STRING,
        timeout: DB_CONNECTION_TIMEOUT,
      });

      const data = await con.execute(
        `select * from SWIFT_RECONS where posted_by = :username
        and trans_type = 'SWF'`,
        { username }
      );

      if (data) {
        let arr0 = "";
        let arr = [];

        for (let i = 0; i < data.rows.length; i++) {
          let obj = {};
          for (let x = 0; x < data.metaData.length; x++) {
            obj = { ...obj, [data.metaData[x].name]: data.rows[i][x] };
          }
          arr.push(obj);
        }
        res.send(arr);
      } else {
        res.send("Something went wrong... Nothing was returned!!");
      }
    } catch (err) {
      res.send(err.toString());
    }
  }
  getNostroData();
});

// NOSTRO SWIFT RECONCILIATION
app.post("/api/nostro-swift-reconciliation", (req, res) => {
  const { username } = req.body;
  async function getNostroData() {
    let con;
    try {
      con = await oracledb.getConnection({
        user: DB_USER,
        password: DB_PASSWORD,
        connectString: DB_CONNECTION_STRING,
        timeout: DB_CONNECTION_TIMEOUT,
      });

      const data = await con.execute(
        `select * from SWIFT_RECONS2 where posted_by = :username
        and trans_type = 'SWF'`,
        { username }
      );

      if (data) {
        let arr0 = "";
        let arr = [];

        for (let i = 0; i < data.rows.length; i++) {
          let obj = {};
          for (let x = 0; x < data.metaData.length; x++) {
            obj = { ...obj, [data.metaData[x].name]: data.rows[i][x] };
          }
          arr.push(obj);
        }
        res.send(arr);
      } else {
        res.send("Something went wrong... Nothing was returned!!");
      }
    } catch (err) {
      res.send(err.toString());
    }
  }
  getNostroData();
});

// NOSTRO DELETION FROM AC TRANS LOWER DATA
app.post("/api/nostro-delete-record-acTransLowerTable", (req, res) => {
  const { username, batch_no } = req.body;
  async function getNostroData() {
    let con;
    try {
      con = await oracledb.getConnection({
        user: DB_USER,
        password: DB_PASSWORD,
        connectString: DB_CONNECTION_STRING,
        timeout: DB_CONNECTION_TIMEOUT,
      });

      const data = await con.execute(
        `
        DELETE FROM SWIFT_RECONS
WHERE posted_by = :username and BATCH_NO = :batch_no
  AND trans_type = 'SWF'
        `,
        {
          username,
          batch_no,
        }
      );

      if (data.rowsAffected > 0) {
        res.send({
          message: "Data deleted successfully",
          status: "success",
        });
      } else {
        res.send({
          message: "Sorry, error deleting data",
          status: "false",
        });
        console.log(data.rowsAffected, "rrrrrr");
      }
    } catch (err) {
      res.send(err.toString());
    }
  }
  getNostroData();
});

// NOSTRO DELETION FROM SWIFT LOWER DATA
app.post("/api/nostro-delete-record-swiftLowerTable", (req, res) => {
  const { username, account_ref } = req.body;
  async function getNostroData() {
    let con;
    try {
      con = await oracledb.getConnection({
        user: DB_USER,
        password: DB_PASSWORD,
        connectString: DB_CONNECTION_STRING,
        timeout: DB_CONNECTION_TIMEOUT,
      });

      const data = await con.execute(
        `
        DELETE FROM SWIFT_RECONS2
        WHERE posted_by = :username and ACCT_OWN_REF261 = :account_ref
        AND trans_type = 'SWF'
        `,
        {
          username,
          account_ref,
        }
      );

      if (data.rowsAffected > 0) {
        res.send({
          message: "Data deleted successfully",
          status: "success",
        });
      } else {
        res.send({
          message: "Sorry, error deleting data",
          status: "false",
        });
        console.log(data.rowsAffected, "rrrrrr");
      }
    } catch (err) {
      res.send(err.toString());
    }
  }
  getNostroData();
});

// NOSTRO ONOKCLICK
app.post("/api/nostro-ok-click", (req, res) => {
  console.log("anything");
  const { username } = req.body;
  async function getNostroData() {
    let con;
    try {
      con = await oracledb.getConnection({
        user: DB_USER,
        password: DB_PASSWORD,
        connectString: DB_CONNECTION_STRING,
        timeout: DB_CONNECTION_TIMEOUT,
      });

      let result1, result2;

      const data0 = await con.execute(
        `
          select nvl(to_number(sum(nvl(OUST,0))),0)
           from  SWIFT_RECONS where posted_by = :username
          `,
        {
          username,
        }
      );

      result1 = parseFloat(data0.rows[0]);

      const data1 = await con.execute(
        `
          select nvl(to_number(sum(nvl(STATE_AMT261,0))),0) 
          from 	SWIFT_RECONS2 where posted_by = :username
          `,
        {
          username,
        }
      );

      result2 = parseFloat(data1.rows[0]);

      var sum = Math.abs(result1) - Math.abs(result2);

      if (sum !== 0) {
        res.send([
          {
            responseCode: "100",
            responseMessage: `The Difference is ${sum}`,
          },
        ]);

        console.log("Response Code is 100");
      }
      if (sum === 0 || sum === "0") {
        res.send([
          {
            responseCode: "000",
            responseMessage: `The Difference is ${sum}`,
          },
        ]);

        console.log("Response Code is 000");
      }
    } catch (err) {
      res.send(err.toString());
    }
  }
  getNostroData();
});

// NOSTRO INSERTING NEGATIVE OUTSTANDING
app.post("/api/nostro-inserting-negative-oustanding-amt", (req, res) => {
  const { username, document_ref, account_load, trans_no, oust } = req.body;
  async function getNostroInsertOutstanding() {
    let con;
    try {
      con = await oracledb.getConnection({
        user: DB_USER,
        password: DB_PASSWORD,
        connectString: DB_CONNECTION_STRING,
        timeout: DB_CONNECTION_TIMEOUT,
      });

      let result0, result00, postingDate, batchNo, result1, result2;
      // when negative oust amt

      const pd = await con.execute(`select get_postingdate from dual`);
      const bn = await con.execute(`select get_batchno from dual`);

      result0 = pd.rows[0];
      postingDate = result0[0];

      result00 = bn.rows[0];
      batchNO = result00[0];

      const data0 = await con.execute(
        `
        update tb_recon_trans set 
        auto_recon='Y',
        recon_type = 'A',
        recon_by = :username,
        recon_date = :posting_date,
        reference_no = :batch_no
        WHERE nvl(DOCUMENT_REF,'NONREF') = :document_ref
        AND ACCT_LINK = :account_load
        AND TRANS_NO = :trans_no
        and LOCAL_EQUIVALENT_DB = :oust
          `,
        {
          username,
          postingDate,
          batchNo,
          document_ref,
          account_load,
          trans_no,
          oust,
        }
      );

      result1 = parseFloat(data0.rows[0]);

      const data1 = await con.execute(
        `
          select nvl(to_number(sum(nvl(STATE_AMT261,0))),0) 
          from 	SWIFT_RECONS2 where posted_by = :username
          `,
        {
          username,
        }
      );

      result2 = parseFloat(data1.rows[0]);

      var sum = result1 + result2;

      if (sum !== 0) {
        res.send([
          {
            responseCode: "100",
            responseMessage:
              "ERR - 02093: Reconciliation not balance, please check",
          },
        ]);
      }
    } catch (err) {
      res.send(err.toString());
    }
  }
  getNostroInsertOutstanding();
});

// DEBITS AND CREDITS IN NOSTRO MANAGEMENT
// NOSTRO UPDATE TB RECON TRANS DB
app.post("/api/nostro-update-tb-recon-trans-db", (req, res) => {
  const { username, batch_number, document_ref, account_load, trans_no, oust } =
    req.body;
  async function getNostroInsertOutstanding() {
    let con;
    try {
      con = await oracledb.getConnection({
        user: DB_USER,
        password: DB_PASSWORD,
        connectString: DB_CONNECTION_STRING,
        timeout: DB_CONNECTION_TIMEOUT,
      });

      const data0 = await con.execute(
        `
        update tb_recon_trans set 
        auto_recon='Y',
        recon_type = 'A',
        recon_by = :username,
        recon_date = GET_POSTINGDATE(),
        reference_no = :batch_number
        WHERE nvl(DOCUMENT_REF,'NONREF') = :document_ref
        AND ACCT_LINK = :account_load
        AND TRANS_NO = :trans_no
        and LOCAL_EQUIVALENT_DB = TO_NUMBER(:oust)
          `,
        {
          username,
          batch_number,
          document_ref,
          account_load,
          trans_no,
          oust,
        }
      );

      // result1 = parseFloat(data0.rows[0]);

      res.send([
        {
          responseCode: "000",
          responseMessage: `Updated into table with db`,
        },
      ]);
    } catch (err) {
      res.send(err.toString());
    }
  }
  getNostroInsertOutstanding();
});

// NOSTRO UPDATE TB RECON TRANS CR
app.post("/api/nostro-update-tb-recon-trans-cr", (req, res) => {
  const { username, batch_number, document_ref, account_load, trans_no, oust } =
    req.body;
  async function getNostroInsertOutstanding() {
    let con;
    try {
      con = await oracledb.getConnection({
        user: DB_USER,
        password: DB_PASSWORD,
        connectString: DB_CONNECTION_STRING,
        timeout: DB_CONNECTION_TIMEOUT,
      });

      const data0 = await con.execute(
        `
        update tb_recon_trans set 
        auto_recon='Y',
        recon_type = 'A',
        recon_by = :username,
        recon_date = GET_POSTINGDATE(),
        reference_no = :batch_number
        WHERE nvl(DOCUMENT_REF,'NONREF') = :document_ref
        AND ACCT_LINK = :account_load
        AND TRANS_NO = :trans_no
        and LOCAL_EQUIVALENT_CR = TO_NUMBER(:oust)
          `,
        {
          username,
          batch_number,
          document_ref,
          account_load,
          trans_no,
          oust,
        }
      );

      res.send([
        {
          responseCode: "000",
          responseMessage: `Updated into table with CR`,
        },
      ]);
    } catch (err) {
      res.send(err.toString());
    }
  }
  getNostroInsertOutstanding();
});

// NOSTO UPDATE MT TABLE IN
app.post("/api/nostro-update-mt-table-in", (req, res) => {
  const { branch, username, reference } = req.body;
  async function NostroUpdateMTTable() {
    let con;
    try {
      con = await oracledb.getConnection({
        user: DB_USER,
        password: DB_PASSWORD,
        connectString: DB_CONNECTION_STRING,
        timeout: DB_CONNECTION_TIMEOUT,
      });

      const hostname = os.hostname();
      const ipAddress = ip.address();

      const data0 = await con.execute(
        `UPDATE MT_TABLE_IN SET
        APP_BRANCH =  :branch,         
        APP_BY        =  :username,         
        APP_POSTSYSDT   =  GET_SYSDATE(),       
        APP_SYSTIME     =    TO_CHAR(GET_SYSDATE(),'HH24:MI:SS'),      
        APP_POSTTERM  =  :hostname,          
        APP_POSTIP    =  :ipAddress,        
        FLAG  ='Y', 
        RECON = 'Y',
        APP_STATUS  = 'APPROVED'
        WHERE SEND_REF20 = :reference`,
        {
          branch,
          username,
          hostname,
          ipAddress,
          reference,
        }
      );

      console.log(
        {
          branch,
          username,
          hostname,
          ipAddress,
          reference,
        },
        "mt table"
      );

      if (data0.rowsAffected > 0) {
        res.send([
          {
            responseCode: "000",
            responseMessage: `Updated into MT Table`,
          },
        ]);
      } else {
        res.send([
          {
            responseCode: "100",
            responseMessage: "Failed to update table",
          },
        ]);
      }
    } catch (err) {
      res.send(err.toString());
    }
  }
  NostroUpdateMTTable();
});

// NOSTO UPDATE SYSTEM
app.post("/api/nostro-update-statement-hist", (req, res) => {
  const { branch, username, reference, batch_number } = req.body;
  async function NostroUpdateStatementHist() {
    let con;
    try {
      con = await oracledb.getConnection({
        user: DB_USER,
        password: DB_PASSWORD,
        connectString: DB_CONNECTION_STRING,
        timeout: DB_CONNECTION_TIMEOUT,
      });

      const hostname = os.hostname();
      const ipAddress = ip.address();

      const data0 = await con.execute(
        `UPDATE STATEMENT61_HIST SET
        APP_BRANCH =  :branch,          
        APP_BY        =  :username,         
        APP_POSTSYSDT   =  GET_SYSDATE(),       
        APP_SYSTIME     =    TO_CHAR(GET_SYSDATE(),'HH24:MI:SS'),      
        APP_POSTTERM  =  :hostname,        
        APP_POSTIP    =  :ipAddress,       
      FLAG  ='Y', 
      RECON = 'Y',
      APP_STATUS  = 'APPROVED',
      REF_MANUAL = :reference
      WHERE INW_CODE = :batch_number`,
        {
          branch,
          username,
          hostname,
          ipAddress,
          reference,
          batch_number,
        }
      );

      console.log(
        {
          branch,
          username,
          hostname,
          ipAddress,
          reference,
          batch_number,
        },
        "stmt hist"
      );

      if (data0.rowsAffected > 0) {
        res.send([
          {
            responseCode: "000",
            responseMessage: `Updated into System Hist`,
          },
        ]);
      } else {
        res.send([
          {
            responseCode: "100",
            responseMessage: `Failed to update into System Hist`,
          },
        ]);
      }
    } catch (err) {
      res.send(err.toString());
    }
  }
  NostroUpdateStatementHist();
});

// NOSTRO CLEAR LOWER TABLES UPON SUCCESS

// NOSTRO DELETION FROM AC TRANS LOWER DATA AFTER OK PRESS
app.post("/api/nostro-clear-acTrans-after-ok-press", (req, res) => {
  const { username } = req.body;
  async function deleteRowsInTableAfterNostroOkClick() {
    let con;
    try {
      con = await oracledb.getConnection({
        user: DB_USER,
        password: DB_PASSWORD,
        connectString: DB_CONNECTION_STRING,
        timeout: DB_CONNECTION_TIMEOUT,
      });

      const data = await con.execute(
        `
        DELETE FROM SWIFT_RECONS WHERE POSTED_BY = :username
        `,
        {
          username,
        }
      );

      if (data.rowsAffected > 0) {
        res.send({
          message: "Data deleted successfully",
          status: "success",
        });
      } else {
        res.send({
          message: "Sorry, error deleting data",
          status: "false",
        });
      }
    } catch (err) {
      res.send(err.toString());
    }
  }
  deleteRowsInTableAfterNostroOkClick();
});

// NOSTRO DELETION FROM SWIFT LOWER DATA AFTER OK PRESS
app.post("/api/nostro-clear-swift-after-ok-press", (req, res) => {
  const { username } = req.body;
  async function deleteRowsInTableAfterNostroOkClick() {
    let con;
    try {
      con = await oracledb.getConnection({
        user: DB_USER,
        password: DB_PASSWORD,
        connectString: DB_CONNECTION_STRING,
        timeout: DB_CONNECTION_TIMEOUT,
      });

      const data = await con.execute(
        `
        DELETE FROM SWIFT_RECONS2 WHERE POSTED_BY = :username
        `,
        {
          username,
        }
      );

      if (data.rowsAffected > 0) {
        res.send({
          message: "Data deleted successfully",
          status: "success",
        });
      } else {
        res.send({
          message: "Sorry, error deleting data",
          status: "false",
        });
      }
    } catch (err) {
      res.send(err.toString());
    }
  }
  deleteRowsInTableAfterNostroOkClick();
});

//NOSTRO USER ACTION AUDIT
app.post("/api/nostro-mgt-user-action-auditA", async (req, res) => {
  const { count, username, postingDate } = req.body;

  function formatDate(date) {
    const year = date.getFullYear();
    const month = new Intl.DateTimeFormat("en-US", { month: "short" }).format(
      date
    );
    const day = String(date.getDate()).padStart(2, "0");
    return `${day}-${month}-${year}`;
  }

  // Convert the date string to a Date object
  const formattedPostingDate = new Date(postingDate);

  const formattedDate = formatDate(formattedPostingDate);

  console.log(formattedDate);

  try {
    const con = await oracledb.getConnection({
      user: DB_USER,
      password: DB_PASSWORD,
      connectString: DB_CONNECTION_STRING,
      timeout: DB_CONNECTION_TIMEOUT,
    });

    const hostname = os.hostname();
    const ipAddress = ip.address();

    const result = await con.execute(
      "BEGIN user_action_auditA(:AMT1,:AMT2,:COMMENTS,:FORM_CODE,:KEY_VAL1,:KEY_VAL2,:KEY_VAL3,:POSTED_BY,:POSTING_DATE,:POSTING_SYS_TIME,GET_SESSID(),:TERMINAL_ID,:TERMINAL_IP,:programs); END;",
      {
        AMT1: count,
        AMT2: null,
        COMMENTS: "Swift Recon: ",
        FORM_CODE: "ALGA",
        KEY_VAL1: null,
        KEY_VAL2: null,
        KEY_VAL3: null,
        POSTED_BY: username,
        POSTING_DATE: formattedPostingDate,
        POSTING_SYS_TIME: formattedPostingDate,
        TERMINAL_ID: hostname,
        TERMINAL_IP: ipAddress,
        programs: "React",
      }
    );

    await con.close();

    res.send({
      responseCode: "000",
      responseMessage: "Success",
    });
  } catch (error) {
    console.error(error);
    res.status(500).send({
      responseCode: "500",
      responseMessage: "Internal Server Error",
    });
  }
});

//////////////////////////////////////////////////////////////////////////////////////////////////////////

// LOAN RESCHEDULES - TOP UP AND EARLY SETTLEMENTS
// WAIVERS
app.post("/api/waiver-calculation", async (req, res) => {
  const {
    OD_INTEREST_AMOUNT_v,
    INT_WAIVE_PER_v,
    PENAL_AMOUNT_v,
    PEN_WAIVE_PER_v,
    ARREARS_BAL_v,
    ARR_WAIVE_PER_v,
  } = req.body;

  try {
    const connection = await oracledb.getConnection({
      user: DB_USER,
      password: DB_PASSWORD,
      connectString: DB_CONNECTION_STRING,
    });

    await connection.execute(
      `BEGIN prc_loan_schedule_waivers(
          :OD_INTEREST_AMOUNT_v,
          :INT_WAIVE_PER_v,
          :INT_WAIVE_v,
          :PENAL_AMOUNT_v,
          :PEN_WAIVE_PER_v,
          :PEN_WAIVE_v,
          :ARREARS_BAL_v,
          :ARR_WAIVE_PER_v,
          :ARR_WAIVE_v,
          :response_v
          ); END;`,
      {
        OD_INTEREST_AMOUNT_v: {
          val: OD_INTEREST_AMOUNT_v,
          dir: oracledb.BIND_IN,
        },
        INT_WAIVE_PER_v: {
          val: INT_WAIVE_PER_v,
          dir: oracledb.BIND_IN,
        },
        INT_WAIVE_v: {
          dir: oracledb.BIND_OUT,
        },
        PENAL_AMOUNT_v: {
          val: PENAL_AMOUNT_v,
          dir: oracledb.BIND_IN,
        },
        PEN_WAIVE_PER_v: {
          val: PEN_WAIVE_PER_v,
          dir: oracledb.BIND_IN,
        },
        PEN_WAIVE_v: {
          dir: oracledb.BIND_OUT,
        },
        ARREARS_BAL_v: {
          val: ARREARS_BAL_v,
          dir: oracledb.BIND_IN,
        },
        ARR_WAIVE_PER_v: {
          val: ARR_WAIVE_PER_v,
          dir: oracledb.BIND_IN,
        },
        ARR_WAIVE_v: {
          dir: oracledb.BIND_OUT,
        },
        response_v: {
          dir: oracledb.BIND_OUT,
          maxSize: 200,
        },
      },
      function (err, result) {
        if (err) {
          console.error(err);
          res.send({
            responseCode: "999",
            responseMessage: "Internal Server Error",
          });
          return;
        }

        if (result && result.outBinds.response_v) {
          try {
            // Parse the JSON-like string response into an object
            const responseObj = JSON.parse(result.outBinds.response_v);

            res.send({
              responseCode: "000",
              responseMessage: "success",
              data: responseObj, // Return the key-value pair object
            });
          } catch (jsonErr) {
            console.error("Failed to parse response_v as JSON:", jsonErr);

            res.send({
              responseCode: "998",
              responseMessage: result.outBinds.response_v, // Return raw string if JSON parsing fails
            });
          }
        } else {
          res.send({
            responseCode: "998",
            responseMessage: "No response from PL/SQL procedure",
          });
        }
      }
    );
  } catch (error) {
    console.error("Error:", error);
    res.send({
      responseCode: "999",
      responseMessage: "Internal server error",
    });
  }
});

// GETTING THE WAIVE PERCENTAGES
app.post("/api/waiver-percentage-calculation", async (req, res) => {
  const {
    PAYMENT_TYPE_V,
    WAIVER_OPTION_V,
    SHADOW_BALANCE_TODAY_V,
    INT_ADJUST_V,
    PEN_ADJUST_V,
    ARR_INT_V,
    TOTAL_BAL_V,
    OD_INTEREST_AMOUNT_V,
    INT_WAIVE_V,
    PENAL_AMOUNT_V,
    PEN_WAIVE_V,
    ARREARS_BAL_V,
    ARR_WAIVE_V,
    AMT_V,
    ARR_WAIVE_PER_V,
    PEN_WAIVE_PER_V,
    INT_WAIVE_PER_V,
    RESPONSE_V,
  } = req.body;

  try {
    const connection = await oracledb.getConnection({
      user: DB_USER,
      password: DB_PASSWORD,
      connectString: DB_CONNECTION_STRING,
    });

    const result = await connection.execute(
      `BEGIN 
         prc_loan_schedule_waiver_percentage(
            :PAYMENT_TYPE_V,
            :WAIVER_OPTION_V,
            :SHADOW_BALANCE_TODAY_V,
            :INT_ADJUST_V,
            :PEN_ADJUST_V,
            :ARR_INT_V,
            :TOTAL_BAL_V,
            :OD_INTEREST_AMOUNT_V,
            :INT_WAIVE_V,
            :PENAL_AMOUNT_V,
            :PEN_WAIVE_V,
            :ARREARS_BAL_V,
            :ARR_WAIVE_V,
            :AMT_V,
            :ARR_WAIVE_PER_V,
            :PEN_WAIVE_PER_V,
            :INT_WAIVE_PER_V,
            :RESPONSE_V
          ); 
      END;`,
      {
        PAYMENT_TYPE_V: { val: PAYMENT_TYPE_V, dir: oracledb.BIND_IN },
        WAIVER_OPTION_V: { val: WAIVER_OPTION_V, dir: oracledb.BIND_IN },
        SHADOW_BALANCE_TODAY_V: {
          val: SHADOW_BALANCE_TODAY_V,
          dir: oracledb.BIND_IN,
        },
        INT_ADJUST_V: { val: INT_ADJUST_V, dir: oracledb.BIND_IN },
        PEN_ADJUST_V: { val: PEN_ADJUST_V, dir: oracledb.BIND_IN },
        ARR_INT_V: { val: ARR_INT_V, dir: oracledb.BIND_IN },
        TOTAL_BAL_V: { val: TOTAL_BAL_V, dir: oracledb.BIND_IN },
        OD_INTEREST_AMOUNT_V: {
          val: OD_INTEREST_AMOUNT_V,
          dir: oracledb.BIND_IN,
        },
        INT_WAIVE_V: { val: INT_WAIVE_V, dir: oracledb.BIND_IN },
        PENAL_AMOUNT_V: { val: PENAL_AMOUNT_V, dir: oracledb.BIND_IN },
        PEN_WAIVE_V: { val: PEN_WAIVE_V, dir: oracledb.BIND_IN },
        ARREARS_BAL_V: { val: ARREARS_BAL_V, dir: oracledb.BIND_IN },
        ARR_WAIVE_V: { val: ARR_WAIVE_V, dir: oracledb.BIND_IN },

        // Out Parameters
        AMT_V: { dir: oracledb.BIND_OUT },
        ARR_WAIVE_PER_V: { val: ARR_WAIVE_PER_V, dir: oracledb.BIND_OUT },
        PEN_WAIVE_PER_V: { val: PEN_WAIVE_PER_V, dir: oracledb.BIND_OUT },
        INT_WAIVE_PER_V: { val: INT_WAIVE_V, dir: oracledb.BIND_OUT },
        RESPONSE_V: { val: RESPONSE_V, dir: oracledb.BIND_OUT, maxSize: 200 },
      }
    );

    if (result && result.outBinds.RESPONSE_V) {
      try {
        // Parse the JSON-like string response into an object
        const responseObj = JSON.parse(result.outBinds.RESPONSE_V);

        res.send({
          responseCode: "000",
          responseMessage: "success",
          data: responseObj, // Return the key-value pair object
        });
      } catch (jsonErr) {
        console.error("Failed to parse RESPONSE_V as JSON:", jsonErr);

        res.send({
          responseCode: "998",
          responseMessage: result.outBinds.RESPONSE_V, // Return raw string if JSON parsing fails
        });
      }
    } else {
      res.send({
        responseCode: "998",
        responseMessage: "No response from PL/SQL procedure",
      });
    }
  } catch (error) {
    console.error("Error:", error);
    res.send({
      responseCode: "999",
      responseMessage: "Internal server error",
    });
  }
});

// MORATO VALIDATION
app.post("/api/morato-validation", async (req, res) => {
  const { MORATORIUM_PERIOD_v, prin_pay_count_v, int_morato_v, response_v } =
    req.body;

  try {
    const connection = await oracledb.getConnection({
      user: DB_USER,
      password: DB_PASSWORD,
      connectString: DB_CONNECTION_STRING,
    });
    await connection.execute(
      `BEGIN prc_morato_validation(
          :MORATORIUM_PERIOD_v,
          :prin_pay_count_v,
          :int_morato_v,
          :response_v
          ); END;`,
      {
        MORATORIUM_PERIOD_v: {
          val: MORATORIUM_PERIOD_v,
          dir: oracledb.BIND_INOUT,
          maxSize: 3,
        },
        prin_pay_count_v: {
          val: prin_pay_count_v,
          dir: oracledb.BIND_INOUT,
          maxSize: 50,
        },

        int_morato_v: {
          val: int_morato_v,
          dir: oracledb.BIND_IN,
          maxSize: 50,
        },

        response_v: {
          val: response_v,
          dir: oracledb.BIND_OUT,
          maxSize: 200,
        },
      },

      function (err, result) {
        if (err) {
          console.log(err);
          response = {
            responseCode: "999",
            responseMessage: "Internal Server Error",
          };
          res.send(response);
        }
        if (result) {
          // return res.send(result);
          if (result.outBinds.response_v?.includes("07526")) {
            const message = result.outBinds.response_v;
            response = {
              responseCode: "000",
              responseMessage: message,
            };
          } else {
            response = {
              responseCode: "998",
              responseMessage: result.outBinds.response_v,
            };
          }
          res.send(response);
        }
      }
    );
  } catch (error) {
    console.error("Error:", error);
    res.send({
      responseCode: `999`,
      responseMessage: "Internal server error",
    });
  }
});

// ON CHANGE OF TYPE OF PAYMENT
app.post("/api/onchange-transaction-type", async (req, res) => {
  const {
    PAYMENT_TYPE_v,
    LAST_REPAY_DATE_v,
    INTEREST_REVENUE_ACCT_v,
    F_NO_v,
    EARLY_FEE_AMOUNT_v,
    EARLY_PENAL_AMOUNT_v,
    response_v,
  } = req.body;

  try {
    const connection = await oracledb.getConnection({
      user: DB_USER,
      password: DB_PASSWORD,
      connectString: DB_CONNECTION_STRING,
    });
    await connection.execute(
      `BEGIN prc_transaction_type_onchange(
          :PAYMENT_TYPE_v,
          :LAST_REPAY_DATE_v,
          :INTEREST_REVENUE_ACCT_v,
          :F_NO_v,
          :EARLY_FEE_AMOUNT_v,
          :EARLY_PENAL_AMOUNT_v,
          :response_v
          ); END;`,
      {
        PAYMENT_TYPE_v: {
          val: PAYMENT_TYPE_v,
          dir: oracledb.BIND_IN,
          maxSize: 3,
        },
        LAST_REPAY_DATE_v: {
          val: LAST_REPAY_DATE_v,
          dir: oracledb.BIND_IN,
          maxSize: 50,
        },

        INTEREST_REVENUE_ACCT_v: {
          val: INTEREST_REVENUE_ACCT_v,
          dir: oracledb.BIND_IN,
          maxSize: 50,
        },
        F_NO_v: {
          val: F_NO_v,
          dir: oracledb.BIND_IN,
          maxSize: 50,
        },

        EARLY_FEE_AMOUNT_v: {
          val: EARLY_FEE_AMOUNT_v,
          dir: oracledb.BIND_OUT,
          maxSize: 50,
        },
        EARLY_PENAL_AMOUNT_v: {
          val: EARLY_PENAL_AMOUNT_v,
          dir: oracledb.BIND_OUT,
          maxSize: 50,
        },
        response_v: {
          val: response_v,
          dir: oracledb.BIND_OUT,
          maxSize: 200,
        },
      },

      function (err, result) {
        if (err) {
          console.log(err);
          response = {
            responseCode: "999",
            responseMessage: "Internal Server Error",
          };
          res.send(response);
        }
        if (result) {
          // return res.send(result);
          if (result.outBinds.response_v?.includes("07526")) {
            const message = result.outBinds.response_v;
            response = {
              responseCode: "000",
              responseMessage: message,
            };
          } else {
            response = {
              responseCode: "998",
              responseMessage: result.outBinds.response_v,
            };
          }
          res.send(response);
        }
      }
    );
  } catch (error) {
    console.error("Error:", error);
    res.send({
      responseCode: `999`,
      responseMessage: "Internal server error",
    });
  }
});

// ONCHANGE OF TYPE OF PAYMENT VALIDATIONS
app.post("/api/onchange-transaction-type-validations", async (req, res) => {
  const {
    PAYMENT_TYPE_v,
    amt_v,
    min_reduct_v,
    arr_int_v,
    PEN_ADJUST_v,
    INT_ADJUST_v,
    PRINCIPAL_TO_PAY_v,
    SHADOW_BALANCE_TODAY_v,
    FORCE_DB_v,
    SUM_FEE_AMOUNT_v,
    credit_bal_v,
    LAST_REPAY_DATE_v,
    response_v,
  } = req.body;

  try {
    const connection = await oracledb.getConnection({
      user: DB_USER,
      password: DB_PASSWORD,
      connectString: DB_CONNECTION_STRING,
    });

    // Removing the extra comma
    await connection.execute(
      `BEGIN prc_validate_payment_transaction_type(
          :PAYMENT_TYPE_v,
          :amt_v,
          :min_reduct_v,
          :arr_int_v,
          :PEN_ADJUST_v,
          :INT_ADJUST_v,
          :PRINCIPAL_TO_PAY_v,
          :SHADOW_BALANCE_TODAY_v,
          :FORCE_DB_v,
          :SUM_FEE_AMOUNT_v,
          :credit_bal_v,
          :LAST_REPAY_DATE_v,
          :response_v
      ); END;`,
      {
        PAYMENT_TYPE_v: {
          val: PAYMENT_TYPE_v,
          dir: oracledb.BIND_IN,
          maxSize: 3,
        },
        amt_v: { val: amt_v, dir: oracledb.BIND_IN, maxSize: 50 },
        min_reduct_v: { val: min_reduct_v, dir: oracledb.BIND_IN, maxSize: 50 },
        arr_int_v: { val: arr_int_v, dir: oracledb.BIND_IN, maxSize: 50 },
        PEN_ADJUST_v: { val: PEN_ADJUST_v, dir: oracledb.BIND_IN, maxSize: 50 },
        INT_ADJUST_v: { val: INT_ADJUST_v, dir: oracledb.BIND_IN, maxSize: 50 },
        PRINCIPAL_TO_PAY_v: {
          val: PRINCIPAL_TO_PAY_v,
          dir: oracledb.BIND_IN,
          maxSize: 50,
        },
        SHADOW_BALANCE_TODAY_v: {
          val: SHADOW_BALANCE_TODAY_v,
          dir: oracledb.BIND_IN,
          maxSize: 50,
        },
        FORCE_DB_v: { val: FORCE_DB_v, dir: oracledb.BIND_IN, maxSize: 3 },
        SUM_FEE_AMOUNT_v: {
          val: SUM_FEE_AMOUNT_v,
          dir: oracledb.BIND_IN,
          maxSize: 50,
        },
        credit_bal_v: { val: credit_bal_v, dir: oracledb.BIND_IN, maxSize: 50 },
        LAST_REPAY_DATE_v: {
          val: LAST_REPAY_DATE_v,
          dir: oracledb.BIND_IN,
          maxSize: 90,
        },

        response_v: { dir: oracledb.BIND_OUT, maxSize: 200 },
      },
      function (err, result) {
        if (err) {
          console.log(err);
          response = {
            responseCode: "999",
            responseMessage: "Internal Server Error",
          };
          res.send(response);
        }
        if (result) {
          if (result.outBinds.response_v?.includes("07526")) {
            const message = result.outBinds.response_v;
            response = {
              responseCode: "000",
              responseMessage: message,
            };
          } else {
            response = {
              responseCode: "998",
              responseMessage: result.outBinds.response_v,
            };
          }
          res.send(response);
        }
      }
    );
  } catch (error) {
    console.error("Error:", error);
    res.send({
      responseCode: "999",
      responseMessage: "Internal server error",
    });
  }
});
// GET REPAYMENT COUNT
app.post("/api/get-repaycnt-outstanding", (req, res) => {
  const { facility_number } = req.body;
  async function getNostroData() {
    let con;
    try {
      con = await oracledb.getConnection({
        user: DB_USER,
        password: DB_PASSWORD,
        connectString: DB_CONNECTION_STRING,
        timeout: DB_CONNECTION_TIMEOUT,
      });

      const data = await con.execute(
        `SELECT count(ACTIVITY_DATE) count
        FROM REPAYMENT_SCHEDULE
        WHERE FACILITY_NO= :facility_number
        AND ACTIVITY_DATE > GET_POSTINGDATE
        AND NVL(REPAY_SEQ_NO,0)>0`,
        { facility_number }
      );

      if (data) {
        let arr0 = "";
        let arr = [];

        for (let i = 0; i < data.rows.length; i++) {
          let obj = {};
          for (let x = 0; x < data.metaData.length; x++) {
            obj = { ...obj, [data.metaData[x].name]: data.rows[i][x] };
          }
          arr.push(obj);
        }
        res.send(arr);
      } else {
        res.send("Something went wrong... Nothing was returned!!");
      }
    } catch (err) {
      res.send(err.toString());
    }
  }
  getNostroData();
});

// GET INT COUNT
app.post("/api/get-intcnt-outstanding", (req, res) => {
  const { facility_number } = req.body;
  async function getNostroData() {
    let con;
    try {
      con = await oracledb.getConnection({
        user: DB_USER,
        password: DB_PASSWORD,
        connectString: DB_CONNECTION_STRING,
        timeout: DB_CONNECTION_TIMEOUT,
      });

      const data = await con.execute(
        `  
        SELECT COUNT(ACTIVITY_DATE) as COUNT
              FROM REPAYMENT_SCHEDULE
                  WHERE FACILITY_NO=:facility_number
              AND ACTIVITY_DATE >GET_POSTINGDATE()
              AND NVL(INT_SEQ_NO,0)>0`,
        { facility_number }
      );

      if (data) {
        let arr0 = "";
        let arr = [];

        for (let i = 0; i < data.rows.length; i++) {
          let obj = {};
          for (let x = 0; x < data.metaData.length; x++) {
            obj = { ...obj, [data.metaData[x].name]: data.rows[i][x] };
          }
          arr.push(obj);
        }
        res.send(arr);
      } else {
        res.send("Something went wrong... Nothing was returned!!");
      }
    } catch (err) {
      res.send(err.toString());
    }
  }
  getNostroData();
});

// GET ACRRUED INTEREST AND ACCRUED PENAL
app.post("/api/get-accInt-get-accSusp", (req, res) => {
  const { principal_acct } = req.body;
  async function getAccIntAccSusp() {
    let con;
    try {
      con = await oracledb.getConnection({
        user: DB_USER,
        password: DB_PASSWORD,
        connectString: DB_CONNECTION_STRING,
        timeout: DB_CONNECTION_TIMEOUT,
      });

      const data = await con.execute(
        `select acr_chg, acr_penal
        from vw_casa_ledger where acct_link = :principal_acct`,
        { principal_acct }
      );

      if (data) {
        let arr0 = "";
        let arr = [];

        for (let i = 0; i < data.rows.length; i++) {
          let obj = {};
          for (let x = 0; x < data.metaData.length; x++) {
            obj = { ...obj, [data.metaData[x].name]: data.rows[i][x] };
          }
          arr.push(obj);
        }
        res.send(arr);
      } else {
        res.send("Something went wrong... Nothing was returned!!");
      }
    } catch (err) {
      res.send(err.toString());
    }
  }
  getAccIntAccSusp();
});

// GET NEXT SCHEDULE
app.post("/api/get-nxtSchedule", (req, res) => {
  const { facility_no } = req.body;
  async function getAccIntAccSusp() {
    let con;
    try {
      con = await oracledb.getConnection({
        user: DB_USER,
        password: DB_PASSWORD,
        connectString: DB_CONNECTION_STRING,
        timeout: DB_CONNECTION_TIMEOUT,
      });

      const data = await con.execute(
        `SELECT MAX(ACTIVITY_DATE) as max
        FROM REPAYMENT_SCHEDULE
          WHERE FACILITY_NO= :facility_no
        AND ACTIVITY_DATE <= GET_POSTINGDATE()`,
        { facility_no }
      );

      if (data) {
        let arr0 = "";
        let arr = [];

        for (let i = 0; i < data.rows.length; i++) {
          let obj = {};
          for (let x = 0; x < data.metaData.length; x++) {
            obj = { ...obj, [data.metaData[x].name]: data.rows[i][x] };
          }
          arr.push(obj);
        }
        res.send(arr);
      } else {
        res.send("Something went wrong... Nothing was returned!!");
      }
    } catch (err) {
      res.send(err.toString());
    }
  }
  getAccIntAccSusp();
});
// principal arrears, interest arrears, arrears interest suspense
app.post("/api/get-loan-arrears-details", (req, res) => {
  const { facility_number } = req.body;
  async function getArrearsDetails() {
    let con;
    try {
      con = await oracledb.getConnection({
        user: DB_USER,
        password: DB_PASSWORD,
        connectString: DB_CONNECTION_STRING,
        timeout: DB_CONNECTION_TIMEOUT,
      });

      const data = await con.execute(
        `select ABS(nvl(PRIN_PASTDUE,0)) as principal_arrears, abs(nvl(OD_INT_PASTDUE,0)) as interest_arrears,ARREARS_INTIN_SUSP as arrInterest_susp
         from REPAYMENT_SCHD_HDNEW
         where facility_no = :facility_number`,
        { facility_number }
      );

      if (data) {
        let arr0 = "";
        let arr = [];

        for (let i = 0; i < data.rows.length; i++) {
          let obj = {};
          for (let x = 0; x < data.metaData.length; x++) {
            obj = { ...obj, [data.metaData[x].name]: data.rows[i][x] };
          }
          arr.push(obj);
        }
        res.send(arr);
      } else {
        res.send("Something went wrong... Nothing was returned!!");
      }
    } catch (err) {
      res.send(err.toString());
    }
  }
  getArrearsDetails();
});

// Getting Insurance Amount
app.post("/api/get-insurance-amt", (req, res) => {
  const { balance_remaining, insurance } = req.body;
  async function getInsuranceAmt() {
    let con;
    try {
      con = await oracledb.getConnection({
        user: DB_USER,
        password: DB_PASSWORD,
        connectString: DB_CONNECTION_STRING,
        timeout: DB_CONNECTION_TIMEOUT,
      });

      const data = await con.execute(
        `select 
        ROUND(to_number(nvl(:balance_remaining,0)*nvl(:insurance,0) )
       /(100),2) as insurance_amt
       from DUAL`,
        { balance_remaining, insurance }
      );

      if (data) {
        let arr0 = "";
        let arr = [];

        for (let i = 0; i < data.rows.length; i++) {
          let obj = {};
          for (let x = 0; x < data.metaData.length; x++) {
            obj = { ...obj, [data.metaData[x].name]: data.rows[i][x] };
          }
          arr.push(obj);
        }
        res.send(arr);
      } else {
        res.send("Something went wrong... Nothing was returned!!");
      }
    } catch (err) {
      res.send(err.toString());
    }
  }
  getInsuranceAmt();
});

// Getting Insurance Amount
app.post("/api/get-insurance-rate", (req, res) => {
  const { balance_remaining, insurance_amt } = req.body;
  async function getInsuranceAmt() {
    let con;
    try {
      con = await oracledb.getConnection({
        user: DB_USER,
        password: DB_PASSWORD,
        connectString: DB_CONNECTION_STRING,
        timeout: DB_CONNECTION_TIMEOUT,
      });

      const data = await con.execute(
        `select 
        abs(nvl(:insurance_amt,0)*100
         /ROUND(to_number(nvl(:balance_remaining,0))) ) as insurance_rate
         from dual`,
        { insurance_amt, balance_remaining }
      );

      if (data) {
        let arr0 = "";
        let arr = [];

        for (let i = 0; i < data.rows.length; i++) {
          let obj = {};
          for (let x = 0; x < data.metaData.length; x++) {
            obj = { ...obj, [data.metaData[x].name]: data.rows[i][x] };
          }
          arr.push(obj);
        }
        res.send(arr);
      } else {
        res.send("Something went wrong... Nothing was returned!!");
      }
    } catch (err) {
      res.send(err.toString());
    }
  }
  getInsuranceAmt();
});

// Getting Preview Schedule
app.post("/api/get-preview-sch", (req, res) => {
  const { facility_number } = req.body;
  async function getReviewScheduleDetails() {
    let con;
    try {
      con = await oracledb.getConnection({
        user: DB_USER,
        password: DB_PASSWORD,
        connectString: DB_CONNECTION_STRING,
        timeout: DB_CONNECTION_TIMEOUT,
      });

      const data = await con.execute(
        `select repay_seq_no, date_due, principal, interest, monthp, proc_fees  from SCHEDULE_ENQ_VW where facility_no=:facility_number`,
        { facility_number }
      );

      if (data) {
        let arr0 = "";
        let arr = [];

        for (let i = 0; i < data.rows.length; i++) {
          let obj = {};
          for (let x = 0; x < data.metaData.length; x++) {
            obj = { ...obj, [data.metaData[x].name]: data.rows[i][x] };
          }
          arr.push(obj);
        }
        res.send(arr);
      } else {
        res.send("Something went wrong... Nothing was returned!!");
      }
    } catch (err) {
      res.send(err.toString());
    }
  }
  getReviewScheduleDetails();
});

// Getting Collateral Details
app.post("/api/get-collateral-no", (req, res) => {
  const { customer_number } = req.body;
  async function getReviewScheduleDetails() {
    let con;
    try {
      con = await oracledb.getConnection({
        user: DB_USER,
        password: DB_PASSWORD,
        connectString: DB_CONNECTION_STRING,
        timeout: DB_CONNECTION_TIMEOUT,
      });

      const data = await con.execute(
        `select a.collateral_no as value, b.description as label
        from tb_collateral a ,code_desc b
    where a.customer_number= :customer_number
    and b.code_type = 'COL'
    and a.coll_type = b.actual_code
    and b.actual_code in ('C01','C02','C03','C04','C05')
    and a.approval_flag='Y'
    union
    select a.collateral_no as value, b.description as label
        from tb_collateral a ,code_desc b,tb_sis_comp c
    where a.customer_number = :customer_number
    and b.code_type = 'COL'
    and a.coll_type = b.actual_code
    and b.actual_code in ('C01','C02','C03','C04','C05')
    and a.approval_flag='Y'`,
        { customer_number }
      );

      if (data) {
        let arr0 = "";
        let arr = [];

        for (let i = 0; i < data.rows.length; i++) {
          let obj = {};
          for (let x = 0; x < data.metaData.length; x++) {
            obj = { ...obj, [data.metaData[x].name]: data.rows[i][x] };
          }
          arr.push(obj);
        }
        res.send(arr);
      } else {
        res.send("Something went wrong... Nothing was returned!!");
      }
    } catch (err) {
      res.send(err.toString());
    }
  }
  getReviewScheduleDetails();
});

// Getting The Account Balance
app.post("/api/get-balance-acct-loan-payment", (req, res) => {
  const { facility_no } = req.body;
  async function getReviewScheduleDetails() {
    let con;
    try {
      con = await oracledb.getConnection({
        user: DB_USER,
        password: DB_PASSWORD,
        connectString: DB_CONNECTION_STRING,
        timeout: DB_CONNECTION_TIMEOUT,
      });

      const data = await con.execute(
        `
select legal_form, currency_code, type_of_acct, branch_code, customer_number,principal_account,  maintenance_fee_account, szloanapplnno,  interest_rate, effective_date,REPNT_PERIOD_MONTHS, last_repay_date,  od_interest_amount  int_amount,  shadow_balance_today, facility_amount, facility_no, COT_AMOUNT,description, od_intin_susp,pen_intin_susp, od_int_pastdue,od_accrued_int, GET_CLASSDESC(ACCT_CLASS) as acct_class_desc, ACCT_CLASS, get_avbal(maintenance_fee_account) as avbal_mfa, ARREARS_INT from LOAN_ENQ_VW where facility_no = :facility_no

        `,
        { facility_no }
      );

      if (data) {
        let arr0 = "";
        let arr = [];

        for (let i = 0; i < data.rows.length; i++) {
          let obj = {};
          for (let x = 0; x < data.metaData.length; x++) {
            obj = { ...obj, [data.metaData[x].name]: data.rows[i][x] };
          }
          arr.push(obj);
        }
        res.send(arr);
      } else {
        res.send("Something went wrong... Nothing was returned!!");
      }
    } catch (err) {
      res.send(err.toString());
    }
  }
  getReviewScheduleDetails();
});

// Getting Approval Details for Facility Number Details
app.post("/api/data-for-loan-payment-approv", (req, res) => {
  const { facility_no } = req.body;
  async function getReviewScheduleDetails() {
    let con;
    try {
      con = await oracledb.getConnection({
        user: DB_USER,
        password: DB_PASSWORD,
        connectString: DB_CONNECTION_STRING,
        timeout: DB_CONNECTION_TIMEOUT,
      });

      const data = await con.execute(
        `select * from tb_loan_payment where facility_no=:facility_no  AND APPROVAL_FLAG='N'`,
        { facility_no }
      );

      if (data) {
        let arr0 = "";
        let arr = [];

        for (let i = 0; i < data.rows.length; i++) {
          let obj = {};
          for (let x = 0; x < data.metaData.length; x++) {
            obj = { ...obj, [data.metaData[x].name]: data.rows[i][x] };
          }
          arr.push(obj);
        }
        res.send(arr);
      } else {
        res.send("Something went wrong... Nothing was returned!!");
      }
    } catch (err) {
      res.send(err.toString());
    }
  }
  getReviewScheduleDetails();
});

// Getting Approval Details for Facility Number Details 2
app.post("/api/data2-for-loan-payment-approv", (req, res) => {
  const { facility_no } = req.body;
  async function getReviewScheduleDetails() {
    let con;
    try {
      con = await oracledb.getConnection({
        user: DB_USER,
        password: DB_PASSWORD,
        connectString: DB_CONNECTION_STRING,
        timeout: DB_CONNECTION_TIMEOUT,
      });

      const data = await con.execute(
        `select * from loan_enq_vw where facility_no=:facility_no`,
        {
          facility_no,
        }
      );

      if (data) {
        let arr0 = "";
        let arr = [];

        for (let i = 0; i < data.rows.length; i++) {
          let obj = {};
          for (let x = 0; x < data.metaData.length; x++) {
            obj = { ...obj, [data.metaData[x].name]: data.rows[i][x] };
          }
          arr.push(obj);
        }
        res.send(arr);
      } else {
        res.send("Something went wrong... Nothing was returned!!");
      }
    } catch (err) {
      res.send(err.toString());
    }
  }
  getReviewScheduleDetails();
});

// Getting Approval Details for Facility Number Details 2
app.post("/api/data4-for-loan-payment-approv", (req, res) => {
  const { facility_no, pay_app_no } = req.body;
  async function getReviewScheduleDetails() {
    let con;
    try {
      con = await oracledb.getConnection({
        user: DB_USER,
        password: DB_PASSWORD,
        connectString: DB_CONNECTION_STRING,
        timeout: DB_CONNECTION_TIMEOUT,
      });

      const data = await con.execute(
        `SELECT * FROM TB_LOAN_PAYRESCH WHERE FACILITY_NO =:facility_no AND PAY_APP_NO =:pay_app_no`,
        { facility_no, pay_app_no }
      );

      if (data) {
        let arr0 = "";
        let arr = [];

        for (let i = 0; i < data.rows.length; i++) {
          let obj = {};
          for (let x = 0; x < data.metaData.length; x++) {
            obj = { ...obj, [data.metaData[x].name]: data.rows[i][x] };
          }
          arr.push(obj);
        }
        res.send(arr);
      } else {
        res.send("Something went wrong... Nothing was returned!!");
      }
    } catch (err) {
      res.send(err.toString());
    }
  }
  getReviewScheduleDetails();
});

// procedure consumption
app.post("/api/lending-payments", async (req, res) => {
  const {
    PRINCIPAL_ACCT_V,
    effective_date_v,
    CUSTOMER_NO_v,
    response_v,
    facility_no_v,
    payment_type_v,
    amt_v,
    REASON_v,
    document_ref_v,
    EARLY_FEE_AMOUNT_v,
    EARLY_PENAL_AMOUNT_v,
    min_reduct_v,
    arr_int_v,
    PEN_ADJUST_v,
    INT_ADJUST_v,
    SHADOW_BALANCE_TODAY_v,
    PRINCIPAL_TO_PAY_v,
    FORCE_DB_v,
    SUM_FEE_AMOUNT_v,
    credit_bal_v,
    INT_RATE_v,
    REPNT_PERIOD_MONTHS_v,
    INT_REPAY_PLAN_v,
    REPAYMENT_PLAN_v,
    username_v,
    RESCH_AFTER_PAY_v,
    branch_code_v,
    WAIVER_OPTION_v,
    EARLY_FEES_v,
    EARLY_PENAL_v,
    INSURANCE_v,
    INSURANCE_AMOUNT_v,
    ARR_WAIVE_v,
    INT_WAIVE_v,
    PEN_WAIVE_v,
    INT_PAY_COUNT_v,
    PRIN_PAY_COUNT_v,
    INT_TYPE_v,
    INT_MORATO_v,
    MORATORIUM_PERIOD_v,
    LAST_DAY_v,
    EXEMPT_MONTH_v,
    prob_days_v,
    machine_id_v,
    new_class_v,
    currency_v,
    hostname_v,
    ACTION_V,
  } = req.body;

  try {
    const connection = await oracledb.getConnection({
      user: DB_USER,
      password: DB_PASSWORD,
      connectString: DB_CONNECTION_STRING,
    });
    await connection.execute(
      `BEGIN prc_lending_pymt(
        :PRINCIPAL_ACCT_V,
        :effective_date_v,
        :CUSTOMER_NO_v,
        :response_v,
        :facility_no_v,
        :payment_type_v,
        :amt_v,
        :REASON_v,
        :document_ref_v,
        :EARLY_FEE_AMOUNT_v,
        :EARLY_PENAL_AMOUNT_v,
        :min_reduct_v,
        :arr_int_v,
        :PEN_ADJUST_v,
        :INT_ADJUST_v,
        :SHADOW_BALANCE_TODAY_v,
        :PRINCIPAL_TO_PAY_v,
        :FORCE_DB_v,
        :SUM_FEE_AMOUNT_v,
        :credit_bal_v,
        :INT_RATE_v,
        :REPNT_PERIOD_MONTHS_v,
        :INT_REPAY_PLAN_v,
        :REPAYMENT_PLAN_v,
        :username_v,
        :RESCH_AFTER_PAY_v,
        :branch_code_v,
        :WAIVER_OPTION_v,
        :EARLY_FEES_v,
        :EARLY_PENAL_v,
        :INSURANCE_v,
        :INSURANCE_AMOUNT_v,
        :ARR_WAIVE_v,
        :INT_WAIVE_v,
        :PEN_WAIVE_v,
        :INT_PAY_COUNT_v,
        :PRIN_PAY_COUNT_v,
        :INT_TYPE_v,
        :INT_MORATO_v,
        :MORATORIUM_PERIOD_v,
        :LAST_DAY_v,
        :EXEMPT_MONTH_v,
        :machine_id_v,
        :new_class_v,
        :currency_v,
        :hostname_v,
        :ACTION_V); END;`,
      {
        PRINCIPAL_ACCT_V: {
          val: PRINCIPAL_ACCT_V,
          dir: oracledb.BIND_IN,
          type: oracledb.STRING,
          maxSize: 20,
        },
        effective_date_v: {
          val: new Date(effective_date_v),
          dir: oracledb.BIND_IN,
          type: oracledb.DATE,
          maxSize: 200,
        },
        CUSTOMER_NO_v: {
          val: CUSTOMER_NO_v,
          dir: oracledb.BIND_IN,
          type: oracledb.STRING,
          maxSize: 20,
        },
        response_v: {
          val: response_v,
          dir: oracledb.BIND_OUT,
          type: oracledb.STRING,
          maxSize: 200,
        },
        facility_no_v: {
          val: facility_no_v,
          dir: oracledb.BIND_IN,
          type: oracledb.STRING,
          maxSize: 20,
        },
        payment_type_v: {
          val: payment_type_v,
          dir: oracledb.BIND_IN,
          type: oracledb.STRING,
          maxSize: 20,
        },
        amt_v: {
          val: amt_v,
          dir: oracledb.BIND_IN,
          maxSize: 20,
          type: oracledb.NUMBER,
        },
        REASON_v: {
          val: REASON_v,
          dir: oracledb.BIND_IN,
          maxSize: 200,
          type: oracledb.STRING,
        },
        document_ref_v: {
          val: document_ref_v,
          dir: oracledb.BIND_IN,
          type: oracledb.NUMBER,
          maxSize: 20,
        },
        EARLY_FEE_AMOUNT_v: {
          val: EARLY_FEE_AMOUNT_v,
          dir: oracledb.BIND_IN,
          type: oracledb.NUMBER,
          maxSize: 20,
        },
        EARLY_PENAL_AMOUNT_v: {
          val: EARLY_PENAL_AMOUNT_v,
          dir: oracledb.BIND_IN,
          type: oracledb.NUMBER,
          maxSize: 200,
        },
        min_reduct_v: {
          val: min_reduct_v,
          dir: oracledb.BIND_IN,
          maxSize: 20,
          type: oracledb.NUMBER,
        },
        arr_int_v: {
          val: arr_int_v,
          dir: oracledb.BIND_IN,
          type: oracledb.NUMBER,
          maxSize: 200,
        },
        PEN_ADJUST_v: {
          val: PEN_ADJUST_v,
          dir: oracledb.BIND_IN,
          type: oracledb.NUMBER,
          maxSize: 20,
        },
        INT_ADJUST_v: {
          val: INT_ADJUST_v,
          dir: oracledb.BIND_IN,
          maxSize: 20,
          type: oracledb.NUMBER,
        },
        SHADOW_BALANCE_TODAY_v: {
          val: SHADOW_BALANCE_TODAY_v,
          dir: oracledb.BIND_IN,
          maxSize: 20,
          type: oracledb.NUMBER,
        },
        PRINCIPAL_TO_PAY_v: {
          val: PRINCIPAL_TO_PAY_v,
          dir: oracledb.BIND_IN,
          maxSize: 20,
          type: oracledb.NUMBER,
        },
        FORCE_DB_v: {
          val: FORCE_DB_v,
          dir: oracledb.BIND_IN,
          maxSize: 200,
          type: oracledb.STRING,
        },
        SUM_FEE_AMOUNT_v: {
          val: SUM_FEE_AMOUNT_v,
          dir: oracledb.BIND_IN,
          maxSize: 20,
          type: oracledb.NUMBER,
        },
        credit_bal_v: {
          val: credit_bal_v,
          dir: oracledb.BIND_IN,
          maxSize: 20,
          type: oracledb.NUMBER,
        },
        INT_RATE_v: {
          val: INT_RATE_v,
          dir: oracledb.BIND_IN,
          maxSize: 20,
          type: oracledb.NUMBER,
        },
        REPNT_PERIOD_MONTHS_v: {
          val: REPNT_PERIOD_MONTHS_v,
          dir: oracledb.BIND_IN,
          maxSize: 20,
          type: oracledb.NUMBER,
        },
        INT_REPAY_PLAN_v: {
          val: INT_REPAY_PLAN_v,
          type: oracledb.STRING,
          dir: oracledb.BIND_IN,
          maxSize: 20,
        },
        REPAYMENT_PLAN_v: {
          val: REPAYMENT_PLAN_v,
          type: oracledb.STRING,
          dir: oracledb.BIND_IN,
          maxSize: 20,
        },
        username_v: {
          val: username_v,
          type: oracledb.STRING,
          dir: oracledb.BIND_IN,
          maxSize: 200,
        },
        RESCH_AFTER_PAY_v: {
          val: RESCH_AFTER_PAY_v,
          type: oracledb.STRING,
          dir: oracledb.BIND_IN,
          maxSize: 20,
        },
        branch_code_v: {
          val: branch_code_v,
          type: oracledb.STRING,
          dir: oracledb.BIND_IN,
          maxSize: 20,
        },
        WAIVER_OPTION_v: {
          val: WAIVER_OPTION_v,
          type: oracledb.STRING,
          dir: oracledb.BIND_IN,
          maxSize: 20,
        },
        EARLY_FEES_v: {
          val: EARLY_FEES_v,
          type: oracledb.NUMBER,
          dir: oracledb.BIND_IN,
          maxSize: 20,
        },
        EARLY_PENAL_v: {
          val: EARLY_PENAL_v,
          type: oracledb.NUMBER,
          dir: oracledb.BIND_IN,
          maxSize: 20,
        },
        INSURANCE_v: {
          val: INSURANCE_v,
          type: oracledb.NUMBER,
          dir: oracledb.BIND_IN,
          maxSize: 20,
        },
        INSURANCE_AMOUNT_v: {
          val: INSURANCE_AMOUNT_v,
          type: oracledb.NUMBER,
          dir: oracledb.BIND_IN,
          maxSize: 20,
        },
        ARR_WAIVE_v: {
          val: ARR_WAIVE_v,
          type: oracledb.NUMBER,
          dir: oracledb.BIND_IN,
          maxSize: 20,
        },
        INT_WAIVE_v: {
          val: INT_WAIVE_v,
          type: oracledb.NUMBER,
          dir: oracledb.BIND_IN,
          maxSize: 20,
        },
        PEN_WAIVE_v: {
          val: PEN_WAIVE_v,
          type: oracledb.NUMBER,
          dir: oracledb.BIND_IN,
          maxSize: 20,
        },
        INT_PAY_COUNT_v: {
          val: INT_PAY_COUNT_v,
          type: oracledb.NUMBER,
          dir: oracledb.BIND_IN,
          maxSize: 20,
        },
        PRIN_PAY_COUNT_v: {
          val: PRIN_PAY_COUNT_v,
          type: oracledb.NUMBER,
          dir: oracledb.BIND_IN,
          maxSize: 20,
        },
        INT_TYPE_v: {
          val: INT_TYPE_v,
          type: oracledb.STRING,
          dir: oracledb.BIND_IN,
          maxSize: 20,
        },
        INT_MORATO_v: {
          val: INT_MORATO_v,
          type: oracledb.STRING,
          dir: oracledb.BIND_IN,
          maxSize: 20,
        },
        MORATORIUM_PERIOD_v: {
          val: MORATORIUM_PERIOD_v,
          type: oracledb.NUMBER,
          dir: oracledb.BIND_IN,
          maxSize: 20,
        },
        LAST_DAY_v: {
          val: LAST_DAY_v,
          type: oracledb.STRING,
          dir: oracledb.BIND_IN,
          maxSize: 20,
        },
        EXEMPT_MONTH_v: {
          val: EXEMPT_MONTH_v,
          type: oracledb.STRING,
          dir: oracledb.BIND_IN,
          maxSize: 20,
        },
        machine_id_v: {
          val: machine_id_v,
          type: oracledb.STRING,
          dir: oracledb.BIND_IN,
          maxSize: 200,
        },
        new_class_v: {
          val: new_class_v,
          type: oracledb.STRING,
          dir: oracledb.BIND_IN,
          maxSize: 20,
        },
        currency_v: {
          val: currency_v,
          type: oracledb.STRING,
          dir: oracledb.BIND_IN,
          maxSize: 20,
        },

        hostname_v: {
          val: hostname_v,
          type: oracledb.STRING,
          dir: oracledb.BIND_IN,
          maxSize: 200,
        },
        ACTION_V: {
          val: ACTION_V,
          type: oracledb.STRING,
          dir: oracledb.BIND_IN,
          maxSize: 20,
        },
      },

      function (err, result) {
        if (err) {
          console.log(err);
          response = {
            responseCode: "999",
            responseMessage: "Internal Server Error",
          };
          res.send(response);
        }
        if (result) {
          if (result.outBinds.response_v.includes("07526")) {
            const message = result.outBinds.response_v;
            response = {
              responseCode: "000",
              responseMessage: message,
            };
          } else {
            response = {
              responseCode: "998",
              responseMessage: result.outBinds.response_v,
            };
          }
          res.send(response);
        }
      }
    );
  } catch (error) {
    console.error("Error:", error);
    res.send({
      // error: error.toString();
      responseCode: `999`,
      responseMessage: "Internal server error",
    });
  }
});

// PREVIEW SCHEDULE
app.post("/api/loan-payment-sched-table-prc", async (req, res) => {
  const {
    f_no_v,
    OUT_PRIN_BAL_v,
    int_rate_v,
    int_type_v,
    repayment_plan_v,
    moratorium_period_v,
    exempt_month_v,
    PRIN_PAY_COUNT_v,
    type_of_acct_v,
    legal_form_v,
    currency_code_v,
    last_day_v,
    repnt_period_months_v,
    date_v,
    loan_amt_v,
    int_morato_v,
    int_repay_plan_v,
    int_pay_count_v,
    response_v,
  } = req.body;

  try {
    const connection = await oracledb.getConnection({
      user: DB_USER,
      password: DB_PASSWORD,
      connectString: DB_CONNECTION_STRING,
    });
    await connection.execute(
      `BEGIN preview_sch(
        :f_no_v  ,
         :OUT_PRIN_BAL_v  ,
         :int_rate_v  ,
         :int_type_v  ,
         :repayment_plan_v  , 
         :moratorium_period_v  ,
         :exempt_month_v  ,
         :PRIN_PAY_COUNT_v  , 
         :type_of_acct_v  ,
          :legal_form_v  , 
          :currency_code_v  ,
         :last_day_v  ,
         :repnt_period_months_v  ,
         :date_v  ,
         :loan_amt_v  ,
         :int_morato_v  ,
         :int_repay_plan_v  ,
         :int_pay_count_v  ,
         :response_v); END;`,
      {
        f_no_v: {
          val: f_no_v,
          dir: oracledb.BIND_IN,
          maxSize: 20,
        },
        OUT_PRIN_BAL_v: {
          val: OUT_PRIN_BAL_v,
          dir: oracledb.BIND_IN,
          maxSize: 20,
        },
        int_rate_v: {
          val: int_rate_v,
          dir: oracledb.BIND_IN,
          maxSize: 20,
        },
        int_type_v: {
          val: int_type_v,
          dir: oracledb.BIND_IN,
          maxSize: 20,
        },
        repayment_plan_v: {
          val: repayment_plan_v,
          dir: oracledb.BIND_IN,
          maxSize: 20,
        },
        moratorium_period_v: {
          val: moratorium_period_v,
          dir: oracledb.BIND_IN,
          maxSize: 20,
        },
        exempt_month_v: {
          val: exempt_month_v,
          dir: oracledb.BIND_IN,
          maxSize: 20,
        },
        PRIN_PAY_COUNT_v: {
          val: PRIN_PAY_COUNT_v,
          dir: oracledb.BIND_IN,
          maxSize: 20,
        },
        type_of_acct_v: {
          val: type_of_acct_v,
          dir: oracledb.BIND_IN,
          type: oracledb.STRING,
          maxSize: 20,
        },
        legal_form_v: {
          val: legal_form_v,
          dir: oracledb.BIND_IN,
          maxSize: 20,
        },
        currency_code_v: {
          val: currency_code_v,
          dir: oracledb.BIND_IN,
          maxSize: 20,
        },
        last_day_v: {
          val: last_day_v,
          dir: oracledb.BIND_IN,
          maxSize: 20,
        },
        repnt_period_months_v: {
          val: repnt_period_months_v,
          dir: oracledb.BIND_IN,
          maxSize: 20,
        },
        date_v: {
          // val: new Date(date_v),
          val: date_v,
          dir: oracledb.BIND_IN,
          maxSize: 200,
        },
        loan_amt_v: {
          val: loan_amt_v,
          dir: oracledb.BIND_IN,
          maxSize: 20,
        },
        int_morato_v: {
          val: int_morato_v,
          dir: oracledb.BIND_IN,
          maxSize: 20,
        },
        int_repay_plan_v: {
          val: int_repay_plan_v,
          dir: oracledb.BIND_IN,
          maxSize: 20,
        },
        int_pay_count_v: {
          val: int_pay_count_v,
          dir: oracledb.BIND_IN,
          maxSize: 20,
        },
        response_v: {
          val: response_v,
          dir: oracledb.BIND_OUT,
          maxSize: 200,
        },
      },

      function (err, result) {
        if (err) {
          console.log(err);
          response = {
            responseCode: "999",
            responseMessage: "Internal Server Error",
          };
          res.send(response);
        }
        if (result) {
          if (result.outBinds.response_v.includes("07526")) {
            const message = result.outBinds.response_v;
            response = {
              responseCode: "000",
              responseMessage: message,
            };
          } else {
            response = {
              responseCode: "998",
              responseMessage: result.outBinds.response_v,
            };
          }
          res.send(response);
        }
      }
    );
  } catch (error) {
    console.error("Error:", error);
    res.send({
      // error: error.toString();
      responseCode: `999`,
      responseMessage: "Internal server error",
    });
  }
});

// APPROVAL FOR LENDING PAYMENTS
app.post("/api/app-lending-payments", async (req, res) => {
  const {
    repayment_acct_v,
    principal_acct_v,
    SHADOW_BALANCE_TODAY_v,
    acct_class_v,
    force_debit_v,
    response_v,
    message_v,
    ERROR_MESS_V,
    DOC_REF_V,
    waiver_option_v,
    payment_type_v,
    facility_no_v,
    legal_form_v,
    customer_no_v,
    current_amount_v,
    INTEREST_REVENUE_ACCT_v,
    TT_TOPAY_v,
    SUM_FEE_AMOUNT_v,
    AMT_v,
    INT_ADJUST_v,
    PEN_ADJUST_v,
    ARR_INT_v,
    resch_after_pay_v,
    username_v,
    HOSTNAME_v,
    OD_INTEREST_AMOUNT_v,
    arrears_bal_v,
    machine_ip_v,
    reason_v,
    prov_amt_v,
    prinbal_v,
    total_bal_v,
    early_penal_amount_v,
    early_fee_amount_v,
    ARREARS_SUS_v,
    OUT_PRIN_BAL_v,
    TOTAL_BALS_v,
    last_day_v,
    EXEMPT_MONTH_v,
    int_pay_count_v,
    int_repay_plan_v,
    int_rate_v,
    moratorium_period_v,
    int_morato_v,
    repnt_period_months_v,
    int_type_v,
    repayment_plan_v,
    prin_pay_count_v,
    pay_app_no_v,
    FACILITY_AMOUNT_v,
    current_app_flag_v,
  } = req.body;

  try {
    const connection = await oracledb.getConnection({
      user: DB_USER,
      password: DB_PASSWORD,
      connectString: DB_CONNECTION_STRING,
    });
    await connection.execute(
      `BEGIN prc_authorized_payment(
            :repayment_acct_v    ,
            :principal_acct_v     ,
            :SHADOW_BALANCE_TODAY_v ,
            :acct_class_v ,
            :force_debit_v ,
            :response_v ,
            :message_v ,
            :ERROR_MESS_V,
            :DOC_REF_V ,
            
            :waiver_option_v, 
            :payment_type_v ,
            :facility_no_v ,
            :legal_form_v ,
            :customer_no_v ,
            :current_amount_v, 
            :INTEREST_REVENUE_ACCT_v ,
            :TT_TOPAY_v ,
            :SUM_FEE_AMOUNT_v ,
            :AMT_v ,
            :INT_ADJUST_v ,
            :PEN_ADJUST_v ,
            :ARR_INT_v ,
            :resch_after_pay_v ,
            :username_v ,
            :HOSTNAME_v ,
            :OD_INTEREST_AMOUNT_v ,
            :arrears_bal_v ,
            :machine_ip_v ,
            :reason_v ,
            :prov_amt_v ,
            :prinbal_v ,
            :total_bal_v ,
            :early_penal_amount_v ,
            :early_fee_amount_v ,
            :ARREARS_SUS_v ,
            :OUT_PRIN_BAL_v ,
            :TOTAL_BALS_v ,
            :last_day_v ,
            :EXEMPT_MONTH_v ,
            :int_pay_count_v ,
            :int_repay_plan_v ,
            :int_rate_v ,    
            :moratorium_period_v , 
            :int_morato_v ,
            :repnt_period_months_v ,   
            :int_type_v ,  
            :repayment_plan_v ,
            :prin_pay_count_v ,
            :pay_app_no_v ,
            :FACILITY_AMOUNT_v,
            :current_app_flag_v
            ); END;`,
      {
        repayment_acct_v: {
          val: repayment_acct_v,
          dir: oracledb.BIND_IN,
          maxSize: 50,
        },
        principal_acct_v: {
          val: principal_acct_v,
          dir: oracledb.BIND_IN,
          maxSize: 50,
        },
        SHADOW_BALANCE_TODAY_v: {
          val: SHADOW_BALANCE_TODAY_v,
          dir: oracledb.BIND_IN,
          maxSize: 50,
        },
        acct_class_v: {
          val: acct_class_v,
          dir: oracledb.BIND_IN,
          maxSize: 50,
        },
        force_debit_v: {
          val: force_debit_v,
          dir: oracledb.BIND_IN,
          maxSize: 20,
        },
        response_v: {
          val: response_v,
          dir: oracledb.BIND_OUT,
          maxSize: 200,
        },
        message_v: {
          val: message_v,
          dir: oracledb.BIND_OUT,
          maxSize: 200,
        },
        ERROR_MESS_V: {
          val: ERROR_MESS_V,
          dir: oracledb.BIND_OUT,
          maxSize: 200,
        },
        DOC_REF_V: {
          val: DOC_REF_V,
          dir: oracledb.BIND_IN,
          maxSize: 20,
        },

        waiver_option_v: {
          val: waiver_option_v,
          dir: oracledb.BIND_IN,
          maxSize: 20,
        },
        payment_type_v: {
          val: payment_type_v,
          dir: oracledb.BIND_IN,
          maxSize: 20,
        },
        facility_no_v: {
          val: facility_no_v,
          dir: oracledb.BIND_IN,
          maxSize: 20,
        },
        legal_form_v: {
          val: legal_form_v,
          dir: oracledb.BIND_IN,
          maxSize: 20,
        },
        customer_no_v: {
          val: customer_no_v,
          dir: oracledb.BIND_IN,
          maxSize: 20,
        },
        current_amount_v: {
          val: current_amount_v,
          dir: oracledb.BIND_IN,
          maxSize: 20,
        },
        INTEREST_REVENUE_ACCT_v: {
          val: INTEREST_REVENUE_ACCT_v,
          dir: oracledb.BIND_IN,
          maxSize: 20,
        },
        TT_TOPAY_v: {
          val: TT_TOPAY_v,
          dir: oracledb.BIND_IN,
          maxSize: 20,
        },
        SUM_FEE_AMOUNT_v: {
          val: SUM_FEE_AMOUNT_v,
          dir: oracledb.BIND_IN,
          maxSize: 20,
        },
        AMT_v: {
          val: AMT_v,
          dir: oracledb.BIND_IN,
          maxSize: 20,
        },
        INT_ADJUST_v: {
          val: INT_ADJUST_v,
          dir: oracledb.BIND_IN,
          maxSize: 20,
        },
        PEN_ADJUST_v: {
          val: PEN_ADJUST_v,
          dir: oracledb.BIND_IN,
          maxSize: 20,
        },
        ARR_INT_v: {
          val: ARR_INT_v,
          dir: oracledb.BIND_IN,
          maxSize: 20,
        },
        resch_after_pay_v: {
          val: resch_after_pay_v,
          dir: oracledb.BIND_IN,
          maxSize: 20,
        },
        username_v: {
          val: username_v,
          dir: oracledb.BIND_IN,
          maxSize: 20,
        },
        HOSTNAME_v: {
          val: HOSTNAME_v,
          dir: oracledb.BIND_IN,
          maxSize: 20,
        },
        OD_INTEREST_AMOUNT_v: {
          val: OD_INTEREST_AMOUNT_v,
          dir: oracledb.BIND_IN,
          maxSize: 20,
        },
        arrears_bal_v: {
          val: arrears_bal_v,
          dir: oracledb.BIND_IN,
          maxSize: 20,
        },
        machine_ip_v: {
          val: machine_ip_v,
          dir: oracledb.BIND_IN,
          maxSize: 20,
        },
        reason_v: {
          val: reason_v,
          dir: oracledb.BIND_IN,
          maxSize: 20,
        },
        prov_amt_v: {
          val: prov_amt_v,
          dir: oracledb.BIND_IN,
          maxSize: 20,
        },
        prinbal_v: {
          val: prinbal_v,
          dir: oracledb.BIND_IN,
          maxSize: 20,
        },
        total_bal_v: {
          val: total_bal_v,
          dir: oracledb.BIND_IN,
          maxSize: 20,
        },
        early_penal_amount_v: {
          val: early_penal_amount_v,
          dir: oracledb.BIND_IN,
          maxSize: 20,
        },
        early_fee_amount_v: {
          val: early_fee_amount_v,
          dir: oracledb.BIND_IN,
          maxSize: 20,
        },
        ARREARS_SUS_v: {
          val: ARREARS_SUS_v,
          dir: oracledb.BIND_IN,
          maxSize: 20,
        },
        OUT_PRIN_BAL_v: {
          val: OUT_PRIN_BAL_v,
          dir: oracledb.BIND_IN,
          maxSize: 20,
        },
        TOTAL_BALS_v: {
          val: TOTAL_BALS_v,
          dir: oracledb.BIND_IN,
          maxSize: 20,
        },
        last_day_v: {
          val: last_day_v,
          dir: oracledb.BIND_IN,
          maxSize: 20,
        },
        EXEMPT_MONTH_v: {
          val: EXEMPT_MONTH_v,
          dir: oracledb.BIND_IN,
          maxSize: 20,
        },
        int_pay_count_v: {
          val: int_pay_count_v,
          dir: oracledb.BIND_IN,
          maxSize: 20,
        },
        int_repay_plan_v: {
          val: int_repay_plan_v,
          dir: oracledb.BIND_IN,
          maxSize: 20,
        },
        int_rate_v: {
          val: int_rate_v,
          dir: oracledb.BIND_IN,
          maxSize: 20,
        },
        moratorium_period_v: {
          val: moratorium_period_v,
          dir: oracledb.BIND_IN,
          maxSize: 20,
        },
        int_morato_v: {
          val: int_morato_v,
          dir: oracledb.BIND_IN,
          maxSize: 20,
        },

        repnt_period_months_v: {
          val: repnt_period_months_v,
          dir: oracledb.BIND_IN,
          maxSize: 20,
        },
        int_type_v: {
          val: int_type_v,
          dir: oracledb.BIND_IN,
          maxSize: 20,
        },
        repayment_plan_v: {
          val: repayment_plan_v,
          dir: oracledb.BIND_IN,
          type: oracledb.STRING,
          maxSize: 20,
        },
        prin_pay_count_v: {
          val: prin_pay_count_v,
          dir: oracledb.BIND_IN,
          maxSize: 20,
        },
        pay_app_no_v: {
          val: pay_app_no_v,
          dir: oracledb.BIND_IN,
          maxSize: 20,
        },
        FACILITY_AMOUNT_v: {
          val: FACILITY_AMOUNT_v,
          dir: oracledb.BIND_IN,
          maxSize: 20,
        },
        current_app_flag_v: {
          val: current_app_flag_v,
          dir: oracledb.BIND_IN,
          maxSize: 20,
        },
      },

      function (err, result) {
        if (err) {
          console.log(err);
          response = {
            responseCode: "999",
            responseMessage: "Internal Server Error",
          };
          res.send(response);
        }
        if (result) {
          if (result.outBinds.response_v.includes("07526")) {
            const message = result.outBinds.response_v;
            response = {
              responseCode: "000",
              responseMessage: message,
            };
          } else {
            response = {
              responseCode: "998",
              responseMessage: result.outBinds.response_v,
            };
          }
          res.send(response);
        }
      }
    );
  } catch (error) {
    console.error("Error:", error);
    res.send({
      // error: error.toString();
      responseCode: `999`,
      responseMessage: "Internal server error",
    });
  }
});

// REJECT PAYMENT
app.post("/api/rej-lending-payments", async (req, res) => {
  const {
    username_v,
    f_no_v,
    amount_v,
    pay_app_no_v,
    c_no_v,
    br_code_v,
    currency_code_v,
    FACILITY_AMOUNT_v,
    rejection_comment,
    response_v,
  } = req.body;

  try {
    const connection = await oracledb.getConnection({
      user: DB_USER,
      password: DB_PASSWORD,
      connectString: DB_CONNECTION_STRING,
    });
    await connection.execute(
      `BEGIN prc_reject_loan_resch_payment(
        :username_v ,
        :f_no_v,
        :amount_v,
        :pay_app_no_v ,
        :c_no_v ,
        :br_code_v ,
        :currency_code_v ,
        :FACILITY_AMOUNT_v,
        :rejection_comment,
        :response_v
); END;`,
      {
        username_v: {
          val: username_v,
          dir: oracledb.BIND_IN,
          maxSize: 20,
        },
        f_no_v: {
          val: f_no_v,
          dir: oracledb.BIND_IN,
          maxSize: 20,
        },

        amount_v: {
          val: amount_v,
          dir: oracledb.BIND_IN,
          maxSize: 20,
        },
        pay_app_no_v: {
          val: pay_app_no_v,
          dir: oracledb.BIND_IN,
          maxSize: 20,
        },
        c_no_v: {
          val: c_no_v,
          dir: oracledb.BIND_IN,
          maxSize: 20,
        },
        br_code_v: {
          val: br_code_v,
          dir: oracledb.BIND_IN,
          maxSize: 20,
        },
        currency_code_v: {
          val: currency_code_v,
          dir: oracledb.BIND_IN,
          maxSize: 20,
        },
        FACILITY_AMOUNT_v: {
          val: FACILITY_AMOUNT_v,
          dir: oracledb.BIND_IN,
          maxSize: 20,
        },
        rejection_comment: {
          val: rejection_comment,
          dir: oracledb.BIND_IN,
          maxSize: 200,
        },

        response_v: {
          val: response_v,
          dir: oracledb.BIND_OUT,
          maxSize: 200,
        },
      },

      function (err, result) {
        if (err) {
          console.log(err);
          response = {
            responseCode: "999",
            responseMessage: "Internal Server Error",
          };
          res.send(response);
        }
        if (result) {
          if (result.outBinds.response_v.includes("07526")) {
            const message = result.outBinds.response_v;
            response = {
              responseCode: "000",
              responseMessage: message,
            };
          } else {
            response = {
              responseCode: "998",
              responseMessage: result.outBinds.response_v,
            };
          }
          res.send(response);
        }
      }
    );
  } catch (error) {
    console.error("Error:", error);
    res.send({
      // error: error.toString();
      responseCode: `999`,
      responseMessage: "Internal server error",
    });
  }
});

//////////////////////////////////////////////////////////////////////////////////////////////////////////

// app.post("/api/post_prc_account_creation", (req, res) => {
//   async function createAccount() {
//     let con;

//     try {
//       con = await oracledb.getConnection({
//         user: DB_USER,
//         password: DB_PASSWORD,
//         connectString: DB_CONNECTION_STRING,
//       });

//       const _app_flag = req.body.app_flag;
//       const _typeofC = req.body.typeofC;
//       const _TYPEOFCUSTOMER = req.body.TYPEOFCUSTOMER;
//       const _customername = req.body.customername;
//       const _typeofacct = req.body.typeofacct;
//       const _legalform = req.body.legalform;
//       const _currencycode = req.body.currencycode;
//       const _CHANNEL = req.body.CHANNEL;
//       const _armcode = req.body.armcode;
//       const _introsource = req.body.introsource;
//       const _SECTOR = req.body.SECTOR;
//       const _subSECTOR = req.body.subSECTOR;
//       const _Segment = req.body.Segment;
//       const _subsegment = req.body.subsegment;
//       const _fxcategory = req.body.fxcategory;
//       const _acmandate = req.body.acmandate;
//       const _documentreq_type = req.body.documentreq_type;
//       const _relationdets = req.body.relationdets;
//       // Determine if it's a corporate account
//       const isCorporateAccount = _typeofC === "C";
//       // Corporate details (conditionally)
//       const _corporateDetails = isCorporateAccount
//         ? req.body.corporateDetails
//         : null;

//       // const _accountrelations = req.body.accountrelations;
//       const _documents = req.body.documents;
//       const _accountreferee = req.body.accountreferee;
//       const _aml = req.body.aml;
//       const _sourceofwealth = req.body.sourceofwealth;
//       const _sourceoffund = req.body.sourceoffund;
//       const _transtype = req.body.transtype;
//       const _nok = req.body.nok;
//       const _branchcode = req.body.branchcode;
//       const _date = req.body.date;
//       const _postedby = req.body.postedby;
//       const _pterm_id = req.body.pterm_id;
//       const _pip = req.body.pip;
//       const _hostname = req.body.hostname;
//       const details = JSON.stringify(_relationdets);
//       const detailsDocuments = JSON.stringify(_documents);
//       const detailsAccountreferee = JSON.stringify(_accountreferee);
//       const detailsAML = JSON.stringify(_aml);
//       const detailnokkin = JSON.stringify(_nok);
//       const detailsCorporate = JSON.stringify(_corporateDetails);

//       // console.log(_SECTOR,"dddd")

//       con.execute(
//         "BEGIN BANKOWNER.PKG_CASA_ACT_create_RT_new.prc_casa_createACCT_rt(:p_app_flag , :p_typeofC , :p_TYPEOFCUSTOMER , :p_customername , :p_typeofacct , :p_legalform , :p_currencycode , :p_CHANNEL , :p_armcode , :p_introsource , :p_SECTOR , :p_subSECTOR , :p_Segment , :p_subsegment , :p_fxcategory ,:p_acmandate , :p_documentreq_type , :p_relationdets , :P_cor_det , :p_documents , :p_accountreferee , :p_aml , :p_sourceofwealth , :p_sourceoffund , :p_transtype, :p_nok_kin, :p_branchcode , :p_date , :p_postedby , :p_pterm_id , :p_pip , :p_hostname , :p_customerno , :p_acctno ,:P_acctno_settle, :P_acctno_settle2, :P_acctno_settle3, :api_status, :api_msg ); END;",
//         {
//           p_app_flag: {
//             type: oracledb.STRING,
//             dir: oracledb.BIND_IN,
//             val: _app_flag,
//           },
//           p_typeofC: {
//             type: oracledb.STRING,
//             dir: oracledb.BIND_IN,
//             val: _typeofC,
//           },
//           p_TYPEOFCUSTOMER: {
//             type: oracledb.STRING,
//             dir: oracledb.BIND_IN,
//             val: _TYPEOFCUSTOMER,
//           },
//           p_customername: {
//             type: oracledb.STRING,
//             dir: oracledb.BIND_IN,
//             val: _customername,
//           },
//           p_typeofacct: {
//             type: oracledb.STRING,
//             dir: oracledb.BIND_IN,
//             val: _typeofacct,
//           },
//           p_legalform: {
//             type: oracledb.STRING,
//             dir: oracledb.BIND_IN,
//             val: _legalform,
//           },
//           p_currencycode: {
//             type: oracledb.STRING,
//             dir: oracledb.BIND_IN,
//             val: _currencycode,
//           },
//           p_CHANNEL: {
//             type: oracledb.STRING,
//             dir: oracledb.BIND_IN,
//             val: _CHANNEL,
//           },
//           p_armcode: {
//             type: oracledb.STRING,
//             dir: oracledb.BIND_IN,
//             val: _armcode,
//           },
//           p_introsource: {
//             type: oracledb.STRING,
//             dir: oracledb.BIND_IN,
//             val: _introsource,
//           },
//           p_SECTOR: {
//             type: oracledb.STRING,
//             dir: oracledb.BIND_IN,
//             val: _SECTOR,
//           },
//           p_subSECTOR: {
//             type: oracledb.STRING,
//             dir: oracledb.BIND_IN,
//             val: _subSECTOR,
//           },
//           p_Segment: {
//             type: oracledb.STRING,
//             dir: oracledb.BIND_IN,
//             val: _Segment,
//           },
//           p_subsegment: {
//             type: oracledb.STRING,
//             dir: oracledb.BIND_IN,
//             val: _subsegment,
//           },
//           p_fxcategory: {
//             type: oracledb.STRING,
//             dir: oracledb.BIND_IN,
//             val: _fxcategory,
//           },
//           p_acmandate: {
//             type: oracledb.STRING,
//             dir: oracledb.BIND_IN,
//             val: _acmandate,
//           },
//           p_documentreq_type: {
//             type: oracledb.STRING,
//             dir: oracledb.BIND_IN,
//             val: _documentreq_type,
//           },
//           p_relationdets: {
//             type: oracledb.STRING,
//             dir: oracledb.BIND_IN,
//             val: details,
//           },
//           P_cor_det: {
//             type: oracledb.STRING,
//             dir: oracledb.BIND_IN,
//             val: detailsCorporate,
//           },
//           p_documents: {
//             type: oracledb.STRING,
//             dir: oracledb.BIND_IN,
//             val: detailsDocuments,
//           },
//           p_accountreferee: {
//             type: oracledb.STRING,
//             dir: oracledb.BIND_IN,
//             val: detailsAccountreferee,
//           },
//           p_aml: {
//             type: oracledb.STRING,
//             dir: oracledb.BIND_IN,
//             val: detailsAML,
//           },
//           p_sourceofwealth: {
//             type: oracledb.STRING,
//             dir: oracledb.BIND_IN,
//             val: _sourceofwealth,
//           },
//           p_sourceoffund: {
//             type: oracledb.STRING,
//             dir: oracledb.BIND_IN,
//             val: _sourceoffund,
//           },
//           p_transtype: {
//             type: oracledb.STRING,
//             dir: oracledb.BIND_IN,
//             val: _transtype,
//           },
//           p_nok_kin: {
//             type: oracledb.STRING,
//             dir: oracledb.BIND_IN,
//             val: detailnokkin,
//           },
//           p_branchcode: {
//             type: oracledb.STRING,
//             dir: oracledb.BIND_IN,
//             val: _branchcode,
//           },
//           p_date: {
//             type: oracledb.STRING,
//             dir: oracledb.BIND_IN,
//             val: _date,
//           },
//           p_postedby: {
//             type: oracledb.STRING,
//             dir: oracledb.BIND_IN,
//             val: _postedby,
//           },
//           p_pterm_id: {
//             type: oracledb.STRING,
//             dir: oracledb.BIND_IN,
//             val: _pterm_id,
//           },
//           p_pip: {
//             type: oracledb.STRING,
//             dir: oracledb.BIND_IN,
//             val: _pip,
//           },
//           p_hostname: {
//             type: oracledb.STRING,
//             dir: oracledb.BIND_IN,
//             val: _hostname,
//           },
//           p_customerno: {
//             type: oracledb.STRING,
//             dir: oracledb.BIND_INOUT,
//             // val: _customerno,
//           },
//           p_acctno: {
//             type: oracledb.STRING,
//             dir: oracledb.BIND_OUT,
//           },
//           P_acctno_settle: {
//             type: oracledb.STRING,
//             dir: oracledb.BIND_OUT,
//           },
//           P_acctno_settle2: {
//             type: oracledb.STRING,
//             dir: oracledb.BIND_OUT,
//           },
//           P_acctno_settle3: {
//             type: oracledb.STRING,
//             dir: oracledb.BIND_OUT,
//           },
//           api_status: {
//             type: oracledb.STRING,
//             dir: oracledb.BIND_OUT,
//           },
//           api_msg: {
//             type: oracledb.STRING,
//             dir: oracledb.BIND_OUT,
//           },
//         },

//         function (err, result) {
//           if (err) {
//             throw err;
//           }

//           if (result) {
//             if (result.outBinds.api_status === "Y") {
//               let message = result.outBinds.api_msg;
//               let apiStatus = result.outBinds.api_status;
//               let customerno = result.outBinds.p_customerno;
//               let acctno = result.outBinds.p_acctno;
//               let settlement = result.outBinds.P_acctno_settle;
//               let settlement2 = result.outBinds.P_acctno_settle2;
//               let settlement3 = result.outBinds.P_acctno_settle3;

//               const settlementValues = settlement
//                 .split("|")
//                 .filter((value) => value !== "");
//               response = {
//                 message: message,
//                 apiStatus: apiStatus,
//                 customerno: customerno,
//                 SHARED_CAPITAL: acctno,
//                 // settlement: settlement,
//                 // settlement: settlement.split('|').filter(value => value !== ''),
//                 BENEVOLENT_ACCOUNTS: settlementValues,
//                 DIVIDENT_ACCOUNT: settlementValues,
//                 DEPOSITS_ACCOUNTS: settlementValues,
//                 settlement2: settlement2,
//                 settlement3: settlement3,
//               };

//               res.send(response);
//             } else {
//               let message = result.outBinds.api_msg;

//               response = {
//                 // success: false,
//                 message: message,
//               };

//               res.send(response);
//             }
//           }
//         }
//       );
//     } catch (err) {
//       res.send(err);
//     }
//   }

//   createAccount();
// });

app.post("/api/post_prc_account_creation", (req, res) => {
  // console.log("create")
  async function createAccount() {
    let con;

    try {
      con = await oracledb.getConnection({
        user: DB_USER,
        password: DB_PASSWORD,
        connectString: DB_CONNECTION_STRING,
      });

      const _app_flag = req.body.app_flag;
      const _typeofC = req.body.typeofC;
      const _TYPEOFCUSTOMER = req.body.TYPEOFCUSTOMER;
      const _customername = req.body.customername;
      const _typeofacct = req.body.typeofacct;
      const _legalform = req.body.legalform;
      const _currencycode = req.body.currencycode;
      const _CHANNEL = req.body.CHANNEL;
      const _armcode = req.body.armcode;
      const _introsource = req.body.introsource;
      const _SECTOR = req.body.SECTOR;
      const _subSECTOR = req.body.subSECTOR;
      const _Segment = req.body.Segment;
      const _subsegment = req.body.subsegment;
      const _fxcategory = req.body.fxcategory;
      const _acmandate = req.body.acmandate;
      const _documentreq_type = req.body.documentreq_type;
      const _relationdets = req.body.relationdets;
      // Determine if it's a corporate account
      const isCorporateAccount = _typeofC === "C";
      // Corporate details (conditionally)
      const _corporateDetails = isCorporateAccount
        ? req.body.corporateDetails
        : null;

      // const _accountrelations = req.body.accountrelations;
      const _documents = req.body.documents;
      const _accountreferee = req.body.accountreferee;
      const _aml = req.body.aml;
      const _sourceofwealth = req.body.sourceofwealth;
      const _sourceoffund = req.body.sourceoffund;
      const _transtype = req.body.transtype;
      const _nok = req.body.nok;
      const _address = req.body.address;
      const _branchcode = req.body.branchcode;
      const _date = req.body.date;
      const _postedby = req.body.postedby;
      const _pterm_id = req.body.pterm_id;
      const _pip = req.body.pip;
      const _hostname = req.body.hostname;
      const details = JSON.stringify(_relationdets);
      const detailsDocuments = JSON.stringify(_documents);
      const detailsAccountreferee = JSON.stringify(_accountreferee);
      const detailsAML = JSON.stringify(_aml);
      const detailnokkin = JSON.stringify(_nok);
      const detailsCorporate = JSON.stringify(_corporateDetails);
      const detailsAddress = JSON.stringify(_address);

      // console.log(_SECTOR,"dddd")

      // return console.log("corporate",detailsCorporate, req.body)

      con.execute(
        "BEGIN PKG_CASA_ACT_create_RT_new.prc_casa_createACCT_rt(:p_app_flag , :p_typeofC , :p_TYPEOFCUSTOMER , :p_customername , :p_typeofacct , :p_legalform , :p_currencycode , :p_CHANNEL , :p_armcode , :p_introsource , :p_SECTOR , :p_subSECTOR , :p_Segment , :p_subsegment , :p_fxcategory ,:p_acmandate , :p_documentreq_type , :p_relationdets , :P_cor_det , :p_documents , :p_accountreferee , :p_aml , :p_sourceofwealth , :p_sourceoffund , :p_transtype, :p_nok_kin, :p_address, :p_branchcode , :p_date , :p_postedby , :p_pterm_id , :p_pip , :p_hostname , :p_customerno , :p_acctno ,:P_acctno_settle, :P_acctno_settle2, :P_acctno_settle3, :api_status, :api_msg ); END;",
        {
          p_app_flag: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: _app_flag,
          },
          p_typeofC: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: _typeofC,
          },
          p_TYPEOFCUSTOMER: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: _TYPEOFCUSTOMER,
          },
          p_customername: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: _customername,
          },
          p_typeofacct: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: _typeofacct,
          },
          p_legalform: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: _legalform,
          },
          p_currencycode: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: _currencycode,
          },
          p_CHANNEL: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: _CHANNEL,
          },
          p_armcode: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: _armcode,
          },
          p_introsource: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: _introsource,
          },
          p_SECTOR: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: _SECTOR,
          },
          p_subSECTOR: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: _subSECTOR,
          },
          p_Segment: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: _Segment,
          },
          p_subsegment: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: _subsegment,
          },
          p_fxcategory: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: _fxcategory,
          },
          p_acmandate: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: _acmandate,
          },
          p_documentreq_type: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: _documentreq_type,
          },
          p_relationdets: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: details,
          },
          P_cor_det: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: detailsCorporate,
          },
          p_documents: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: detailsDocuments,
          },
          p_accountreferee: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: detailsAccountreferee,
          },
          p_aml: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: detailsAML,
          },
          p_sourceofwealth: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: _sourceofwealth,
          },
          p_sourceoffund: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: _sourceoffund,
          },
          p_transtype: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: _transtype,
          },
          p_nok_kin: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: detailnokkin,
          },
          p_address: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: detailsAddress,
          },
          p_branchcode: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: _branchcode,
          },
          p_date: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: _date,
          },
          p_postedby: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: _postedby,
          },
          p_pterm_id: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: _pterm_id,
          },
          p_pip: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: _pip,
          },
          p_hostname: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: _hostname,
          },
          p_customerno: {
            type: oracledb.STRING,
            dir: oracledb.BIND_INOUT,
            // val: _customerno,
          },
          p_acctno: {
            type: oracledb.STRING,
            dir: oracledb.BIND_OUT,
          },
          P_acctno_settle: {
            type: oracledb.STRING,
            dir: oracledb.BIND_OUT,
          },
          P_acctno_settle2: {
            type: oracledb.STRING,
            dir: oracledb.BIND_OUT,
          },
          P_acctno_settle3: {
            type: oracledb.STRING,
            dir: oracledb.BIND_OUT,
          },
          api_status: {
            type: oracledb.STRING,
            dir: oracledb.BIND_OUT,
          },
          api_msg: {
            type: oracledb.STRING,
            dir: oracledb.BIND_OUT,
          },
        },

        function (err, result) {
          if (err) {
            throw err;
          }

          if (result) {
            // let settlement = result.outBinds.P_acctno_settle;
            if (result.outBinds.api_status === "Y") {
              let message = result.outBinds.api_msg;
              let apiStatus = result.outBinds.api_status;
              let customerno = result.outBinds.p_customerno;
              let acctno = result.outBinds.p_acctno;
              let settlement = result.outBinds.P_acctno_settle;
              let settlement2 = result.outBinds.P_acctno_settle2;
              let settlement3 = result.outBinds.P_acctno_settle3;

              const settlementValues = settlement
                ?.split("|")
                .filter((value) => value !== "");
              response = {
                message: message,
                apiStatus: apiStatus,
                customerno: customerno,
                SHARED_CAPITAL: acctno,
                // settlement: settlement,
                // settlement: settlement.split('|').filter(value => value !== ''),
                BENEVOLENT_ACCOUNTS: settlementValues,
                DIVIDENT_ACCOUNT: settlementValues,
                DEPOSITS_ACCOUNTS: settlementValues,
                settlement2: settlement2,
                settlement3: settlement3,
              };

              res.send(response);
            } else {
              let message = result.outBinds.api_msg;

              response = {
                // success: false,
                message: message,
              };

              res.send(response);
            }
          }
        }
      );
    } catch (err) {
      res.send(err);
    }
  }

  createAccount();
});

app.get("/api/get-relation-no", (req, res) => {
  let getRelation = async () => {
    try {
      const db = await oracledb.getConnection({
        user: DB_USER,
        password: DB_PASSWORD,
        connectString: DB_CONNECTION_STRING,
        timeout: DB_CONNECTION_TIMEOUT,
      });
      const execute = util.promisify(db.execute).bind(db);

      const data = await execute(`SELECT GET_RELATIONO FROM DUAL`);

      const keyValue = { GET_RELATIONO: data.rows[0][0] };

      res.send(keyValue);
    } catch (err) {
      console.log(err);
    }
  };
  getRelation();
});

//MEMBER DATA AMENDMENT APIS TO GET THE RELATION DATA
app.post("/api/get-relations-for-amendment", async (req, res) => {
  const get_all_relations = req.body.get_all_relations;

  // console.log("Get")

  const db = await oracledb.getConnection({
    user: DB_USER,
    password: DB_PASSWORD,
    connectString: DB_CONNECTION_STRING,
    timeout: DB_CONNECTION_TIMEOUT,
  });
  const execute = util.promisify(db.execute).bind(db);

  if (get_all_relations) {
    console.log(get_all_relations);

    const data = await execute(
      `SELECT a.*, 
      FIRST_NAME as P_fname, 
      LAST_NAME as P_mname, 
      SURNAME as P_sname, 
      GENDER as P_gender, 
      DATE_OF_BIRTH as P_dob, 
      MOBILE1 as P_mobile_comm_no, 
      DORMICILE_COUNTRY as P_country,
      PROFESSION as P_OCCUPATION,
      PREFERED_LANG as P_preferred_lang,
      MINOR as P_minor,
      HEALTH_CHALLENGE as P_health_challenge,
      NATIONALITY as P_nATIONALITY,
      GET_CODEDESC_INFO(a.SUFFIX, 'TIT') as GET_TITLE,
      GET_CODEDESC_INFO(a.GUARDIAN_TYPE, 'GUA') as GET_GUARDIAN, 
      GET_CODEDESC_INFO(a.DORMICILE_COUNTRY, 'CON') as GET_CONT, 
      GET_CODEDESC_INFO(a.PREFERED_LANG, 'LNG') as GET_LANGUAGE, 
      GET_CODEDESC_INFO(a.ID_TYPE, 'HRD') as GET_IDTYPE 
      FROM (
        SELECT * FROM tb_relation_temp
        UNION ALL
        SELECT * FROM tb_relation
        ) a 
        WHERE CUSTOMER_NUMBER = '${get_all_relations}'
      `
      // WHERE CUSTOMER_NUMBER = '104692'
    );

    if (data.rows) {
      const response = [];
      for (let i = 0; i < data.rows.length; i++) {
        const rowData = {};

        for (let x = 0; x < data.metaData.length; x++) {
          const columnName = data.metaData[x].name.toLowerCase();
          const nameArr = columnName.split("_");
          const ss = nameArr.map((i, k) => {
            const newStr =
              k == 0
                ? i.charAt(0).toUpperCase() + i.slice(1)
                : i.charAt(0) + i.slice(1);
            return newStr;
          });
          const finalName = ss.join("_");
          const columnValue = data.rows[i][x];
          rowData[finalName] = columnValue;
        }

        response.push(rowData);
      }
      return res.send(response);
    } else {
      return res.send("Something went wrong... Nothing was returned!!");
    }
  } else {
    return res.send("Missing body parameter: get_all_relations");
  }
});

/////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////

app.post("/api/get-approval-test_1", async (req, res) => {
  let db;
  try {
    const CUSTOMER_NUMBER = req.body.CUSTOMER_NUMBER;

    if (!CUSTOMER_NUMBER) {
      return res
        .status(400)
        .json({ error: "Missing CUSTOMER_NUMBER in request body" });
    }

    db = await oracledb.getConnection({
      user: DB_USER,
      password: DB_PASSWORD,
      connectString: DB_CONNECTION_STRING,
      timeout: DB_CONNECTION_TIMEOUT,
    });

    const execute = util.promisify(db.execute).bind(db);

    const accountDataPromise = execute(
      //  `SELECT a.*, r.* FROM account_temp a JOIN TB_ACCT_SETTLE r ON a.CUSTOMER_NUMBER = r.CUSTOMER_NUMBER WHERE a.CUSTOMER_NUMBER = :CUSTOMER_NUMBER`,
      `SELECT a.*, r.*, RELATION_TYPE||'-'||GET_ARMDESC(SUBSTR(a.RELATION_TYPE, 2)) as GET_RELATION_MANAGER, a.TYPE_OF_ACCT||'-'||GET_CODEDESC_INFO(a.TYPE_OF_ACCT, 'ACT') as TYPE_OF_ACCOUNT, a.PROD_CODE||'-'||GET_PRODUCTDESC(a.PROD_CODE) as GET_PROD, CURRENCY_CODE||'-'||GET_CURRENCYDESC(a.CURRENCY_CODE) as GET_CURRENCY, a.TYPE_OF_ACCT||'-'||GET_CODEDESC_INFO(a.TYPE_OF_ACCT, 'ACT') as GET_ACCOUNT, SECTOR||'-'||GET_CODEDESC_INFO(a.SECTOR, 'MIS') as GET_SECTOR, SECTORM||'-'||GET_CODEDESC_INFO(a.SECTORM, 'MAS') as GET_SUBSECTOR, SEGMENT||'-'||GET_SEG_DESC(SEGMENT) as GET_SEGMENT, SUB_SEGMENT||'-'||GET_SUBSEG_DESC(SUB_SEGMENT) as GET_SUBSEGMENT, DOCUMENT_REQ_TYPE||'-'||GET_CODEDESC_INFO(a.DOCUMENT_REQ_TYPE, 'DRA') as GET_DOCUMENT_TYPE FROM account_temp a JOIN TB_ACCT_SETTLE r ON a.CUSTOMER_NUMBER = r.CUSTOMER_NUMBER WHERE a.CUSTOMER_NUMBER = :CUSTOMER_NUMBER`,
      {
        CUSTOMER_NUMBER: CUSTOMER_NUMBER,
      }
    );

    const relationDataPromise = execute(
      // `SELECT * FROM tb_relation_temp WHERE CUSTOMER_NUMBER = :CUSTOMER_NUMBER`,
      `SELECT a.*, GET_CODEDESC_INFO(a.SUFFIX, 'TIT') as GET_TITLE, GET_CODEDESC_INFO(a.GUARDIAN_TYPE, 'GUA') as GET_GUARDIAN, GET_CODEDESC_INFO(a.DORMICILE_COUNTRY, 'CON') as GET_CONT, GET_CODEDESC_INFO(a.PREFERED_LANG, 'LNG') as GET_LANGUAGE, GET_CODEDESC_INFO(a.ID_TYPE, 'HRD') as GET_IDTYPE FROM tb_relation_temp a WHERE CUSTOMER_NUMBER = :CUSTOMER_NUMBER`,
      {
        CUSTOMER_NUMBER: CUSTOMER_NUMBER,
      }
    );

    const nextOfKinDataPromise = execute(
      `SELECT a.*, NEXT_OF_KIN_ID_TYPE||'-'||GET_CODEDESC_INFO(a.NEXT_OF_KIN_ID_TYPE, 'HRD') AS NEXT_OF_KIN_ID_TYPE_DESC, NEXT_OF_KIN_RELATIONSHIP||'-'||GET_CODEDESC_INFO(a.NEXT_OF_KIN_RELATIONSHIP, 'RRE') AS NEXT_OF_KIN_RELATIONSHIP_DESC FROM tb_next_of_kin a WHERE CUSTOMER_NUMBER = :CUSTOMER_NUMBER`,
      {
        CUSTOMER_NUMBER: CUSTOMER_NUMBER,
      }
    );

    const documentsDetailsPromise = execute(
      // `SELECT * FROM ACCT_DOCUMENTS_DETAILS WHERE CUSTOMER_NUMBER = :CUSTOMER_NUMBER`,
      `SELECT d.*, c.DESCRIPTION FROM ACCT_DOCUMENTS_DETAILS d JOIN code_desc c ON d.DOCUMENT_CODE = c.ACTUAL_CODE WHERE d.CUSTOMER_NUMBER = :CUSTOMER_NUMBER`,
      {
        CUSTOMER_NUMBER: CUSTOMER_NUMBER,
      }
    );

    const corporateDetailsPromise = execute(
      `SELECT PHONE, CUSTOMER_ADDRESS1, CUSTOMER_ADDRESS2, CUSTOMER_ADDRESS3, 
        EMAIL, COMMUNICATION_MODE, NAME_ADDR, BUSINESS_DESCRIPTION, COUNTRY, 
        B_SIS_COMP  FROM ACCOUNT_TEMP WHERE C_TYPE ='C' AND CUSTOMER_NUMBER = :CUSTOMER_NUMBER`,
      {
        CUSTOMER_NUMBER: CUSTOMER_NUMBER,
      }
    );

    // Execute both queries concurrently using Promise.all()
    // const [accountData, relationData] = await Promise.all([
    //   accountDataPromise,
    //   relationDataPromise,
    // ]);
    const [
      accountData,
      relationData,
      nextOfKinData,
      documentsDetails,
      corporatDetailData,
    ] = await Promise.all([
      accountDataPromise,
      relationDataPromise,
      nextOfKinDataPromise,
      documentsDetailsPromise,
      corporateDetailsPromise,
    ]);

    // return res.send(accountData.rows)  //

    if (accountData && accountData.rows.length > 0) {
      const accountRow = accountData.rows[0];
      const relationRows = relationData.rows;

      const keyValueResponse = {};

      // Formatting account data as key-value pairs
      for (let i = 0; i < accountData.metaData.length; i++) {
        const columnName = accountData.metaData[i].name;
        // console.log(columnName, "gh");
        if (Object.keys(keyValueResponse).some((i) => columnName === i)) {
          keyValueResponse[`${columnName}_1`] = accountRow[i];
        } else {
          keyValueResponse[columnName] = accountRow[i];
        }
      }

      // Formatting relation data as key-value pairs and appending to the response
      keyValueResponse.relationData = relationRows.map((relationRow) => {
        const relationKeyValue = {};
        for (let i = 0; i < relationData.metaData.length; i++) {
          const columnName = relationData.metaData[i].name;
          relationKeyValue[columnName] = relationRow[i];
        }
        return relationKeyValue;
      });

      if (
        keyValueResponse.relationData &&
        keyValueResponse.relationData.length > 0
      ) {
        for (let i = 0; i < keyValueResponse.relationData.length; i++) {
          if (keyValueResponse.relationData[i].DATE_OF_BIRTH) {
            keyValueResponse.relationData[i].DATE_OF_BIRTH = new Date(
              keyValueResponse.relationData[i].DATE_OF_BIRTH
            ).toDateString();
          }

          if (keyValueResponse.relationData[i].NIN_DATE_ISSUE) {
            keyValueResponse.relationData[i].NIN_DATE_ISSUE = new Date(
              keyValueResponse.relationData[i].NIN_DATE_ISSUE
            ).toDateString();
          }

          if (keyValueResponse.relationData[i].NIN_EXPIRY_DATE) {
            keyValueResponse.relationData[i].NIN_EXPIRY_DATE = new Date(
              keyValueResponse.relationData[i].NIN_EXPIRY_DATE
            ).toDateString();
          }

          if (keyValueResponse.relationData[i].ID_ISSUE_DATE) {
            keyValueResponse.relationData[i].ID_ISSUE_DATE = new Date(
              keyValueResponse.relationData[i].ID_ISSUE_DATE
            ).toDateString();
          }
          if (keyValueResponse.relationData[i].ID_EXPIRY_DATE) {
            keyValueResponse.relationData[i].ID_EXPIRY_DATE = new Date(
              keyValueResponse.relationData[i].ID_EXPIRY_DATE
            ).toDateString();
          }
        }
      }

      if (nextOfKinData && nextOfKinData.rows.length > 0) {
        keyValueResponse.nextOfKinData = nextOfKinData.rows.map(
          (nextOfKinRow) => {
            const nextOfKinKeyValue = {};
            for (let i = 0; i < nextOfKinData.metaData.length; i++) {
              const columnName = nextOfKinData.metaData[i].name;
              if (columnName === "NEXT_OF_KIN_ID_EXPDATE") {
                const originalDate = new Date(nextOfKinRow[i]);
                const months = [
                  "January",
                  "February",
                  "March",
                  "April",
                  "May",
                  "June",
                  "July",
                  "August",
                  "September",
                  "October",
                  "November",
                  "December",
                ];
                const formattedDate = `${originalDate
                  .getDate()
                  .toString()
                  .padStart(2, "0")} ${
                  months[originalDate.getMonth()]
                } ${originalDate.getFullYear()}`;
                nextOfKinKeyValue[columnName] = formattedDate;
              } else if (columnName === "NEXT_OF_KIN_DOB") {
                const originalDate = new Date(nextOfKinRow[i]);
                const months = [
                  "January",
                  "February",
                  "March",
                  "April",
                  "May",
                  "June",
                  "July",
                  "August",
                  "September",
                  "October",
                  "November",
                  "December",
                ];
                const formattedDate = `${originalDate
                  .getDate()
                  .toString()
                  .padStart(2, "0")} ${
                  months[originalDate.getMonth()]
                } ${originalDate.getFullYear()}`;
                nextOfKinKeyValue[columnName] = formattedDate;
              } else {
                nextOfKinKeyValue[columnName] = nextOfKinRow[i];
              }
            }
            return nextOfKinKeyValue;
          }
        );
      }

      if (documentsDetails && documentsDetails.rows.length > 0) {
        keyValueResponse.documentsDetails = documentsDetails.rows.map((row) => {
          const docDetails = {};
          for (let i = 0; i < documentsDetails.metaData.length; i++) {
            const columnName = documentsDetails.metaData[i].name;
            if (columnName === "DOC_DATE") {
              const originalDate = new Date(row[i]);
              const months = [
                "January",
                "February",
                "March",
                "April",
                "May",
                "June",
                "July",
                "August",
                "September",
                "October",
                "November",
                "December",
              ];
              const formattedDate = `${originalDate
                .getDate()
                .toString()
                .padStart(2, "0")} ${
                months[originalDate.getMonth()]
              } ${originalDate.getFullYear()}`;
              docDetails[columnName] = formattedDate;
            } else {
              docDetails[columnName] = row[i];
            }
          }
          return docDetails;
        });
      }

      if (corporatDetailData && corporatDetailData.rows.length > 0) {
        keyValueResponse.corporatDetailData = corporatDetailData.rows.map(
          (row) => {
            const corporateDetails = {};
            for (let i = 0; i < corporatDetailData.metaData.length; i++) {
              const columnName = corporatDetailData.metaData[i].name;
              if (columnName === "DOC_DATE") {
                const originalDate = new Date(row[i]);
                const months = [
                  "January",
                  "February",
                  "March",
                  "April",
                  "May",
                  "June",
                  "July",
                  "August",
                  "September",
                  "October",
                  "November",
                  "December",
                ];
                const formattedDate = `${originalDate
                  .getDate()
                  .toString()
                  .padStart(2, "0")} ${
                  months[originalDate.getMonth()]
                } ${originalDate.getFullYear()}`;
                corporateDetails[columnName] = formattedDate;
              } else {
                corporateDetails[columnName] = row[i];
              }
            }
            return corporateDetails;
          }
        );
      }

      res.json(keyValueResponse); // Send the combined key-value data as JSON response
    } else {
      res
        .status(404)
        .json({ error: "No data found for the specified CUSTOMER_NUMBER" });
    }
  } catch (error) {
    console.error("Error:", error);
    res.status(500).json({ error: "An error occurred" });
  } finally {
    // if (db) {
    //   try {
    //     await db.close();
    //   } catch (error) {
    //     console.error("Error closing database connection:", error);
    //   }
    // }
  }
});

///////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////

app.post("/api/get-approval-test", async (req, res) => {
  let db;
  try {
    const CUSTOMER_NUMBER = req.body.CUSTOMER_NUMBER;

    if (!CUSTOMER_NUMBER) {
      return res
        .status(400)
        .json({ error: "Missing CUSTOMER_NUMBER in request body" });
    }

    db = await oracledb.getConnection({
      user: DB_USER,
      password: DB_PASSWORD,
      connectString: DB_CONNECTION_STRING,
      timeout: DB_CONNECTION_TIMEOUT,
    });

    const execute = util.promisify(db.execute).bind(db);

    const accountDataPromise = execute(
      //  `SELECT a.*, r.* FROM account_temp a JOIN TB_ACCT_SETTLE r ON a.CUSTOMER_NUMBER = r.CUSTOMER_NUMBER WHERE a.CUSTOMER_NUMBER = :CUSTOMER_NUMBER`,
      `SELECT a.*, r.*, RELATION_TYPE||'-'||GET_ARMDESC(SUBSTR(a.RELATION_TYPE, 2)) as GET_RELATION_MANAGER, a.TYPE_OF_ACCT||'-'||GET_CODEDESC_INFO(a.TYPE_OF_ACCT, 'ACT') as TYPE_OF_ACCOUNT, a.PROD_CODE||'-'||GET_PRODUCTDESC(a.PROD_CODE) as GET_PROD, CURRENCY_CODE||'-'||GET_CURRENCYDESC(a.CURRENCY_CODE) as GET_CURRENCY, a.TYPE_OF_ACCT||'-'||GET_CODEDESC_INFO(a.TYPE_OF_ACCT, 'ACT') as GET_ACCOUNT, SECTOR||'-'||GET_CODEDESC_INFO(a.SECTOR, 'MIS') as GET_SECTOR, SECTORM||'-'||GET_CODEDESC_INFO(a.SECTORM, 'MAS') as GET_SUBSECTOR, SEGMENT||'-'||GET_SEG_DESC(SEGMENT) as GET_SEGMENT, SUB_SEGMENT||'-'||GET_SUBSEG_DESC(SUB_SEGMENT) as GET_SUBSEGMENT, DOCUMENT_REQ_TYPE||'-'||GET_CODEDESC_INFO(a.DOCUMENT_REQ_TYPE, 'DRA') as GET_DOCUMENT_TYPE FROM account_temp a JOIN TB_ACCT_SETTLE r ON a.CUSTOMER_NUMBER = r.CUSTOMER_NUMBER WHERE a.CUSTOMER_NUMBER = :CUSTOMER_NUMBER`,
      {
        CUSTOMER_NUMBER: CUSTOMER_NUMBER,
      }
    );

    const relationDataPromise = execute(
      // `SELECT * FROM tb_relation_temp WHERE CUSTOMER_NUMBER = :CUSTOMER_NUMBER`,
      `SELECT a.*, GET_CODEDESC_INFO(a.SUFFIX, 'TIT') as GET_TITLE, GET_CODEDESC_INFO(a.GUARDIAN_TYPE, 'GUA') as GET_GUARDIAN, GET_CODEDESC_INFO(a.DORMICILE_COUNTRY, 'CON') as GET_CONT, GET_CODEDESC_INFO(a.PREFERED_LANG, 'LNG') as GET_LANGUAGE, GET_CODEDESC_INFO(a.ID_TYPE, 'HRD') as GET_IDTYPE FROM tb_relation_temp a WHERE CUSTOMER_NUMBER = :CUSTOMER_NUMBER`,
      {
        CUSTOMER_NUMBER: CUSTOMER_NUMBER,
      }
    );

    const nextOfKinDataPromise = execute(
      `SELECT a.*, NEXT_OF_KIN_ID_TYPE||'-'||GET_CODEDESC_INFO(a.NEXT_OF_KIN_ID_TYPE, 'HRD') AS NEXT_OF_KIN_ID_TYPE_DESC, NEXT_OF_KIN_RELATIONSHIP||'-'||GET_CODEDESC_INFO(a.NEXT_OF_KIN_RELATIONSHIP, 'RRE') AS NEXT_OF_KIN_RELATIONSHIP_DESC FROM tb_next_of_kin a WHERE CUSTOMER_NUMBER = :CUSTOMER_NUMBER`,
      {
        CUSTOMER_NUMBER: CUSTOMER_NUMBER,
      }
    );

    const documentsDetailsPromise = execute(
      // `SELECT * FROM ACCT_DOCUMENTS_DETAILS WHERE CUSTOMER_NUMBER = :CUSTOMER_NUMBER`,
      `SELECT d.*, c.DESCRIPTION FROM ACCT_DOCUMENTS_DETAILS d JOIN code_desc c ON d.DOCUMENT_CODE = c.ACTUAL_CODE WHERE d.CUSTOMER_NUMBER = :CUSTOMER_NUMBER`,
      {
        CUSTOMER_NUMBER: CUSTOMER_NUMBER,
      }
    );

    // Execute both queries concurrently using Promise.all()
    // const [accountData, relationData] = await Promise.all([
    //   accountDataPromise,
    //   relationDataPromise,
    // ]);
    const [accountData, relationData, nextOfKinData, documentsDetails] =
      await Promise.all([
        accountDataPromise,
        relationDataPromise,
        nextOfKinDataPromise,
        documentsDetailsPromise,
      ]);

    // return res.send(accountData.rows)  //

    if (accountData && accountData.rows.length > 0) {
      const accountRow = accountData.rows[0];
      const relationRows = relationData.rows;

      const keyValueResponse = {};

      // Formatting account data as key-value pairs
      for (let i = 0; i < accountData.metaData.length; i++) {
        const columnName = accountData.metaData[i].name;
        // console.log(columnName, "gh");
        if (Object.keys(keyValueResponse).some((i) => columnName === i)) {
          keyValueResponse[`${columnName}_1`] = accountRow[i];
        } else {
          keyValueResponse[columnName] = accountRow[i];
        }
      }

      // Formatting relation data as key-value pairs and appending to the response
      keyValueResponse.relationData = relationRows.map((relationRow) => {
        const relationKeyValue = {};
        for (let i = 0; i < relationData.metaData.length; i++) {
          const columnName = relationData.metaData[i].name;
          relationKeyValue[columnName] = relationRow[i];
        }
        return relationKeyValue;
      });

      //     // Format date of birth (assuming the attribute is named BIRTH_DATE)
      // if (keyValueResponse.relationData[0].DATE_OF_BIRTH) {
      //   keyValueResponse.relationData[0].DATE_OF_BIRTH =
      //     new Date(keyValueResponse.relationData[0].DATE_OF_BIRTH).toDateString()
      // }

      // Assuming you have your keyValueResponse object
      // const relationData = keyValueResponse.relationData;

      // if (
      //   keyValueResponse.relationData &&
      //   keyValueResponse.relationData.length > 0
      // ) {
      //   for (let i = 0; i < keyValueResponse.relationData.length; i++) {
      //     if (keyValueResponse.relationData[i].DATE_OF_BIRTH) {
      //       keyValueResponse.relationData[i].DATE_OF_BIRTH = new Date(
      //         keyValueResponse.relationData[i].DATE_OF_BIRTH
      //       ).toDateString();
      //     }
      //   }
      // }

      if (
        keyValueResponse.relationData &&
        keyValueResponse.relationData.length > 0
      ) {
        for (let i = 0; i < keyValueResponse.relationData.length; i++) {
          if (keyValueResponse.relationData[i].DATE_OF_BIRTH) {
            keyValueResponse.relationData[i].DATE_OF_BIRTH = new Date(
              keyValueResponse.relationData[i].DATE_OF_BIRTH
            ).toDateString();
          }

          if (keyValueResponse.relationData[i].NIN_DATE_ISSUE) {
            keyValueResponse.relationData[i].NIN_DATE_ISSUE = new Date(
              keyValueResponse.relationData[i].NIN_DATE_ISSUE
            ).toDateString();
          }

          if (keyValueResponse.relationData[i].NIN_EXPIRY_DATE) {
            keyValueResponse.relationData[i].NIN_EXPIRY_DATE = new Date(
              keyValueResponse.relationData[i].NIN_EXPIRY_DATE
            ).toDateString();
          }

          if (keyValueResponse.relationData[i].ID_ISSUE_DATE) {
            keyValueResponse.relationData[i].ID_ISSUE_DATE = new Date(
              keyValueResponse.relationData[i].ID_ISSUE_DATE
            ).toDateString();
          }
          if (keyValueResponse.relationData[i].ID_EXPIRY_DATE) {
            keyValueResponse.relationData[i].ID_EXPIRY_DATE = new Date(
              keyValueResponse.relationData[i].ID_EXPIRY_DATE
            ).toDateString();
          }
        }
      }

      // NIN_DATE_ISSUE;
      // NIN_EXPIRY_DATE; ID_ISSUE_DATE ID_EXPIRY_DATE

      // if (nextOfKinData && nextOfKinData.rows.length > 0) { NIN_DATE_ISSUE
      //   keyValueResponse.nextOfKinData = nextOfKinData.rows;
      // }

      // Formatting next of kin data as key-value pairs and appending to the response
      // if (nextOfKinData && nextOfKinData.rows.length > 0) {
      //   keyValueResponse.nextOfKinData = nextOfKinData.rows.map((nextOfKinRow) => {
      //     const nextOfKinKeyValue = {};
      //     for (let i = 0; i < nextOfKinData.metaData.length; i++) {
      //       const columnName = nextOfKinData.metaData[i].name;
      //       nextOfKinKeyValue[columnName] = nextOfKinRow[i];
      //     }
      //     return nextOfKinKeyValue;
      //   });
      // }

      // if (nextOfKinData && nextOfKinData.rows.length > 0) {
      //   keyValueResponse.nextOfKinData = nextOfKinData.rows.map((nextOfKinRow) => {
      //     const nextOfKinKeyValue = {};
      //     for (let i = 0; i < nextOfKinData.metaData.length; i++) {
      //       const columnName = nextOfKinData.metaData[i].name;
      //       if (columnName === 'NEXT_OF_KIN_ID_EXPDATE') {
      //         const originalDate = new Date(nextOfKinRow[i]);
      //         const formattedDate = `${originalDate.getDate().toString().padStart(2, '0')}-${(originalDate.getMonth() + 1).toString().padStart(2, '0')}-${originalDate.getFullYear()}`;
      //         nextOfKinKeyValue[columnName] = formattedDate;
      //       } else {
      //         nextOfKinKeyValue[columnName] = nextOfKinRow[i];
      //       }
      //     }
      //     return nextOfKinKeyValue;
      //   });
      // }

      if (nextOfKinData && nextOfKinData.rows.length > 0) {
        keyValueResponse.nextOfKinData = nextOfKinData.rows.map(
          (nextOfKinRow) => {
            const nextOfKinKeyValue = {};
            for (let i = 0; i < nextOfKinData.metaData.length; i++) {
              const columnName = nextOfKinData.metaData[i].name;
              if (columnName === "NEXT_OF_KIN_ID_EXPDATE") {
                const originalDate = new Date(nextOfKinRow[i]);
                const months = [
                  "January",
                  "February",
                  "March",
                  "April",
                  "May",
                  "June",
                  "July",
                  "August",
                  "September",
                  "October",
                  "November",
                  "December",
                ];
                const formattedDate = `${originalDate
                  .getDate()
                  .toString()
                  .padStart(2, "0")} ${
                  months[originalDate.getMonth()]
                } ${originalDate.getFullYear()}`;
                nextOfKinKeyValue[columnName] = formattedDate;
              } else if (columnName === "NEXT_OF_KIN_DOB") {
                const originalDate = new Date(nextOfKinRow[i]);
                const months = [
                  "January",
                  "February",
                  "March",
                  "April",
                  "May",
                  "June",
                  "July",
                  "August",
                  "September",
                  "October",
                  "November",
                  "December",
                ];
                const formattedDate = `${originalDate
                  .getDate()
                  .toString()
                  .padStart(2, "0")} ${
                  months[originalDate.getMonth()]
                } ${originalDate.getFullYear()}`;
                nextOfKinKeyValue[columnName] = formattedDate;
              } else {
                nextOfKinKeyValue[columnName] = nextOfKinRow[i];
              }
            }
            return nextOfKinKeyValue;
          }
        );
      }

      if (documentsDetails && documentsDetails.rows.length > 0) {
        keyValueResponse.documentsDetails = documentsDetails.rows.map((row) => {
          const docDetails = {};
          for (let i = 0; i < documentsDetails.metaData.length; i++) {
            const columnName = documentsDetails.metaData[i].name;
            if (columnName === "DOC_DATE") {
              const originalDate = new Date(row[i]);
              const months = [
                "January",
                "February",
                "March",
                "April",
                "May",
                "June",
                "July",
                "August",
                "September",
                "October",
                "November",
                "December",
              ];
              const formattedDate = `${originalDate
                .getDate()
                .toString()
                .padStart(2, "0")} ${
                months[originalDate.getMonth()]
              } ${originalDate.getFullYear()}`;
              docDetails[columnName] = formattedDate;
            } else {
              docDetails[columnName] = row[i];
            }
          }
          return docDetails;
        });
      }

      res.json(keyValueResponse); // Send the combined key-value data as JSON response
    } else {
      res
        .status(404)
        .json({ error: "No data found for the specified CUSTOMER_NUMBER" });
    }
  } catch (error) {
    console.error("Error:", error);
    res.status(500).json({ error: "An error occurred" });
  } finally {
    // if (db) {
    //   try {
    //     await db.close();
    //   } catch (error) {
    //     console.error("Error closing database connection:", error);
    //   }
    // }
  }
});

////////////////////////////////////////////////////////////////////

// app.post("/api/get-multiple-validation", async (req, res) => {
//   try {
//     const dynamicNumber = req.body.dynamicNumber;

//     if (!dynamicNumber) {
//       return res.status(400).send("Dynamic number is required.");
//     }

//     const db = await oracledb.getConnection({
//       user: DB_USER,
//       password: DB_PASSWORD,
//       connectString: DB_CONNECTION_STRING,
//     });

//     const query = `
//        SELECT COUNT(*) AS userCount
//       FROM vw_relation_all
//       WHERE NIN = :dynamicNumber
//     `;

//     const result = await db.execute(query, { dynamicNumber });

//     const userCount = result.rows[0][0];

//     if (userCount > 0) {
//       const userDataQuery = `
//         SELECT *
//         FROM vw_relation_all
//         WHERE NIN = :dynamicNumber
//       `;
//       const userDataResult = await db.execute(userDataQuery, { dynamicNumber });

//       if (false) {
//         // Single user data
//         const userData = userDataResult.rows[0];
//         const userDataObject = {};

//         for (let i = 0; i < userData.length; i++) {
//           const columnName = userDataResult.metaData[i].name;
//           userDataObject[columnName] = userData[i];
//         }

//         res.json({ userExists: true, userData: userDataObject });
//       } else {
//         // Multiple user data
//         const userDataArray = [];

//         userDataResult.rows.forEach((userData) => {
//           const userDataObject = {};
//           for (let i = 0; i < userData.length; i++) {
//             const columnName = userDataResult.metaData[i].name.toLowerCase();
//             userDataObject[columnName] = userData[i];
//           }
//           userDataArray.push(userDataObject);
//         });

//         res.json({ userExists: true, userData: userDataArray });
//       }
//     } else {
//       res.json({ userExists: false });
//     }
//   } catch (err) {
//     console.error("Error:", err.message);
//     res.status(500).send("Internal Server Error");
//   } finally {
//     if (db) {
//       await db.close();
//     }
//   }
// });

// app.post("/api/get-multiple-validation", async (req, res) => {
//   let db;
//   try {
//     const dynamicNumber = req.body.dynamicNumber;

//     if (!dynamicNumber) {
//       return res.status(400).send("Dynamic number is required.");
//     }

//     db = await oracledb.getConnection({
//       user: DB_USER,
//       password: DB_PASSWORD,
//       connectString: DB_CONNECTION_STRING,
//     });

//     const query = `
//       SELECT COUNT(*) AS userCount
//       FROM vw_relation_all
//       WHERE NIN = :dynamicNumber
//     `;

//     const result = await db.execute(query, { dynamicNumber });

//     const userCount = result.rows[0][0];

//     if (userCount > 0) {
//       const userDataQuery = `
//         SELECT *
//         FROM vw_relation_all
//         WHERE NIN = :dynamicNumber
//       `;
//       const userDataResult = await db.execute(userDataQuery, { dynamicNumber });

//       // Ensure only the first row of data is returned in an array
//       const userData = userDataResult.rows[0];
//       const userDataObject = {};

//       for (let i = 0; i < userData.length; i++) {
//         const columnName = userDataResult.metaData[i].name.toLowerCase();
//         userDataObject[columnName] = userData[i];
//       }

//       res.json({ userExists: true, userData: [userDataObject] }); // Wrap the single userDataObject in an array
//     } else {
//       res.json({ userExists: false, userData: [] }); // Return an empty array if no user exists
//     }
//   } catch (err) {
//     console.error("Error:", err.message);
//     res.status(500).send("Internal Server Error");
//   } finally {
//     if (db) {
//       await db.close();
//     }
//   }
// });

app.post("/api/get-approval", async (req, res) => {
  try {
    const CUSTOMER_NUMBER = req.body.CUSTOMER_NUMBER;

    if (!CUSTOMER_NUMBER) {
      return res
        .status(400)
        .json({ error: "Missing ACCOUNT_NUMBER in request body" });
    }

    const db = await oracledb.getConnection({
      user: DB_USER,
      password: DB_PASSWORD,
      connectString: DB_CONNECTION_STRING,
      timeout: DB_CONNECTION_TIMEOUT,
    });

    const execute = util.promisify(db.execute).bind(db);

    const data = await execute(
      // `SELECT * FROM tb_relation_temp WHERE CUSTOMER_NUMBER = '${CUSTOMER_NUMBER}'`,
      `SELECT a.*, r.* FROM account_temp a JOIN tb_relation_temp r ON a.CUSTOMER_NUMBER = r.CUSTOMER_NUMBER WHERE a.CUSTOMER_NUMBER = '${CUSTOMER_NUMBER}'`
    );

    if (data && data.rows.length > 0) {
      const rowData = data.rows[0];

      const keyValueRow = {};
      for (let i = 0; i < data.metaData.length; i++) {
        const columnName = data.metaData[i].name;
        keyValueRow[columnName] = rowData[i];
      }

      res.json(keyValueRow); // Send the key-value formatted data as JSON response
    } else {
      res
        .status(404)
        .json({ error: "No data found for the specified ACCOUNT_NUMBER" });
    }
  } catch (error) {
    console.error("Error:", error);
    res.status(500).json({ error: "An error occurred" });
  } finally {
    if (db) {
      try {
        await db.close();
      } catch (error) {
        console.error("Error closing database connection:", error);
      }
    }
  }
});

app.post("/api/member_approval", (req, res) => {
  async function memberApproval() {
    let con;

    try {
      con = await oracledb.getConnection({
        user: DB_USER,
        password: DB_PASSWORD,
        connectString: DB_CONNECTION_STRING,
      });

      const p_customerno_v = req.body.p_customerno_v;
      const p_branchcode = req.body.p_branchcode;
      const p_date = req.body.p_date;
      const p_postedby = req.body.p_postedby;
      const p_pterm_id = req.body.p_pterm_id;
      const p_pip = req.body.p_pip;
      const p_hostname = req.body.p_hostname;
      const app_type = req.body.app_type;

      // console.log(_SECTOR,"dddd")

      con.execute(
        "BEGIN PKG_CASA_ACT_create_RT_V1.prc_acct_create_app(:customerno_v, :p_branchcode, :p_date, :p_postedby, :p_pterm_id, :p_pip, :p_hostname, :app_type, :api_status, :api_msg); END;",
        {
          customerno_v: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: p_customerno_v,
          },
          p_branchcode: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: p_branchcode,
          },
          p_date: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: p_date,
          },
          p_postedby: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: p_postedby,
          },
          p_pterm_id: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: p_pterm_id,
          },
          p_pip: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: p_pip,
          },
          p_hostname: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: p_hostname,
          },
          app_type: {
            type: oracledb.STRING,
            dir: oracledb.BIND_IN,
            val: app_type,
          },
          api_status: {
            type: oracledb.STRING,
            dir: oracledb.BIND_OUT,
          },
          api_msg: {
            type: oracledb.STRING,
            dir: oracledb.BIND_OUT,
          },
        },

        function (err, result) {
          if (err) {
            throw err;
          }

          if (result) {
            if (result.outBinds.api_status === "Y") {
              let message = result.outBinds.api_msg;
              let apiStatus = result.outBinds.api_status;
              response = {
                message: message,
                apiStatus: apiStatus,
              };

              res.send(response);
            } else {
              let message = result.outBinds.api_msg;

              response = {
                // success: false,
                message: message,
              };

              res.send(response);
            }
          }
        }
      );
    } catch (err) {
      res.send(err);
    }
  }

  memberApproval();
});

// API to Get Menu Users
app.get("/api/get-users", (req, res) => {
  let getUsers = async () => {
    try {
      const db = await oracledb.getConnection({
        user: DB_USER,
        password: DB_PASSWORD,
        connectString: DB_CONNECTION_STRING,
        timeout: DB_CONNECTION_TIMEOUT,
      });

      const response = [];
      let arr0 = "";
      // node native promisify
      const execute = util.promisify(db.execute).bind(db);
      const data = await execute(
        `SELECT user_name, get_codedesc_info(group_name, 'ACS') as group_name FROM menu_users`
      );

      if (data) {
        for (let i = 0; i < data.rows.length; i++) {
          for (let x = 0; x < data.metaData.length; x++) {
            arr0 +=
              '"' +
              [data.metaData[x].name.toLowerCase()] +
              '" : "' +
              data.rows[i][x] +
              '",';
          }

          response.push(JSON.parse("{" + arr0.replace(/,\s*$/, "") + "}"));
        }

        res.send(response);
      } else {
        res.send("Something went wrong... Nothing was returned!!");
      }
    } finally {
      // conn.end();
    }
  };

  return getUsers();
});

// Get Sub Menus By Parent Menu ID's API Endpoint - ORACLE
app.post("/api/get-sub-menus-by-parent-menu-id-OLD", (req, res) => {
  let parent_menu_id = req.body.parent_menu_id;

  let getSubMenusByParentMenuIDFunc = async (parent_menu_id) => {
    try {
      const db = await oracledb.getConnection({
        user: DB_USER,
        password: DB_PASSWORD,
        connectString: DB_CONNECTION_STRING,
        timeout: DB_CONNECTION_TIMEOUT,
      });

      const response = [];
      let arr0 = "";
      // node native promisify
      const execute = util.promisify(db.execute).bind(db);
      const data = await execute(
        `SELECT * FROM TB_MENUS WHERE parent_menu_id =
          '${parent_menu_id}'
          ORDER BY menu_groupings ASC`
      );

      if (data) {
        for (let i = 0; i < data.rows.length; i++) {
          for (let x = 0; x < data.metaData.length; x++) {
            arr0 +=
              '"' +
              [data.metaData[x].name.toLowerCase()] +
              '" : "' +
              data.rows[i][x] +
              '",';
          }

          response.push(
            JSON.parse(
              "{" +
                arr0.replace(/(\r\n|\n|\r)/gm, "").replace(/,\s*$/, "") +
                "}"
            )
          );
        }

        res.send(response);
      } else {
        res.send("Something went wrong... Nothing was returned!!");
      }
    } finally {
      // conn.end();
    }
  };

  getSubMenusByParentMenuIDFunc(parent_menu_id);
});

// Get Menus By Menu Level's API Endpoint - ORACLE
app.post("/api/get-menus-by-menu-level-OLD", (req, res) => {
  let menu_level = req.body.menu_level;

  let getMenusByLevelFunc = async (menu_level) => {
    try {
      const db = await oracledb.getConnection({
        user: DB_USER,
        password: DB_PASSWORD,
        connectString: DB_CONNECTION_STRING,
        timeout: DB_CONNECTION_TIMEOUT,
      });

      const response = [];
      let arr0 = "";

      // node native promisify
      const execute = util.promisify(db.execute).bind(db);
      const data = await execute(
        `SELECT * FROM TB_MENUS WHERE menu_level =
          '${menu_level}'
          ORDER BY menu_groupings ASC`
      );

      if (data) {
        for (let i = 0; i < data.rows.length; i++) {
          for (let x = 0; x < data.metaData.length; x++) {
            arr0 +=
              '"' +
              [data.metaData[x].name.toLowerCase()] +
              '" : "' +
              data.rows[i][x] +
              '",';
          }

          response.push(
            JSON.parse(
              "{" +
                arr0.replace(/(\r\n|\n|\r)/gm, "").replace(/,\s*$/, "") +
                "}"
            )
          );
        }

        res.send(response);
      } else {
        res.send("Something went wrong... Nothing was returned!!");
      }
    } finally {
      // conn.end();
    }
  };

  return getMenusByLevelFunc(menu_level);
});

// get all loans modal
app.post("/api/get-guarantor-info", (req, res) => {
  const { member_id } = req.body;

  let getGuarantorInfo = async () => {
    try {
      const db = await oracledb.getConnection({
        user: DB_USER,
        password: DB_PASSWORD,
        connectString: DB_CONNECTION_STRING,
        timeout: DB_CONNECTION_TIMEOUT,
      });

      const response = [];
      let arr0 = "";

      // node native promisify
      const execute = util.promisify(db.execute).bind(db);

      const data = await execute(
        `select * from vw_guarantor_info where member_id = :member_id`,
        {
          member_id,
        }
      );

      if (data) {
        for (let i = 0; i < data.rows.length; i++) {
          for (let x = 0; x < data.metaData.length; x++) {
            arr0 +=
              '"' +
              [data.metaData[x].name.toLowerCase()] +
              '" : "' +
              data.rows[i][x] +
              '",';
          }

          response.push(
            JSON.parse(
              "{" +
                arr0.replace(/(\r\n|\n|\r)/gm, "").replace(/,\s*$/, "") +
                "}"
            )
          );
        }

        res.send(response);
      } else {
        res.send("Something went wrong... Nothing was returned!!");
      }
    } finally {
      // conn.end();
    }
  };

  getGuarantorInfo();
});

// get Guarantor Data
app.post("/api/get-guarantor-data", (req, res) => {
  const { loan_app_no } = req.body;

  let getGuarantorData = async () => {
    try {
      const db = await oracledb.getConnection({
        user: DB_USER,
        password: DB_PASSWORD,
        connectString: DB_CONNECTION_STRING,
        timeout: DB_CONNECTION_TIMEOUT,
      });

      const response = [];
      let arr0 = "";

      // node native promisify
      const execute = util.promisify(db.execute).bind(db);

      const data = await execute(
        `select * from tb_guarantees_info where loan_app_no =: loan_app_no`,
        {
          loan_app_no,
        }
      );

      if (data) {
        for (let i = 0; i < data.rows.length; i++) {
          for (let x = 0; x < data.metaData.length; x++) {
            arr0 +=
              '"' +
              [data.metaData[x].name.toLowerCase()] +
              '" : "' +
              data.rows[i][x] +
              '",';
          }

          response.push(
            JSON.parse(
              "{" +
                arr0.replace(/(\r\n|\n|\r)/gm, "").replace(/,\s*$/, "") +
                "}"
            )
          );
        }

        res.send(response);
      } else {
        res.send("Something went wrong... Nothing was returned!!");
      }
    } finally {
      // conn.end();
    }
  };

  getGuarantorData();
});

// app.get("/api/get-loan-guarantors", async (req, res) => {
//   try {
//     const db = await oracledb.getConnection({
//       user: DB_USER,
//       password: DB_PASSWORD,
//       connectString: DB_CONNECTION_STRING,
//       timeout: DB_CONNECTION_TIMEOUT,
//     });

//     const execute = util.promisify(db.execute).bind(db);

//     const query = `
//       select customer_number as value, first_name || '  ' || surname as label from vw_relation_all
// where rownum < 600
//     `;

//     const data = await execute(query);

//     const response = data.rows.map((row) => ({
//       value: row[0],
//       label: row[1],
//     }));

//     res.json(response);
//   } catch (error) {
//     console.error("Error executing query:", error);
//     res.status(500).send("Internal server error");
//   }
// });

app.post("/api/get-loan-guarantors", (req, res) => {
  const { accountName } = req.body;
  let getFacilityServiceAccount = async () => {
    try {
      const db = await oracledb.getConnection({
        user: DB_USER,
        password: DB_PASSWORD,
        connectString: DB_CONNECTION_STRING,
        timeout: DB_CONNECTION_TIMEOUT,
      });
      // console.log("runnins");
      const response = [];
      let arr0 = "";

      // node native promisify

      const execute = util.promisify(db.execute).bind(db);
      const query = `SELECT first_name || ' ' || surname || ' ' || last_name AS gua_name, customer_number
FROM vw_relation_all
WHERE UPPER(first_name || ' ' || surname || ' ' || last_name) LIKE '%' || UPPER('${accountName}') || '%'`;
      const data = await execute(query);
      // console.log(req.body, query[determinant]);
      if (data) {
        const response = data.rows.map((row) => {
          const obj = {};
          for (let i = 0; i < data.metaData.length; i++) {
            obj[data.metaData[i].name.toLowerCase()] = row[i];
          }
          return obj;
        });

        res.send(response);
      } else {
        res.send("Something went wrong... Nothing was returned!!");
      }
    } catch (e) {
      console.log(e.toString());
      res.send(e);
    }
  };

  getFacilityServiceAccount();
});

app.post("/api/get-facility-type-cat", (req, res) => {
  const { fac_type_v, cust_type_v } = req.body;
  let getStaff = async () => {
    try {
      const db = await oracledb.getConnection({
        user: DB_USER,
        password: DB_PASSWORD,
        connectString: DB_CONNECTION_STRING,
        timeout: DB_CONNECTION_TIMEOUT,
      });

      const response = [];
      let arr0 = "";

      // node native promisify
      const execute = util.promisify(db.execute).bind(db);

      const data = await execute(
        `select actual_code as value,actual_code || ' - ' || description as label from 
code_desc where code_type= 'LTC' and class_code= '${fac_type_v}'
and SHORT_DESCRP = '${cust_type_v}'
UNION ALL
select actual_code,description from 
code_desc where code_type= 'LTC' and class_code= '${fac_type_v}'
and SHORT_DESCRP is null`
      );

      if (data) {
        for (let i = 0; i < data.rows.length; i++) {
          for (let x = 0; x < data.metaData.length; x++) {
            arr0 +=
              '"' +
              [data.metaData[x].name.toLowerCase()] +
              '" : "' +
              data.rows[i][x] +
              '",';
          }

          response.push(
            JSON.parse(
              "{" +
                arr0.replace(/(\r\n|\n|\r)/gm, "").replace(/,\s*$/, "") +
                "}"
            )
          );
        }

        res.send(response);
      } else {
        res.send("Something went wrong... Nothing was returned!!");
      }
    } finally {
      // conn.end();
    }
  };

  getStaff();
});

//////////////// GUARANTOR TAB  APIs///////////////////////////////////////////

// Get cancel Acct Details
app.post("/api/get-guarantor-details", (req, res) => {
  const { customer_no } = req.body;
  let getCancelAcctDetails = async () => {
    try {
      const db = await oracledb.getConnection({
        user: DB_USER,
        password: DB_PASSWORD,
        connectString: DB_CONNECTION_STRING,
        timeout: DB_CONNECTION_TIMEOUT,
      });

      const response = [];
      let arr0 = "";

      // node native promisify
      const execute = util.promisify(db.execute).bind(db);

      const data = await execute(
        `select residential_address, mobile1, id_number, date_of_birth, resident_since, id_issue_date, id_expiry_date, postal_address, email_address, id_type, nationality, customer_number, resident_since, first_name || '  ' || surname fullname from vw_relation_all
where customer_number = '${customer_no}'`
      );

      if (data) {
        for (let i = 0; i < data.rows.length; i++) {
          for (let x = 0; x < data.metaData.length; x++) {
            arr0 +=
              '"' +
              [data.metaData[x].name.toLowerCase()] +
              '" : "' +
              data.rows[i][x] +
              '",';
          }

          response.push(
            JSON.parse(
              "{" +
                arr0.replace(/(\r\n|\n|\r)/gm, "").replace(/,\s*$/, "") +
                "}"
            )
          );
        }

        res.send(response);
      } else {
        res.send("Something went wrong... Nothing was returned!!");
      }
    } catch (e) {
      // conn.end();
      res.send(e.toString());
    }
  };

  getCancelAcctDetails();
});

app.post("/api/get-id-desc", (req, res) => {
  const { id_type } = req.body;
  let getCancelAcctDetails = async () => {
    try {
      const db = await oracledb.getConnection({
        user: DB_USER,
        password: DB_PASSWORD,
        connectString: DB_CONNECTION_STRING,
        timeout: DB_CONNECTION_TIMEOUT,
      });

      const response = [];
      let arr0 = "";

      // node native promisify
      const execute = util.promisify(db.execute).bind(db);

      const data = await execute(
        `select get_codedesc_info ('${id_type}','DCP') identification FROM DUAL`
      );

      if (data) {
        for (let i = 0; i < data.rows.length; i++) {
          for (let x = 0; x < data.metaData.length; x++) {
            arr0 +=
              '"' +
              [data.metaData[x].name.toLowerCase()] +
              '" : "' +
              data.rows[i][x] +
              '",';
          }

          response.push(
            JSON.parse(
              "{" +
                arr0.replace(/(\r\n|\n|\r)/gm, "").replace(/,\s*$/, "") +
                "}"
            )
          );
        }

        res.send(response);
      } else {
        res.send("Something went wrong... Nothing was returned!!");
      }
    } catch (e) {
      // conn.end();
      res.send(e.toString());
    }
  };

  getCancelAcctDetails();
});

app.post("/api/get-country-desc", (req, res) => {
  const { code } = req.body;
  let getCancelAcctDetails = async () => {
    try {
      const db = await oracledb.getConnection({
        user: DB_USER,
        password: DB_PASSWORD,
        connectString: DB_CONNECTION_STRING,
        timeout: DB_CONNECTION_TIMEOUT,
      });

      const response = [];
      let arr0 = "";

      // node native promisify
      const execute = util.promisify(db.execute).bind(db);

      const data = await execute(
        `select get_codedesc_info ('${code}','CON') country FROM DUAL`
      );

      if (data) {
        for (let i = 0; i < data.rows.length; i++) {
          for (let x = 0; x < data.metaData.length; x++) {
            arr0 +=
              '"' +
              [data.metaData[x].name.toLowerCase()] +
              '" : "' +
              data.rows[i][x] +
              '",';
          }

          response.push(
            JSON.parse(
              "{" +
                arr0.replace(/(\r\n|\n|\r)/gm, "").replace(/,\s*$/, "") +
                "}"
            )
          );
        }

        res.send(response);
      } else {
        res.send("Something went wrong... Nothing was returned!!");
      }
    } catch (e) {
      // conn.end();
      res.send(e.toString());
    }
  };

  getCancelAcctDetails();
});

app.post("/api/get-gua-acct", (req, res) => {
  const { customer_no } = req.body;
  let getCancelAcctDetails = async () => {
    try {
      const db = await oracledb.getConnection({
        user: DB_USER,
        password: DB_PASSWORD,
        connectString: DB_CONNECTION_STRING,
        timeout: DB_CONNECTION_TIMEOUT,
      });

      const response = [];
      let arr0 = "";

      // node native promisify
      const execute = util.promisify(db.execute).bind(db);

      const data = await execute(
        `select acct_link from g_ledger where customer_number = '${customer_no}'`
      );

      if (data) {
        for (let i = 0; i < data.rows.length; i++) {
          for (let x = 0; x < data.metaData.length; x++) {
            arr0 +=
              '"' +
              [data.metaData[x].name.toLowerCase()] +
              '" : "' +
              data.rows[i][x] +
              '",';
          }

          response.push(
            JSON.parse(
              "{" +
                arr0.replace(/(\r\n|\n|\r)/gm, "").replace(/,\s*$/, "") +
                "}"
            )
          );
        }

        res.send(response);
      } else {
        res.send("Something went wrong... Nothing was returned!!");
      }
    } catch (e) {
      // conn.end();
      res.send(e.toString());
    }
  };

  getCancelAcctDetails();
});

// Insert Guarantor Details
app.post("/api/save-guarantor-details", (req, res) => {
  let {
    app_no,
    fname,
    post_address,
    res_address,
    phone,
    id_type,
    id_no,
    id_issue_date,
    date_of_birth,
    place_of_birth,
    gua_type,
    relationship,
  } = req.body;
  let saveGuarantorDetails = async () => {
    try {
      const db = await oracledb.getConnection({
        user: DB_USER,
        password: DB_PASSWORD,
        connectString: DB_CONNECTION_STRING,
        timeout: DB_CONNECTION_TIMEOUT,
      });

      const response = [];
      let arr0 = "";

      // return res.send({transaction_number : transaction_number, yo: "yo"});

      // node native promisify
      const execute = util.promisify(db.execute).bind(db);

      const data = await execute(
        `INSERT INTO GUARANTORS_DET(GUARANTORS_ID, APPLICANT_NO, FULLNAME, RELATIONSHIP, RES_ADDRESS, POST_ADDRESS, GARANTOR_T, ID_TYPE, ID_NUMBER, ID_ISSUE_DATE, DATE_OF_BIRTH, PLACE_OF_BIRTH, TELEPHONE) 
          VALUES (lpad(ln_guarantor_seq.nextval,10,'0') ,:APPLICANT_NO, :FULLNAME, :RELATIONSHIP, :RES_ADDRESS, :POST_ADDRESS, :GARANTOR_T, :ID_TYPE, :ID_NUMBER, :ID_ISSUE_DATE, :DATE_OF_BIRTH, :PLACE_OF_BIRTH, :TELEPHONE)`,
        {
          APPLICANT_NO: app_no,
          FULLNAME: fname,
          RELATIONSHIP: relationship,
          RES_ADDRESS: res_address,
          POST_ADDRESS: post_address,
          GARANTOR_T: gua_type,
          ID_TYPE: id_type,
          ID_NUMBER: id_no,
          ID_ISSUE_DATE: id_issue_date ? new Date(id_issue_date) : "",
          DATE_OF_BIRTH: date_of_birth ? new Date(date_of_birth) : "",
          PLACE_OF_BIRTH: place_of_birth,
          TELEPHONE: phone,
        }
      );

      const data1 = await execute(
        `select GUARANTORS_ID, APPLICANT_NO, FULLNAME, RES_ADDRESS, TELEPHONE from GUARANTORS_DET where APPLICANT_NO = '${app_no}'`
      );
      // data1.rows.map((row) => {
      //   row[4] = new Date(row[4]).toLocaleDateString();
      //   row[0] = row[0] == "001" ? "Previous Employment" : "Current Employment";
      // });
      if (data1) {
        res.send(data1.rows);
      } else {
        res.send("Something went wrong... Nothing was returned!!");
      }

      // res.send(data1);
    } catch (e) {
      res.send(e);
      console.log(e.toString());
    }
  };

  saveGuarantorDetails();
});

//////////////////////////////////////////////////////////////////////////

// Get Loan Guarantors
// app.get("/api/get-guarantors", (req, res) => {
//   let getGuarantors = async () => {
//     try {
//       const db = await oracledb.getConnection({
//         user: DB_USER,
//         password: DB_PASSWORD,
//         connectString: DB_CONNECTION_STRING,
//         timeout: DB_CONNECTION_TIMEOUT,
//       });

//       const response = [];
//       let arr0 = "";

//       // node native promisify
//       const execute = util.promisify(db.execute).bind(db);

//       const data = await execute(
//         `select distinct a.customer_number as value, a.customer_number || ' - ' || customer_name as label from customer a, g_ledger b where nvl(customer_status,'N')='A' and a.customer_number=b.customer_number and b.type_of_acct in ('1','2') order by a.customer_number`
//       );

//       if (data) {
//         for (let i = 0; i < data.rows.length; i++) {
//           for (let x = 0; x < data.metaData.length; x++) {
//             arr0 +=
//               '"' +
//               [data.metaData[x].name.toLowerCase()] +
//               '" : "' +
//               data.rows[i][x] +
//               '",';
//           }

//           response.push(
//             JSON.parse(
//               "{" +
//                 arr0.replace(/(\r\n|\n|\r)/gm, "").replace(/,\s*$/, "") +
//                 "}"
//             )
//           );
//         }

//         res.send(response);
//       } else {
//         res.send("Something went wrong... Nothing was returned!!");
//       }
//     } finally {
//       // conn.end();
//     }
//   };

//   getGuarantors();
// });

app.post("/api/get-guarantors", (req, res) => {
  const type = req.body.type;
  const member_id = req.body.member_id;
  let data;
  let getGuarantors = async () => {
    try {
      const db = await oracledb.getConnection({
        user: DB_USER,
        password: DB_PASSWORD,
        connectString: DB_CONNECTION_STRING,
        timeout: DB_CONNECTION_TIMEOUT,
      });

      const response = [];
      let arr0 = "";

      // node native promisify
      const execute = util.promisify(db.execute).bind(db);
      if (type == 1) {
        data = await execute(`
                select customer_number as value,  customer_number|| ' - ' ||  customer_name as label, member_status from vw_validGuarantors a 
  where customer_number!='${member_id}'       AND NOT EXISTS
                     (SELECT 1
                        FROM tb_guarantees_info x
                       WHERE x.guarantor_member_id = a.customer_number and ben_member_id!='${member_id}') 
                       `);
      } else {
        data = await execute(
          `select  customer_number as value, customer_number || ' - ' || customer_name as label, member_status from vw_validGuarantors`
        );
      }

      if (data) {
        for (let i = 0; i < data.rows.length; i++) {
          for (let x = 0; x < data.metaData.length; x++) {
            arr0 +=
              '"' +
              [data.metaData[x].name.toLowerCase()] +
              '" : "' +
              data.rows[i][x] +
              '",';
          }

          response.push(
            JSON.parse(
              "{" +
                arr0.replace(/(\r\n|\n|\r)/gm, "").replace(/,\s*$/, "") +
                "}"
            )
          );
        }

        res.send(response);
      } else {
        res.send("Something went wrong... Nothing was returned!!");
      }
    } finally {
      // conn.end();
    }
  };

  getGuarantors();
});

app.post("/api/guarantees_info", async (req, res) => {
  const {
    app_no,
    ben_member_id,
    guarantor_member_id,
    guarantee_amount,
    postedBy,
    guarantor_member_name,
  } = req.body;
  try {
    const connection = await oracledb.getConnection({
      user: DB_USER,
      password: DB_PASSWORD,
      connectString: DB_CONNECTION_STRING,
    });
    connection.execute(
      "BEGIN prc_guarantees_info(:loan_app_no, :ben_member_id, :guarantor_member_id, :guarantee_amount, :posted_by, :guarantor_member_name, :msg); END;",
      {
        loan_app_no: app_no,
        ben_member_id: ben_member_id,
        guarantor_member_id: guarantor_member_id,
        guarantee_amount: guarantee_amount,
        posted_by: postedBy,
        guarantor_member_name: guarantor_member_name,
        msg: {
          type: oracledb.STRING,
          dir: oracledb.BIND_OUT,
        },
      },
      function (err, result) {
        if (err) {
          console.log(err);
        }
        if (result) {
          res.send({
            responseCode: "000",
            responseMessage: result.outBinds.msg,
          });
        } else {
          res.send({
            responseCode: "998",
            responseMessage: "Failed to upload info",
          });
        }
      }
    );
  } catch (error) {
    console.error("Error:", error);
    res.send({
      responseCode: "999",
      responseMessage: "An Error Occured",
    });
  }
});

// get all loans modal
app.get("/api/get-guarantor-info-lov", (req, res) => {
  let getGuarantorInfo = async () => {
    try {
      const db = await oracledb.getConnection({
        user: DB_USER,
        password: DB_PASSWORD,
        connectString: DB_CONNECTION_STRING,
        timeout: DB_CONNECTION_TIMEOUT,
      });

      const response = [];
      let arr0 = "";

      // node native promisify
      const execute = util.promisify(db.execute).bind(db);

      const data = await execute(
        `select member_id || ' - ' || member_name as label, member_id as value from vw_guarantor_info `
      );

      if (data) {
        for (let i = 0; i < data.rows.length; i++) {
          for (let x = 0; x < data.metaData.length; x++) {
            arr0 +=
              '"' +
              [data.metaData[x].name.toLowerCase()] +
              '" : "' +
              data.rows[i][x] +
              '",';
          }

          response.push(
            JSON.parse(
              "{" +
                arr0.replace(/(\r\n|\n|\r)/gm, "").replace(/,\s*$/, "") +
                "}"
            )
          );
        }

        res.send(response);
      } else {
        res.send("Something went wrong... Nothing was returned!!");
      }
    } finally {
      // conn.end();
    }
  };

  getGuarantorInfo();
});

app.post("/api/add-guarantees-info", async (req, res) => {
  try {
    const con = await oracledb.getConnection({
      user: DB_USER,
      password: DB_PASSWORD,
      connectString: DB_CONNECTION_STRING,
    });

    const {
      loan_app_no,
      ben_member_id,
      guarantor_member_id,
      guarantee_amount,
      posted_by,
    } = req.body;

    const outBinds = {
      msg: { type: oracledb.STRING, dir: oracledb.BIND_OUT },
    };

    con.execute(
      "BEGIN BANKOWNER.prc_guarantees_info(:loan_app_no, :ben_member_id, :guarantor_member_id, :guarantee_amount, :posted_by, :msg); END;",
      {
        loan_app_no: {
          type: oracledb.STRING,
          dir: oracledb.BIND_IN,
          val: loan_app_no,
        },
        ben_member_id: {
          type: oracledb.STRING,
          dir: oracledb.BIND_IN,
          val: ben_member_id,
        },
        guarantor_member_id: {
          type: oracledb.STRING,
          dir: oracledb.BIND_IN,
          val: guarantor_member_id,
        },
        guarantee_amount: {
          type: oracledb.NUMBER,
          dir: oracledb.BIND_IN,
          val: guarantee_amount,
        },
        posted_by: {
          type: oracledb.STRING,
          dir: oracledb.BIND_IN,
          val: posted_by,
        },
        msg: {
          type: oracledb.STRING,
          dir: oracledb.BIND_OUT,
        },
      },
      { outFormat: oracledb.OUT_FORMAT_OBJECT },
      (err, result) => {
        if (err) {
          console.error(err);
          res.status(500).json({ error: "Something went wrong." });
          return;
        }

        if (result) {
          const response = {
            outBinds: result.outBinds,
            msg: result.outBinds.msg,
          };
          res.status(200).json(response);
        } else {
          res.status(400).json({
            responseCode: 400,
            responseMessage: "Something went wrong.",
          });
        }
      }
    );
  } catch (err) {
    console.error(err);
    res
      .status(500)
      .json({ error: "An error occurred while processing the request." });
  }
});

// Approve Batch Posting
app.post("/api/approve_batch_posting", async (req, res) => {
  const { batchNumber, approvedBy, branchCode, approvalDate, terminalId } =
    req.body;
  try {
    const connection = await oracledb.getConnection({
      user: DB_USER,
      password: DB_PASSWORD,
      connectString: DB_CONNECTION_STRING,
    });
    connection.execute(
      "BEGIN PRC_BATCH_APPROVAL_RT(:BATCH_V, :USERNAME_V, :BRA_V, :APP_DATE_V, :HOSTNAME_V, :RESP_CODE, :RESP_MESS); END;",
      {
        BATCH_V: batchNumber,
        USERNAME_V: approvedBy,
        BRA_V: branchCode,
        APP_DATE_V: new Date(approvalDate),
        HOSTNAME_V: terminalId,
        RESP_CODE: {
          type: oracledb.STRING,
          dir: oracledb.BIND_OUT,
        },
        RESP_MESS: {
          type: oracledb.STRING,
          dir: oracledb.BIND_OUT,
        },
      },
      function (err, result) {
        if (err) {
          console.log(err);
        }
        if (result) {
          if (result.outBinds.RESP_CODE === "000") {
            res.send({
              responseCode: result.outBinds.RESP_CODE,
              responseMessage: result.outBinds.RESP_MESS,
            });
          } else {
            res.send({
              responseCode: result.outBinds.RESP_CODE,
              responseMessage: result.outBinds.RESP_MESS,
            });
          }
        }
      }
    );
  } catch (error) {
    console.error("Error:", error);
    res.send({
      responseCode: "999",
      responseMessage: "An Error Occured",
    });
  }
});

app.post("/api/get-id-number-validation", async (req, res) => {
  try {
    console.log("---");
    const dynamicNumber = req.body.dynamicNumber; // Get the dynamic number from the query parameter

    if (!dynamicNumber) {
      return res.status(400).send("Dynamic number is required.");
    }

    const db = await oracledb.getConnection({
      user: DB_USER,
      password: DB_PASSWORD,
      connectString: DB_CONNECTION_STRING,
      timeout: DB_CONNECTION_TIMEOUT,
    });

    const response = [];
    let arr0 = "";

    // Promisify the execute method
    const execute = util.promisify(db.execute).bind(db);

    const query = `
      SELECT distinct tb_relation.*
      FROM tb_relation
      INNER JOIN tb_relation_temp ON tb_relation.ID_NUMBER = tb_relation_temp.ID_NUMBER
      WHERE tb_relation_temp.ID_NUMBER = '${dynamicNumber}'
    `;

    const data = await execute(
      query
      // { dynamicNumber }
    );

    if (data.rows && data.rows.length > 0) {
      for (let i = 0; i < data.rows.length; i++) {
        for (let x = 0; x < data.metaData.length; x++) {
          arr0 +=
            '"' +
            [data.metaData[x].name.toLowerCase()] +
            '" : "' +
            data.rows[i][x] +
            '",';
        }

        response.push(JSON.parse("{" + arr0.replace(/,\s*$/, "") + "}"));
      }

      res.json(response);
    } else {
      res.status(204).send("No data found");
    }
  } catch (err) {
    console.error("Error:", err.message);
    res.status(500).send("Internal Server Error");
  } finally {
    // if (db) {
    //   await db.close();
    // }
  }
});

//////////////////////////////////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////////////////////////////////
// END OF ORACLE API ENDPOINTS       /////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////

// app.listen(port, () => {
//   console.log("server is running on port " + port);
// })              "{" +
//   //               arr0.replace(/(\r\n|\n|\r)/gm, "").replace(/,\s*$/, "") +
//   //               "}"
//   //           )
//   //         );
//         }

//         res.send(response);
//       } else {
//         res.send("Something went wrong... Nothing was returned!!");
//       }
//     } finally {
//       // conn.end();
//     }
//   };

//   getGuarantorInfo();
// });

app.post("/api/add-guarantees-info", async (req, res) => {
  try {
    const con = await oracledb.getConnection({
      user: DB_USER,
      password: DB_PASSWORD,
      connectString: DB_CONNECTION_STRING,
    });

    const {
      loan_app_no,
      ben_member_id,
      guarantor_member_id,
      guarantee_amount,
      posted_by,
    } = req.body;

    const outBinds = {
      msg: { type: oracledb.STRING, dir: oracledb.BIND_OUT },
    };

    con.execute(
      "BEGIN BANKOWNER.prc_guarantees_info(:loan_app_no, :ben_member_id, :guarantor_member_id, :guarantee_amount, :posted_by, :msg); END;",
      {
        loan_app_no: {
          type: oracledb.STRING,
          dir: oracledb.BIND_IN,
          val: loan_app_no,
        },
        ben_member_id: {
          type: oracledb.STRING,
          dir: oracledb.BIND_IN,
          val: ben_member_id,
        },
        guarantor_member_id: {
          type: oracledb.STRING,
          dir: oracledb.BIND_IN,
          val: guarantor_member_id,
        },
        guarantee_amount: {
          type: oracledb.NUMBER,
          dir: oracledb.BIND_IN,
          val: guarantee_amount,
        },
        posted_by: {
          type: oracledb.STRING,
          dir: oracledb.BIND_IN,
          val: posted_by,
        },
        msg: {
          type: oracledb.STRING,
          dir: oracledb.BIND_OUT,
        },
      },
      { outFormat: oracledb.OUT_FORMAT_OBJECT },
      (err, result) => {
        if (err) {
          console.error(err);
          res.status(500).json({ error: "Something went wrong." });
          return;
        }

        if (result) {
          const response = {
            outBinds: result.outBinds,
            msg: result.outBinds.msg,
          };
          res.status(200).json(response);
        } else {
          res.status(400).json({
            responseCode: 400,
            responseMessage: "Something went wrong.",
          });
        }
      }
    );
  } catch (err) {
    console.error(err);
    res
      .status(500)
      .json({ error: "An error occurred while processing the request." });
  }
});

// Approve Batch Posting
app.post("/api/approve_batch_posting", async (req, res) => {
  const { batchNumber, approvedBy, branchCode, approvalDate, terminalId } =
    req.body;
  try {
    const connection = await oracledb.getConnection({
      user: DB_USER,
      password: DB_PASSWORD,
      connectString: DB_CONNECTION_STRING,
    });
    connection.execute(
      "BEGIN PRC_BATCH_APPROVAL_RT(:BATCH_V, :USERNAME_V, :BRA_V, :APP_DATE_V, :HOSTNAME_V, :RESP_CODE, :RESP_MESS); END;",
      {
        BATCH_V: batchNumber,
        USERNAME_V: approvedBy,
        BRA_V: branchCode,
        APP_DATE_V: new Date(approvalDate),
        HOSTNAME_V: terminalId,
        RESP_CODE: {
          type: oracledb.STRING,
          dir: oracledb.BIND_OUT,
        },
        RESP_MESS: {
          type: oracledb.STRING,
          dir: oracledb.BIND_OUT,
        },
      },
      function (err, result) {
        if (err) {
          console.log(err);
        }
        if (result) {
          if (result.outBinds.RESP_CODE === "000") {
            res.send({
              responseCode: result.outBinds.RESP_CODE,
              responseMessage: result.outBinds.RESP_MESS,
            });
          } else {
            res.send({
              responseCode: result.outBinds.RESP_CODE,
              responseMessage: result.outBinds.RESP_MESS,
            });
          }
        }
      }
    );
  } catch (error) {
    console.error("Error:", error);
    res.send({
      responseCode: "999",
      responseMessage: "An Error Occured",
    });
  }
});

app.post("/api/get-id-number-validation", async (req, res) => {
  try {
    console.log("---");
    const dynamicNumber = req.body.dynamicNumber; // Get the dynamic number from the query parameter

    if (!dynamicNumber) {
      return res.status(400).send("Dynamic number is required.");
    }

    const db = await oracledb.getConnection({
      user: DB_USER,
      password: DB_PASSWORD,
      connectString: DB_CONNECTION_STRING,
      timeout: DB_CONNECTION_TIMEOUT,
    });

    const response = [];
    let arr0 = "";

    // Promisify the execute method
    const execute = util.promisify(db.execute).bind(db);

    const query = `
      SELECT distinct tb_relation.*
      FROM tb_relation
      INNER JOIN tb_relation_temp ON tb_relation.ID_NUMBER = tb_relation_temp.ID_NUMBER
      WHERE tb_relation_temp.ID_NUMBER = '${dynamicNumber}'
    `;

    const data = await execute(
      query
      // { dynamicNumber }
    );

    if (data.rows && data.rows.length > 0) {
      for (let i = 0; i < data.rows.length; i++) {
        for (let x = 0; x < data.metaData.length; x++) {
          arr0 +=
            '"' +
            [data.metaData[x].name.toLowerCase()] +
            '" : "' +
            data.rows[i][x] +
            '",';
        }

        response.push(JSON.parse("{" + arr0.replace(/,\s*$/, "") + "}"));
      }

      res.json(response);
    } else {
      res.status(204).send("No data found");
    }
  } catch (err) {
    console.error("Error:", err.message);
    res.status(500).send("Internal Server Error");
  } finally {
    // if (db) {
    //   await db.close();
    // }
  }
});

//////////////////////////////////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////////////////////////////////
// END OF ORACLE API ENDPOINTS       /////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////

app.post("/api/amendCustomer", amend_customer.amendCustomer);
app.post("/api/account_rejection", account_rejection);
app.post("/api/fetch_data_to_amend", getCustomersToAmend);
app.post("/api/fetch-cooperate-details", cooperateDetails?.fetch_details_data);
app.post("/api/fetch-cooperate-address", cooperateDetails?.fetch_address_data);
app.post("/api/amend_account_relations", amend_account_relation);
app.post("/api/save_relations_address", saveAddress);
app.post("/api/fetch_relations_address", getAddressesToAmend);
// app.post("/api/prc-amend-cooperate-address", cooper

///////////////////////////////// National ID validation ////////////////////////////////////
app.post("/api/get-multiple-validation", getMultipleValidation);

///////////////////////////////// Add relation /////////////////////////////////////////////
app.post("/api/add-relation", executeStoredProcedure);
app.post("/api/add-cust-relation-link", linkTempRelation);
app.delete("/api/delete-relation", deleteRelation);
app.post("/api/relation/get-all-relation", getRelationData);
app.post("/api/add-signatory", addSignatory);
app.post("/api/create-account", createCasaAccount);
app.post("/api/add-corporate-info", addCorporateInformation);
app.post("/api/add-stakeholder", stakeholderController);

app.get("/api/search", searchCustomer);

// AMENDMENT
app.get("/api/customer/:customer_number", getCustomerController);
app.post("/api/relation/relation_data", getRelationController);
app.post("/api/relation/get_all_relation_datails", getAllRelationController);
app.post("/api/address/address_data", getAddressController);
app.post("/api/account/account_data", getAccountController);
app.post("/api/customer/get-customer-details", getCustomerDetailsController);

app.post("/api/relation/relation_no", getRelationNo);

app.post("/api/get-eservices-data", getEserviceByRelationNo);
app.post("/api/get-address-data", getAddressByRelationNo);
app.post("/api/getHobbyLov", getHobbyLov);

app.delete("/api/delete-CustRelation", deleteCustRelation);

app.post("/api/add-NextOfKin", addNextOfKin);
app.delete("/api/next-of-kin/:customer_number", deleteNextOfKin);

app.post("/api/add-address", addAddressTemp);
app.post("/api/add-eservice", addEServicesRel);



/////////////////////////////////
// FINAL UPDATE ENDPOINTS
////////////////////////////////
app.post("/api/amend-relation", amendRelation);


app.listen(port, () => {
  console.log("server is running on port " + port);
});
